
FreeRTOS_7_TaskNotification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003980  08003980  00013980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039c8  080039c8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080039c8  080039c8  000139c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039d0  080039d0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d0  080039d0  000139d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080039d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004044  20000010  080039e8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004054  080039e8  00024054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ff5  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002601  00000000  00000000  00031035  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fb0  00000000  00000000  00033638  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e88  00000000  00000000  000345e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000221d1  00000000  00000000  00035470  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb3a  00000000  00000000  00057641  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0da9  00000000  00000000  0006317b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00133f24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040e8  00000000  00000000  00133fa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003968 	.word	0x08003968

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08003968 	.word	0x08003968

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000002c 	.word	0x2000002c
 8000500:	20000080 	.word	0x20000080

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fa69 	bl	80009e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f81d 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8af 	bl	8000674 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000516:	f000 f883 	bl	8000620 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800051a:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <main+0x40>)
 800051c:	1d3c      	adds	r4, r7, #4
 800051e:	461d      	mov	r5, r3
 8000520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000524:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000528:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f001 ffe8 	bl	8002506 <osThreadCreate>
 8000536:	4602      	mov	r2, r0
 8000538:	4b03      	ldr	r3, [pc, #12]	; (8000548 <main+0x44>)
 800053a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800053c:	f001 ffdc 	bl	80024f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000540:	e7fe      	b.n	8000540 <main+0x3c>
 8000542:	bf00      	nop
 8000544:	0800398c 	.word	0x0800398c
 8000548:	20003fcc 	.word	0x20003fcc

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	; 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0320 	add.w	r3, r7, #32
 8000556:	2230      	movs	r2, #48	; 0x30
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f003 f9fc 	bl	8003958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	4b28      	ldr	r3, [pc, #160]	; (8000618 <SystemClock_Config+0xcc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	4a27      	ldr	r2, [pc, #156]	; (8000618 <SystemClock_Config+0xcc>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	; 0x40
 8000580:	4b25      	ldr	r3, [pc, #148]	; (8000618 <SystemClock_Config+0xcc>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	4b22      	ldr	r3, [pc, #136]	; (800061c <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a21      	ldr	r2, [pc, #132]	; (800061c <SystemClock_Config+0xd0>)
 8000596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <SystemClock_Config+0xd0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a8:	2301      	movs	r3, #1
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005bc:	2304      	movs	r3, #4
 80005be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005c0:	23a8      	movs	r3, #168	; 0xa8
 80005c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005c8:	2304      	movs	r3, #4
 80005ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0320 	add.w	r3, r7, #32
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fcdd 	bl	8000f90 <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005dc:	f000 f8ce 	bl	800077c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	230f      	movs	r3, #15
 80005e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e4:	2302      	movs	r3, #2
 80005e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2105      	movs	r1, #5
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 ff36 	bl	8001470 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800060a:	f000 f8b7 	bl	800077c <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3750      	adds	r7, #80	; 0x50
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_USART2_UART_Init+0x50>)
 8000628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <MX_USART2_UART_Init+0x4c>)
 800062c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_USART2_UART_Init+0x4c>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <MX_USART2_UART_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_USART2_UART_Init+0x4c>)
 8000658:	f001 fb6c 	bl	8001d34 <HAL_UART_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000662:	f000 f88b 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20003fd0 	.word	0x20003fd0
 8000670:	40004400 	.word	0x40004400

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	4b2a      	ldr	r3, [pc, #168]	; (8000738 <MX_GPIO_Init+0xc4>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a29      	ldr	r2, [pc, #164]	; (8000738 <MX_GPIO_Init+0xc4>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b27      	ldr	r3, [pc, #156]	; (8000738 <MX_GPIO_Init+0xc4>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b23      	ldr	r3, [pc, #140]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a22      	ldr	r2, [pc, #136]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b20      	ldr	r3, [pc, #128]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a1b      	ldr	r2, [pc, #108]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006cc:	f043 0308 	orr.w	r3, r3, #8
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <MX_GPIO_Init+0xc4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0308 	and.w	r3, r3, #8
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USER_LED_G_Pin|USER_LED_O_Pin|USER_LED_R_Pin|USER_LED_B_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80006e4:	4815      	ldr	r0, [pc, #84]	; (800073c <MX_GPIO_Init+0xc8>)
 80006e6:	f000 fc39 	bl	8000f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 80006ea:	2301      	movs	r3, #1
 80006ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_GPIO_Init+0xcc>)
 80006f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006f2:	2302      	movs	r3, #2
 80006f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	4619      	mov	r1, r3
 80006fc:	4811      	ldr	r0, [pc, #68]	; (8000744 <MX_GPIO_Init+0xd0>)
 80006fe:	f000 fa93 	bl	8000c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_G_Pin USER_LED_O_Pin USER_LED_R_Pin USER_LED_B_Pin */
  GPIO_InitStruct.Pin = USER_LED_G_Pin|USER_LED_O_Pin|USER_LED_R_Pin|USER_LED_B_Pin;
 8000702:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000706:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000708:	2301      	movs	r3, #1
 800070a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	4619      	mov	r1, r3
 800071a:	4808      	ldr	r0, [pc, #32]	; (800073c <MX_GPIO_Init+0xc8>)
 800071c:	f000 fa84 	bl	8000c28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	2105      	movs	r1, #5
 8000724:	2006      	movs	r0, #6
 8000726:	f000 fa55 	bl	8000bd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800072a:	2006      	movs	r0, #6
 800072c:	f000 fa6e 	bl	8000c0c <HAL_NVIC_EnableIRQ>

}
 8000730:	bf00      	nop
 8000732:	3720      	adds	r7, #32
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40023800 	.word	0x40023800
 800073c:	40020c00 	.word	0x40020c00
 8000740:	10110000 	.word	0x10110000
 8000744:	40020000 	.word	0x40020000

08000748 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f001 ff24 	bl	800259e <osDelay>
 8000756:	e7fb      	b.n	8000750 <StartDefaultTask+0x8>

08000758 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a04      	ldr	r2, [pc, #16]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d101      	bne.n	800076e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800076a:	f000 f95b 	bl	8000a24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40010000 	.word	0x40010000

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000782:	e7fe      	b.n	8000782 <Error_Handler+0x6>

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_MspInit+0x54>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000792:	4a11      	ldr	r2, [pc, #68]	; (80007d8 <HAL_MspInit+0x54>)
 8000794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000798:	6453      	str	r3, [r2, #68]	; 0x44
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <HAL_MspInit+0x54>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <HAL_MspInit+0x54>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <HAL_MspInit+0x54>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b4:	6413      	str	r3, [r2, #64]	; 0x40
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <HAL_MspInit+0x54>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	210f      	movs	r1, #15
 80007c6:	f06f 0001 	mvn.w	r0, #1
 80007ca:	f000 fa03 	bl	8000bd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a19      	ldr	r2, [pc, #100]	; (8000860 <HAL_UART_MspInit+0x84>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d12b      	bne.n	8000856 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_UART_MspInit+0x88>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	4a17      	ldr	r2, [pc, #92]	; (8000864 <HAL_UART_MspInit+0x88>)
 8000808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800080c:	6413      	str	r3, [r2, #64]	; 0x40
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_UART_MspInit+0x88>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <HAL_UART_MspInit+0x88>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a10      	ldr	r2, [pc, #64]	; (8000864 <HAL_UART_MspInit+0x88>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <HAL_UART_MspInit+0x88>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000836:	230c      	movs	r3, #12
 8000838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000842:	2303      	movs	r3, #3
 8000844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000846:	2307      	movs	r3, #7
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <HAL_UART_MspInit+0x8c>)
 8000852:	f000 f9e9 	bl	8000c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000856:	bf00      	nop
 8000858:	3728      	adds	r7, #40	; 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40004400 	.word	0x40004400
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000

0800086c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	; 0x30
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800087c:	2200      	movs	r2, #0
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	2019      	movs	r0, #25
 8000882:	f000 f9a7 	bl	8000bd4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000886:	2019      	movs	r0, #25
 8000888:	f000 f9c0 	bl	8000c0c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <HAL_InitTick+0xa4>)
 8000892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000894:	4a1e      	ldr	r2, [pc, #120]	; (8000910 <HAL_InitTick+0xa4>)
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	6453      	str	r3, [r2, #68]	; 0x44
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <HAL_InitTick+0xa4>)
 800089e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008a8:	f107 0210 	add.w	r2, r7, #16
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4611      	mov	r1, r2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 ffce 	bl	8001854 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80008b8:	f000 ffb8 	bl	800182c <HAL_RCC_GetPCLK2Freq>
 80008bc:	4603      	mov	r3, r0
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c4:	4a13      	ldr	r2, [pc, #76]	; (8000914 <HAL_InitTick+0xa8>)
 80008c6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ca:	0c9b      	lsrs	r3, r3, #18
 80008cc:	3b01      	subs	r3, #1
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_InitTick+0xac>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <HAL_InitTick+0xb0>)
 80008d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <HAL_InitTick+0xac>)
 80008d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <HAL_InitTick+0xac>)
 80008e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_InitTick+0xac>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <HAL_InitTick+0xac>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <HAL_InitTick+0xac>)
 80008f2:	f000 ffe1 	bl	80018b8 <HAL_TIM_Base_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d104      	bne.n	8000906 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008fc:	4806      	ldr	r0, [pc, #24]	; (8000918 <HAL_InitTick+0xac>)
 80008fe:	f001 f810 	bl	8001922 <HAL_TIM_Base_Start_IT>
 8000902:	4603      	mov	r3, r0
 8000904:	e000      	b.n	8000908 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	3730      	adds	r7, #48	; 0x30
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	431bde83 	.word	0x431bde83
 8000918:	20004010 	.word	0x20004010
 800091c:	40010000 	.word	0x40010000

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <NMI_Handler+0x4>

08000926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <HardFault_Handler+0x4>

0800092c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <MemManage_Handler+0x4>

08000932 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <BusFault_Handler+0x4>

08000938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <UsageFault_Handler+0x4>

0800093e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000952:	f001 f80a 	bl	800196a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20004010 	.word	0x20004010

08000960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <SystemInit+0x28>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096a:	4a07      	ldr	r2, [pc, #28]	; (8000988 <SystemInit+0x28>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <SystemInit+0x28>)
 8000976:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800097a:	609a      	str	r2, [r3, #8]
#endif
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800098c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000990:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000992:	e003      	b.n	800099c <LoopCopyDataInit>

08000994 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000996:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000998:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800099a:	3104      	adds	r1, #4

0800099c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800099c:	480b      	ldr	r0, [pc, #44]	; (80009cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009a4:	d3f6      	bcc.n	8000994 <CopyDataInit>
  ldr  r2, =_sbss
 80009a6:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009a8:	e002      	b.n	80009b0 <LoopFillZerobss>

080009aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009ac:	f842 3b04 	str.w	r3, [r2], #4

080009b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009b4:	d3f9      	bcc.n	80009aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009b6:	f7ff ffd3 	bl	8000960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ba:	f002 ffa9 	bl	8003910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009be:	f7ff fda1 	bl	8000504 <main>
  bx  lr    
 80009c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80009c8:	080039d8 	.word	0x080039d8
  ldr  r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009d0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80009d4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80009d8:	20004054 	.word	0x20004054

080009dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009dc:	e7fe      	b.n	80009dc <ADC_IRQHandler>
	...

080009e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_Init+0x40>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0d      	ldr	r2, [pc, #52]	; (8000a20 <HAL_Init+0x40>)
 80009ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009f0:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <HAL_Init+0x40>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <HAL_Init+0x40>)
 80009f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_Init+0x40>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <HAL_Init+0x40>)
 8000a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a08:	2003      	movs	r0, #3
 8000a0a:	f000 f8d8 	bl	8000bbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f7ff ff2c 	bl	800086c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a14:	f7ff feb6 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023c00 	.word	0x40023c00

08000a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_IncTick+0x20>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_IncTick+0x24>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <HAL_IncTick+0x24>)
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008
 8000a48:	20004050 	.word	0x20004050

08000a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <HAL_GetTick+0x14>)
 8000a52:	681b      	ldr	r3, [r3, #0]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20004050 	.word	0x20004050

08000a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a96:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	60d3      	str	r3, [r2, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	f003 0307 	and.w	r3, r3, #7
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	db0b      	blt.n	8000af2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	f003 021f 	and.w	r2, r3, #31
 8000ae0:	4907      	ldr	r1, [pc, #28]	; (8000b00 <__NVIC_EnableIRQ+0x38>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	095b      	lsrs	r3, r3, #5
 8000ae8:	2001      	movs	r0, #1
 8000aea:	fa00 f202 	lsl.w	r2, r0, r2
 8000aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db0a      	blt.n	8000b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	490c      	ldr	r1, [pc, #48]	; (8000b50 <__NVIC_SetPriority+0x4c>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	0112      	lsls	r2, r2, #4
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	440b      	add	r3, r1
 8000b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b2c:	e00a      	b.n	8000b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4908      	ldr	r1, [pc, #32]	; (8000b54 <__NVIC_SetPriority+0x50>)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	f003 030f 	and.w	r3, r3, #15
 8000b3a:	3b04      	subs	r3, #4
 8000b3c:	0112      	lsls	r2, r2, #4
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	440b      	add	r3, r1
 8000b42:	761a      	strb	r2, [r3, #24]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	; 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	f1c3 0307 	rsb	r3, r3, #7
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	bf28      	it	cs
 8000b76:	2304      	movcs	r3, #4
 8000b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	d902      	bls.n	8000b88 <NVIC_EncodePriority+0x30>
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3b03      	subs	r3, #3
 8000b86:	e000      	b.n	8000b8a <NVIC_EncodePriority+0x32>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43da      	mvns	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	43d9      	mvns	r1, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	4313      	orrs	r3, r2
         );
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3724      	adds	r7, #36	; 0x24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff ff4c 	bl	8000a64 <__NVIC_SetPriorityGrouping>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
 8000be0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be6:	f7ff ff61 	bl	8000aac <__NVIC_GetPriorityGrouping>
 8000bea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	68b9      	ldr	r1, [r7, #8]
 8000bf0:	6978      	ldr	r0, [r7, #20]
 8000bf2:	f7ff ffb1 	bl	8000b58 <NVIC_EncodePriority>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff80 	bl	8000b04 <__NVIC_SetPriority>
}
 8000c04:	bf00      	nop
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ff54 	bl	8000ac8 <__NVIC_EnableIRQ>
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	; 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
 8000c42:	e16b      	b.n	8000f1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c44:	2201      	movs	r2, #1
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	f040 815a 	bne.w	8000f16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d00b      	beq.n	8000c82 <HAL_GPIO_Init+0x5a>
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d007      	beq.n	8000c82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c76:	2b11      	cmp	r3, #17
 8000c78:	d003      	beq.n	8000c82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	2b12      	cmp	r3, #18
 8000c80:	d130      	bne.n	8000ce4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4013      	ands	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	68da      	ldr	r2, [r3, #12]
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb8:	2201      	movs	r2, #1
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	091b      	lsrs	r3, r3, #4
 8000cce:	f003 0201 	and.w	r2, r3, #1
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	2203      	movs	r2, #3
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	689a      	ldr	r2, [r3, #8]
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0xfc>
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b12      	cmp	r3, #18
 8000d22:	d123      	bne.n	8000d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	08da      	lsrs	r2, r3, #3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3208      	adds	r2, #8
 8000d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	220f      	movs	r2, #15
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	691a      	ldr	r2, [r3, #16]
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	08da      	lsrs	r2, r3, #3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3208      	adds	r2, #8
 8000d66:	69b9      	ldr	r1, [r7, #24]
 8000d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0203 	and.w	r2, r3, #3
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f000 80b4 	beq.w	8000f16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b5f      	ldr	r3, [pc, #380]	; (8000f30 <HAL_GPIO_Init+0x308>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	4a5e      	ldr	r2, [pc, #376]	; (8000f30 <HAL_GPIO_Init+0x308>)
 8000db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dbe:	4b5c      	ldr	r3, [pc, #368]	; (8000f30 <HAL_GPIO_Init+0x308>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dca:	4a5a      	ldr	r2, [pc, #360]	; (8000f34 <HAL_GPIO_Init+0x30c>)
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	220f      	movs	r2, #15
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a51      	ldr	r2, [pc, #324]	; (8000f38 <HAL_GPIO_Init+0x310>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d02b      	beq.n	8000e4e <HAL_GPIO_Init+0x226>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a50      	ldr	r2, [pc, #320]	; (8000f3c <HAL_GPIO_Init+0x314>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d025      	beq.n	8000e4a <HAL_GPIO_Init+0x222>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a4f      	ldr	r2, [pc, #316]	; (8000f40 <HAL_GPIO_Init+0x318>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d01f      	beq.n	8000e46 <HAL_GPIO_Init+0x21e>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a4e      	ldr	r2, [pc, #312]	; (8000f44 <HAL_GPIO_Init+0x31c>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d019      	beq.n	8000e42 <HAL_GPIO_Init+0x21a>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a4d      	ldr	r2, [pc, #308]	; (8000f48 <HAL_GPIO_Init+0x320>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d013      	beq.n	8000e3e <HAL_GPIO_Init+0x216>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a4c      	ldr	r2, [pc, #304]	; (8000f4c <HAL_GPIO_Init+0x324>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d00d      	beq.n	8000e3a <HAL_GPIO_Init+0x212>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a4b      	ldr	r2, [pc, #300]	; (8000f50 <HAL_GPIO_Init+0x328>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d007      	beq.n	8000e36 <HAL_GPIO_Init+0x20e>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a4a      	ldr	r2, [pc, #296]	; (8000f54 <HAL_GPIO_Init+0x32c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d101      	bne.n	8000e32 <HAL_GPIO_Init+0x20a>
 8000e2e:	2307      	movs	r3, #7
 8000e30:	e00e      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e32:	2308      	movs	r3, #8
 8000e34:	e00c      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e36:	2306      	movs	r3, #6
 8000e38:	e00a      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e3a:	2305      	movs	r3, #5
 8000e3c:	e008      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e3e:	2304      	movs	r3, #4
 8000e40:	e006      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e42:	2303      	movs	r3, #3
 8000e44:	e004      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e46:	2302      	movs	r3, #2
 8000e48:	e002      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e000      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e4e:	2300      	movs	r3, #0
 8000e50:	69fa      	ldr	r2, [r7, #28]
 8000e52:	f002 0203 	and.w	r2, r2, #3
 8000e56:	0092      	lsls	r2, r2, #2
 8000e58:	4093      	lsls	r3, r2
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e60:	4934      	ldr	r1, [pc, #208]	; (8000f34 <HAL_GPIO_Init+0x30c>)
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	3302      	adds	r3, #2
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e6e:	4b3a      	ldr	r3, [pc, #232]	; (8000f58 <HAL_GPIO_Init+0x330>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e92:	4a31      	ldr	r2, [pc, #196]	; (8000f58 <HAL_GPIO_Init+0x330>)
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e98:	4b2f      	ldr	r3, [pc, #188]	; (8000f58 <HAL_GPIO_Init+0x330>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ebc:	4a26      	ldr	r2, [pc, #152]	; (8000f58 <HAL_GPIO_Init+0x330>)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ec2:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <HAL_GPIO_Init+0x330>)
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ee6:	4a1c      	ldr	r2, [pc, #112]	; (8000f58 <HAL_GPIO_Init+0x330>)
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <HAL_GPIO_Init+0x330>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f10:	4a11      	ldr	r2, [pc, #68]	; (8000f58 <HAL_GPIO_Init+0x330>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	61fb      	str	r3, [r7, #28]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2b0f      	cmp	r3, #15
 8000f20:	f67f ae90 	bls.w	8000c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f24:	bf00      	nop
 8000f26:	3724      	adds	r7, #36	; 0x24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40013800 	.word	0x40013800
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	40020400 	.word	0x40020400
 8000f40:	40020800 	.word	0x40020800
 8000f44:	40020c00 	.word	0x40020c00
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40021400 	.word	0x40021400
 8000f50:	40021800 	.word	0x40021800
 8000f54:	40021c00 	.word	0x40021c00
 8000f58:	40013c00 	.word	0x40013c00

08000f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f6c:	787b      	ldrb	r3, [r7, #1]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f72:	887a      	ldrh	r2, [r7, #2]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f78:	e003      	b.n	8000f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f7a:	887b      	ldrh	r3, [r7, #2]
 8000f7c:	041a      	lsls	r2, r3, #16
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	619a      	str	r2, [r3, #24]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e25b      	b.n	800145a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d075      	beq.n	800109a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fae:	4ba3      	ldr	r3, [pc, #652]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f003 030c 	and.w	r3, r3, #12
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d00c      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fba:	4ba0      	ldr	r3, [pc, #640]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fc2:	2b08      	cmp	r3, #8
 8000fc4:	d112      	bne.n	8000fec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fc6:	4b9d      	ldr	r3, [pc, #628]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fd2:	d10b      	bne.n	8000fec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd4:	4b99      	ldr	r3, [pc, #612]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d05b      	beq.n	8001098 <HAL_RCC_OscConfig+0x108>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d157      	bne.n	8001098 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e236      	b.n	800145a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff4:	d106      	bne.n	8001004 <HAL_RCC_OscConfig+0x74>
 8000ff6:	4b91      	ldr	r3, [pc, #580]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a90      	ldr	r2, [pc, #576]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8000ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	e01d      	b.n	8001040 <HAL_RCC_OscConfig+0xb0>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800100c:	d10c      	bne.n	8001028 <HAL_RCC_OscConfig+0x98>
 800100e:	4b8b      	ldr	r3, [pc, #556]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a8a      	ldr	r2, [pc, #552]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	4b88      	ldr	r3, [pc, #544]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a87      	ldr	r2, [pc, #540]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e00b      	b.n	8001040 <HAL_RCC_OscConfig+0xb0>
 8001028:	4b84      	ldr	r3, [pc, #528]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a83      	ldr	r2, [pc, #524]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800102e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b81      	ldr	r3, [pc, #516]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a80      	ldr	r2, [pc, #512]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800103a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800103e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d013      	beq.n	8001070 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff fd00 	bl	8000a4c <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001050:	f7ff fcfc 	bl	8000a4c <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b64      	cmp	r3, #100	; 0x64
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e1fb      	b.n	800145a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001062:	4b76      	ldr	r3, [pc, #472]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0f0      	beq.n	8001050 <HAL_RCC_OscConfig+0xc0>
 800106e:	e014      	b.n	800109a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001070:	f7ff fcec 	bl	8000a4c <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001078:	f7ff fce8 	bl	8000a4c <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b64      	cmp	r3, #100	; 0x64
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e1e7      	b.n	800145a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108a:	4b6c      	ldr	r3, [pc, #432]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f0      	bne.n	8001078 <HAL_RCC_OscConfig+0xe8>
 8001096:	e000      	b.n	800109a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d063      	beq.n	800116e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010a6:	4b65      	ldr	r3, [pc, #404]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 030c 	and.w	r3, r3, #12
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00b      	beq.n	80010ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010b2:	4b62      	ldr	r3, [pc, #392]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010ba:	2b08      	cmp	r3, #8
 80010bc:	d11c      	bne.n	80010f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010be:	4b5f      	ldr	r3, [pc, #380]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d116      	bne.n	80010f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ca:	4b5c      	ldr	r3, [pc, #368]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d005      	beq.n	80010e2 <HAL_RCC_OscConfig+0x152>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d001      	beq.n	80010e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e1bb      	b.n	800145a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e2:	4b56      	ldr	r3, [pc, #344]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	4952      	ldr	r1, [pc, #328]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f6:	e03a      	b.n	800116e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d020      	beq.n	8001142 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001100:	4b4f      	ldr	r3, [pc, #316]	; (8001240 <HAL_RCC_OscConfig+0x2b0>)
 8001102:	2201      	movs	r2, #1
 8001104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001106:	f7ff fca1 	bl	8000a4c <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800110e:	f7ff fc9d 	bl	8000a4c <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e19c      	b.n	800145a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001120:	4b46      	ldr	r3, [pc, #280]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0f0      	beq.n	800110e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112c:	4b43      	ldr	r3, [pc, #268]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	4940      	ldr	r1, [pc, #256]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800113c:	4313      	orrs	r3, r2
 800113e:	600b      	str	r3, [r1, #0]
 8001140:	e015      	b.n	800116e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001142:	4b3f      	ldr	r3, [pc, #252]	; (8001240 <HAL_RCC_OscConfig+0x2b0>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001148:	f7ff fc80 	bl	8000a4c <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001150:	f7ff fc7c 	bl	8000a4c <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e17b      	b.n	800145a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001162:	4b36      	ldr	r3, [pc, #216]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	2b00      	cmp	r3, #0
 8001178:	d030      	beq.n	80011dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d016      	beq.n	80011b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001182:	4b30      	ldr	r3, [pc, #192]	; (8001244 <HAL_RCC_OscConfig+0x2b4>)
 8001184:	2201      	movs	r2, #1
 8001186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001188:	f7ff fc60 	bl	8000a4c <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001190:	f7ff fc5c 	bl	8000a4c <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e15b      	b.n	800145a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80011a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0x200>
 80011ae:	e015      	b.n	80011dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <HAL_RCC_OscConfig+0x2b4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b6:	f7ff fc49 	bl	8000a4c <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011be:	f7ff fc45 	bl	8000a4c <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e144      	b.n	800145a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80011d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f0      	bne.n	80011be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 80a0 	beq.w	800132a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10f      	bne.n	800121a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001216:	2301      	movs	r3, #1
 8001218:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_RCC_OscConfig+0x2b8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001222:	2b00      	cmp	r3, #0
 8001224:	d121      	bne.n	800126a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <HAL_RCC_OscConfig+0x2b8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a07      	ldr	r2, [pc, #28]	; (8001248 <HAL_RCC_OscConfig+0x2b8>)
 800122c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001232:	f7ff fc0b 	bl	8000a4c <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001238:	e011      	b.n	800125e <HAL_RCC_OscConfig+0x2ce>
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	42470000 	.word	0x42470000
 8001244:	42470e80 	.word	0x42470e80
 8001248:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124c:	f7ff fbfe 	bl	8000a4c <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e0fd      	b.n	800145a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125e:	4b81      	ldr	r3, [pc, #516]	; (8001464 <HAL_RCC_OscConfig+0x4d4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d106      	bne.n	8001280 <HAL_RCC_OscConfig+0x2f0>
 8001272:	4b7d      	ldr	r3, [pc, #500]	; (8001468 <HAL_RCC_OscConfig+0x4d8>)
 8001274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001276:	4a7c      	ldr	r2, [pc, #496]	; (8001468 <HAL_RCC_OscConfig+0x4d8>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6713      	str	r3, [r2, #112]	; 0x70
 800127e:	e01c      	b.n	80012ba <HAL_RCC_OscConfig+0x32a>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2b05      	cmp	r3, #5
 8001286:	d10c      	bne.n	80012a2 <HAL_RCC_OscConfig+0x312>
 8001288:	4b77      	ldr	r3, [pc, #476]	; (8001468 <HAL_RCC_OscConfig+0x4d8>)
 800128a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128c:	4a76      	ldr	r2, [pc, #472]	; (8001468 <HAL_RCC_OscConfig+0x4d8>)
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	6713      	str	r3, [r2, #112]	; 0x70
 8001294:	4b74      	ldr	r3, [pc, #464]	; (8001468 <HAL_RCC_OscConfig+0x4d8>)
 8001296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001298:	4a73      	ldr	r2, [pc, #460]	; (8001468 <HAL_RCC_OscConfig+0x4d8>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6713      	str	r3, [r2, #112]	; 0x70
 80012a0:	e00b      	b.n	80012ba <HAL_RCC_OscConfig+0x32a>
 80012a2:	4b71      	ldr	r3, [pc, #452]	; (8001468 <HAL_RCC_OscConfig+0x4d8>)
 80012a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a6:	4a70      	ldr	r2, [pc, #448]	; (8001468 <HAL_RCC_OscConfig+0x4d8>)
 80012a8:	f023 0301 	bic.w	r3, r3, #1
 80012ac:	6713      	str	r3, [r2, #112]	; 0x70
 80012ae:	4b6e      	ldr	r3, [pc, #440]	; (8001468 <HAL_RCC_OscConfig+0x4d8>)
 80012b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b2:	4a6d      	ldr	r2, [pc, #436]	; (8001468 <HAL_RCC_OscConfig+0x4d8>)
 80012b4:	f023 0304 	bic.w	r3, r3, #4
 80012b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d015      	beq.n	80012ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c2:	f7ff fbc3 	bl	8000a4c <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c8:	e00a      	b.n	80012e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ca:	f7ff fbbf 	bl	8000a4c <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d8:	4293      	cmp	r3, r2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e0bc      	b.n	800145a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e0:	4b61      	ldr	r3, [pc, #388]	; (8001468 <HAL_RCC_OscConfig+0x4d8>)
 80012e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0ee      	beq.n	80012ca <HAL_RCC_OscConfig+0x33a>
 80012ec:	e014      	b.n	8001318 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ee:	f7ff fbad 	bl	8000a4c <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f4:	e00a      	b.n	800130c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f6:	f7ff fba9 	bl	8000a4c <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	f241 3288 	movw	r2, #5000	; 0x1388
 8001304:	4293      	cmp	r3, r2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e0a6      	b.n	800145a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800130c:	4b56      	ldr	r3, [pc, #344]	; (8001468 <HAL_RCC_OscConfig+0x4d8>)
 800130e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1ee      	bne.n	80012f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001318:	7dfb      	ldrb	r3, [r7, #23]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d105      	bne.n	800132a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800131e:	4b52      	ldr	r3, [pc, #328]	; (8001468 <HAL_RCC_OscConfig+0x4d8>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	4a51      	ldr	r2, [pc, #324]	; (8001468 <HAL_RCC_OscConfig+0x4d8>)
 8001324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001328:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 8092 	beq.w	8001458 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001334:	4b4c      	ldr	r3, [pc, #304]	; (8001468 <HAL_RCC_OscConfig+0x4d8>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 030c 	and.w	r3, r3, #12
 800133c:	2b08      	cmp	r3, #8
 800133e:	d05c      	beq.n	80013fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d141      	bne.n	80013cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001348:	4b48      	ldr	r3, [pc, #288]	; (800146c <HAL_RCC_OscConfig+0x4dc>)
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134e:	f7ff fb7d 	bl	8000a4c <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001356:	f7ff fb79 	bl	8000a4c <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e078      	b.n	800145a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001368:	4b3f      	ldr	r3, [pc, #252]	; (8001468 <HAL_RCC_OscConfig+0x4d8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f0      	bne.n	8001356 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69da      	ldr	r2, [r3, #28]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	431a      	orrs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001382:	019b      	lsls	r3, r3, #6
 8001384:	431a      	orrs	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138a:	085b      	lsrs	r3, r3, #1
 800138c:	3b01      	subs	r3, #1
 800138e:	041b      	lsls	r3, r3, #16
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	061b      	lsls	r3, r3, #24
 8001398:	4933      	ldr	r1, [pc, #204]	; (8001468 <HAL_RCC_OscConfig+0x4d8>)
 800139a:	4313      	orrs	r3, r2
 800139c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800139e:	4b33      	ldr	r3, [pc, #204]	; (800146c <HAL_RCC_OscConfig+0x4dc>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fb52 	bl	8000a4c <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ac:	f7ff fb4e 	bl	8000a4c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e04d      	b.n	800145a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013be:	4b2a      	ldr	r3, [pc, #168]	; (8001468 <HAL_RCC_OscConfig+0x4d8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0x41c>
 80013ca:	e045      	b.n	8001458 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013cc:	4b27      	ldr	r3, [pc, #156]	; (800146c <HAL_RCC_OscConfig+0x4dc>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d2:	f7ff fb3b 	bl	8000a4c <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013da:	f7ff fb37 	bl	8000a4c <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e036      	b.n	800145a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ec:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <HAL_RCC_OscConfig+0x4d8>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1f0      	bne.n	80013da <HAL_RCC_OscConfig+0x44a>
 80013f8:	e02e      	b.n	8001458 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e029      	b.n	800145a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <HAL_RCC_OscConfig+0x4d8>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	429a      	cmp	r2, r3
 8001418:	d11c      	bne.n	8001454 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001424:	429a      	cmp	r2, r3
 8001426:	d115      	bne.n	8001454 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800142e:	4013      	ands	r3, r2
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001434:	4293      	cmp	r3, r2
 8001436:	d10d      	bne.n	8001454 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001442:	429a      	cmp	r2, r3
 8001444:	d106      	bne.n	8001454 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001450:	429a      	cmp	r2, r3
 8001452:	d001      	beq.n	8001458 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e000      	b.n	800145a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40007000 	.word	0x40007000
 8001468:	40023800 	.word	0x40023800
 800146c:	42470060 	.word	0x42470060

08001470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e0cc      	b.n	800161e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001484:	4b68      	ldr	r3, [pc, #416]	; (8001628 <HAL_RCC_ClockConfig+0x1b8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 030f 	and.w	r3, r3, #15
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	429a      	cmp	r2, r3
 8001490:	d90c      	bls.n	80014ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001492:	4b65      	ldr	r3, [pc, #404]	; (8001628 <HAL_RCC_ClockConfig+0x1b8>)
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800149a:	4b63      	ldr	r3, [pc, #396]	; (8001628 <HAL_RCC_ClockConfig+0x1b8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d001      	beq.n	80014ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e0b8      	b.n	800161e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d020      	beq.n	80014fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014c4:	4b59      	ldr	r3, [pc, #356]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	4a58      	ldr	r2, [pc, #352]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 80014ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0308 	and.w	r3, r3, #8
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014dc:	4b53      	ldr	r3, [pc, #332]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	4a52      	ldr	r2, [pc, #328]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 80014e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014e8:	4b50      	ldr	r3, [pc, #320]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	494d      	ldr	r1, [pc, #308]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	d044      	beq.n	8001590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d107      	bne.n	800151e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150e:	4b47      	ldr	r3, [pc, #284]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d119      	bne.n	800154e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e07f      	b.n	800161e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d003      	beq.n	800152e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800152a:	2b03      	cmp	r3, #3
 800152c:	d107      	bne.n	800153e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152e:	4b3f      	ldr	r3, [pc, #252]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d109      	bne.n	800154e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e06f      	b.n	800161e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153e:	4b3b      	ldr	r3, [pc, #236]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e067      	b.n	800161e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800154e:	4b37      	ldr	r3, [pc, #220]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f023 0203 	bic.w	r2, r3, #3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	4934      	ldr	r1, [pc, #208]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 800155c:	4313      	orrs	r3, r2
 800155e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001560:	f7ff fa74 	bl	8000a4c <HAL_GetTick>
 8001564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001566:	e00a      	b.n	800157e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001568:	f7ff fa70 	bl	8000a4c <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f241 3288 	movw	r2, #5000	; 0x1388
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e04f      	b.n	800161e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157e:	4b2b      	ldr	r3, [pc, #172]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 020c 	and.w	r2, r3, #12
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	429a      	cmp	r2, r3
 800158e:	d1eb      	bne.n	8001568 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <HAL_RCC_ClockConfig+0x1b8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 030f 	and.w	r3, r3, #15
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d20c      	bcs.n	80015b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159e:	4b22      	ldr	r3, [pc, #136]	; (8001628 <HAL_RCC_ClockConfig+0x1b8>)
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HAL_RCC_ClockConfig+0x1b8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d001      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e032      	b.n	800161e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d008      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	4916      	ldr	r1, [pc, #88]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d009      	beq.n	80015f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	490e      	ldr	r1, [pc, #56]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015f6:	f000 f821 	bl	800163c <HAL_RCC_GetSysClockFreq>
 80015fa:	4601      	mov	r1, r0
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <HAL_RCC_ClockConfig+0x1c0>)
 8001608:	5cd3      	ldrb	r3, [r2, r3]
 800160a:	fa21 f303 	lsr.w	r3, r1, r3
 800160e:	4a09      	ldr	r2, [pc, #36]	; (8001634 <HAL_RCC_ClockConfig+0x1c4>)
 8001610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_RCC_ClockConfig+0x1c8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff f928 	bl	800086c <HAL_InitTick>

  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023c00 	.word	0x40023c00
 800162c:	40023800 	.word	0x40023800
 8001630:	080039b0 	.word	0x080039b0
 8001634:	20000000 	.word	0x20000000
 8001638:	20000004 	.word	0x20000004

0800163c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800163c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	2300      	movs	r3, #0
 800164c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001652:	4b63      	ldr	r3, [pc, #396]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b04      	cmp	r3, #4
 800165c:	d007      	beq.n	800166e <HAL_RCC_GetSysClockFreq+0x32>
 800165e:	2b08      	cmp	r3, #8
 8001660:	d008      	beq.n	8001674 <HAL_RCC_GetSysClockFreq+0x38>
 8001662:	2b00      	cmp	r3, #0
 8001664:	f040 80b4 	bne.w	80017d0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001668:	4b5e      	ldr	r3, [pc, #376]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800166a:	60bb      	str	r3, [r7, #8]
       break;
 800166c:	e0b3      	b.n	80017d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800166e:	4b5e      	ldr	r3, [pc, #376]	; (80017e8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001670:	60bb      	str	r3, [r7, #8]
      break;
 8001672:	e0b0      	b.n	80017d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001674:	4b5a      	ldr	r3, [pc, #360]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800167c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800167e:	4b58      	ldr	r3, [pc, #352]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d04a      	beq.n	8001720 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800168a:	4b55      	ldr	r3, [pc, #340]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	099b      	lsrs	r3, r3, #6
 8001690:	f04f 0400 	mov.w	r4, #0
 8001694:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	ea03 0501 	and.w	r5, r3, r1
 80016a0:	ea04 0602 	and.w	r6, r4, r2
 80016a4:	4629      	mov	r1, r5
 80016a6:	4632      	mov	r2, r6
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	f04f 0400 	mov.w	r4, #0
 80016b0:	0154      	lsls	r4, r2, #5
 80016b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016b6:	014b      	lsls	r3, r1, #5
 80016b8:	4619      	mov	r1, r3
 80016ba:	4622      	mov	r2, r4
 80016bc:	1b49      	subs	r1, r1, r5
 80016be:	eb62 0206 	sbc.w	r2, r2, r6
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	f04f 0400 	mov.w	r4, #0
 80016ca:	0194      	lsls	r4, r2, #6
 80016cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016d0:	018b      	lsls	r3, r1, #6
 80016d2:	1a5b      	subs	r3, r3, r1
 80016d4:	eb64 0402 	sbc.w	r4, r4, r2
 80016d8:	f04f 0100 	mov.w	r1, #0
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	00e2      	lsls	r2, r4, #3
 80016e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016e6:	00d9      	lsls	r1, r3, #3
 80016e8:	460b      	mov	r3, r1
 80016ea:	4614      	mov	r4, r2
 80016ec:	195b      	adds	r3, r3, r5
 80016ee:	eb44 0406 	adc.w	r4, r4, r6
 80016f2:	f04f 0100 	mov.w	r1, #0
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	0262      	lsls	r2, r4, #9
 80016fc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001700:	0259      	lsls	r1, r3, #9
 8001702:	460b      	mov	r3, r1
 8001704:	4614      	mov	r4, r2
 8001706:	4618      	mov	r0, r3
 8001708:	4621      	mov	r1, r4
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f04f 0400 	mov.w	r4, #0
 8001710:	461a      	mov	r2, r3
 8001712:	4623      	mov	r3, r4
 8001714:	f7fe fd5c 	bl	80001d0 <__aeabi_uldivmod>
 8001718:	4603      	mov	r3, r0
 800171a:	460c      	mov	r4, r1
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	e049      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001720:	4b2f      	ldr	r3, [pc, #188]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	099b      	lsrs	r3, r3, #6
 8001726:	f04f 0400 	mov.w	r4, #0
 800172a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	ea03 0501 	and.w	r5, r3, r1
 8001736:	ea04 0602 	and.w	r6, r4, r2
 800173a:	4629      	mov	r1, r5
 800173c:	4632      	mov	r2, r6
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	f04f 0400 	mov.w	r4, #0
 8001746:	0154      	lsls	r4, r2, #5
 8001748:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800174c:	014b      	lsls	r3, r1, #5
 800174e:	4619      	mov	r1, r3
 8001750:	4622      	mov	r2, r4
 8001752:	1b49      	subs	r1, r1, r5
 8001754:	eb62 0206 	sbc.w	r2, r2, r6
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	f04f 0400 	mov.w	r4, #0
 8001760:	0194      	lsls	r4, r2, #6
 8001762:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001766:	018b      	lsls	r3, r1, #6
 8001768:	1a5b      	subs	r3, r3, r1
 800176a:	eb64 0402 	sbc.w	r4, r4, r2
 800176e:	f04f 0100 	mov.w	r1, #0
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	00e2      	lsls	r2, r4, #3
 8001778:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800177c:	00d9      	lsls	r1, r3, #3
 800177e:	460b      	mov	r3, r1
 8001780:	4614      	mov	r4, r2
 8001782:	195b      	adds	r3, r3, r5
 8001784:	eb44 0406 	adc.w	r4, r4, r6
 8001788:	f04f 0100 	mov.w	r1, #0
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	02a2      	lsls	r2, r4, #10
 8001792:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001796:	0299      	lsls	r1, r3, #10
 8001798:	460b      	mov	r3, r1
 800179a:	4614      	mov	r4, r2
 800179c:	4618      	mov	r0, r3
 800179e:	4621      	mov	r1, r4
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f04f 0400 	mov.w	r4, #0
 80017a6:	461a      	mov	r2, r3
 80017a8:	4623      	mov	r3, r4
 80017aa:	f7fe fd11 	bl	80001d0 <__aeabi_uldivmod>
 80017ae:	4603      	mov	r3, r0
 80017b0:	460c      	mov	r4, r1
 80017b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017b4:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	0c1b      	lsrs	r3, r3, #16
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	3301      	adds	r3, #1
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017cc:	60bb      	str	r3, [r7, #8]
      break;
 80017ce:	e002      	b.n	80017d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80017d2:	60bb      	str	r3, [r7, #8]
      break;
 80017d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017d6:	68bb      	ldr	r3, [r7, #8]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017e0:	40023800 	.word	0x40023800
 80017e4:	00f42400 	.word	0x00f42400
 80017e8:	007a1200 	.word	0x007a1200

080017ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <HAL_RCC_GetHCLKFreq+0x14>)
 80017f2:	681b      	ldr	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000000 	.word	0x20000000

08001804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001808:	f7ff fff0 	bl	80017ec <HAL_RCC_GetHCLKFreq>
 800180c:	4601      	mov	r1, r0
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	0a9b      	lsrs	r3, r3, #10
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	4a03      	ldr	r2, [pc, #12]	; (8001828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800181a:	5cd3      	ldrb	r3, [r2, r3]
 800181c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001820:	4618      	mov	r0, r3
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40023800 	.word	0x40023800
 8001828:	080039c0 	.word	0x080039c0

0800182c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001830:	f7ff ffdc 	bl	80017ec <HAL_RCC_GetHCLKFreq>
 8001834:	4601      	mov	r1, r0
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	0b5b      	lsrs	r3, r3, #13
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	4a03      	ldr	r2, [pc, #12]	; (8001850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001842:	5cd3      	ldrb	r3, [r2, r3]
 8001844:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001848:	4618      	mov	r0, r3
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40023800 	.word	0x40023800
 8001850:	080039c0 	.word	0x080039c0

08001854 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	220f      	movs	r2, #15
 8001862:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_RCC_GetClockConfig+0x5c>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 0203 	and.w	r2, r3, #3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_RCC_GetClockConfig+0x5c>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_RCC_GetClockConfig+0x5c>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_RCC_GetClockConfig+0x5c>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	08db      	lsrs	r3, r3, #3
 800188e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <HAL_RCC_GetClockConfig+0x60>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 020f 	and.w	r2, r3, #15
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	601a      	str	r2, [r3, #0]
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40023c00 	.word	0x40023c00

080018b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e01d      	b.n	8001906 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d106      	bne.n	80018e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f815 	bl	800190e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2202      	movs	r2, #2
 80018e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3304      	adds	r3, #4
 80018f4:	4619      	mov	r1, r3
 80018f6:	4610      	mov	r0, r2
 80018f8:	f000 f968 	bl	8001bcc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001922:	b480      	push	{r7}
 8001924:	b085      	sub	sp, #20
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f042 0201 	orr.w	r2, r2, #1
 8001938:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2b06      	cmp	r3, #6
 800194a:	d007      	beq.n	800195c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0201 	orr.w	r2, r2, #1
 800195a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b02      	cmp	r3, #2
 800197e:	d122      	bne.n	80019c6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b02      	cmp	r3, #2
 800198c:	d11b      	bne.n	80019c6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f06f 0202 	mvn.w	r2, #2
 8001996:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 f8ee 	bl	8001b8e <HAL_TIM_IC_CaptureCallback>
 80019b2:	e005      	b.n	80019c0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f8e0 	bl	8001b7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f8f1 	bl	8001ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d122      	bne.n	8001a1a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d11b      	bne.n	8001a1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f06f 0204 	mvn.w	r2, #4
 80019ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2202      	movs	r2, #2
 80019f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 f8c4 	bl	8001b8e <HAL_TIM_IC_CaptureCallback>
 8001a06:	e005      	b.n	8001a14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 f8b6 	bl	8001b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f8c7 	bl	8001ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d122      	bne.n	8001a6e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d11b      	bne.n	8001a6e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f06f 0208 	mvn.w	r2, #8
 8001a3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2204      	movs	r2, #4
 8001a44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f89a 	bl	8001b8e <HAL_TIM_IC_CaptureCallback>
 8001a5a:	e005      	b.n	8001a68 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f88c 	bl	8001b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f89d 	bl	8001ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	f003 0310 	and.w	r3, r3, #16
 8001a78:	2b10      	cmp	r3, #16
 8001a7a:	d122      	bne.n	8001ac2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d11b      	bne.n	8001ac2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f06f 0210 	mvn.w	r2, #16
 8001a92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2208      	movs	r2, #8
 8001a98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f870 	bl	8001b8e <HAL_TIM_IC_CaptureCallback>
 8001aae:	e005      	b.n	8001abc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f862 	bl	8001b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f873 	bl	8001ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d10e      	bne.n	8001aee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d107      	bne.n	8001aee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f06f 0201 	mvn.w	r2, #1
 8001ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7fe fe35 	bl	8000758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af8:	2b80      	cmp	r3, #128	; 0x80
 8001afa:	d10e      	bne.n	8001b1a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b06:	2b80      	cmp	r3, #128	; 0x80
 8001b08:	d107      	bne.n	8001b1a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f903 	bl	8001d20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b24:	2b40      	cmp	r3, #64	; 0x40
 8001b26:	d10e      	bne.n	8001b46 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b32:	2b40      	cmp	r3, #64	; 0x40
 8001b34:	d107      	bne.n	8001b46 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f838 	bl	8001bb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	f003 0320 	and.w	r3, r3, #32
 8001b50:	2b20      	cmp	r3, #32
 8001b52:	d10e      	bne.n	8001b72 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	f003 0320 	and.w	r3, r3, #32
 8001b5e:	2b20      	cmp	r3, #32
 8001b60:	d107      	bne.n	8001b72 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f06f 0220 	mvn.w	r2, #32
 8001b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f8cd 	bl	8001d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a40      	ldr	r2, [pc, #256]	; (8001ce0 <TIM_Base_SetConfig+0x114>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d013      	beq.n	8001c0c <TIM_Base_SetConfig+0x40>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bea:	d00f      	beq.n	8001c0c <TIM_Base_SetConfig+0x40>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a3d      	ldr	r2, [pc, #244]	; (8001ce4 <TIM_Base_SetConfig+0x118>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d00b      	beq.n	8001c0c <TIM_Base_SetConfig+0x40>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a3c      	ldr	r2, [pc, #240]	; (8001ce8 <TIM_Base_SetConfig+0x11c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d007      	beq.n	8001c0c <TIM_Base_SetConfig+0x40>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a3b      	ldr	r2, [pc, #236]	; (8001cec <TIM_Base_SetConfig+0x120>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d003      	beq.n	8001c0c <TIM_Base_SetConfig+0x40>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a3a      	ldr	r2, [pc, #232]	; (8001cf0 <TIM_Base_SetConfig+0x124>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d108      	bne.n	8001c1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a2f      	ldr	r2, [pc, #188]	; (8001ce0 <TIM_Base_SetConfig+0x114>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d02b      	beq.n	8001c7e <TIM_Base_SetConfig+0xb2>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2c:	d027      	beq.n	8001c7e <TIM_Base_SetConfig+0xb2>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a2c      	ldr	r2, [pc, #176]	; (8001ce4 <TIM_Base_SetConfig+0x118>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d023      	beq.n	8001c7e <TIM_Base_SetConfig+0xb2>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a2b      	ldr	r2, [pc, #172]	; (8001ce8 <TIM_Base_SetConfig+0x11c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d01f      	beq.n	8001c7e <TIM_Base_SetConfig+0xb2>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a2a      	ldr	r2, [pc, #168]	; (8001cec <TIM_Base_SetConfig+0x120>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d01b      	beq.n	8001c7e <TIM_Base_SetConfig+0xb2>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a29      	ldr	r2, [pc, #164]	; (8001cf0 <TIM_Base_SetConfig+0x124>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d017      	beq.n	8001c7e <TIM_Base_SetConfig+0xb2>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a28      	ldr	r2, [pc, #160]	; (8001cf4 <TIM_Base_SetConfig+0x128>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d013      	beq.n	8001c7e <TIM_Base_SetConfig+0xb2>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a27      	ldr	r2, [pc, #156]	; (8001cf8 <TIM_Base_SetConfig+0x12c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00f      	beq.n	8001c7e <TIM_Base_SetConfig+0xb2>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a26      	ldr	r2, [pc, #152]	; (8001cfc <TIM_Base_SetConfig+0x130>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00b      	beq.n	8001c7e <TIM_Base_SetConfig+0xb2>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a25      	ldr	r2, [pc, #148]	; (8001d00 <TIM_Base_SetConfig+0x134>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d007      	beq.n	8001c7e <TIM_Base_SetConfig+0xb2>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a24      	ldr	r2, [pc, #144]	; (8001d04 <TIM_Base_SetConfig+0x138>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d003      	beq.n	8001c7e <TIM_Base_SetConfig+0xb2>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a23      	ldr	r2, [pc, #140]	; (8001d08 <TIM_Base_SetConfig+0x13c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d108      	bne.n	8001c90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <TIM_Base_SetConfig+0x114>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d003      	beq.n	8001cc4 <TIM_Base_SetConfig+0xf8>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a0c      	ldr	r2, [pc, #48]	; (8001cf0 <TIM_Base_SetConfig+0x124>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d103      	bne.n	8001ccc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	615a      	str	r2, [r3, #20]
}
 8001cd2:	bf00      	nop
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40010000 	.word	0x40010000
 8001ce4:	40000400 	.word	0x40000400
 8001ce8:	40000800 	.word	0x40000800
 8001cec:	40000c00 	.word	0x40000c00
 8001cf0:	40010400 	.word	0x40010400
 8001cf4:	40014000 	.word	0x40014000
 8001cf8:	40014400 	.word	0x40014400
 8001cfc:	40014800 	.word	0x40014800
 8001d00:	40001800 	.word	0x40001800
 8001d04:	40001c00 	.word	0x40001c00
 8001d08:	40002000 	.word	0x40002000

08001d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e03f      	b.n	8001dc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d106      	bne.n	8001d60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f7fe fd3e 	bl	80007dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2224      	movs	r2, #36	; 0x24
 8001d64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f829 	bl	8001dd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695a      	ldr	r2, [r3, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dd4:	b085      	sub	sp, #20
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001e12:	f023 030c 	bic.w	r3, r3, #12
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	68f9      	ldr	r1, [r7, #12]
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699a      	ldr	r2, [r3, #24]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e3e:	f040 818b 	bne.w	8002158 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4ac1      	ldr	r2, [pc, #772]	; (800214c <UART_SetConfig+0x37c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d005      	beq.n	8001e58 <UART_SetConfig+0x88>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4abf      	ldr	r2, [pc, #764]	; (8002150 <UART_SetConfig+0x380>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	f040 80bd 	bne.w	8001fd2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e58:	f7ff fce8 	bl	800182c <HAL_RCC_GetPCLK2Freq>
 8001e5c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	461d      	mov	r5, r3
 8001e62:	f04f 0600 	mov.w	r6, #0
 8001e66:	46a8      	mov	r8, r5
 8001e68:	46b1      	mov	r9, r6
 8001e6a:	eb18 0308 	adds.w	r3, r8, r8
 8001e6e:	eb49 0409 	adc.w	r4, r9, r9
 8001e72:	4698      	mov	r8, r3
 8001e74:	46a1      	mov	r9, r4
 8001e76:	eb18 0805 	adds.w	r8, r8, r5
 8001e7a:	eb49 0906 	adc.w	r9, r9, r6
 8001e7e:	f04f 0100 	mov.w	r1, #0
 8001e82:	f04f 0200 	mov.w	r2, #0
 8001e86:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001e8a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001e8e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001e92:	4688      	mov	r8, r1
 8001e94:	4691      	mov	r9, r2
 8001e96:	eb18 0005 	adds.w	r0, r8, r5
 8001e9a:	eb49 0106 	adc.w	r1, r9, r6
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	461d      	mov	r5, r3
 8001ea4:	f04f 0600 	mov.w	r6, #0
 8001ea8:	196b      	adds	r3, r5, r5
 8001eaa:	eb46 0406 	adc.w	r4, r6, r6
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4623      	mov	r3, r4
 8001eb2:	f7fe f98d 	bl	80001d0 <__aeabi_uldivmod>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	460c      	mov	r4, r1
 8001eba:	461a      	mov	r2, r3
 8001ebc:	4ba5      	ldr	r3, [pc, #660]	; (8002154 <UART_SetConfig+0x384>)
 8001ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	461d      	mov	r5, r3
 8001ecc:	f04f 0600 	mov.w	r6, #0
 8001ed0:	46a9      	mov	r9, r5
 8001ed2:	46b2      	mov	sl, r6
 8001ed4:	eb19 0309 	adds.w	r3, r9, r9
 8001ed8:	eb4a 040a 	adc.w	r4, sl, sl
 8001edc:	4699      	mov	r9, r3
 8001ede:	46a2      	mov	sl, r4
 8001ee0:	eb19 0905 	adds.w	r9, r9, r5
 8001ee4:	eb4a 0a06 	adc.w	sl, sl, r6
 8001ee8:	f04f 0100 	mov.w	r1, #0
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ef4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001ef8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001efc:	4689      	mov	r9, r1
 8001efe:	4692      	mov	sl, r2
 8001f00:	eb19 0005 	adds.w	r0, r9, r5
 8001f04:	eb4a 0106 	adc.w	r1, sl, r6
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	461d      	mov	r5, r3
 8001f0e:	f04f 0600 	mov.w	r6, #0
 8001f12:	196b      	adds	r3, r5, r5
 8001f14:	eb46 0406 	adc.w	r4, r6, r6
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4623      	mov	r3, r4
 8001f1c:	f7fe f958 	bl	80001d0 <__aeabi_uldivmod>
 8001f20:	4603      	mov	r3, r0
 8001f22:	460c      	mov	r4, r1
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b8b      	ldr	r3, [pc, #556]	; (8002154 <UART_SetConfig+0x384>)
 8001f28:	fba3 1302 	umull	r1, r3, r3, r2
 8001f2c:	095b      	lsrs	r3, r3, #5
 8001f2e:	2164      	movs	r1, #100	; 0x64
 8001f30:	fb01 f303 	mul.w	r3, r1, r3
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	3332      	adds	r3, #50	; 0x32
 8001f3a:	4a86      	ldr	r2, [pc, #536]	; (8002154 <UART_SetConfig+0x384>)
 8001f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f40:	095b      	lsrs	r3, r3, #5
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f48:	4498      	add	r8, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	461d      	mov	r5, r3
 8001f4e:	f04f 0600 	mov.w	r6, #0
 8001f52:	46a9      	mov	r9, r5
 8001f54:	46b2      	mov	sl, r6
 8001f56:	eb19 0309 	adds.w	r3, r9, r9
 8001f5a:	eb4a 040a 	adc.w	r4, sl, sl
 8001f5e:	4699      	mov	r9, r3
 8001f60:	46a2      	mov	sl, r4
 8001f62:	eb19 0905 	adds.w	r9, r9, r5
 8001f66:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f6a:	f04f 0100 	mov.w	r1, #0
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f7e:	4689      	mov	r9, r1
 8001f80:	4692      	mov	sl, r2
 8001f82:	eb19 0005 	adds.w	r0, r9, r5
 8001f86:	eb4a 0106 	adc.w	r1, sl, r6
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	461d      	mov	r5, r3
 8001f90:	f04f 0600 	mov.w	r6, #0
 8001f94:	196b      	adds	r3, r5, r5
 8001f96:	eb46 0406 	adc.w	r4, r6, r6
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4623      	mov	r3, r4
 8001f9e:	f7fe f917 	bl	80001d0 <__aeabi_uldivmod>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	460c      	mov	r4, r1
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4b6a      	ldr	r3, [pc, #424]	; (8002154 <UART_SetConfig+0x384>)
 8001faa:	fba3 1302 	umull	r1, r3, r3, r2
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	2164      	movs	r1, #100	; 0x64
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	3332      	adds	r3, #50	; 0x32
 8001fbc:	4a65      	ldr	r2, [pc, #404]	; (8002154 <UART_SetConfig+0x384>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	f003 0207 	and.w	r2, r3, #7
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4442      	add	r2, r8
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	e26f      	b.n	80024b2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fd2:	f7ff fc17 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
 8001fd6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	461d      	mov	r5, r3
 8001fdc:	f04f 0600 	mov.w	r6, #0
 8001fe0:	46a8      	mov	r8, r5
 8001fe2:	46b1      	mov	r9, r6
 8001fe4:	eb18 0308 	adds.w	r3, r8, r8
 8001fe8:	eb49 0409 	adc.w	r4, r9, r9
 8001fec:	4698      	mov	r8, r3
 8001fee:	46a1      	mov	r9, r4
 8001ff0:	eb18 0805 	adds.w	r8, r8, r5
 8001ff4:	eb49 0906 	adc.w	r9, r9, r6
 8001ff8:	f04f 0100 	mov.w	r1, #0
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002004:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002008:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800200c:	4688      	mov	r8, r1
 800200e:	4691      	mov	r9, r2
 8002010:	eb18 0005 	adds.w	r0, r8, r5
 8002014:	eb49 0106 	adc.w	r1, r9, r6
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	461d      	mov	r5, r3
 800201e:	f04f 0600 	mov.w	r6, #0
 8002022:	196b      	adds	r3, r5, r5
 8002024:	eb46 0406 	adc.w	r4, r6, r6
 8002028:	461a      	mov	r2, r3
 800202a:	4623      	mov	r3, r4
 800202c:	f7fe f8d0 	bl	80001d0 <__aeabi_uldivmod>
 8002030:	4603      	mov	r3, r0
 8002032:	460c      	mov	r4, r1
 8002034:	461a      	mov	r2, r3
 8002036:	4b47      	ldr	r3, [pc, #284]	; (8002154 <UART_SetConfig+0x384>)
 8002038:	fba3 2302 	umull	r2, r3, r3, r2
 800203c:	095b      	lsrs	r3, r3, #5
 800203e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	461d      	mov	r5, r3
 8002046:	f04f 0600 	mov.w	r6, #0
 800204a:	46a9      	mov	r9, r5
 800204c:	46b2      	mov	sl, r6
 800204e:	eb19 0309 	adds.w	r3, r9, r9
 8002052:	eb4a 040a 	adc.w	r4, sl, sl
 8002056:	4699      	mov	r9, r3
 8002058:	46a2      	mov	sl, r4
 800205a:	eb19 0905 	adds.w	r9, r9, r5
 800205e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002062:	f04f 0100 	mov.w	r1, #0
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800206e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002072:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002076:	4689      	mov	r9, r1
 8002078:	4692      	mov	sl, r2
 800207a:	eb19 0005 	adds.w	r0, r9, r5
 800207e:	eb4a 0106 	adc.w	r1, sl, r6
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	461d      	mov	r5, r3
 8002088:	f04f 0600 	mov.w	r6, #0
 800208c:	196b      	adds	r3, r5, r5
 800208e:	eb46 0406 	adc.w	r4, r6, r6
 8002092:	461a      	mov	r2, r3
 8002094:	4623      	mov	r3, r4
 8002096:	f7fe f89b 	bl	80001d0 <__aeabi_uldivmod>
 800209a:	4603      	mov	r3, r0
 800209c:	460c      	mov	r4, r1
 800209e:	461a      	mov	r2, r3
 80020a0:	4b2c      	ldr	r3, [pc, #176]	; (8002154 <UART_SetConfig+0x384>)
 80020a2:	fba3 1302 	umull	r1, r3, r3, r2
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	2164      	movs	r1, #100	; 0x64
 80020aa:	fb01 f303 	mul.w	r3, r1, r3
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	3332      	adds	r3, #50	; 0x32
 80020b4:	4a27      	ldr	r2, [pc, #156]	; (8002154 <UART_SetConfig+0x384>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020c2:	4498      	add	r8, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	461d      	mov	r5, r3
 80020c8:	f04f 0600 	mov.w	r6, #0
 80020cc:	46a9      	mov	r9, r5
 80020ce:	46b2      	mov	sl, r6
 80020d0:	eb19 0309 	adds.w	r3, r9, r9
 80020d4:	eb4a 040a 	adc.w	r4, sl, sl
 80020d8:	4699      	mov	r9, r3
 80020da:	46a2      	mov	sl, r4
 80020dc:	eb19 0905 	adds.w	r9, r9, r5
 80020e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80020e4:	f04f 0100 	mov.w	r1, #0
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020f8:	4689      	mov	r9, r1
 80020fa:	4692      	mov	sl, r2
 80020fc:	eb19 0005 	adds.w	r0, r9, r5
 8002100:	eb4a 0106 	adc.w	r1, sl, r6
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	461d      	mov	r5, r3
 800210a:	f04f 0600 	mov.w	r6, #0
 800210e:	196b      	adds	r3, r5, r5
 8002110:	eb46 0406 	adc.w	r4, r6, r6
 8002114:	461a      	mov	r2, r3
 8002116:	4623      	mov	r3, r4
 8002118:	f7fe f85a 	bl	80001d0 <__aeabi_uldivmod>
 800211c:	4603      	mov	r3, r0
 800211e:	460c      	mov	r4, r1
 8002120:	461a      	mov	r2, r3
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <UART_SetConfig+0x384>)
 8002124:	fba3 1302 	umull	r1, r3, r3, r2
 8002128:	095b      	lsrs	r3, r3, #5
 800212a:	2164      	movs	r1, #100	; 0x64
 800212c:	fb01 f303 	mul.w	r3, r1, r3
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	3332      	adds	r3, #50	; 0x32
 8002136:	4a07      	ldr	r2, [pc, #28]	; (8002154 <UART_SetConfig+0x384>)
 8002138:	fba2 2303 	umull	r2, r3, r2, r3
 800213c:	095b      	lsrs	r3, r3, #5
 800213e:	f003 0207 	and.w	r2, r3, #7
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4442      	add	r2, r8
 8002148:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800214a:	e1b2      	b.n	80024b2 <UART_SetConfig+0x6e2>
 800214c:	40011000 	.word	0x40011000
 8002150:	40011400 	.word	0x40011400
 8002154:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4ad7      	ldr	r2, [pc, #860]	; (80024bc <UART_SetConfig+0x6ec>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d005      	beq.n	800216e <UART_SetConfig+0x39e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4ad6      	ldr	r2, [pc, #856]	; (80024c0 <UART_SetConfig+0x6f0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	f040 80d1 	bne.w	8002310 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800216e:	f7ff fb5d 	bl	800182c <HAL_RCC_GetPCLK2Freq>
 8002172:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	469a      	mov	sl, r3
 8002178:	f04f 0b00 	mov.w	fp, #0
 800217c:	46d0      	mov	r8, sl
 800217e:	46d9      	mov	r9, fp
 8002180:	eb18 0308 	adds.w	r3, r8, r8
 8002184:	eb49 0409 	adc.w	r4, r9, r9
 8002188:	4698      	mov	r8, r3
 800218a:	46a1      	mov	r9, r4
 800218c:	eb18 080a 	adds.w	r8, r8, sl
 8002190:	eb49 090b 	adc.w	r9, r9, fp
 8002194:	f04f 0100 	mov.w	r1, #0
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80021a8:	4688      	mov	r8, r1
 80021aa:	4691      	mov	r9, r2
 80021ac:	eb1a 0508 	adds.w	r5, sl, r8
 80021b0:	eb4b 0609 	adc.w	r6, fp, r9
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	4619      	mov	r1, r3
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	f04f 0400 	mov.w	r4, #0
 80021c6:	0094      	lsls	r4, r2, #2
 80021c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80021cc:	008b      	lsls	r3, r1, #2
 80021ce:	461a      	mov	r2, r3
 80021d0:	4623      	mov	r3, r4
 80021d2:	4628      	mov	r0, r5
 80021d4:	4631      	mov	r1, r6
 80021d6:	f7fd fffb 	bl	80001d0 <__aeabi_uldivmod>
 80021da:	4603      	mov	r3, r0
 80021dc:	460c      	mov	r4, r1
 80021de:	461a      	mov	r2, r3
 80021e0:	4bb8      	ldr	r3, [pc, #736]	; (80024c4 <UART_SetConfig+0x6f4>)
 80021e2:	fba3 2302 	umull	r2, r3, r3, r2
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	469b      	mov	fp, r3
 80021f0:	f04f 0c00 	mov.w	ip, #0
 80021f4:	46d9      	mov	r9, fp
 80021f6:	46e2      	mov	sl, ip
 80021f8:	eb19 0309 	adds.w	r3, r9, r9
 80021fc:	eb4a 040a 	adc.w	r4, sl, sl
 8002200:	4699      	mov	r9, r3
 8002202:	46a2      	mov	sl, r4
 8002204:	eb19 090b 	adds.w	r9, r9, fp
 8002208:	eb4a 0a0c 	adc.w	sl, sl, ip
 800220c:	f04f 0100 	mov.w	r1, #0
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002218:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800221c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002220:	4689      	mov	r9, r1
 8002222:	4692      	mov	sl, r2
 8002224:	eb1b 0509 	adds.w	r5, fp, r9
 8002228:	eb4c 060a 	adc.w	r6, ip, sl
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	4619      	mov	r1, r3
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	f04f 0400 	mov.w	r4, #0
 800223e:	0094      	lsls	r4, r2, #2
 8002240:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002244:	008b      	lsls	r3, r1, #2
 8002246:	461a      	mov	r2, r3
 8002248:	4623      	mov	r3, r4
 800224a:	4628      	mov	r0, r5
 800224c:	4631      	mov	r1, r6
 800224e:	f7fd ffbf 	bl	80001d0 <__aeabi_uldivmod>
 8002252:	4603      	mov	r3, r0
 8002254:	460c      	mov	r4, r1
 8002256:	461a      	mov	r2, r3
 8002258:	4b9a      	ldr	r3, [pc, #616]	; (80024c4 <UART_SetConfig+0x6f4>)
 800225a:	fba3 1302 	umull	r1, r3, r3, r2
 800225e:	095b      	lsrs	r3, r3, #5
 8002260:	2164      	movs	r1, #100	; 0x64
 8002262:	fb01 f303 	mul.w	r3, r1, r3
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	011b      	lsls	r3, r3, #4
 800226a:	3332      	adds	r3, #50	; 0x32
 800226c:	4a95      	ldr	r2, [pc, #596]	; (80024c4 <UART_SetConfig+0x6f4>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002278:	4498      	add	r8, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	469b      	mov	fp, r3
 800227e:	f04f 0c00 	mov.w	ip, #0
 8002282:	46d9      	mov	r9, fp
 8002284:	46e2      	mov	sl, ip
 8002286:	eb19 0309 	adds.w	r3, r9, r9
 800228a:	eb4a 040a 	adc.w	r4, sl, sl
 800228e:	4699      	mov	r9, r3
 8002290:	46a2      	mov	sl, r4
 8002292:	eb19 090b 	adds.w	r9, r9, fp
 8002296:	eb4a 0a0c 	adc.w	sl, sl, ip
 800229a:	f04f 0100 	mov.w	r1, #0
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022ae:	4689      	mov	r9, r1
 80022b0:	4692      	mov	sl, r2
 80022b2:	eb1b 0509 	adds.w	r5, fp, r9
 80022b6:	eb4c 060a 	adc.w	r6, ip, sl
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4619      	mov	r1, r3
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	f04f 0300 	mov.w	r3, #0
 80022c8:	f04f 0400 	mov.w	r4, #0
 80022cc:	0094      	lsls	r4, r2, #2
 80022ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022d2:	008b      	lsls	r3, r1, #2
 80022d4:	461a      	mov	r2, r3
 80022d6:	4623      	mov	r3, r4
 80022d8:	4628      	mov	r0, r5
 80022da:	4631      	mov	r1, r6
 80022dc:	f7fd ff78 	bl	80001d0 <__aeabi_uldivmod>
 80022e0:	4603      	mov	r3, r0
 80022e2:	460c      	mov	r4, r1
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b77      	ldr	r3, [pc, #476]	; (80024c4 <UART_SetConfig+0x6f4>)
 80022e8:	fba3 1302 	umull	r1, r3, r3, r2
 80022ec:	095b      	lsrs	r3, r3, #5
 80022ee:	2164      	movs	r1, #100	; 0x64
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	3332      	adds	r3, #50	; 0x32
 80022fa:	4a72      	ldr	r2, [pc, #456]	; (80024c4 <UART_SetConfig+0x6f4>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	095b      	lsrs	r3, r3, #5
 8002302:	f003 020f 	and.w	r2, r3, #15
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4442      	add	r2, r8
 800230c:	609a      	str	r2, [r3, #8]
 800230e:	e0d0      	b.n	80024b2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002310:	f7ff fa78 	bl	8001804 <HAL_RCC_GetPCLK1Freq>
 8002314:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	469a      	mov	sl, r3
 800231a:	f04f 0b00 	mov.w	fp, #0
 800231e:	46d0      	mov	r8, sl
 8002320:	46d9      	mov	r9, fp
 8002322:	eb18 0308 	adds.w	r3, r8, r8
 8002326:	eb49 0409 	adc.w	r4, r9, r9
 800232a:	4698      	mov	r8, r3
 800232c:	46a1      	mov	r9, r4
 800232e:	eb18 080a 	adds.w	r8, r8, sl
 8002332:	eb49 090b 	adc.w	r9, r9, fp
 8002336:	f04f 0100 	mov.w	r1, #0
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002342:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002346:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800234a:	4688      	mov	r8, r1
 800234c:	4691      	mov	r9, r2
 800234e:	eb1a 0508 	adds.w	r5, sl, r8
 8002352:	eb4b 0609 	adc.w	r6, fp, r9
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4619      	mov	r1, r3
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	f04f 0400 	mov.w	r4, #0
 8002368:	0094      	lsls	r4, r2, #2
 800236a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800236e:	008b      	lsls	r3, r1, #2
 8002370:	461a      	mov	r2, r3
 8002372:	4623      	mov	r3, r4
 8002374:	4628      	mov	r0, r5
 8002376:	4631      	mov	r1, r6
 8002378:	f7fd ff2a 	bl	80001d0 <__aeabi_uldivmod>
 800237c:	4603      	mov	r3, r0
 800237e:	460c      	mov	r4, r1
 8002380:	461a      	mov	r2, r3
 8002382:	4b50      	ldr	r3, [pc, #320]	; (80024c4 <UART_SetConfig+0x6f4>)
 8002384:	fba3 2302 	umull	r2, r3, r3, r2
 8002388:	095b      	lsrs	r3, r3, #5
 800238a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	469b      	mov	fp, r3
 8002392:	f04f 0c00 	mov.w	ip, #0
 8002396:	46d9      	mov	r9, fp
 8002398:	46e2      	mov	sl, ip
 800239a:	eb19 0309 	adds.w	r3, r9, r9
 800239e:	eb4a 040a 	adc.w	r4, sl, sl
 80023a2:	4699      	mov	r9, r3
 80023a4:	46a2      	mov	sl, r4
 80023a6:	eb19 090b 	adds.w	r9, r9, fp
 80023aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80023ae:	f04f 0100 	mov.w	r1, #0
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023c2:	4689      	mov	r9, r1
 80023c4:	4692      	mov	sl, r2
 80023c6:	eb1b 0509 	adds.w	r5, fp, r9
 80023ca:	eb4c 060a 	adc.w	r6, ip, sl
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	4619      	mov	r1, r3
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	f04f 0400 	mov.w	r4, #0
 80023e0:	0094      	lsls	r4, r2, #2
 80023e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023e6:	008b      	lsls	r3, r1, #2
 80023e8:	461a      	mov	r2, r3
 80023ea:	4623      	mov	r3, r4
 80023ec:	4628      	mov	r0, r5
 80023ee:	4631      	mov	r1, r6
 80023f0:	f7fd feee 	bl	80001d0 <__aeabi_uldivmod>
 80023f4:	4603      	mov	r3, r0
 80023f6:	460c      	mov	r4, r1
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b32      	ldr	r3, [pc, #200]	; (80024c4 <UART_SetConfig+0x6f4>)
 80023fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002400:	095b      	lsrs	r3, r3, #5
 8002402:	2164      	movs	r1, #100	; 0x64
 8002404:	fb01 f303 	mul.w	r3, r1, r3
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	3332      	adds	r3, #50	; 0x32
 800240e:	4a2d      	ldr	r2, [pc, #180]	; (80024c4 <UART_SetConfig+0x6f4>)
 8002410:	fba2 2303 	umull	r2, r3, r2, r3
 8002414:	095b      	lsrs	r3, r3, #5
 8002416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800241a:	4498      	add	r8, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	469b      	mov	fp, r3
 8002420:	f04f 0c00 	mov.w	ip, #0
 8002424:	46d9      	mov	r9, fp
 8002426:	46e2      	mov	sl, ip
 8002428:	eb19 0309 	adds.w	r3, r9, r9
 800242c:	eb4a 040a 	adc.w	r4, sl, sl
 8002430:	4699      	mov	r9, r3
 8002432:	46a2      	mov	sl, r4
 8002434:	eb19 090b 	adds.w	r9, r9, fp
 8002438:	eb4a 0a0c 	adc.w	sl, sl, ip
 800243c:	f04f 0100 	mov.w	r1, #0
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002448:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800244c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002450:	4689      	mov	r9, r1
 8002452:	4692      	mov	sl, r2
 8002454:	eb1b 0509 	adds.w	r5, fp, r9
 8002458:	eb4c 060a 	adc.w	r6, ip, sl
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4619      	mov	r1, r3
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	f04f 0400 	mov.w	r4, #0
 800246e:	0094      	lsls	r4, r2, #2
 8002470:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002474:	008b      	lsls	r3, r1, #2
 8002476:	461a      	mov	r2, r3
 8002478:	4623      	mov	r3, r4
 800247a:	4628      	mov	r0, r5
 800247c:	4631      	mov	r1, r6
 800247e:	f7fd fea7 	bl	80001d0 <__aeabi_uldivmod>
 8002482:	4603      	mov	r3, r0
 8002484:	460c      	mov	r4, r1
 8002486:	461a      	mov	r2, r3
 8002488:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <UART_SetConfig+0x6f4>)
 800248a:	fba3 1302 	umull	r1, r3, r3, r2
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	2164      	movs	r1, #100	; 0x64
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	3332      	adds	r3, #50	; 0x32
 800249c:	4a09      	ldr	r2, [pc, #36]	; (80024c4 <UART_SetConfig+0x6f4>)
 800249e:	fba2 2303 	umull	r2, r3, r2, r3
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	f003 020f 	and.w	r2, r3, #15
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4442      	add	r2, r8
 80024ae:	609a      	str	r2, [r3, #8]
}
 80024b0:	e7ff      	b.n	80024b2 <UART_SetConfig+0x6e2>
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024bc:	40011000 	.word	0x40011000
 80024c0:	40011400 	.word	0x40011400
 80024c4:	51eb851f 	.word	0x51eb851f

080024c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80024d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024da:	2b84      	cmp	r3, #132	; 0x84
 80024dc:	d005      	beq.n	80024ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80024de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4413      	add	r3, r2
 80024e6:	3303      	adds	r3, #3
 80024e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80024ea:	68fb      	ldr	r3, [r7, #12]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80024fc:	f000 fada 	bl	8002ab4 <vTaskStartScheduler>
  
  return osOK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	bd80      	pop	{r7, pc}

08002506 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002506:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002508:	b089      	sub	sp, #36	; 0x24
 800250a:	af04      	add	r7, sp, #16
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d020      	beq.n	800255a <osThreadCreate+0x54>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01c      	beq.n	800255a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685c      	ldr	r4, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681d      	ldr	r5, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691e      	ldr	r6, [r3, #16]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff ffc8 	bl	80024c8 <makeFreeRtosPriority>
 8002538:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002542:	9202      	str	r2, [sp, #8]
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	9100      	str	r1, [sp, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4632      	mov	r2, r6
 800254c:	4629      	mov	r1, r5
 800254e:	4620      	mov	r0, r4
 8002550:	f000 f8ed 	bl	800272e <xTaskCreateStatic>
 8002554:	4603      	mov	r3, r0
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	e01c      	b.n	8002594 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685c      	ldr	r4, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002566:	b29e      	uxth	r6, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff ffaa 	bl	80024c8 <makeFreeRtosPriority>
 8002574:	4602      	mov	r2, r0
 8002576:	f107 030c 	add.w	r3, r7, #12
 800257a:	9301      	str	r3, [sp, #4]
 800257c:	9200      	str	r2, [sp, #0]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	4632      	mov	r2, r6
 8002582:	4629      	mov	r1, r5
 8002584:	4620      	mov	r0, r4
 8002586:	f000 f92c 	bl	80027e2 <xTaskCreate>
 800258a:	4603      	mov	r3, r0
 800258c:	2b01      	cmp	r3, #1
 800258e:	d001      	beq.n	8002594 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002590:	2300      	movs	r3, #0
 8002592:	e000      	b.n	8002596 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002594:	68fb      	ldr	r3, [r7, #12]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800259e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <osDelay+0x16>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	e000      	b.n	80025b6 <osDelay+0x18>
 80025b4:	2301      	movs	r3, #1
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 fa48 	bl	8002a4c <vTaskDelay>
  
  return osOK;
 80025bc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f103 0208 	add.w	r2, r3, #8
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f04f 32ff 	mov.w	r2, #4294967295
 80025de:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f103 0208 	add.w	r2, r3, #8
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f103 0208 	add.w	r2, r3, #8
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	601a      	str	r2, [r3, #0]
}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267e:	d103      	bne.n	8002688 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	e00c      	b.n	80026a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3308      	adds	r3, #8
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	e002      	b.n	8002696 <vListInsert+0x2e>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d2f6      	bcs.n	8002690 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	601a      	str	r2, [r3, #0]
}
 80026ce:	bf00      	nop
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026da:	b480      	push	{r7}
 80026dc:	b085      	sub	sp, #20
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6892      	ldr	r2, [r2, #8]
 80026f0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6852      	ldr	r2, [r2, #4]
 80026fa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	429a      	cmp	r2, r3
 8002704:	d103      	bne.n	800270e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	1e5a      	subs	r2, r3, #1
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800272e:	b580      	push	{r7, lr}
 8002730:	b08e      	sub	sp, #56	; 0x38
 8002732:	af04      	add	r7, sp, #16
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
 800273a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800273c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002746:	f383 8811 	msr	BASEPRI, r3
 800274a:	f3bf 8f6f 	isb	sy
 800274e:	f3bf 8f4f 	dsb	sy
 8002752:	623b      	str	r3, [r7, #32]
 8002754:	e7fe      	b.n	8002754 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002758:	2b00      	cmp	r3, #0
 800275a:	d109      	bne.n	8002770 <xTaskCreateStatic+0x42>
 800275c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002760:	f383 8811 	msr	BASEPRI, r3
 8002764:	f3bf 8f6f 	isb	sy
 8002768:	f3bf 8f4f 	dsb	sy
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	e7fe      	b.n	800276e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002770:	2354      	movs	r3, #84	; 0x54
 8002772:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	2b54      	cmp	r3, #84	; 0x54
 8002778:	d009      	beq.n	800278e <xTaskCreateStatic+0x60>
 800277a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277e:	f383 8811 	msr	BASEPRI, r3
 8002782:	f3bf 8f6f 	isb	sy
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	e7fe      	b.n	800278c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800278e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002792:	2b00      	cmp	r3, #0
 8002794:	d01e      	beq.n	80027d4 <xTaskCreateStatic+0xa6>
 8002796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002798:	2b00      	cmp	r3, #0
 800279a:	d01b      	beq.n	80027d4 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800279c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	2202      	movs	r2, #2
 80027aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80027ae:	2300      	movs	r3, #0
 80027b0:	9303      	str	r3, [sp, #12]
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	9302      	str	r3, [sp, #8]
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	9301      	str	r3, [sp, #4]
 80027bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f850 	bl	800286c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027ce:	f000 f8d3 	bl	8002978 <prvAddNewTaskToReadyList>
 80027d2:	e001      	b.n	80027d8 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80027d8:	697b      	ldr	r3, [r7, #20]
	}
 80027da:	4618      	mov	r0, r3
 80027dc:	3728      	adds	r7, #40	; 0x28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b08c      	sub	sp, #48	; 0x30
 80027e6:	af04      	add	r7, sp, #16
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	603b      	str	r3, [r7, #0]
 80027ee:	4613      	mov	r3, r2
 80027f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 feb4 	bl	8003564 <pvPortMalloc>
 80027fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00e      	beq.n	8002822 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002804:	2054      	movs	r0, #84	; 0x54
 8002806:	f000 fead 	bl	8003564 <pvPortMalloc>
 800280a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	631a      	str	r2, [r3, #48]	; 0x30
 8002818:	e005      	b.n	8002826 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800281a:	6978      	ldr	r0, [r7, #20]
 800281c:	f000 ff64 	bl	80036e8 <vPortFree>
 8002820:	e001      	b.n	8002826 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d017      	beq.n	800285c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002834:	88fa      	ldrh	r2, [r7, #6]
 8002836:	2300      	movs	r3, #0
 8002838:	9303      	str	r3, [sp, #12]
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	9302      	str	r3, [sp, #8]
 800283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002840:	9301      	str	r3, [sp, #4]
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68b9      	ldr	r1, [r7, #8]
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 f80e 	bl	800286c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002850:	69f8      	ldr	r0, [r7, #28]
 8002852:	f000 f891 	bl	8002978 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002856:	2301      	movs	r3, #1
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	e002      	b.n	8002862 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800285c:	f04f 33ff 	mov.w	r3, #4294967295
 8002860:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002862:	69bb      	ldr	r3, [r7, #24]
	}
 8002864:	4618      	mov	r0, r3
 8002866:	3720      	adds	r7, #32
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
 8002878:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800287a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002884:	3b01      	subs	r3, #1
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	f023 0307 	bic.w	r3, r3, #7
 8002892:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	2b00      	cmp	r3, #0
 800289c:	d009      	beq.n	80028b2 <prvInitialiseNewTask+0x46>
 800289e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a2:	f383 8811 	msr	BASEPRI, r3
 80028a6:	f3bf 8f6f 	isb	sy
 80028aa:	f3bf 8f4f 	dsb	sy
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	e7fe      	b.n	80028b0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d01f      	beq.n	80028f8 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028b8:	2300      	movs	r3, #0
 80028ba:	61fb      	str	r3, [r7, #28]
 80028bc:	e012      	b.n	80028e4 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	4413      	add	r3, r2
 80028c4:	7819      	ldrb	r1, [r3, #0]
 80028c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	4413      	add	r3, r2
 80028cc:	3334      	adds	r3, #52	; 0x34
 80028ce:	460a      	mov	r2, r1
 80028d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	4413      	add	r3, r2
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d006      	beq.n	80028ec <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3301      	adds	r3, #1
 80028e2:	61fb      	str	r3, [r7, #28]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b0f      	cmp	r3, #15
 80028e8:	d9e9      	bls.n	80028be <prvInitialiseNewTask+0x52>
 80028ea:	e000      	b.n	80028ee <prvInitialiseNewTask+0x82>
			{
				break;
 80028ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028f6:	e003      	b.n	8002900 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80028f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002902:	2b06      	cmp	r3, #6
 8002904:	d901      	bls.n	800290a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002906:	2306      	movs	r3, #6
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800290e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002914:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	2200      	movs	r2, #0
 800291a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800291c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291e:	3304      	adds	r3, #4
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fe70 	bl	8002606 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002928:	3318      	adds	r3, #24
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fe6b 	bl	8002606 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002934:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002938:	f1c3 0207 	rsb	r2, r3, #7
 800293c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002944:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002948:	2200      	movs	r2, #0
 800294a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800294c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	68f9      	ldr	r1, [r7, #12]
 8002958:	69b8      	ldr	r0, [r7, #24]
 800295a:	f000 fbfd 	bl	8003158 <pxPortInitialiseStack>
 800295e:	4602      	mov	r2, r0
 8002960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002962:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800296a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800296e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002970:	bf00      	nop
 8002972:	3720      	adds	r7, #32
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002980:	f000 fd14 	bl	80033ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002984:	4b2a      	ldr	r3, [pc, #168]	; (8002a30 <prvAddNewTaskToReadyList+0xb8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	3301      	adds	r3, #1
 800298a:	4a29      	ldr	r2, [pc, #164]	; (8002a30 <prvAddNewTaskToReadyList+0xb8>)
 800298c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800298e:	4b29      	ldr	r3, [pc, #164]	; (8002a34 <prvAddNewTaskToReadyList+0xbc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002996:	4a27      	ldr	r2, [pc, #156]	; (8002a34 <prvAddNewTaskToReadyList+0xbc>)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800299c:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <prvAddNewTaskToReadyList+0xb8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d110      	bne.n	80029c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80029a4:	f000 fab8 	bl	8002f18 <prvInitialiseTaskLists>
 80029a8:	e00d      	b.n	80029c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80029aa:	4b23      	ldr	r3, [pc, #140]	; (8002a38 <prvAddNewTaskToReadyList+0xc0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029b2:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <prvAddNewTaskToReadyList+0xbc>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	429a      	cmp	r2, r3
 80029be:	d802      	bhi.n	80029c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80029c0:	4a1c      	ldr	r2, [pc, #112]	; (8002a34 <prvAddNewTaskToReadyList+0xbc>)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80029c6:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <prvAddNewTaskToReadyList+0xc4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3301      	adds	r3, #1
 80029cc:	4a1b      	ldr	r2, [pc, #108]	; (8002a3c <prvAddNewTaskToReadyList+0xc4>)
 80029ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	2201      	movs	r2, #1
 80029d6:	409a      	lsls	r2, r3
 80029d8:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <prvAddNewTaskToReadyList+0xc8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4313      	orrs	r3, r2
 80029de:	4a18      	ldr	r2, [pc, #96]	; (8002a40 <prvAddNewTaskToReadyList+0xc8>)
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4a15      	ldr	r2, [pc, #84]	; (8002a44 <prvAddNewTaskToReadyList+0xcc>)
 80029f0:	441a      	add	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3304      	adds	r3, #4
 80029f6:	4619      	mov	r1, r3
 80029f8:	4610      	mov	r0, r2
 80029fa:	f7ff fe11 	bl	8002620 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80029fe:	f000 fd03 	bl	8003408 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002a02:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <prvAddNewTaskToReadyList+0xc0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00e      	beq.n	8002a28 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <prvAddNewTaskToReadyList+0xbc>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d207      	bcs.n	8002a28 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <prvAddNewTaskToReadyList+0xd0>)
 8002a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	f3bf 8f4f 	dsb	sy
 8002a24:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a28:	bf00      	nop
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000380 	.word	0x20000380
 8002a34:	20000280 	.word	0x20000280
 8002a38:	2000038c 	.word	0x2000038c
 8002a3c:	2000039c 	.word	0x2000039c
 8002a40:	20000388 	.word	0x20000388
 8002a44:	20000284 	.word	0x20000284
 8002a48:	e000ed04 	.word	0xe000ed04

08002a4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d016      	beq.n	8002a8c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a5e:	4b13      	ldr	r3, [pc, #76]	; (8002aac <vTaskDelay+0x60>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <vTaskDelay+0x2e>
 8002a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6a:	f383 8811 	msr	BASEPRI, r3
 8002a6e:	f3bf 8f6f 	isb	sy
 8002a72:	f3bf 8f4f 	dsb	sy
 8002a76:	60bb      	str	r3, [r7, #8]
 8002a78:	e7fe      	b.n	8002a78 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002a7a:	f000 f879 	bl	8002b70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a7e:	2100      	movs	r1, #0
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fb03 	bl	800308c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002a86:	f000 f881 	bl	8002b8c <xTaskResumeAll>
 8002a8a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d107      	bne.n	8002aa2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002a92:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <vTaskDelay+0x64>)
 8002a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	f3bf 8f4f 	dsb	sy
 8002a9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002aa2:	bf00      	nop
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	200003a8 	.word	0x200003a8
 8002ab0:	e000ed04 	.word	0xe000ed04

08002ab4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08a      	sub	sp, #40	; 0x28
 8002ab8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ac2:	463a      	mov	r2, r7
 8002ac4:	1d39      	adds	r1, r7, #4
 8002ac6:	f107 0308 	add.w	r3, r7, #8
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fd fd00 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ad0:	6839      	ldr	r1, [r7, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	9202      	str	r2, [sp, #8]
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	2300      	movs	r3, #0
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	460a      	mov	r2, r1
 8002ae2:	491d      	ldr	r1, [pc, #116]	; (8002b58 <vTaskStartScheduler+0xa4>)
 8002ae4:	481d      	ldr	r0, [pc, #116]	; (8002b5c <vTaskStartScheduler+0xa8>)
 8002ae6:	f7ff fe22 	bl	800272e <xTaskCreateStatic>
 8002aea:	4602      	mov	r2, r0
 8002aec:	4b1c      	ldr	r3, [pc, #112]	; (8002b60 <vTaskStartScheduler+0xac>)
 8002aee:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002af0:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <vTaskStartScheduler+0xac>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002af8:	2301      	movs	r3, #1
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	e001      	b.n	8002b02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d115      	bne.n	8002b34 <vTaskStartScheduler+0x80>
 8002b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b1a:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <vTaskStartScheduler+0xb0>)
 8002b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b22:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <vTaskStartScheduler+0xb4>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b28:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <vTaskStartScheduler+0xb8>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b2e:	f000 fb9f 	bl	8003270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b32:	e00d      	b.n	8002b50 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3a:	d109      	bne.n	8002b50 <vTaskStartScheduler+0x9c>
 8002b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b40:	f383 8811 	msr	BASEPRI, r3
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	e7fe      	b.n	8002b4e <vTaskStartScheduler+0x9a>
}
 8002b50:	bf00      	nop
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	080039a8 	.word	0x080039a8
 8002b5c:	08002ee9 	.word	0x08002ee9
 8002b60:	200003a4 	.word	0x200003a4
 8002b64:	200003a0 	.word	0x200003a0
 8002b68:	2000038c 	.word	0x2000038c
 8002b6c:	20000384 	.word	0x20000384

08002b70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002b74:	4b04      	ldr	r3, [pc, #16]	; (8002b88 <vTaskSuspendAll+0x18>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	4a03      	ldr	r2, [pc, #12]	; (8002b88 <vTaskSuspendAll+0x18>)
 8002b7c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002b7e:	bf00      	nop
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	200003a8 	.word	0x200003a8

08002b8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002b9a:	4b41      	ldr	r3, [pc, #260]	; (8002ca0 <xTaskResumeAll+0x114>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d109      	bne.n	8002bb6 <xTaskResumeAll+0x2a>
 8002ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba6:	f383 8811 	msr	BASEPRI, r3
 8002baa:	f3bf 8f6f 	isb	sy
 8002bae:	f3bf 8f4f 	dsb	sy
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	e7fe      	b.n	8002bb4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002bb6:	f000 fbf9 	bl	80033ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002bba:	4b39      	ldr	r3, [pc, #228]	; (8002ca0 <xTaskResumeAll+0x114>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	4a37      	ldr	r2, [pc, #220]	; (8002ca0 <xTaskResumeAll+0x114>)
 8002bc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bc4:	4b36      	ldr	r3, [pc, #216]	; (8002ca0 <xTaskResumeAll+0x114>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d161      	bne.n	8002c90 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002bcc:	4b35      	ldr	r3, [pc, #212]	; (8002ca4 <xTaskResumeAll+0x118>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d05d      	beq.n	8002c90 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bd4:	e02e      	b.n	8002c34 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bd6:	4b34      	ldr	r3, [pc, #208]	; (8002ca8 <xTaskResumeAll+0x11c>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3318      	adds	r3, #24
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fd79 	bl	80026da <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	3304      	adds	r3, #4
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fd74 	bl	80026da <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	4b2c      	ldr	r3, [pc, #176]	; (8002cac <xTaskResumeAll+0x120>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	4a2a      	ldr	r2, [pc, #168]	; (8002cac <xTaskResumeAll+0x120>)
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4a27      	ldr	r2, [pc, #156]	; (8002cb0 <xTaskResumeAll+0x124>)
 8002c12:	441a      	add	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	3304      	adds	r3, #4
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	f7ff fd00 	bl	8002620 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c24:	4b23      	ldr	r3, [pc, #140]	; (8002cb4 <xTaskResumeAll+0x128>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d302      	bcc.n	8002c34 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002c2e:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <xTaskResumeAll+0x12c>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c34:	4b1c      	ldr	r3, [pc, #112]	; (8002ca8 <xTaskResumeAll+0x11c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1cc      	bne.n	8002bd6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c42:	f000 fa03 	bl	800304c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002c46:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <xTaskResumeAll+0x130>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d010      	beq.n	8002c74 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c52:	f000 f837 	bl	8002cc4 <xTaskIncrementTick>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002c5c:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <xTaskResumeAll+0x12c>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3b01      	subs	r3, #1
 8002c66:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f1      	bne.n	8002c52 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002c6e:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <xTaskResumeAll+0x130>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002c74:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <xTaskResumeAll+0x12c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d009      	beq.n	8002c90 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002c80:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <xTaskResumeAll+0x134>)
 8002c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	f3bf 8f4f 	dsb	sy
 8002c8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c90:	f000 fbba 	bl	8003408 <vPortExitCritical>

	return xAlreadyYielded;
 8002c94:	68bb      	ldr	r3, [r7, #8]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	200003a8 	.word	0x200003a8
 8002ca4:	20000380 	.word	0x20000380
 8002ca8:	20000340 	.word	0x20000340
 8002cac:	20000388 	.word	0x20000388
 8002cb0:	20000284 	.word	0x20000284
 8002cb4:	20000280 	.word	0x20000280
 8002cb8:	20000394 	.word	0x20000394
 8002cbc:	20000390 	.word	0x20000390
 8002cc0:	e000ed04 	.word	0xe000ed04

08002cc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cce:	4b4e      	ldr	r3, [pc, #312]	; (8002e08 <xTaskIncrementTick+0x144>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f040 8087 	bne.w	8002de6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002cd8:	4b4c      	ldr	r3, [pc, #304]	; (8002e0c <xTaskIncrementTick+0x148>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002ce0:	4a4a      	ldr	r2, [pc, #296]	; (8002e0c <xTaskIncrementTick+0x148>)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d11f      	bne.n	8002d2c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002cec:	4b48      	ldr	r3, [pc, #288]	; (8002e10 <xTaskIncrementTick+0x14c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d009      	beq.n	8002d0a <xTaskIncrementTick+0x46>
 8002cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfa:	f383 8811 	msr	BASEPRI, r3
 8002cfe:	f3bf 8f6f 	isb	sy
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	e7fe      	b.n	8002d08 <xTaskIncrementTick+0x44>
 8002d0a:	4b41      	ldr	r3, [pc, #260]	; (8002e10 <xTaskIncrementTick+0x14c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	4b40      	ldr	r3, [pc, #256]	; (8002e14 <xTaskIncrementTick+0x150>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a3e      	ldr	r2, [pc, #248]	; (8002e10 <xTaskIncrementTick+0x14c>)
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	4a3e      	ldr	r2, [pc, #248]	; (8002e14 <xTaskIncrementTick+0x150>)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	4b3e      	ldr	r3, [pc, #248]	; (8002e18 <xTaskIncrementTick+0x154>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3301      	adds	r3, #1
 8002d24:	4a3c      	ldr	r2, [pc, #240]	; (8002e18 <xTaskIncrementTick+0x154>)
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	f000 f990 	bl	800304c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d2c:	4b3b      	ldr	r3, [pc, #236]	; (8002e1c <xTaskIncrementTick+0x158>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d348      	bcc.n	8002dc8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d36:	4b36      	ldr	r3, [pc, #216]	; (8002e10 <xTaskIncrementTick+0x14c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d104      	bne.n	8002d4a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d40:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <xTaskIncrementTick+0x158>)
 8002d42:	f04f 32ff 	mov.w	r2, #4294967295
 8002d46:	601a      	str	r2, [r3, #0]
					break;
 8002d48:	e03e      	b.n	8002dc8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d4a:	4b31      	ldr	r3, [pc, #196]	; (8002e10 <xTaskIncrementTick+0x14c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d203      	bcs.n	8002d6a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d62:	4a2e      	ldr	r2, [pc, #184]	; (8002e1c <xTaskIncrementTick+0x158>)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d68:	e02e      	b.n	8002dc8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fcb3 	bl	80026da <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d004      	beq.n	8002d86 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	3318      	adds	r3, #24
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fcaa 	bl	80026da <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	409a      	lsls	r2, r3
 8002d8e:	4b24      	ldr	r3, [pc, #144]	; (8002e20 <xTaskIncrementTick+0x15c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	4a22      	ldr	r2, [pc, #136]	; (8002e20 <xTaskIncrementTick+0x15c>)
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4a1f      	ldr	r2, [pc, #124]	; (8002e24 <xTaskIncrementTick+0x160>)
 8002da6:	441a      	add	r2, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	3304      	adds	r3, #4
 8002dac:	4619      	mov	r1, r3
 8002dae:	4610      	mov	r0, r2
 8002db0:	f7ff fc36 	bl	8002620 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db8:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <xTaskIncrementTick+0x164>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d3b9      	bcc.n	8002d36 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dc6:	e7b6      	b.n	8002d36 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002dc8:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <xTaskIncrementTick+0x164>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dce:	4915      	ldr	r1, [pc, #84]	; (8002e24 <xTaskIncrementTick+0x160>)
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d907      	bls.n	8002df0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8002de0:	2301      	movs	r3, #1
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	e004      	b.n	8002df0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002de6:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <xTaskIncrementTick+0x168>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3301      	adds	r3, #1
 8002dec:	4a0f      	ldr	r2, [pc, #60]	; (8002e2c <xTaskIncrementTick+0x168>)
 8002dee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002df0:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <xTaskIncrementTick+0x16c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002dfc:	697b      	ldr	r3, [r7, #20]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	200003a8 	.word	0x200003a8
 8002e0c:	20000384 	.word	0x20000384
 8002e10:	20000338 	.word	0x20000338
 8002e14:	2000033c 	.word	0x2000033c
 8002e18:	20000398 	.word	0x20000398
 8002e1c:	200003a0 	.word	0x200003a0
 8002e20:	20000388 	.word	0x20000388
 8002e24:	20000284 	.word	0x20000284
 8002e28:	20000280 	.word	0x20000280
 8002e2c:	20000390 	.word	0x20000390
 8002e30:	20000394 	.word	0x20000394

08002e34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e3a:	4b26      	ldr	r3, [pc, #152]	; (8002ed4 <vTaskSwitchContext+0xa0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e42:	4b25      	ldr	r3, [pc, #148]	; (8002ed8 <vTaskSwitchContext+0xa4>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e48:	e03e      	b.n	8002ec8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002e4a:	4b23      	ldr	r3, [pc, #140]	; (8002ed8 <vTaskSwitchContext+0xa4>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e50:	4b22      	ldr	r3, [pc, #136]	; (8002edc <vTaskSwitchContext+0xa8>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	fab3 f383 	clz	r3, r3
 8002e5c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002e5e:	7afb      	ldrb	r3, [r7, #11]
 8002e60:	f1c3 031f 	rsb	r3, r3, #31
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	491e      	ldr	r1, [pc, #120]	; (8002ee0 <vTaskSwitchContext+0xac>)
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d109      	bne.n	8002e8e <vTaskSwitchContext+0x5a>
	__asm volatile
 8002e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7e:	f383 8811 	msr	BASEPRI, r3
 8002e82:	f3bf 8f6f 	isb	sy
 8002e86:	f3bf 8f4f 	dsb	sy
 8002e8a:	607b      	str	r3, [r7, #4]
 8002e8c:	e7fe      	b.n	8002e8c <vTaskSwitchContext+0x58>
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4a11      	ldr	r2, [pc, #68]	; (8002ee0 <vTaskSwitchContext+0xac>)
 8002e9a:	4413      	add	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	3308      	adds	r3, #8
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d104      	bne.n	8002ebe <vTaskSwitchContext+0x8a>
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4a07      	ldr	r2, [pc, #28]	; (8002ee4 <vTaskSwitchContext+0xb0>)
 8002ec6:	6013      	str	r3, [r2, #0]
}
 8002ec8:	bf00      	nop
 8002eca:	371c      	adds	r7, #28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	200003a8 	.word	0x200003a8
 8002ed8:	20000394 	.word	0x20000394
 8002edc:	20000388 	.word	0x20000388
 8002ee0:	20000284 	.word	0x20000284
 8002ee4:	20000280 	.word	0x20000280

08002ee8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002ef0:	f000 f852 	bl	8002f98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ef4:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <prvIdleTask+0x28>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d9f9      	bls.n	8002ef0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002efc:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <prvIdleTask+0x2c>)
 8002efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	f3bf 8f4f 	dsb	sy
 8002f08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002f0c:	e7f0      	b.n	8002ef0 <prvIdleTask+0x8>
 8002f0e:	bf00      	nop
 8002f10:	20000284 	.word	0x20000284
 8002f14:	e000ed04 	.word	0xe000ed04

08002f18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f1e:	2300      	movs	r3, #0
 8002f20:	607b      	str	r3, [r7, #4]
 8002f22:	e00c      	b.n	8002f3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4a12      	ldr	r2, [pc, #72]	; (8002f78 <prvInitialiseTaskLists+0x60>)
 8002f30:	4413      	add	r3, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fb47 	bl	80025c6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	607b      	str	r3, [r7, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b06      	cmp	r3, #6
 8002f42:	d9ef      	bls.n	8002f24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f44:	480d      	ldr	r0, [pc, #52]	; (8002f7c <prvInitialiseTaskLists+0x64>)
 8002f46:	f7ff fb3e 	bl	80025c6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002f4a:	480d      	ldr	r0, [pc, #52]	; (8002f80 <prvInitialiseTaskLists+0x68>)
 8002f4c:	f7ff fb3b 	bl	80025c6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002f50:	480c      	ldr	r0, [pc, #48]	; (8002f84 <prvInitialiseTaskLists+0x6c>)
 8002f52:	f7ff fb38 	bl	80025c6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002f56:	480c      	ldr	r0, [pc, #48]	; (8002f88 <prvInitialiseTaskLists+0x70>)
 8002f58:	f7ff fb35 	bl	80025c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002f5c:	480b      	ldr	r0, [pc, #44]	; (8002f8c <prvInitialiseTaskLists+0x74>)
 8002f5e:	f7ff fb32 	bl	80025c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002f62:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <prvInitialiseTaskLists+0x78>)
 8002f64:	4a05      	ldr	r2, [pc, #20]	; (8002f7c <prvInitialiseTaskLists+0x64>)
 8002f66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f68:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <prvInitialiseTaskLists+0x7c>)
 8002f6a:	4a05      	ldr	r2, [pc, #20]	; (8002f80 <prvInitialiseTaskLists+0x68>)
 8002f6c:	601a      	str	r2, [r3, #0]
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000284 	.word	0x20000284
 8002f7c:	20000310 	.word	0x20000310
 8002f80:	20000324 	.word	0x20000324
 8002f84:	20000340 	.word	0x20000340
 8002f88:	20000354 	.word	0x20000354
 8002f8c:	2000036c 	.word	0x2000036c
 8002f90:	20000338 	.word	0x20000338
 8002f94:	2000033c 	.word	0x2000033c

08002f98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f9e:	e019      	b.n	8002fd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002fa0:	f000 fa04 	bl	80033ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fa4:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <prvCheckTasksWaitingTermination+0x4c>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3304      	adds	r3, #4
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff fb92 	bl	80026da <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002fb6:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <prvCheckTasksWaitingTermination+0x50>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <prvCheckTasksWaitingTermination+0x50>)
 8002fbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <prvCheckTasksWaitingTermination+0x54>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	4a09      	ldr	r2, [pc, #36]	; (8002fec <prvCheckTasksWaitingTermination+0x54>)
 8002fc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002fca:	f000 fa1d 	bl	8003408 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f80e 	bl	8002ff0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <prvCheckTasksWaitingTermination+0x54>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1e1      	bne.n	8002fa0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20000354 	.word	0x20000354
 8002fe8:	20000380 	.word	0x20000380
 8002fec:	20000368 	.word	0x20000368

08002ff0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d108      	bne.n	8003014 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fb6e 	bl	80036e8 <vPortFree>
				vPortFree( pxTCB );
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 fb6b 	bl	80036e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003012:	e017      	b.n	8003044 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800301a:	2b01      	cmp	r3, #1
 800301c:	d103      	bne.n	8003026 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fb62 	bl	80036e8 <vPortFree>
	}
 8003024:	e00e      	b.n	8003044 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800302c:	2b02      	cmp	r3, #2
 800302e:	d009      	beq.n	8003044 <prvDeleteTCB+0x54>
 8003030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003034:	f383 8811 	msr	BASEPRI, r3
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	e7fe      	b.n	8003042 <prvDeleteTCB+0x52>
	}
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003052:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <prvResetNextTaskUnblockTime+0x38>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d104      	bne.n	8003066 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <prvResetNextTaskUnblockTime+0x3c>)
 800305e:	f04f 32ff 	mov.w	r2, #4294967295
 8003062:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003064:	e008      	b.n	8003078 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003066:	4b07      	ldr	r3, [pc, #28]	; (8003084 <prvResetNextTaskUnblockTime+0x38>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	4a04      	ldr	r2, [pc, #16]	; (8003088 <prvResetNextTaskUnblockTime+0x3c>)
 8003076:	6013      	str	r3, [r2, #0]
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	20000338 	.word	0x20000338
 8003088:	200003a0 	.word	0x200003a0

0800308c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003096:	4b29      	ldr	r3, [pc, #164]	; (800313c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800309c:	4b28      	ldr	r3, [pc, #160]	; (8003140 <prvAddCurrentTaskToDelayedList+0xb4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3304      	adds	r3, #4
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fb19 	bl	80026da <uxListRemove>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10b      	bne.n	80030c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80030ae:	4b24      	ldr	r3, [pc, #144]	; (8003140 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	2201      	movs	r2, #1
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43da      	mvns	r2, r3
 80030bc:	4b21      	ldr	r3, [pc, #132]	; (8003144 <prvAddCurrentTaskToDelayedList+0xb8>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4013      	ands	r3, r2
 80030c2:	4a20      	ldr	r2, [pc, #128]	; (8003144 <prvAddCurrentTaskToDelayedList+0xb8>)
 80030c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030cc:	d10a      	bne.n	80030e4 <prvAddCurrentTaskToDelayedList+0x58>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d007      	beq.n	80030e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030d4:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	3304      	adds	r3, #4
 80030da:	4619      	mov	r1, r3
 80030dc:	481a      	ldr	r0, [pc, #104]	; (8003148 <prvAddCurrentTaskToDelayedList+0xbc>)
 80030de:	f7ff fa9f 	bl	8002620 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80030e2:	e026      	b.n	8003132 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4413      	add	r3, r2
 80030ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80030ec:	4b14      	ldr	r3, [pc, #80]	; (8003140 <prvAddCurrentTaskToDelayedList+0xb4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d209      	bcs.n	8003110 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030fc:	4b13      	ldr	r3, [pc, #76]	; (800314c <prvAddCurrentTaskToDelayedList+0xc0>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	3304      	adds	r3, #4
 8003106:	4619      	mov	r1, r3
 8003108:	4610      	mov	r0, r2
 800310a:	f7ff faad 	bl	8002668 <vListInsert>
}
 800310e:	e010      	b.n	8003132 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003110:	4b0f      	ldr	r3, [pc, #60]	; (8003150 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	3304      	adds	r3, #4
 800311a:	4619      	mov	r1, r3
 800311c:	4610      	mov	r0, r2
 800311e:	f7ff faa3 	bl	8002668 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003122:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	429a      	cmp	r2, r3
 800312a:	d202      	bcs.n	8003132 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800312c:	4a09      	ldr	r2, [pc, #36]	; (8003154 <prvAddCurrentTaskToDelayedList+0xc8>)
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	6013      	str	r3, [r2, #0]
}
 8003132:	bf00      	nop
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20000384 	.word	0x20000384
 8003140:	20000280 	.word	0x20000280
 8003144:	20000388 	.word	0x20000388
 8003148:	2000036c 	.word	0x2000036c
 800314c:	2000033c 	.word	0x2000033c
 8003150:	20000338 	.word	0x20000338
 8003154:	200003a0 	.word	0x200003a0

08003158 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	3b04      	subs	r3, #4
 8003168:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003170:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	3b04      	subs	r3, #4
 8003176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f023 0201 	bic.w	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	3b04      	subs	r3, #4
 8003186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003188:	4a0c      	ldr	r2, [pc, #48]	; (80031bc <pxPortInitialiseStack+0x64>)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	3b14      	subs	r3, #20
 8003192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	3b04      	subs	r3, #4
 800319e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f06f 0202 	mvn.w	r2, #2
 80031a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3b20      	subs	r3, #32
 80031ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80031ae:	68fb      	ldr	r3, [r7, #12]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	080031c1 	.word	0x080031c1

080031c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80031ca:	4b11      	ldr	r3, [pc, #68]	; (8003210 <prvTaskExitError+0x50>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d2:	d009      	beq.n	80031e8 <prvTaskExitError+0x28>
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	e7fe      	b.n	80031e6 <prvTaskExitError+0x26>
 80031e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ec:	f383 8811 	msr	BASEPRI, r3
 80031f0:	f3bf 8f6f 	isb	sy
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80031fa:	bf00      	nop
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0fc      	beq.n	80031fc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003202:	bf00      	nop
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	2000000c 	.word	0x2000000c
	...

08003220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003220:	4b07      	ldr	r3, [pc, #28]	; (8003240 <pxCurrentTCBConst2>)
 8003222:	6819      	ldr	r1, [r3, #0]
 8003224:	6808      	ldr	r0, [r1, #0]
 8003226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800322a:	f380 8809 	msr	PSP, r0
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f04f 0000 	mov.w	r0, #0
 8003236:	f380 8811 	msr	BASEPRI, r0
 800323a:	4770      	bx	lr
 800323c:	f3af 8000 	nop.w

08003240 <pxCurrentTCBConst2>:
 8003240:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003244:	bf00      	nop
 8003246:	bf00      	nop

08003248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003248:	4808      	ldr	r0, [pc, #32]	; (800326c <prvPortStartFirstTask+0x24>)
 800324a:	6800      	ldr	r0, [r0, #0]
 800324c:	6800      	ldr	r0, [r0, #0]
 800324e:	f380 8808 	msr	MSP, r0
 8003252:	f04f 0000 	mov.w	r0, #0
 8003256:	f380 8814 	msr	CONTROL, r0
 800325a:	b662      	cpsie	i
 800325c:	b661      	cpsie	f
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	f3bf 8f6f 	isb	sy
 8003266:	df00      	svc	0
 8003268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800326a:	bf00      	nop
 800326c:	e000ed08 	.word	0xe000ed08

08003270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003276:	4b44      	ldr	r3, [pc, #272]	; (8003388 <xPortStartScheduler+0x118>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a44      	ldr	r2, [pc, #272]	; (800338c <xPortStartScheduler+0x11c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d109      	bne.n	8003294 <xPortStartScheduler+0x24>
 8003280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003284:	f383 8811 	msr	BASEPRI, r3
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	e7fe      	b.n	8003292 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003294:	4b3c      	ldr	r3, [pc, #240]	; (8003388 <xPortStartScheduler+0x118>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a3d      	ldr	r2, [pc, #244]	; (8003390 <xPortStartScheduler+0x120>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d109      	bne.n	80032b2 <xPortStartScheduler+0x42>
 800329e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a2:	f383 8811 	msr	BASEPRI, r3
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	e7fe      	b.n	80032b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80032b2:	4b38      	ldr	r3, [pc, #224]	; (8003394 <xPortStartScheduler+0x124>)
 80032b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	22ff      	movs	r2, #255	; 0xff
 80032c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	4b30      	ldr	r3, [pc, #192]	; (8003398 <xPortStartScheduler+0x128>)
 80032d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80032da:	4b30      	ldr	r3, [pc, #192]	; (800339c <xPortStartScheduler+0x12c>)
 80032dc:	2207      	movs	r2, #7
 80032de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032e0:	e009      	b.n	80032f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80032e2:	4b2e      	ldr	r3, [pc, #184]	; (800339c <xPortStartScheduler+0x12c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	4a2c      	ldr	r2, [pc, #176]	; (800339c <xPortStartScheduler+0x12c>)
 80032ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fe:	2b80      	cmp	r3, #128	; 0x80
 8003300:	d0ef      	beq.n	80032e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003302:	4b26      	ldr	r3, [pc, #152]	; (800339c <xPortStartScheduler+0x12c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f1c3 0307 	rsb	r3, r3, #7
 800330a:	2b04      	cmp	r3, #4
 800330c:	d009      	beq.n	8003322 <xPortStartScheduler+0xb2>
 800330e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003312:	f383 8811 	msr	BASEPRI, r3
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	f3bf 8f4f 	dsb	sy
 800331e:	60bb      	str	r3, [r7, #8]
 8003320:	e7fe      	b.n	8003320 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003322:	4b1e      	ldr	r3, [pc, #120]	; (800339c <xPortStartScheduler+0x12c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	021b      	lsls	r3, r3, #8
 8003328:	4a1c      	ldr	r2, [pc, #112]	; (800339c <xPortStartScheduler+0x12c>)
 800332a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800332c:	4b1b      	ldr	r3, [pc, #108]	; (800339c <xPortStartScheduler+0x12c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003334:	4a19      	ldr	r2, [pc, #100]	; (800339c <xPortStartScheduler+0x12c>)
 8003336:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	b2da      	uxtb	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003340:	4b17      	ldr	r3, [pc, #92]	; (80033a0 <xPortStartScheduler+0x130>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a16      	ldr	r2, [pc, #88]	; (80033a0 <xPortStartScheduler+0x130>)
 8003346:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800334a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800334c:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <xPortStartScheduler+0x130>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a13      	ldr	r2, [pc, #76]	; (80033a0 <xPortStartScheduler+0x130>)
 8003352:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003356:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003358:	f000 f8d6 	bl	8003508 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800335c:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <xPortStartScheduler+0x134>)
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003362:	f000 f8f5 	bl	8003550 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <xPortStartScheduler+0x138>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a0f      	ldr	r2, [pc, #60]	; (80033a8 <xPortStartScheduler+0x138>)
 800336c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003370:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003372:	f7ff ff69 	bl	8003248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003376:	f7ff fd5d 	bl	8002e34 <vTaskSwitchContext>
	prvTaskExitError();
 800337a:	f7ff ff21 	bl	80031c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	e000ed00 	.word	0xe000ed00
 800338c:	410fc271 	.word	0x410fc271
 8003390:	410fc270 	.word	0x410fc270
 8003394:	e000e400 	.word	0xe000e400
 8003398:	200003ac 	.word	0x200003ac
 800339c:	200003b0 	.word	0x200003b0
 80033a0:	e000ed20 	.word	0xe000ed20
 80033a4:	2000000c 	.word	0x2000000c
 80033a8:	e000ef34 	.word	0xe000ef34

080033ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80033c4:	4b0e      	ldr	r3, [pc, #56]	; (8003400 <vPortEnterCritical+0x54>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3301      	adds	r3, #1
 80033ca:	4a0d      	ldr	r2, [pc, #52]	; (8003400 <vPortEnterCritical+0x54>)
 80033cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80033ce:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <vPortEnterCritical+0x54>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d10e      	bne.n	80033f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80033d6:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <vPortEnterCritical+0x58>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d009      	beq.n	80033f4 <vPortEnterCritical+0x48>
 80033e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e4:	f383 8811 	msr	BASEPRI, r3
 80033e8:	f3bf 8f6f 	isb	sy
 80033ec:	f3bf 8f4f 	dsb	sy
 80033f0:	603b      	str	r3, [r7, #0]
 80033f2:	e7fe      	b.n	80033f2 <vPortEnterCritical+0x46>
	}
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	2000000c 	.word	0x2000000c
 8003404:	e000ed04 	.word	0xe000ed04

08003408 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800340e:	4b11      	ldr	r3, [pc, #68]	; (8003454 <vPortExitCritical+0x4c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d109      	bne.n	800342a <vPortExitCritical+0x22>
 8003416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341a:	f383 8811 	msr	BASEPRI, r3
 800341e:	f3bf 8f6f 	isb	sy
 8003422:	f3bf 8f4f 	dsb	sy
 8003426:	607b      	str	r3, [r7, #4]
 8003428:	e7fe      	b.n	8003428 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800342a:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <vPortExitCritical+0x4c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3b01      	subs	r3, #1
 8003430:	4a08      	ldr	r2, [pc, #32]	; (8003454 <vPortExitCritical+0x4c>)
 8003432:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003434:	4b07      	ldr	r3, [pc, #28]	; (8003454 <vPortExitCritical+0x4c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d104      	bne.n	8003446 <vPortExitCritical+0x3e>
 800343c:	2300      	movs	r3, #0
 800343e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	2000000c 	.word	0x2000000c
	...

08003460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003460:	f3ef 8009 	mrs	r0, PSP
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	4b15      	ldr	r3, [pc, #84]	; (80034c0 <pxCurrentTCBConst>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	f01e 0f10 	tst.w	lr, #16
 8003470:	bf08      	it	eq
 8003472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800347a:	6010      	str	r0, [r2, #0]
 800347c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003480:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003484:	f380 8811 	msr	BASEPRI, r0
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f7ff fcd0 	bl	8002e34 <vTaskSwitchContext>
 8003494:	f04f 0000 	mov.w	r0, #0
 8003498:	f380 8811 	msr	BASEPRI, r0
 800349c:	bc09      	pop	{r0, r3}
 800349e:	6819      	ldr	r1, [r3, #0]
 80034a0:	6808      	ldr	r0, [r1, #0]
 80034a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a6:	f01e 0f10 	tst.w	lr, #16
 80034aa:	bf08      	it	eq
 80034ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80034b0:	f380 8809 	msr	PSP, r0
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	f3af 8000 	nop.w

080034c0 <pxCurrentTCBConst>:
 80034c0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80034c4:	bf00      	nop
 80034c6:	bf00      	nop

080034c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
	__asm volatile
 80034ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d2:	f383 8811 	msr	BASEPRI, r3
 80034d6:	f3bf 8f6f 	isb	sy
 80034da:	f3bf 8f4f 	dsb	sy
 80034de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80034e0:	f7ff fbf0 	bl	8002cc4 <xTaskIncrementTick>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80034ea:	4b06      	ldr	r3, [pc, #24]	; (8003504 <SysTick_Handler+0x3c>)
 80034ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	2300      	movs	r3, #0
 80034f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	e000ed04 	.word	0xe000ed04

08003508 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800350c:	4b0b      	ldr	r3, [pc, #44]	; (800353c <vPortSetupTimerInterrupt+0x34>)
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003512:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <vPortSetupTimerInterrupt+0x38>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003518:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <vPortSetupTimerInterrupt+0x3c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a0a      	ldr	r2, [pc, #40]	; (8003548 <vPortSetupTimerInterrupt+0x40>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	099b      	lsrs	r3, r3, #6
 8003524:	4a09      	ldr	r2, [pc, #36]	; (800354c <vPortSetupTimerInterrupt+0x44>)
 8003526:	3b01      	subs	r3, #1
 8003528:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800352a:	4b04      	ldr	r3, [pc, #16]	; (800353c <vPortSetupTimerInterrupt+0x34>)
 800352c:	2207      	movs	r2, #7
 800352e:	601a      	str	r2, [r3, #0]
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	e000e010 	.word	0xe000e010
 8003540:	e000e018 	.word	0xe000e018
 8003544:	20000000 	.word	0x20000000
 8003548:	10624dd3 	.word	0x10624dd3
 800354c:	e000e014 	.word	0xe000e014

08003550 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003550:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003560 <vPortEnableVFP+0x10>
 8003554:	6801      	ldr	r1, [r0, #0]
 8003556:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800355a:	6001      	str	r1, [r0, #0]
 800355c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800355e:	bf00      	nop
 8003560:	e000ed88 	.word	0xe000ed88

08003564 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	; 0x28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800356c:	2300      	movs	r3, #0
 800356e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003570:	f7ff fafe 	bl	8002b70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003574:	4b57      	ldr	r3, [pc, #348]	; (80036d4 <pvPortMalloc+0x170>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800357c:	f000 f90c 	bl	8003798 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003580:	4b55      	ldr	r3, [pc, #340]	; (80036d8 <pvPortMalloc+0x174>)
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4013      	ands	r3, r2
 8003588:	2b00      	cmp	r3, #0
 800358a:	f040 808c 	bne.w	80036a6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01c      	beq.n	80035ce <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003594:	2208      	movs	r2, #8
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4413      	add	r3, r2
 800359a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d013      	beq.n	80035ce <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f023 0307 	bic.w	r3, r3, #7
 80035ac:	3308      	adds	r3, #8
 80035ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d009      	beq.n	80035ce <pvPortMalloc+0x6a>
	__asm volatile
 80035ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035be:	f383 8811 	msr	BASEPRI, r3
 80035c2:	f3bf 8f6f 	isb	sy
 80035c6:	f3bf 8f4f 	dsb	sy
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	e7fe      	b.n	80035cc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d068      	beq.n	80036a6 <pvPortMalloc+0x142>
 80035d4:	4b41      	ldr	r3, [pc, #260]	; (80036dc <pvPortMalloc+0x178>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d863      	bhi.n	80036a6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80035de:	4b40      	ldr	r3, [pc, #256]	; (80036e0 <pvPortMalloc+0x17c>)
 80035e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80035e2:	4b3f      	ldr	r3, [pc, #252]	; (80036e0 <pvPortMalloc+0x17c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80035e8:	e004      	b.n	80035f4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d903      	bls.n	8003606 <pvPortMalloc+0xa2>
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f1      	bne.n	80035ea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003606:	4b33      	ldr	r3, [pc, #204]	; (80036d4 <pvPortMalloc+0x170>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360c:	429a      	cmp	r2, r3
 800360e:	d04a      	beq.n	80036a6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2208      	movs	r2, #8
 8003616:	4413      	add	r3, r2
 8003618:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	1ad2      	subs	r2, r2, r3
 800362a:	2308      	movs	r3, #8
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	429a      	cmp	r2, r3
 8003630:	d91e      	bls.n	8003670 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4413      	add	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	2b00      	cmp	r3, #0
 8003642:	d009      	beq.n	8003658 <pvPortMalloc+0xf4>
 8003644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	e7fe      	b.n	8003656 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	1ad2      	subs	r2, r2, r3
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800366a:	69b8      	ldr	r0, [r7, #24]
 800366c:	f000 f8f6 	bl	800385c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003670:	4b1a      	ldr	r3, [pc, #104]	; (80036dc <pvPortMalloc+0x178>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	4a18      	ldr	r2, [pc, #96]	; (80036dc <pvPortMalloc+0x178>)
 800367c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800367e:	4b17      	ldr	r3, [pc, #92]	; (80036dc <pvPortMalloc+0x178>)
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	4b18      	ldr	r3, [pc, #96]	; (80036e4 <pvPortMalloc+0x180>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d203      	bcs.n	8003692 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800368a:	4b14      	ldr	r3, [pc, #80]	; (80036dc <pvPortMalloc+0x178>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a15      	ldr	r2, [pc, #84]	; (80036e4 <pvPortMalloc+0x180>)
 8003690:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <pvPortMalloc+0x174>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	431a      	orrs	r2, r3
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80036a6:	f7ff fa71 	bl	8002b8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d009      	beq.n	80036c8 <pvPortMalloc+0x164>
 80036b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	e7fe      	b.n	80036c6 <pvPortMalloc+0x162>
	return pvReturn;
 80036c8:	69fb      	ldr	r3, [r7, #28]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3728      	adds	r7, #40	; 0x28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20003fbc 	.word	0x20003fbc
 80036d8:	20003fc8 	.word	0x20003fc8
 80036dc:	20003fc0 	.word	0x20003fc0
 80036e0:	20003fb4 	.word	0x20003fb4
 80036e4:	20003fc4 	.word	0x20003fc4

080036e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d046      	beq.n	8003788 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80036fa:	2308      	movs	r3, #8
 80036fc:	425b      	negs	r3, r3
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4413      	add	r3, r2
 8003702:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	4b20      	ldr	r3, [pc, #128]	; (8003790 <vPortFree+0xa8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4013      	ands	r3, r2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d109      	bne.n	800372a <vPortFree+0x42>
 8003716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371a:	f383 8811 	msr	BASEPRI, r3
 800371e:	f3bf 8f6f 	isb	sy
 8003722:	f3bf 8f4f 	dsb	sy
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	e7fe      	b.n	8003728 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d009      	beq.n	8003746 <vPortFree+0x5e>
 8003732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003736:	f383 8811 	msr	BASEPRI, r3
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	60bb      	str	r3, [r7, #8]
 8003744:	e7fe      	b.n	8003744 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	4b11      	ldr	r3, [pc, #68]	; (8003790 <vPortFree+0xa8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4013      	ands	r3, r2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d019      	beq.n	8003788 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d115      	bne.n	8003788 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <vPortFree+0xa8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	43db      	mvns	r3, r3
 8003766:	401a      	ands	r2, r3
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800376c:	f7ff fa00 	bl	8002b70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	4b07      	ldr	r3, [pc, #28]	; (8003794 <vPortFree+0xac>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4413      	add	r3, r2
 800377a:	4a06      	ldr	r2, [pc, #24]	; (8003794 <vPortFree+0xac>)
 800377c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800377e:	6938      	ldr	r0, [r7, #16]
 8003780:	f000 f86c 	bl	800385c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003784:	f7ff fa02 	bl	8002b8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003788:	bf00      	nop
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20003fc8 	.word	0x20003fc8
 8003794:	20003fc0 	.word	0x20003fc0

08003798 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800379e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80037a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80037a4:	4b27      	ldr	r3, [pc, #156]	; (8003844 <prvHeapInit+0xac>)
 80037a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00c      	beq.n	80037cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	3307      	adds	r3, #7
 80037b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0307 	bic.w	r3, r3, #7
 80037be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	4a1f      	ldr	r2, [pc, #124]	; (8003844 <prvHeapInit+0xac>)
 80037c8:	4413      	add	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80037d0:	4a1d      	ldr	r2, [pc, #116]	; (8003848 <prvHeapInit+0xb0>)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80037d6:	4b1c      	ldr	r3, [pc, #112]	; (8003848 <prvHeapInit+0xb0>)
 80037d8:	2200      	movs	r2, #0
 80037da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	4413      	add	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80037e4:	2208      	movs	r2, #8
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 0307 	bic.w	r3, r3, #7
 80037f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4a15      	ldr	r2, [pc, #84]	; (800384c <prvHeapInit+0xb4>)
 80037f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80037fa:	4b14      	ldr	r3, [pc, #80]	; (800384c <prvHeapInit+0xb4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2200      	movs	r2, #0
 8003800:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003802:	4b12      	ldr	r3, [pc, #72]	; (800384c <prvHeapInit+0xb4>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	1ad2      	subs	r2, r2, r3
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003818:	4b0c      	ldr	r3, [pc, #48]	; (800384c <prvHeapInit+0xb4>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	4a0a      	ldr	r2, [pc, #40]	; (8003850 <prvHeapInit+0xb8>)
 8003826:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	4a09      	ldr	r2, [pc, #36]	; (8003854 <prvHeapInit+0xbc>)
 800382e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003830:	4b09      	ldr	r3, [pc, #36]	; (8003858 <prvHeapInit+0xc0>)
 8003832:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003836:	601a      	str	r2, [r3, #0]
}
 8003838:	bf00      	nop
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	200003b4 	.word	0x200003b4
 8003848:	20003fb4 	.word	0x20003fb4
 800384c:	20003fbc 	.word	0x20003fbc
 8003850:	20003fc4 	.word	0x20003fc4
 8003854:	20003fc0 	.word	0x20003fc0
 8003858:	20003fc8 	.word	0x20003fc8

0800385c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003864:	4b28      	ldr	r3, [pc, #160]	; (8003908 <prvInsertBlockIntoFreeList+0xac>)
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	e002      	b.n	8003870 <prvInsertBlockIntoFreeList+0x14>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	429a      	cmp	r2, r3
 8003878:	d8f7      	bhi.n	800386a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	4413      	add	r3, r2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	429a      	cmp	r2, r3
 800388a:	d108      	bne.n	800389e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	441a      	add	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	441a      	add	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d118      	bne.n	80038e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	4b15      	ldr	r3, [pc, #84]	; (800390c <prvInsertBlockIntoFreeList+0xb0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d00d      	beq.n	80038da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	441a      	add	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	e008      	b.n	80038ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80038da:	4b0c      	ldr	r3, [pc, #48]	; (800390c <prvInsertBlockIntoFreeList+0xb0>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	e003      	b.n	80038ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d002      	beq.n	80038fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	20003fb4 	.word	0x20003fb4
 800390c:	20003fbc 	.word	0x20003fbc

08003910 <__libc_init_array>:
 8003910:	b570      	push	{r4, r5, r6, lr}
 8003912:	4e0d      	ldr	r6, [pc, #52]	; (8003948 <__libc_init_array+0x38>)
 8003914:	4c0d      	ldr	r4, [pc, #52]	; (800394c <__libc_init_array+0x3c>)
 8003916:	1ba4      	subs	r4, r4, r6
 8003918:	10a4      	asrs	r4, r4, #2
 800391a:	2500      	movs	r5, #0
 800391c:	42a5      	cmp	r5, r4
 800391e:	d109      	bne.n	8003934 <__libc_init_array+0x24>
 8003920:	4e0b      	ldr	r6, [pc, #44]	; (8003950 <__libc_init_array+0x40>)
 8003922:	4c0c      	ldr	r4, [pc, #48]	; (8003954 <__libc_init_array+0x44>)
 8003924:	f000 f820 	bl	8003968 <_init>
 8003928:	1ba4      	subs	r4, r4, r6
 800392a:	10a4      	asrs	r4, r4, #2
 800392c:	2500      	movs	r5, #0
 800392e:	42a5      	cmp	r5, r4
 8003930:	d105      	bne.n	800393e <__libc_init_array+0x2e>
 8003932:	bd70      	pop	{r4, r5, r6, pc}
 8003934:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003938:	4798      	blx	r3
 800393a:	3501      	adds	r5, #1
 800393c:	e7ee      	b.n	800391c <__libc_init_array+0xc>
 800393e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003942:	4798      	blx	r3
 8003944:	3501      	adds	r5, #1
 8003946:	e7f2      	b.n	800392e <__libc_init_array+0x1e>
 8003948:	080039d0 	.word	0x080039d0
 800394c:	080039d0 	.word	0x080039d0
 8003950:	080039d0 	.word	0x080039d0
 8003954:	080039d4 	.word	0x080039d4

08003958 <memset>:
 8003958:	4402      	add	r2, r0
 800395a:	4603      	mov	r3, r0
 800395c:	4293      	cmp	r3, r2
 800395e:	d100      	bne.n	8003962 <memset+0xa>
 8003960:	4770      	bx	lr
 8003962:	f803 1b01 	strb.w	r1, [r3], #1
 8003966:	e7f9      	b.n	800395c <memset+0x4>

08003968 <_init>:
 8003968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396a:	bf00      	nop
 800396c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396e:	bc08      	pop	{r3}
 8003970:	469e      	mov	lr, r3
 8003972:	4770      	bx	lr

08003974 <_fini>:
 8003974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003976:	bf00      	nop
 8003978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397a:	bc08      	pop	{r3}
 800397c:	469e      	mov	lr, r3
 800397e:	4770      	bx	lr
