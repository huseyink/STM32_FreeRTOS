
FreeRTOS_6_EventGroups.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005504  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08005694  08005694  00015694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005800  08005800  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005800  08005800  00015800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005808  08005808  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005808  08005808  00015808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800580c  0800580c  0001580c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004600  20000014  08005824  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004614  08005824  00024614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ce6  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ee2  00000000  00000000  00035d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001238  00000000  00000000  00038c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010e0  00000000  00000000  00039e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022a9b  00000000  00000000  0003af28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000df0f  00000000  00000000  0005d9c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1fc4  00000000  00000000  0006b8d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013d896  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bac  00000000  00000000  0013d914  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800567c 	.word	0x0800567c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800567c 	.word	0x0800567c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20000030 	.word	0x20000030
 8000510:	20000084 	.word	0x20000084

08000514 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4a07      	ldr	r2, [pc, #28]	; (8000540 <vApplicationGetTimerTaskMemory+0x2c>)
 8000524:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <vApplicationGetTimerTaskMemory+0x30>)
 800052a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000532:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000534:	bf00      	nop
 8000536:	3714      	adds	r7, #20
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	20000284 	.word	0x20000284
 8000544:	200002d8 	.word	0x200002d8

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b08a      	sub	sp, #40	; 0x28
 800054c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fb31 	bl	8000bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f831 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f8c3 	bl	80006e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800055a:	f000 f897 	bl	800068c <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of BitSetter */
  osThreadDef(BitSetter, EventBitSetTask, osPriorityNormal, 0, 128);
 800055e:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <main+0x5c>)
 8000560:	1d3c      	adds	r4, r7, #4
 8000562:	461d      	mov	r5, r3
 8000564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000568:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800056c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BitSetterHandle = osThreadCreate(osThread(BitSetter), NULL);
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f002 f9ac 	bl	80028d2 <osThreadCreate>
 800057a:	4602      	mov	r2, r0
 800057c:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <main+0x60>)
 800057e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  xEventGroup = xEventGroupCreate();
 8000580:	f002 f9f3 	bl	800296a <xEventGroupCreate>
 8000584:	4602      	mov	r2, r0
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <main+0x64>)
 8000588:	601a      	str	r2, [r3, #0]

  xTaskCreate(EventBitReadTask, "BitReader", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800058a:	2300      	movs	r3, #0
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2301      	movs	r3, #1
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	2280      	movs	r2, #128	; 0x80
 8000596:	4906      	ldr	r1, [pc, #24]	; (80005b0 <main+0x68>)
 8000598:	4806      	ldr	r0, [pc, #24]	; (80005b4 <main+0x6c>)
 800059a:	f003 f961 	bl	8003860 <xTaskCreate>
//  xTaskCreate(InterruptTask, "InterruptTask", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800059e:	f002 f991 	bl	80028c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <main+0x5a>
 80005a4:	080056ac 	.word	0x080056ac
 80005a8:	2000454c 	.word	0x2000454c
 80005ac:	20004548 	.word	0x20004548
 80005b0:	08005694 	.word	0x08005694
 80005b4:	080007b5 	.word	0x080007b5

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	; 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f005 f84f 	bl	800566a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	4b28      	ldr	r3, [pc, #160]	; (8000684 <SystemClock_Config+0xcc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a27      	ldr	r2, [pc, #156]	; (8000684 <SystemClock_Config+0xcc>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b25      	ldr	r3, [pc, #148]	; (8000684 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b22      	ldr	r3, [pc, #136]	; (8000688 <SystemClock_Config+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <SystemClock_Config+0xd0>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800062c:	23a8      	movs	r3, #168	; 0xa8
 800062e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fdab 	bl	8001198 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000648:	f000 f97e 	bl	8000948 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2302      	movs	r3, #2
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000658:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800065c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800065e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000662:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2105      	movs	r1, #5
 800066a:	4618      	mov	r0, r3
 800066c:	f001 f804 	bl	8001678 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000676:	f000 f967 	bl	8000948 <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3750      	adds	r7, #80	; 0x50
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <MX_USART2_UART_Init+0x50>)
 8000694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 8000698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800069c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006c4:	f001 fc3a 	bl	8001f3c <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ce:	f000 f93b 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20004550 	.word	0x20004550
 80006dc:	40004400 	.word	0x40004400

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 030c 	add.w	r3, r7, #12
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <MX_GPIO_Init+0xc4>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a29      	ldr	r2, [pc, #164]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a22      	ldr	r2, [pc, #136]	; (80007a4 <MX_GPIO_Init+0xc4>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000738:	f043 0308 	orr.w	r3, r3, #8
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_GPIO_Init+0xc4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0308 	and.w	r3, r3, #8
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USER_LED_G_Pin|USER_LED_O_Pin|USER_LED_R_Pin|USER_LED_B_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000750:	4815      	ldr	r0, [pc, #84]	; (80007a8 <MX_GPIO_Init+0xc8>)
 8000752:	f000 fced 	bl	8001130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000756:	2301      	movs	r3, #1
 8000758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_GPIO_Init+0xcc>)
 800075c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800075e:	2302      	movs	r3, #2
 8000760:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	4619      	mov	r1, r3
 8000768:	4811      	ldr	r0, [pc, #68]	; (80007b0 <MX_GPIO_Init+0xd0>)
 800076a:	f000 fb47 	bl	8000dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_G_Pin USER_LED_O_Pin USER_LED_R_Pin USER_LED_B_Pin */
  GPIO_InitStruct.Pin = USER_LED_G_Pin|USER_LED_O_Pin|USER_LED_R_Pin|USER_LED_B_Pin;
 800076e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000772:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	4619      	mov	r1, r3
 8000786:	4808      	ldr	r0, [pc, #32]	; (80007a8 <MX_GPIO_Init+0xc8>)
 8000788:	f000 fb38 	bl	8000dfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2105      	movs	r1, #5
 8000790:	2006      	movs	r0, #6
 8000792:	f000 fb09 	bl	8000da8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000796:	2006      	movs	r0, #6
 8000798:	f000 fb22 	bl	8000de0 <HAL_NVIC_EnableIRQ>

}
 800079c:	bf00      	nop
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020c00 	.word	0x40020c00
 80007ac:	10110000 	.word	0x10110000
 80007b0:	40020000 	.word	0x40020000

080007b4 <EventBitReadTask>:

/* USER CODE BEGIN 4 */

void EventBitReadTask(void* argument)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af02      	add	r7, sp, #8
 80007ba:	6078      	str	r0, [r7, #4]
	EventBits_t xEventGroupValue;

	const EventBits_t xBitsToWaitFor = ( mainFIRST_TASK_BIT  |
 80007bc:	2307      	movs	r3, #7
 80007be:	60fb      	str	r3, [r7, #12]
										 mainSECOND_TASK_BIT |
										 mainISR_BIT );
	for( ;; )
	{
		/* Block to wait for event bits to become set within the event group. */
		xEventGroupValue = xEventGroupWaitBits( /* The event group to read. */
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <EventBitReadTask+0x54>)
 80007c2:	6818      	ldr	r0, [r3, #0]
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2300      	movs	r3, #0
 80007cc:	2201      	movs	r2, #1
 80007ce:	68f9      	ldr	r1, [r7, #12]
 80007d0:	f002 f8e6 	bl	80029a0 <xEventGroupWaitBits>
 80007d4:	60b8      	str	r0, [r7, #8]
												pdFALSE,
												/* Don't time out. */
												portMAX_DELAY );

		/* Print a message for each bit that was set. */
		if( ( xEventGroupValue & mainFIRST_TASK_BIT ) != 0 )
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d002      	beq.n	80007e6 <EventBitReadTask+0x32>
		{
			UartPrint( "Bit reading task -\t Event bit 0 was set\r\n" );
 80007e0:	480a      	ldr	r0, [pc, #40]	; (800080c <EventBitReadTask+0x58>)
 80007e2:	f000 f865 	bl	80008b0 <UartPrint>
		}
		if( ( xEventGroupValue & mainSECOND_TASK_BIT ) != 0 )
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	f003 0302 	and.w	r3, r3, #2
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d002      	beq.n	80007f6 <EventBitReadTask+0x42>
		{
			UartPrint( "Bit reading task -\t Event bit 1 was set\r\n" );
 80007f0:	4807      	ldr	r0, [pc, #28]	; (8000810 <EventBitReadTask+0x5c>)
 80007f2:	f000 f85d 	bl	80008b0 <UartPrint>
		}
		if( ( xEventGroupValue & mainISR_BIT ) != 0 )
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	f003 0304 	and.w	r3, r3, #4
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d0df      	beq.n	80007c0 <EventBitReadTask+0xc>
		{
			UartPrint( "Bit reading task -\t Event bit 2 was set\r\n" );
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <EventBitReadTask+0x60>)
 8000802:	f000 f855 	bl	80008b0 <UartPrint>
		xEventGroupValue = xEventGroupWaitBits( /* The event group to read. */
 8000806:	e7db      	b.n	80007c0 <EventBitReadTask+0xc>
 8000808:	20004548 	.word	0x20004548
 800080c:	080056c8 	.word	0x080056c8
 8000810:	080056f4 	.word	0x080056f4
 8000814:	08005720 	.word	0x08005720

08000818 <InterruptTask>:
		}
	}
}

void InterruptTask(void *pvParameter1, uint32_t ulParameter2)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
	HAL_GPIO_TogglePin(USER_LED_G_GPIO_Port, USER_LED_G_Pin);
 8000822:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <InterruptTask+0x24>)
 8000828:	f000 fc9b 	bl	8001162 <HAL_GPIO_TogglePin>
	UartPrint((char*)pvParameter1);
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f000 f83f 	bl	80008b0 <UartPrint>

}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40020c00 	.word	0x40020c00

08000840 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0

	if( __HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != 0 )
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <EXTI0_IRQHandler+0x58>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	2b00      	cmp	r3, #0
 8000850:	d01d      	beq.n	800088e <EXTI0_IRQHandler+0x4e>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <EXTI0_IRQHandler+0x58>)
 8000854:	2201      	movs	r2, #1
 8000856:	615a      	str	r2, [r3, #20]

		static const char *pcString = "Bit setting ISR -\t about to set bit 2.\r\n";
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]

		xTimerPendFunctionCallFromISR( InterruptTask,
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <EXTI0_IRQHandler+0x5c>)
 800085e:	6819      	ldr	r1, [r3, #0]
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	480e      	ldr	r0, [pc, #56]	; (80008a0 <EXTI0_IRQHandler+0x60>)
 8000866:	f004 fa99 	bl	8004d9c <xTimerPendFunctionCallFromISR>
										( void * ) pcString,
										0,
										&xHigherPriorityTaskWoken );

		xEventGroupSetBitsFromISR( xEventGroup, mainISR_BIT, &xHigherPriorityTaskWoken );
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <EXTI0_IRQHandler+0x64>)
 800086c:	6819      	ldr	r1, [r3, #0]
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2204      	movs	r2, #4
 8000872:	480d      	ldr	r0, [pc, #52]	; (80008a8 <EXTI0_IRQHandler+0x68>)
 8000874:	f004 fa92 	bl	8004d9c <xTimerPendFunctionCallFromISR>


		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d007      	beq.n	800088e <EXTI0_IRQHandler+0x4e>
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <EXTI0_IRQHandler+0x6c>)
 8000880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	f3bf 8f4f 	dsb	sy
 800088a:	f3bf 8f6f 	isb	sy
	}


}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40013c00 	.word	0x40013c00
 800089c:	20000000 	.word	0x20000000
 80008a0:	08000819 	.word	0x08000819
 80008a4:	20004548 	.word	0x20004548
 80008a8:	08002c47 	.word	0x08002c47
 80008ac:	e000ed04 	.word	0xe000ed04

080008b0 <UartPrint>:

void UartPrint(char* message)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 20);
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff fc89 	bl	80001d0 <strlen>
 80008be:	4603      	mov	r3, r0
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	2314      	movs	r3, #20
 80008c4:	6879      	ldr	r1, [r7, #4]
 80008c6:	4803      	ldr	r0, [pc, #12]	; (80008d4 <UartPrint+0x24>)
 80008c8:	f001 fb85 	bl	8001fd6 <HAL_UART_Transmit>
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20004550 	.word	0x20004550

080008d8 <EventBitSetTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_EventBitSetTask */
void EventBitSetTask(void const * argument)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	const TickType_t xDelay200ms = pdMS_TO_TICKS( 1000UL );
 80008e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e4:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  /* Delay for a short while before starting the next loop. */
	  vTaskDelay( xDelay200ms );
 80008e6:	68f8      	ldr	r0, [r7, #12]
 80008e8:	f003 f8f0 	bl	8003acc <vTaskDelay>
	  /* Print out a message to say event bit 0 is about to be set by the task,
	  then set event bit 0. */
	  UartPrint( "Bit setting task -\t about to set bit 0.\r\n" );
 80008ec:	480a      	ldr	r0, [pc, #40]	; (8000918 <EventBitSetTask+0x40>)
 80008ee:	f7ff ffdf 	bl	80008b0 <UartPrint>
	  xEventGroupSetBits( xEventGroup, mainFIRST_TASK_BIT );
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <EventBitSetTask+0x44>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2101      	movs	r1, #1
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 f91b 	bl	8002b34 <xEventGroupSetBits>
	  /* Delay for a short while before setting the other bit. */
	  vTaskDelay( xDelay200ms );
 80008fe:	68f8      	ldr	r0, [r7, #12]
 8000900:	f003 f8e4 	bl	8003acc <vTaskDelay>
	  /* Print out a message to say event bit 1 is about to be set by the task,
	  then set event bit 1. */
	  UartPrint( "Bit setting task -\t about to set bit 1.\r\n" );
 8000904:	4806      	ldr	r0, [pc, #24]	; (8000920 <EventBitSetTask+0x48>)
 8000906:	f7ff ffd3 	bl	80008b0 <UartPrint>
	  xEventGroupSetBits( xEventGroup, mainSECOND_TASK_BIT );
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <EventBitSetTask+0x44>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2102      	movs	r1, #2
 8000910:	4618      	mov	r0, r3
 8000912:	f002 f90f 	bl	8002b34 <xEventGroupSetBits>
	  vTaskDelay( xDelay200ms );
 8000916:	e7e6      	b.n	80008e6 <EventBitSetTask+0xe>
 8000918:	0800574c 	.word	0x0800574c
 800091c:	20004548 	.word	0x20004548
 8000920:	08005778 	.word	0x08005778

08000924 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d101      	bne.n	800093a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000936:	f000 f95f 	bl	8000bf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40010000 	.word	0x40010000

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
	...

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <HAL_MspInit+0x4c>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096c:	6453      	str	r3, [r2, #68]	; 0x44
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_MspInit+0x4c>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a19      	ldr	r2, [pc, #100]	; (8000a2c <HAL_UART_MspInit+0x84>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d12b      	bne.n	8000a22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	4a17      	ldr	r2, [pc, #92]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d8:	6413      	str	r3, [r2, #64]	; 0x40
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a10      	ldr	r2, [pc, #64]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_UART_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a02:	230c      	movs	r3, #12
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a12:	2307      	movs	r3, #7
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <HAL_UART_MspInit+0x8c>)
 8000a1e:	f000 f9ed 	bl	8000dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	; 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40004400 	.word	0x40004400
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020000 	.word	0x40020000

08000a38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08c      	sub	sp, #48	; 0x30
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	2019      	movs	r0, #25
 8000a4e:	f000 f9ab 	bl	8000da8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a52:	2019      	movs	r0, #25
 8000a54:	f000 f9c4 	bl	8000de0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <HAL_InitTick+0xa4>)
 8000a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a60:	4a1e      	ldr	r2, [pc, #120]	; (8000adc <HAL_InitTick+0xa4>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6453      	str	r3, [r2, #68]	; 0x44
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <HAL_InitTick+0xa4>)
 8000a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a74:	f107 0210 	add.w	r2, r7, #16
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 ffec 	bl	8001a5c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a84:	f000 ffd6 	bl	8001a34 <HAL_RCC_GetPCLK2Freq>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a90:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <HAL_InitTick+0xa8>)
 8000a92:	fba2 2303 	umull	r2, r3, r2, r3
 8000a96:	0c9b      	lsrs	r3, r3, #18
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <HAL_InitTick+0xac>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <HAL_InitTick+0xb0>)
 8000aa0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_InitTick+0xac>)
 8000aa4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aa8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <HAL_InitTick+0xac>)
 8000aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_InitTick+0xac>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_InitTick+0xac>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <HAL_InitTick+0xac>)
 8000abe:	f000 ffff 	bl	8001ac0 <HAL_TIM_Base_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d104      	bne.n	8000ad2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ac8:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <HAL_InitTick+0xac>)
 8000aca:	f001 f82e 	bl	8001b2a <HAL_TIM_Base_Start_IT>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	e000      	b.n	8000ad4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3730      	adds	r7, #48	; 0x30
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	431bde83 	.word	0x431bde83
 8000ae4:	20004590 	.word	0x20004590
 8000ae8:	40010000 	.word	0x40010000

08000aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b26:	f001 f824 	bl	8001b72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20004590 	.word	0x20004590

08000b34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <SystemInit+0x28>)
 8000b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b3e:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <SystemInit+0x28>)
 8000b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <SystemInit+0x28>)
 8000b4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b4e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b66:	e003      	b.n	8000b70 <LoopCopyDataInit>

08000b68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b6e:	3104      	adds	r1, #4

08000b70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b70:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b78:	d3f6      	bcc.n	8000b68 <CopyDataInit>
  ldr  r2, =_sbss
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b7c:	e002      	b.n	8000b84 <LoopFillZerobss>

08000b7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b80:	f842 3b04 	str.w	r3, [r2], #4

08000b84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b88:	d3f9      	bcc.n	8000b7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b8a:	f7ff ffd3 	bl	8000b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f004 fd3d 	bl	800560c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b92:	f7ff fcd9 	bl	8000548 <main>
  bx  lr    
 8000b96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b98:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b9c:	08005810 	.word	0x08005810
  ldr  r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ba4:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000ba8:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000bac:	20004614 	.word	0x20004614

08000bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC_IRQHandler>
	...

08000bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <HAL_Init+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <HAL_Init+0x40>)
 8000bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_Init+0x40>)
 8000bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_Init+0x40>)
 8000bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 f8d8 	bl	8000d92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff ff28 	bl	8000a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be8:	f7ff feb6 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023c00 	.word	0x40023c00

08000bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x20>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_IncTick+0x24>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_IncTick+0x24>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	2000000c 	.word	0x2000000c
 8000c1c:	200045d0 	.word	0x200045d0

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_GetTick+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	200045d0 	.word	0x200045d0

08000c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c54:	4013      	ands	r3, r2
 8000c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	60d3      	str	r3, [r2, #12]
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <__NVIC_GetPriorityGrouping+0x18>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	f003 0307 	and.w	r3, r3, #7
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	db0b      	blt.n	8000cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	f003 021f 	and.w	r2, r3, #31
 8000cb4:	4907      	ldr	r1, [pc, #28]	; (8000cd4 <__NVIC_EnableIRQ+0x38>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	095b      	lsrs	r3, r3, #5
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e100 	.word	0xe000e100

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db0a      	blt.n	8000d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	; (8000d24 <__NVIC_SetPriority+0x4c>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d00:	e00a      	b.n	8000d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4908      	ldr	r1, [pc, #32]	; (8000d28 <__NVIC_SetPriority+0x50>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	3b04      	subs	r3, #4
 8000d10:	0112      	lsls	r2, r2, #4
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	440b      	add	r3, r1
 8000d16:	761a      	strb	r2, [r3, #24]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000e100 	.word	0xe000e100
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
         );
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	; 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ff4c 	bl	8000c38 <__NVIC_SetPriorityGrouping>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dba:	f7ff ff61 	bl	8000c80 <__NVIC_GetPriorityGrouping>
 8000dbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	68b9      	ldr	r1, [r7, #8]
 8000dc4:	6978      	ldr	r0, [r7, #20]
 8000dc6:	f7ff ffb1 	bl	8000d2c <NVIC_EncodePriority>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff80 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000dd8:	bf00      	nop
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff54 	bl	8000c9c <__NVIC_EnableIRQ>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
 8000e16:	e16b      	b.n	80010f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e18:	2201      	movs	r2, #1
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	f040 815a 	bne.w	80010ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d00b      	beq.n	8000e56 <HAL_GPIO_Init+0x5a>
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d007      	beq.n	8000e56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e4a:	2b11      	cmp	r3, #17
 8000e4c:	d003      	beq.n	8000e56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2b12      	cmp	r3, #18
 8000e54:	d130      	bne.n	8000eb8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	2203      	movs	r2, #3
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	68da      	ldr	r2, [r3, #12]
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	091b      	lsrs	r3, r3, #4
 8000ea2:	f003 0201 	and.w	r2, r3, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0xfc>
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b12      	cmp	r3, #18
 8000ef6:	d123      	bne.n	8000f40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	08da      	lsrs	r2, r3, #3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3208      	adds	r2, #8
 8000f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	f003 0307 	and.w	r3, r3, #7
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	220f      	movs	r2, #15
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	691a      	ldr	r2, [r3, #16]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	08da      	lsrs	r2, r3, #3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3208      	adds	r2, #8
 8000f3a:	69b9      	ldr	r1, [r7, #24]
 8000f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0203 	and.w	r2, r3, #3
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 80b4 	beq.w	80010ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b5f      	ldr	r3, [pc, #380]	; (8001104 <HAL_GPIO_Init+0x308>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a5e      	ldr	r2, [pc, #376]	; (8001104 <HAL_GPIO_Init+0x308>)
 8000f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b5c      	ldr	r3, [pc, #368]	; (8001104 <HAL_GPIO_Init+0x308>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f9e:	4a5a      	ldr	r2, [pc, #360]	; (8001108 <HAL_GPIO_Init+0x30c>)
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	089b      	lsrs	r3, r3, #2
 8000fa4:	3302      	adds	r3, #2
 8000fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	220f      	movs	r2, #15
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a51      	ldr	r2, [pc, #324]	; (800110c <HAL_GPIO_Init+0x310>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d02b      	beq.n	8001022 <HAL_GPIO_Init+0x226>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a50      	ldr	r2, [pc, #320]	; (8001110 <HAL_GPIO_Init+0x314>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d025      	beq.n	800101e <HAL_GPIO_Init+0x222>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4f      	ldr	r2, [pc, #316]	; (8001114 <HAL_GPIO_Init+0x318>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d01f      	beq.n	800101a <HAL_GPIO_Init+0x21e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a4e      	ldr	r2, [pc, #312]	; (8001118 <HAL_GPIO_Init+0x31c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d019      	beq.n	8001016 <HAL_GPIO_Init+0x21a>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4d      	ldr	r2, [pc, #308]	; (800111c <HAL_GPIO_Init+0x320>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d013      	beq.n	8001012 <HAL_GPIO_Init+0x216>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4c      	ldr	r2, [pc, #304]	; (8001120 <HAL_GPIO_Init+0x324>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d00d      	beq.n	800100e <HAL_GPIO_Init+0x212>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4b      	ldr	r2, [pc, #300]	; (8001124 <HAL_GPIO_Init+0x328>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d007      	beq.n	800100a <HAL_GPIO_Init+0x20e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4a      	ldr	r2, [pc, #296]	; (8001128 <HAL_GPIO_Init+0x32c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d101      	bne.n	8001006 <HAL_GPIO_Init+0x20a>
 8001002:	2307      	movs	r3, #7
 8001004:	e00e      	b.n	8001024 <HAL_GPIO_Init+0x228>
 8001006:	2308      	movs	r3, #8
 8001008:	e00c      	b.n	8001024 <HAL_GPIO_Init+0x228>
 800100a:	2306      	movs	r3, #6
 800100c:	e00a      	b.n	8001024 <HAL_GPIO_Init+0x228>
 800100e:	2305      	movs	r3, #5
 8001010:	e008      	b.n	8001024 <HAL_GPIO_Init+0x228>
 8001012:	2304      	movs	r3, #4
 8001014:	e006      	b.n	8001024 <HAL_GPIO_Init+0x228>
 8001016:	2303      	movs	r3, #3
 8001018:	e004      	b.n	8001024 <HAL_GPIO_Init+0x228>
 800101a:	2302      	movs	r3, #2
 800101c:	e002      	b.n	8001024 <HAL_GPIO_Init+0x228>
 800101e:	2301      	movs	r3, #1
 8001020:	e000      	b.n	8001024 <HAL_GPIO_Init+0x228>
 8001022:	2300      	movs	r3, #0
 8001024:	69fa      	ldr	r2, [r7, #28]
 8001026:	f002 0203 	and.w	r2, r2, #3
 800102a:	0092      	lsls	r2, r2, #2
 800102c:	4093      	lsls	r3, r2
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001034:	4934      	ldr	r1, [pc, #208]	; (8001108 <HAL_GPIO_Init+0x30c>)
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	3302      	adds	r3, #2
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001042:	4b3a      	ldr	r3, [pc, #232]	; (800112c <HAL_GPIO_Init+0x330>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001066:	4a31      	ldr	r2, [pc, #196]	; (800112c <HAL_GPIO_Init+0x330>)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800106c:	4b2f      	ldr	r3, [pc, #188]	; (800112c <HAL_GPIO_Init+0x330>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001090:	4a26      	ldr	r2, [pc, #152]	; (800112c <HAL_GPIO_Init+0x330>)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001096:	4b25      	ldr	r3, [pc, #148]	; (800112c <HAL_GPIO_Init+0x330>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ba:	4a1c      	ldr	r2, [pc, #112]	; (800112c <HAL_GPIO_Init+0x330>)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <HAL_GPIO_Init+0x330>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010e4:	4a11      	ldr	r2, [pc, #68]	; (800112c <HAL_GPIO_Init+0x330>)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3301      	adds	r3, #1
 80010ee:	61fb      	str	r3, [r7, #28]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	2b0f      	cmp	r3, #15
 80010f4:	f67f ae90 	bls.w	8000e18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010f8:	bf00      	nop
 80010fa:	3724      	adds	r7, #36	; 0x24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	40023800 	.word	0x40023800
 8001108:	40013800 	.word	0x40013800
 800110c:	40020000 	.word	0x40020000
 8001110:	40020400 	.word	0x40020400
 8001114:	40020800 	.word	0x40020800
 8001118:	40020c00 	.word	0x40020c00
 800111c:	40021000 	.word	0x40021000
 8001120:	40021400 	.word	0x40021400
 8001124:	40021800 	.word	0x40021800
 8001128:	40021c00 	.word	0x40021c00
 800112c:	40013c00 	.word	0x40013c00

08001130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
 800113c:	4613      	mov	r3, r2
 800113e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001140:	787b      	ldrb	r3, [r7, #1]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800114c:	e003      	b.n	8001156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	041a      	lsls	r2, r3, #16
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	619a      	str	r2, [r3, #24]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	460b      	mov	r3, r1
 800116c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695a      	ldr	r2, [r3, #20]
 8001172:	887b      	ldrh	r3, [r7, #2]
 8001174:	401a      	ands	r2, r3
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	429a      	cmp	r2, r3
 800117a:	d104      	bne.n	8001186 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800117c:	887b      	ldrh	r3, [r7, #2]
 800117e:	041a      	lsls	r2, r3, #16
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001184:	e002      	b.n	800118c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001186:	887a      	ldrh	r2, [r7, #2]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	619a      	str	r2, [r3, #24]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e25b      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d075      	beq.n	80012a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011b6:	4ba3      	ldr	r3, [pc, #652]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d00c      	beq.n	80011dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011c2:	4ba0      	ldr	r3, [pc, #640]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d112      	bne.n	80011f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ce:	4b9d      	ldr	r3, [pc, #628]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011da:	d10b      	bne.n	80011f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011dc:	4b99      	ldr	r3, [pc, #612]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d05b      	beq.n	80012a0 <HAL_RCC_OscConfig+0x108>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d157      	bne.n	80012a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e236      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011fc:	d106      	bne.n	800120c <HAL_RCC_OscConfig+0x74>
 80011fe:	4b91      	ldr	r3, [pc, #580]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a90      	ldr	r2, [pc, #576]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e01d      	b.n	8001248 <HAL_RCC_OscConfig+0xb0>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001214:	d10c      	bne.n	8001230 <HAL_RCC_OscConfig+0x98>
 8001216:	4b8b      	ldr	r3, [pc, #556]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a8a      	ldr	r2, [pc, #552]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800121c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a87      	ldr	r2, [pc, #540]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e00b      	b.n	8001248 <HAL_RCC_OscConfig+0xb0>
 8001230:	4b84      	ldr	r3, [pc, #528]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a83      	ldr	r2, [pc, #524]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b81      	ldr	r3, [pc, #516]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a80      	ldr	r2, [pc, #512]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d013      	beq.n	8001278 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001250:	f7ff fce6 	bl	8000c20 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fce2 	bl	8000c20 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	; 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e1fb      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	4b76      	ldr	r3, [pc, #472]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f0      	beq.n	8001258 <HAL_RCC_OscConfig+0xc0>
 8001276:	e014      	b.n	80012a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff fcd2 	bl	8000c20 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001280:	f7ff fcce 	bl	8000c20 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b64      	cmp	r3, #100	; 0x64
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e1e7      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001292:	4b6c      	ldr	r3, [pc, #432]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0xe8>
 800129e:	e000      	b.n	80012a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d063      	beq.n	8001376 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ae:	4b65      	ldr	r3, [pc, #404]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00b      	beq.n	80012d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d11c      	bne.n	8001300 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012c6:	4b5f      	ldr	r3, [pc, #380]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d116      	bne.n	8001300 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d2:	4b5c      	ldr	r3, [pc, #368]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d005      	beq.n	80012ea <HAL_RCC_OscConfig+0x152>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d001      	beq.n	80012ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e1bb      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ea:	4b56      	ldr	r3, [pc, #344]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	4952      	ldr	r1, [pc, #328]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fe:	e03a      	b.n	8001376 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d020      	beq.n	800134a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001308:	4b4f      	ldr	r3, [pc, #316]	; (8001448 <HAL_RCC_OscConfig+0x2b0>)
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130e:	f7ff fc87 	bl	8000c20 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001316:	f7ff fc83 	bl	8000c20 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e19c      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001328:	4b46      	ldr	r3, [pc, #280]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001334:	4b43      	ldr	r3, [pc, #268]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4940      	ldr	r1, [pc, #256]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	4313      	orrs	r3, r2
 8001346:	600b      	str	r3, [r1, #0]
 8001348:	e015      	b.n	8001376 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800134a:	4b3f      	ldr	r3, [pc, #252]	; (8001448 <HAL_RCC_OscConfig+0x2b0>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001350:	f7ff fc66 	bl	8000c20 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001358:	f7ff fc62 	bl	8000c20 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e17b      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136a:	4b36      	ldr	r3, [pc, #216]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d030      	beq.n	80013e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d016      	beq.n	80013b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138a:	4b30      	ldr	r3, [pc, #192]	; (800144c <HAL_RCC_OscConfig+0x2b4>)
 800138c:	2201      	movs	r2, #1
 800138e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001390:	f7ff fc46 	bl	8000c20 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001398:	f7ff fc42 	bl	8000c20 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e15b      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013aa:	4b26      	ldr	r3, [pc, #152]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0x200>
 80013b6:	e015      	b.n	80013e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <HAL_RCC_OscConfig+0x2b4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013be:	f7ff fc2f 	bl	8000c20 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c6:	f7ff fc2b 	bl	8000c20 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e144      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d8:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80013da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f0      	bne.n	80013c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80a0 	beq.w	8001532 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10f      	bne.n	8001422 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_RCC_OscConfig+0x2ac>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800141e:	2301      	movs	r3, #1
 8001420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_RCC_OscConfig+0x2b8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142a:	2b00      	cmp	r3, #0
 800142c:	d121      	bne.n	8001472 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_RCC_OscConfig+0x2b8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_RCC_OscConfig+0x2b8>)
 8001434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800143a:	f7ff fbf1 	bl	8000c20 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001440:	e011      	b.n	8001466 <HAL_RCC_OscConfig+0x2ce>
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	42470000 	.word	0x42470000
 800144c:	42470e80 	.word	0x42470e80
 8001450:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001454:	f7ff fbe4 	bl	8000c20 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e0fd      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	4b81      	ldr	r3, [pc, #516]	; (800166c <HAL_RCC_OscConfig+0x4d4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d106      	bne.n	8001488 <HAL_RCC_OscConfig+0x2f0>
 800147a:	4b7d      	ldr	r3, [pc, #500]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 800147c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147e:	4a7c      	ldr	r2, [pc, #496]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6713      	str	r3, [r2, #112]	; 0x70
 8001486:	e01c      	b.n	80014c2 <HAL_RCC_OscConfig+0x32a>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2b05      	cmp	r3, #5
 800148e:	d10c      	bne.n	80014aa <HAL_RCC_OscConfig+0x312>
 8001490:	4b77      	ldr	r3, [pc, #476]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 8001492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001494:	4a76      	ldr	r2, [pc, #472]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 8001496:	f043 0304 	orr.w	r3, r3, #4
 800149a:	6713      	str	r3, [r2, #112]	; 0x70
 800149c:	4b74      	ldr	r3, [pc, #464]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 800149e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a0:	4a73      	ldr	r2, [pc, #460]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6713      	str	r3, [r2, #112]	; 0x70
 80014a8:	e00b      	b.n	80014c2 <HAL_RCC_OscConfig+0x32a>
 80014aa:	4b71      	ldr	r3, [pc, #452]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 80014ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ae:	4a70      	ldr	r2, [pc, #448]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 80014b0:	f023 0301 	bic.w	r3, r3, #1
 80014b4:	6713      	str	r3, [r2, #112]	; 0x70
 80014b6:	4b6e      	ldr	r3, [pc, #440]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 80014b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ba:	4a6d      	ldr	r2, [pc, #436]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 80014bc:	f023 0304 	bic.w	r3, r3, #4
 80014c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d015      	beq.n	80014f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ca:	f7ff fba9 	bl	8000c20 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d0:	e00a      	b.n	80014e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d2:	f7ff fba5 	bl	8000c20 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e0bc      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e8:	4b61      	ldr	r3, [pc, #388]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 80014ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0ee      	beq.n	80014d2 <HAL_RCC_OscConfig+0x33a>
 80014f4:	e014      	b.n	8001520 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f6:	f7ff fb93 	bl	8000c20 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014fc:	e00a      	b.n	8001514 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014fe:	f7ff fb8f 	bl	8000c20 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	f241 3288 	movw	r2, #5000	; 0x1388
 800150c:	4293      	cmp	r3, r2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e0a6      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001514:	4b56      	ldr	r3, [pc, #344]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1ee      	bne.n	80014fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001520:	7dfb      	ldrb	r3, [r7, #23]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d105      	bne.n	8001532 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001526:	4b52      	ldr	r3, [pc, #328]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a51      	ldr	r2, [pc, #324]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 800152c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 8092 	beq.w	8001660 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800153c:	4b4c      	ldr	r3, [pc, #304]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 030c 	and.w	r3, r3, #12
 8001544:	2b08      	cmp	r3, #8
 8001546:	d05c      	beq.n	8001602 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d141      	bne.n	80015d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001550:	4b48      	ldr	r3, [pc, #288]	; (8001674 <HAL_RCC_OscConfig+0x4dc>)
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001556:	f7ff fb63 	bl	8000c20 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155e:	f7ff fb5f 	bl	8000c20 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e078      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001570:	4b3f      	ldr	r3, [pc, #252]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1f0      	bne.n	800155e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69da      	ldr	r2, [r3, #28]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	431a      	orrs	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	019b      	lsls	r3, r3, #6
 800158c:	431a      	orrs	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001592:	085b      	lsrs	r3, r3, #1
 8001594:	3b01      	subs	r3, #1
 8001596:	041b      	lsls	r3, r3, #16
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159e:	061b      	lsls	r3, r3, #24
 80015a0:	4933      	ldr	r1, [pc, #204]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015a6:	4b33      	ldr	r3, [pc, #204]	; (8001674 <HAL_RCC_OscConfig+0x4dc>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff fb38 	bl	8000c20 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff fb34 	bl	8000c20 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e04d      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015c6:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0x41c>
 80015d2:	e045      	b.n	8001660 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d4:	4b27      	ldr	r3, [pc, #156]	; (8001674 <HAL_RCC_OscConfig+0x4dc>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015da:	f7ff fb21 	bl	8000c20 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e2:	f7ff fb1d 	bl	8000c20 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e036      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f4:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f0      	bne.n	80015e2 <HAL_RCC_OscConfig+0x44a>
 8001600:	e02e      	b.n	8001660 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d101      	bne.n	800160e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e029      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <HAL_RCC_OscConfig+0x4d8>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	429a      	cmp	r2, r3
 8001620:	d11c      	bne.n	800165c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162c:	429a      	cmp	r2, r3
 800162e:	d115      	bne.n	800165c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001636:	4013      	ands	r3, r2
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800163c:	4293      	cmp	r3, r2
 800163e:	d10d      	bne.n	800165c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800164a:	429a      	cmp	r2, r3
 800164c:	d106      	bne.n	800165c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001658:	429a      	cmp	r2, r3
 800165a:	d001      	beq.n	8001660 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e000      	b.n	8001662 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40007000 	.word	0x40007000
 8001670:	40023800 	.word	0x40023800
 8001674:	42470060 	.word	0x42470060

08001678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0cc      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800168c:	4b68      	ldr	r3, [pc, #416]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 030f 	and.w	r3, r3, #15
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	429a      	cmp	r2, r3
 8001698:	d90c      	bls.n	80016b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169a:	4b65      	ldr	r3, [pc, #404]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a2:	4b63      	ldr	r3, [pc, #396]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 030f 	and.w	r3, r3, #15
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d001      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0b8      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d020      	beq.n	8001702 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016cc:	4b59      	ldr	r3, [pc, #356]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	4a58      	ldr	r2, [pc, #352]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e4:	4b53      	ldr	r3, [pc, #332]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	4a52      	ldr	r2, [pc, #328]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f0:	4b50      	ldr	r3, [pc, #320]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	494d      	ldr	r1, [pc, #308]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d044      	beq.n	8001798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d107      	bne.n	8001726 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	4b47      	ldr	r3, [pc, #284]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d119      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e07f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d003      	beq.n	8001736 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001732:	2b03      	cmp	r3, #3
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001736:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d109      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e06f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001746:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e067      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001756:	4b37      	ldr	r3, [pc, #220]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f023 0203 	bic.w	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4934      	ldr	r1, [pc, #208]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	4313      	orrs	r3, r2
 8001766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001768:	f7ff fa5a 	bl	8000c20 <HAL_GetTick>
 800176c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176e:	e00a      	b.n	8001786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001770:	f7ff fa56 	bl	8000c20 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f241 3288 	movw	r2, #5000	; 0x1388
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e04f      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001786:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 020c 	and.w	r2, r3, #12
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	429a      	cmp	r2, r3
 8001796:	d1eb      	bne.n	8001770 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001798:	4b25      	ldr	r3, [pc, #148]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 030f 	and.w	r3, r3, #15
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d20c      	bcs.n	80017c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b22      	ldr	r3, [pc, #136]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e032      	b.n	8001826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d008      	beq.n	80017de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	4916      	ldr	r1, [pc, #88]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d009      	beq.n	80017fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	490e      	ldr	r1, [pc, #56]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017fe:	f000 f821 	bl	8001844 <HAL_RCC_GetSysClockFreq>
 8001802:	4601      	mov	r1, r0
 8001804:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_RCC_ClockConfig+0x1c0>)
 8001810:	5cd3      	ldrb	r3, [r2, r3]
 8001812:	fa21 f303 	lsr.w	r3, r1, r3
 8001816:	4a09      	ldr	r2, [pc, #36]	; (800183c <HAL_RCC_ClockConfig+0x1c4>)
 8001818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x1c8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff f90a 	bl	8000a38 <HAL_InitTick>

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023c00 	.word	0x40023c00
 8001834:	40023800 	.word	0x40023800
 8001838:	080057e8 	.word	0x080057e8
 800183c:	20000004 	.word	0x20000004
 8001840:	20000008 	.word	0x20000008

08001844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	2300      	movs	r3, #0
 8001854:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800185a:	4b63      	ldr	r3, [pc, #396]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b04      	cmp	r3, #4
 8001864:	d007      	beq.n	8001876 <HAL_RCC_GetSysClockFreq+0x32>
 8001866:	2b08      	cmp	r3, #8
 8001868:	d008      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0x38>
 800186a:	2b00      	cmp	r3, #0
 800186c:	f040 80b4 	bne.w	80019d8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001870:	4b5e      	ldr	r3, [pc, #376]	; (80019ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001872:	60bb      	str	r3, [r7, #8]
       break;
 8001874:	e0b3      	b.n	80019de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001876:	4b5e      	ldr	r3, [pc, #376]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001878:	60bb      	str	r3, [r7, #8]
      break;
 800187a:	e0b0      	b.n	80019de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800187c:	4b5a      	ldr	r3, [pc, #360]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001884:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001886:	4b58      	ldr	r3, [pc, #352]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d04a      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001892:	4b55      	ldr	r3, [pc, #340]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	099b      	lsrs	r3, r3, #6
 8001898:	f04f 0400 	mov.w	r4, #0
 800189c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	ea03 0501 	and.w	r5, r3, r1
 80018a8:	ea04 0602 	and.w	r6, r4, r2
 80018ac:	4629      	mov	r1, r5
 80018ae:	4632      	mov	r2, r6
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	f04f 0400 	mov.w	r4, #0
 80018b8:	0154      	lsls	r4, r2, #5
 80018ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018be:	014b      	lsls	r3, r1, #5
 80018c0:	4619      	mov	r1, r3
 80018c2:	4622      	mov	r2, r4
 80018c4:	1b49      	subs	r1, r1, r5
 80018c6:	eb62 0206 	sbc.w	r2, r2, r6
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	f04f 0400 	mov.w	r4, #0
 80018d2:	0194      	lsls	r4, r2, #6
 80018d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018d8:	018b      	lsls	r3, r1, #6
 80018da:	1a5b      	subs	r3, r3, r1
 80018dc:	eb64 0402 	sbc.w	r4, r4, r2
 80018e0:	f04f 0100 	mov.w	r1, #0
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	00e2      	lsls	r2, r4, #3
 80018ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018ee:	00d9      	lsls	r1, r3, #3
 80018f0:	460b      	mov	r3, r1
 80018f2:	4614      	mov	r4, r2
 80018f4:	195b      	adds	r3, r3, r5
 80018f6:	eb44 0406 	adc.w	r4, r4, r6
 80018fa:	f04f 0100 	mov.w	r1, #0
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	0262      	lsls	r2, r4, #9
 8001904:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001908:	0259      	lsls	r1, r3, #9
 800190a:	460b      	mov	r3, r1
 800190c:	4614      	mov	r4, r2
 800190e:	4618      	mov	r0, r3
 8001910:	4621      	mov	r1, r4
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f04f 0400 	mov.w	r4, #0
 8001918:	461a      	mov	r2, r3
 800191a:	4623      	mov	r3, r4
 800191c:	f7fe fc60 	bl	80001e0 <__aeabi_uldivmod>
 8001920:	4603      	mov	r3, r0
 8001922:	460c      	mov	r4, r1
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	e049      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001928:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	099b      	lsrs	r3, r3, #6
 800192e:	f04f 0400 	mov.w	r4, #0
 8001932:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	ea03 0501 	and.w	r5, r3, r1
 800193e:	ea04 0602 	and.w	r6, r4, r2
 8001942:	4629      	mov	r1, r5
 8001944:	4632      	mov	r2, r6
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	f04f 0400 	mov.w	r4, #0
 800194e:	0154      	lsls	r4, r2, #5
 8001950:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001954:	014b      	lsls	r3, r1, #5
 8001956:	4619      	mov	r1, r3
 8001958:	4622      	mov	r2, r4
 800195a:	1b49      	subs	r1, r1, r5
 800195c:	eb62 0206 	sbc.w	r2, r2, r6
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	f04f 0400 	mov.w	r4, #0
 8001968:	0194      	lsls	r4, r2, #6
 800196a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800196e:	018b      	lsls	r3, r1, #6
 8001970:	1a5b      	subs	r3, r3, r1
 8001972:	eb64 0402 	sbc.w	r4, r4, r2
 8001976:	f04f 0100 	mov.w	r1, #0
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	00e2      	lsls	r2, r4, #3
 8001980:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001984:	00d9      	lsls	r1, r3, #3
 8001986:	460b      	mov	r3, r1
 8001988:	4614      	mov	r4, r2
 800198a:	195b      	adds	r3, r3, r5
 800198c:	eb44 0406 	adc.w	r4, r4, r6
 8001990:	f04f 0100 	mov.w	r1, #0
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	02a2      	lsls	r2, r4, #10
 800199a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800199e:	0299      	lsls	r1, r3, #10
 80019a0:	460b      	mov	r3, r1
 80019a2:	4614      	mov	r4, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	4621      	mov	r1, r4
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f04f 0400 	mov.w	r4, #0
 80019ae:	461a      	mov	r2, r3
 80019b0:	4623      	mov	r3, r4
 80019b2:	f7fe fc15 	bl	80001e0 <__aeabi_uldivmod>
 80019b6:	4603      	mov	r3, r0
 80019b8:	460c      	mov	r4, r1
 80019ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	0c1b      	lsrs	r3, r3, #16
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	3301      	adds	r3, #1
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d4:	60bb      	str	r3, [r7, #8]
      break;
 80019d6:	e002      	b.n	80019de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 80019da:	60bb      	str	r3, [r7, #8]
      break;
 80019dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019de:	68bb      	ldr	r3, [r7, #8]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	00f42400 	.word	0x00f42400
 80019f0:	007a1200 	.word	0x007a1200

080019f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000004 	.word	0x20000004

08001a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a10:	f7ff fff0 	bl	80019f4 <HAL_RCC_GetHCLKFreq>
 8001a14:	4601      	mov	r1, r0
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	0a9b      	lsrs	r3, r3, #10
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	4a03      	ldr	r2, [pc, #12]	; (8001a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a22:	5cd3      	ldrb	r3, [r2, r3]
 8001a24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	080057f8 	.word	0x080057f8

08001a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a38:	f7ff ffdc 	bl	80019f4 <HAL_RCC_GetHCLKFreq>
 8001a3c:	4601      	mov	r1, r0
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	0b5b      	lsrs	r3, r3, #13
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	4a03      	ldr	r2, [pc, #12]	; (8001a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a4a:	5cd3      	ldrb	r3, [r2, r3]
 8001a4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40023800 	.word	0x40023800
 8001a58:	080057f8 	.word	0x080057f8

08001a5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	220f      	movs	r2, #15
 8001a6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_RCC_GetClockConfig+0x5c>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 0203 	and.w	r2, r3, #3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <HAL_RCC_GetClockConfig+0x5c>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <HAL_RCC_GetClockConfig+0x5c>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_RCC_GetClockConfig+0x5c>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	08db      	lsrs	r3, r3, #3
 8001a96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a9e:	4b07      	ldr	r3, [pc, #28]	; (8001abc <HAL_RCC_GetClockConfig+0x60>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 020f 	and.w	r2, r3, #15
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	601a      	str	r2, [r3, #0]
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40023c00 	.word	0x40023c00

08001ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e01d      	b.n	8001b0e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f815 	bl	8001b16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3304      	adds	r3, #4
 8001afc:	4619      	mov	r1, r3
 8001afe:	4610      	mov	r0, r2
 8001b00:	f000 f968 	bl	8001dd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b085      	sub	sp, #20
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 0201 	orr.w	r2, r2, #1
 8001b40:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2b06      	cmp	r3, #6
 8001b52:	d007      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d122      	bne.n	8001bce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d11b      	bne.n	8001bce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f06f 0202 	mvn.w	r2, #2
 8001b9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f8ee 	bl	8001d96 <HAL_TIM_IC_CaptureCallback>
 8001bba:	e005      	b.n	8001bc8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f8e0 	bl	8001d82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f8f1 	bl	8001daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d122      	bne.n	8001c22 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d11b      	bne.n	8001c22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f06f 0204 	mvn.w	r2, #4
 8001bf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f8c4 	bl	8001d96 <HAL_TIM_IC_CaptureCallback>
 8001c0e:	e005      	b.n	8001c1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f8b6 	bl	8001d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f8c7 	bl	8001daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d122      	bne.n	8001c76 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d11b      	bne.n	8001c76 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f06f 0208 	mvn.w	r2, #8
 8001c46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f89a 	bl	8001d96 <HAL_TIM_IC_CaptureCallback>
 8001c62:	e005      	b.n	8001c70 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f88c 	bl	8001d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f89d 	bl	8001daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	2b10      	cmp	r3, #16
 8001c82:	d122      	bne.n	8001cca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	2b10      	cmp	r3, #16
 8001c90:	d11b      	bne.n	8001cca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f06f 0210 	mvn.w	r2, #16
 8001c9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2208      	movs	r2, #8
 8001ca0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f870 	bl	8001d96 <HAL_TIM_IC_CaptureCallback>
 8001cb6:	e005      	b.n	8001cc4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 f862 	bl	8001d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f873 	bl	8001daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d10e      	bne.n	8001cf6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d107      	bne.n	8001cf6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f06f 0201 	mvn.w	r2, #1
 8001cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7fe fe17 	bl	8000924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d00:	2b80      	cmp	r3, #128	; 0x80
 8001d02:	d10e      	bne.n	8001d22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0e:	2b80      	cmp	r3, #128	; 0x80
 8001d10:	d107      	bne.n	8001d22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f903 	bl	8001f28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2c:	2b40      	cmp	r3, #64	; 0x40
 8001d2e:	d10e      	bne.n	8001d4e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3a:	2b40      	cmp	r3, #64	; 0x40
 8001d3c:	d107      	bne.n	8001d4e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f838 	bl	8001dbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	f003 0320 	and.w	r3, r3, #32
 8001d58:	2b20      	cmp	r3, #32
 8001d5a:	d10e      	bne.n	8001d7a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	2b20      	cmp	r3, #32
 8001d68:	d107      	bne.n	8001d7a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f06f 0220 	mvn.w	r2, #32
 8001d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f8cd 	bl	8001f14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a40      	ldr	r2, [pc, #256]	; (8001ee8 <TIM_Base_SetConfig+0x114>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d013      	beq.n	8001e14 <TIM_Base_SetConfig+0x40>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df2:	d00f      	beq.n	8001e14 <TIM_Base_SetConfig+0x40>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a3d      	ldr	r2, [pc, #244]	; (8001eec <TIM_Base_SetConfig+0x118>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d00b      	beq.n	8001e14 <TIM_Base_SetConfig+0x40>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a3c      	ldr	r2, [pc, #240]	; (8001ef0 <TIM_Base_SetConfig+0x11c>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d007      	beq.n	8001e14 <TIM_Base_SetConfig+0x40>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a3b      	ldr	r2, [pc, #236]	; (8001ef4 <TIM_Base_SetConfig+0x120>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d003      	beq.n	8001e14 <TIM_Base_SetConfig+0x40>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a3a      	ldr	r2, [pc, #232]	; (8001ef8 <TIM_Base_SetConfig+0x124>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d108      	bne.n	8001e26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a2f      	ldr	r2, [pc, #188]	; (8001ee8 <TIM_Base_SetConfig+0x114>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d02b      	beq.n	8001e86 <TIM_Base_SetConfig+0xb2>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e34:	d027      	beq.n	8001e86 <TIM_Base_SetConfig+0xb2>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a2c      	ldr	r2, [pc, #176]	; (8001eec <TIM_Base_SetConfig+0x118>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d023      	beq.n	8001e86 <TIM_Base_SetConfig+0xb2>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a2b      	ldr	r2, [pc, #172]	; (8001ef0 <TIM_Base_SetConfig+0x11c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d01f      	beq.n	8001e86 <TIM_Base_SetConfig+0xb2>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a2a      	ldr	r2, [pc, #168]	; (8001ef4 <TIM_Base_SetConfig+0x120>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d01b      	beq.n	8001e86 <TIM_Base_SetConfig+0xb2>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a29      	ldr	r2, [pc, #164]	; (8001ef8 <TIM_Base_SetConfig+0x124>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d017      	beq.n	8001e86 <TIM_Base_SetConfig+0xb2>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a28      	ldr	r2, [pc, #160]	; (8001efc <TIM_Base_SetConfig+0x128>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d013      	beq.n	8001e86 <TIM_Base_SetConfig+0xb2>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a27      	ldr	r2, [pc, #156]	; (8001f00 <TIM_Base_SetConfig+0x12c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d00f      	beq.n	8001e86 <TIM_Base_SetConfig+0xb2>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a26      	ldr	r2, [pc, #152]	; (8001f04 <TIM_Base_SetConfig+0x130>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00b      	beq.n	8001e86 <TIM_Base_SetConfig+0xb2>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a25      	ldr	r2, [pc, #148]	; (8001f08 <TIM_Base_SetConfig+0x134>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d007      	beq.n	8001e86 <TIM_Base_SetConfig+0xb2>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a24      	ldr	r2, [pc, #144]	; (8001f0c <TIM_Base_SetConfig+0x138>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d003      	beq.n	8001e86 <TIM_Base_SetConfig+0xb2>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a23      	ldr	r2, [pc, #140]	; (8001f10 <TIM_Base_SetConfig+0x13c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d108      	bne.n	8001e98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <TIM_Base_SetConfig+0x114>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d003      	beq.n	8001ecc <TIM_Base_SetConfig+0xf8>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a0c      	ldr	r2, [pc, #48]	; (8001ef8 <TIM_Base_SetConfig+0x124>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d103      	bne.n	8001ed4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	615a      	str	r2, [r3, #20]
}
 8001eda:	bf00      	nop
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40010000 	.word	0x40010000
 8001eec:	40000400 	.word	0x40000400
 8001ef0:	40000800 	.word	0x40000800
 8001ef4:	40000c00 	.word	0x40000c00
 8001ef8:	40010400 	.word	0x40010400
 8001efc:	40014000 	.word	0x40014000
 8001f00:	40014400 	.word	0x40014400
 8001f04:	40014800 	.word	0x40014800
 8001f08:	40001800 	.word	0x40001800
 8001f0c:	40001c00 	.word	0x40001c00
 8001f10:	40002000 	.word	0x40002000

08001f14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e03f      	b.n	8001fce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7fe fd20 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2224      	movs	r2, #36	; 0x24
 8001f6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f90b 	bl	800219c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695a      	ldr	r2, [r3, #20]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b088      	sub	sp, #32
 8001fda:	af02      	add	r7, sp, #8
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	603b      	str	r3, [r7, #0]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b20      	cmp	r3, #32
 8001ff4:	f040 8083 	bne.w	80020fe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <HAL_UART_Transmit+0x2e>
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e07b      	b.n	8002100 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_UART_Transmit+0x40>
 8002012:	2302      	movs	r3, #2
 8002014:	e074      	b.n	8002100 <HAL_UART_Transmit+0x12a>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2221      	movs	r2, #33	; 0x21
 8002028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800202c:	f7fe fdf8 	bl	8000c20 <HAL_GetTick>
 8002030:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	88fa      	ldrh	r2, [r7, #6]
 8002036:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	88fa      	ldrh	r2, [r7, #6]
 800203c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002046:	e042      	b.n	80020ce <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800204c:	b29b      	uxth	r3, r3
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800205e:	d122      	bne.n	80020a6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	2200      	movs	r2, #0
 8002068:	2180      	movs	r1, #128	; 0x80
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f000 f84c 	bl	8002108 <UART_WaitOnFlagUntilTimeout>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e042      	b.n	8002100 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800208c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d103      	bne.n	800209e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	3302      	adds	r3, #2
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	e017      	b.n	80020ce <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	3301      	adds	r3, #1
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	e013      	b.n	80020ce <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2200      	movs	r2, #0
 80020ae:	2180      	movs	r1, #128	; 0x80
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 f829 	bl	8002108 <UART_WaitOnFlagUntilTimeout>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e01f      	b.n	8002100 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	60ba      	str	r2, [r7, #8]
 80020c6:	781a      	ldrb	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1b7      	bne.n	8002048 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	2200      	movs	r2, #0
 80020e0:	2140      	movs	r1, #64	; 0x40
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 f810 	bl	8002108 <UART_WaitOnFlagUntilTimeout>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e006      	b.n	8002100 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e000      	b.n	8002100 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80020fe:	2302      	movs	r3, #2
  }
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	4613      	mov	r3, r2
 8002116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002118:	e02c      	b.n	8002174 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d028      	beq.n	8002174 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d007      	beq.n	8002138 <UART_WaitOnFlagUntilTimeout+0x30>
 8002128:	f7fe fd7a 	bl	8000c20 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	429a      	cmp	r2, r3
 8002136:	d21d      	bcs.n	8002174 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002146:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0201 	bic.w	r2, r2, #1
 8002156:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e00f      	b.n	8002194 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	4013      	ands	r3, r2
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	429a      	cmp	r2, r3
 8002182:	bf0c      	ite	eq
 8002184:	2301      	moveq	r3, #1
 8002186:	2300      	movne	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	429a      	cmp	r2, r3
 8002190:	d0c3      	beq.n	800211a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800219c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021a0:	b085      	sub	sp, #20
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80021de:	f023 030c 	bic.w	r3, r3, #12
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6812      	ldr	r2, [r2, #0]
 80021e6:	68f9      	ldr	r1, [r7, #12]
 80021e8:	430b      	orrs	r3, r1
 80021ea:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699a      	ldr	r2, [r3, #24]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800220a:	f040 818b 	bne.w	8002524 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4ac1      	ldr	r2, [pc, #772]	; (8002518 <UART_SetConfig+0x37c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d005      	beq.n	8002224 <UART_SetConfig+0x88>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4abf      	ldr	r2, [pc, #764]	; (800251c <UART_SetConfig+0x380>)
 800221e:	4293      	cmp	r3, r2
 8002220:	f040 80bd 	bne.w	800239e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002224:	f7ff fc06 	bl	8001a34 <HAL_RCC_GetPCLK2Freq>
 8002228:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	461d      	mov	r5, r3
 800222e:	f04f 0600 	mov.w	r6, #0
 8002232:	46a8      	mov	r8, r5
 8002234:	46b1      	mov	r9, r6
 8002236:	eb18 0308 	adds.w	r3, r8, r8
 800223a:	eb49 0409 	adc.w	r4, r9, r9
 800223e:	4698      	mov	r8, r3
 8002240:	46a1      	mov	r9, r4
 8002242:	eb18 0805 	adds.w	r8, r8, r5
 8002246:	eb49 0906 	adc.w	r9, r9, r6
 800224a:	f04f 0100 	mov.w	r1, #0
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002256:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800225a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800225e:	4688      	mov	r8, r1
 8002260:	4691      	mov	r9, r2
 8002262:	eb18 0005 	adds.w	r0, r8, r5
 8002266:	eb49 0106 	adc.w	r1, r9, r6
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	461d      	mov	r5, r3
 8002270:	f04f 0600 	mov.w	r6, #0
 8002274:	196b      	adds	r3, r5, r5
 8002276:	eb46 0406 	adc.w	r4, r6, r6
 800227a:	461a      	mov	r2, r3
 800227c:	4623      	mov	r3, r4
 800227e:	f7fd ffaf 	bl	80001e0 <__aeabi_uldivmod>
 8002282:	4603      	mov	r3, r0
 8002284:	460c      	mov	r4, r1
 8002286:	461a      	mov	r2, r3
 8002288:	4ba5      	ldr	r3, [pc, #660]	; (8002520 <UART_SetConfig+0x384>)
 800228a:	fba3 2302 	umull	r2, r3, r3, r2
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	461d      	mov	r5, r3
 8002298:	f04f 0600 	mov.w	r6, #0
 800229c:	46a9      	mov	r9, r5
 800229e:	46b2      	mov	sl, r6
 80022a0:	eb19 0309 	adds.w	r3, r9, r9
 80022a4:	eb4a 040a 	adc.w	r4, sl, sl
 80022a8:	4699      	mov	r9, r3
 80022aa:	46a2      	mov	sl, r4
 80022ac:	eb19 0905 	adds.w	r9, r9, r5
 80022b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80022b4:	f04f 0100 	mov.w	r1, #0
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022c8:	4689      	mov	r9, r1
 80022ca:	4692      	mov	sl, r2
 80022cc:	eb19 0005 	adds.w	r0, r9, r5
 80022d0:	eb4a 0106 	adc.w	r1, sl, r6
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	461d      	mov	r5, r3
 80022da:	f04f 0600 	mov.w	r6, #0
 80022de:	196b      	adds	r3, r5, r5
 80022e0:	eb46 0406 	adc.w	r4, r6, r6
 80022e4:	461a      	mov	r2, r3
 80022e6:	4623      	mov	r3, r4
 80022e8:	f7fd ff7a 	bl	80001e0 <__aeabi_uldivmod>
 80022ec:	4603      	mov	r3, r0
 80022ee:	460c      	mov	r4, r1
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b8b      	ldr	r3, [pc, #556]	; (8002520 <UART_SetConfig+0x384>)
 80022f4:	fba3 1302 	umull	r1, r3, r3, r2
 80022f8:	095b      	lsrs	r3, r3, #5
 80022fa:	2164      	movs	r1, #100	; 0x64
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	3332      	adds	r3, #50	; 0x32
 8002306:	4a86      	ldr	r2, [pc, #536]	; (8002520 <UART_SetConfig+0x384>)
 8002308:	fba2 2303 	umull	r2, r3, r2, r3
 800230c:	095b      	lsrs	r3, r3, #5
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002314:	4498      	add	r8, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	461d      	mov	r5, r3
 800231a:	f04f 0600 	mov.w	r6, #0
 800231e:	46a9      	mov	r9, r5
 8002320:	46b2      	mov	sl, r6
 8002322:	eb19 0309 	adds.w	r3, r9, r9
 8002326:	eb4a 040a 	adc.w	r4, sl, sl
 800232a:	4699      	mov	r9, r3
 800232c:	46a2      	mov	sl, r4
 800232e:	eb19 0905 	adds.w	r9, r9, r5
 8002332:	eb4a 0a06 	adc.w	sl, sl, r6
 8002336:	f04f 0100 	mov.w	r1, #0
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002342:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002346:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800234a:	4689      	mov	r9, r1
 800234c:	4692      	mov	sl, r2
 800234e:	eb19 0005 	adds.w	r0, r9, r5
 8002352:	eb4a 0106 	adc.w	r1, sl, r6
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	461d      	mov	r5, r3
 800235c:	f04f 0600 	mov.w	r6, #0
 8002360:	196b      	adds	r3, r5, r5
 8002362:	eb46 0406 	adc.w	r4, r6, r6
 8002366:	461a      	mov	r2, r3
 8002368:	4623      	mov	r3, r4
 800236a:	f7fd ff39 	bl	80001e0 <__aeabi_uldivmod>
 800236e:	4603      	mov	r3, r0
 8002370:	460c      	mov	r4, r1
 8002372:	461a      	mov	r2, r3
 8002374:	4b6a      	ldr	r3, [pc, #424]	; (8002520 <UART_SetConfig+0x384>)
 8002376:	fba3 1302 	umull	r1, r3, r3, r2
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	2164      	movs	r1, #100	; 0x64
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	3332      	adds	r3, #50	; 0x32
 8002388:	4a65      	ldr	r2, [pc, #404]	; (8002520 <UART_SetConfig+0x384>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	f003 0207 	and.w	r2, r3, #7
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4442      	add	r2, r8
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	e26f      	b.n	800287e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800239e:	f7ff fb35 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 80023a2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	461d      	mov	r5, r3
 80023a8:	f04f 0600 	mov.w	r6, #0
 80023ac:	46a8      	mov	r8, r5
 80023ae:	46b1      	mov	r9, r6
 80023b0:	eb18 0308 	adds.w	r3, r8, r8
 80023b4:	eb49 0409 	adc.w	r4, r9, r9
 80023b8:	4698      	mov	r8, r3
 80023ba:	46a1      	mov	r9, r4
 80023bc:	eb18 0805 	adds.w	r8, r8, r5
 80023c0:	eb49 0906 	adc.w	r9, r9, r6
 80023c4:	f04f 0100 	mov.w	r1, #0
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80023d0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80023d4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80023d8:	4688      	mov	r8, r1
 80023da:	4691      	mov	r9, r2
 80023dc:	eb18 0005 	adds.w	r0, r8, r5
 80023e0:	eb49 0106 	adc.w	r1, r9, r6
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	461d      	mov	r5, r3
 80023ea:	f04f 0600 	mov.w	r6, #0
 80023ee:	196b      	adds	r3, r5, r5
 80023f0:	eb46 0406 	adc.w	r4, r6, r6
 80023f4:	461a      	mov	r2, r3
 80023f6:	4623      	mov	r3, r4
 80023f8:	f7fd fef2 	bl	80001e0 <__aeabi_uldivmod>
 80023fc:	4603      	mov	r3, r0
 80023fe:	460c      	mov	r4, r1
 8002400:	461a      	mov	r2, r3
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <UART_SetConfig+0x384>)
 8002404:	fba3 2302 	umull	r2, r3, r3, r2
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	461d      	mov	r5, r3
 8002412:	f04f 0600 	mov.w	r6, #0
 8002416:	46a9      	mov	r9, r5
 8002418:	46b2      	mov	sl, r6
 800241a:	eb19 0309 	adds.w	r3, r9, r9
 800241e:	eb4a 040a 	adc.w	r4, sl, sl
 8002422:	4699      	mov	r9, r3
 8002424:	46a2      	mov	sl, r4
 8002426:	eb19 0905 	adds.w	r9, r9, r5
 800242a:	eb4a 0a06 	adc.w	sl, sl, r6
 800242e:	f04f 0100 	mov.w	r1, #0
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800243a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800243e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002442:	4689      	mov	r9, r1
 8002444:	4692      	mov	sl, r2
 8002446:	eb19 0005 	adds.w	r0, r9, r5
 800244a:	eb4a 0106 	adc.w	r1, sl, r6
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	461d      	mov	r5, r3
 8002454:	f04f 0600 	mov.w	r6, #0
 8002458:	196b      	adds	r3, r5, r5
 800245a:	eb46 0406 	adc.w	r4, r6, r6
 800245e:	461a      	mov	r2, r3
 8002460:	4623      	mov	r3, r4
 8002462:	f7fd febd 	bl	80001e0 <__aeabi_uldivmod>
 8002466:	4603      	mov	r3, r0
 8002468:	460c      	mov	r4, r1
 800246a:	461a      	mov	r2, r3
 800246c:	4b2c      	ldr	r3, [pc, #176]	; (8002520 <UART_SetConfig+0x384>)
 800246e:	fba3 1302 	umull	r1, r3, r3, r2
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	2164      	movs	r1, #100	; 0x64
 8002476:	fb01 f303 	mul.w	r3, r1, r3
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	3332      	adds	r3, #50	; 0x32
 8002480:	4a27      	ldr	r2, [pc, #156]	; (8002520 <UART_SetConfig+0x384>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800248e:	4498      	add	r8, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	461d      	mov	r5, r3
 8002494:	f04f 0600 	mov.w	r6, #0
 8002498:	46a9      	mov	r9, r5
 800249a:	46b2      	mov	sl, r6
 800249c:	eb19 0309 	adds.w	r3, r9, r9
 80024a0:	eb4a 040a 	adc.w	r4, sl, sl
 80024a4:	4699      	mov	r9, r3
 80024a6:	46a2      	mov	sl, r4
 80024a8:	eb19 0905 	adds.w	r9, r9, r5
 80024ac:	eb4a 0a06 	adc.w	sl, sl, r6
 80024b0:	f04f 0100 	mov.w	r1, #0
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024c4:	4689      	mov	r9, r1
 80024c6:	4692      	mov	sl, r2
 80024c8:	eb19 0005 	adds.w	r0, r9, r5
 80024cc:	eb4a 0106 	adc.w	r1, sl, r6
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	461d      	mov	r5, r3
 80024d6:	f04f 0600 	mov.w	r6, #0
 80024da:	196b      	adds	r3, r5, r5
 80024dc:	eb46 0406 	adc.w	r4, r6, r6
 80024e0:	461a      	mov	r2, r3
 80024e2:	4623      	mov	r3, r4
 80024e4:	f7fd fe7c 	bl	80001e0 <__aeabi_uldivmod>
 80024e8:	4603      	mov	r3, r0
 80024ea:	460c      	mov	r4, r1
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <UART_SetConfig+0x384>)
 80024f0:	fba3 1302 	umull	r1, r3, r3, r2
 80024f4:	095b      	lsrs	r3, r3, #5
 80024f6:	2164      	movs	r1, #100	; 0x64
 80024f8:	fb01 f303 	mul.w	r3, r1, r3
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	3332      	adds	r3, #50	; 0x32
 8002502:	4a07      	ldr	r2, [pc, #28]	; (8002520 <UART_SetConfig+0x384>)
 8002504:	fba2 2303 	umull	r2, r3, r2, r3
 8002508:	095b      	lsrs	r3, r3, #5
 800250a:	f003 0207 	and.w	r2, r3, #7
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4442      	add	r2, r8
 8002514:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002516:	e1b2      	b.n	800287e <UART_SetConfig+0x6e2>
 8002518:	40011000 	.word	0x40011000
 800251c:	40011400 	.word	0x40011400
 8002520:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4ad7      	ldr	r2, [pc, #860]	; (8002888 <UART_SetConfig+0x6ec>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d005      	beq.n	800253a <UART_SetConfig+0x39e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4ad6      	ldr	r2, [pc, #856]	; (800288c <UART_SetConfig+0x6f0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	f040 80d1 	bne.w	80026dc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800253a:	f7ff fa7b 	bl	8001a34 <HAL_RCC_GetPCLK2Freq>
 800253e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	469a      	mov	sl, r3
 8002544:	f04f 0b00 	mov.w	fp, #0
 8002548:	46d0      	mov	r8, sl
 800254a:	46d9      	mov	r9, fp
 800254c:	eb18 0308 	adds.w	r3, r8, r8
 8002550:	eb49 0409 	adc.w	r4, r9, r9
 8002554:	4698      	mov	r8, r3
 8002556:	46a1      	mov	r9, r4
 8002558:	eb18 080a 	adds.w	r8, r8, sl
 800255c:	eb49 090b 	adc.w	r9, r9, fp
 8002560:	f04f 0100 	mov.w	r1, #0
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800256c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002570:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002574:	4688      	mov	r8, r1
 8002576:	4691      	mov	r9, r2
 8002578:	eb1a 0508 	adds.w	r5, sl, r8
 800257c:	eb4b 0609 	adc.w	r6, fp, r9
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4619      	mov	r1, r3
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	f04f 0400 	mov.w	r4, #0
 8002592:	0094      	lsls	r4, r2, #2
 8002594:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002598:	008b      	lsls	r3, r1, #2
 800259a:	461a      	mov	r2, r3
 800259c:	4623      	mov	r3, r4
 800259e:	4628      	mov	r0, r5
 80025a0:	4631      	mov	r1, r6
 80025a2:	f7fd fe1d 	bl	80001e0 <__aeabi_uldivmod>
 80025a6:	4603      	mov	r3, r0
 80025a8:	460c      	mov	r4, r1
 80025aa:	461a      	mov	r2, r3
 80025ac:	4bb8      	ldr	r3, [pc, #736]	; (8002890 <UART_SetConfig+0x6f4>)
 80025ae:	fba3 2302 	umull	r2, r3, r3, r2
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	469b      	mov	fp, r3
 80025bc:	f04f 0c00 	mov.w	ip, #0
 80025c0:	46d9      	mov	r9, fp
 80025c2:	46e2      	mov	sl, ip
 80025c4:	eb19 0309 	adds.w	r3, r9, r9
 80025c8:	eb4a 040a 	adc.w	r4, sl, sl
 80025cc:	4699      	mov	r9, r3
 80025ce:	46a2      	mov	sl, r4
 80025d0:	eb19 090b 	adds.w	r9, r9, fp
 80025d4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80025d8:	f04f 0100 	mov.w	r1, #0
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025ec:	4689      	mov	r9, r1
 80025ee:	4692      	mov	sl, r2
 80025f0:	eb1b 0509 	adds.w	r5, fp, r9
 80025f4:	eb4c 060a 	adc.w	r6, ip, sl
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	4619      	mov	r1, r3
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	f04f 0400 	mov.w	r4, #0
 800260a:	0094      	lsls	r4, r2, #2
 800260c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002610:	008b      	lsls	r3, r1, #2
 8002612:	461a      	mov	r2, r3
 8002614:	4623      	mov	r3, r4
 8002616:	4628      	mov	r0, r5
 8002618:	4631      	mov	r1, r6
 800261a:	f7fd fde1 	bl	80001e0 <__aeabi_uldivmod>
 800261e:	4603      	mov	r3, r0
 8002620:	460c      	mov	r4, r1
 8002622:	461a      	mov	r2, r3
 8002624:	4b9a      	ldr	r3, [pc, #616]	; (8002890 <UART_SetConfig+0x6f4>)
 8002626:	fba3 1302 	umull	r1, r3, r3, r2
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	2164      	movs	r1, #100	; 0x64
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	3332      	adds	r3, #50	; 0x32
 8002638:	4a95      	ldr	r2, [pc, #596]	; (8002890 <UART_SetConfig+0x6f4>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002644:	4498      	add	r8, r3
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	469b      	mov	fp, r3
 800264a:	f04f 0c00 	mov.w	ip, #0
 800264e:	46d9      	mov	r9, fp
 8002650:	46e2      	mov	sl, ip
 8002652:	eb19 0309 	adds.w	r3, r9, r9
 8002656:	eb4a 040a 	adc.w	r4, sl, sl
 800265a:	4699      	mov	r9, r3
 800265c:	46a2      	mov	sl, r4
 800265e:	eb19 090b 	adds.w	r9, r9, fp
 8002662:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002666:	f04f 0100 	mov.w	r1, #0
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002672:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002676:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800267a:	4689      	mov	r9, r1
 800267c:	4692      	mov	sl, r2
 800267e:	eb1b 0509 	adds.w	r5, fp, r9
 8002682:	eb4c 060a 	adc.w	r6, ip, sl
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4619      	mov	r1, r3
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	f04f 0400 	mov.w	r4, #0
 8002698:	0094      	lsls	r4, r2, #2
 800269a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800269e:	008b      	lsls	r3, r1, #2
 80026a0:	461a      	mov	r2, r3
 80026a2:	4623      	mov	r3, r4
 80026a4:	4628      	mov	r0, r5
 80026a6:	4631      	mov	r1, r6
 80026a8:	f7fd fd9a 	bl	80001e0 <__aeabi_uldivmod>
 80026ac:	4603      	mov	r3, r0
 80026ae:	460c      	mov	r4, r1
 80026b0:	461a      	mov	r2, r3
 80026b2:	4b77      	ldr	r3, [pc, #476]	; (8002890 <UART_SetConfig+0x6f4>)
 80026b4:	fba3 1302 	umull	r1, r3, r3, r2
 80026b8:	095b      	lsrs	r3, r3, #5
 80026ba:	2164      	movs	r1, #100	; 0x64
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	3332      	adds	r3, #50	; 0x32
 80026c6:	4a72      	ldr	r2, [pc, #456]	; (8002890 <UART_SetConfig+0x6f4>)
 80026c8:	fba2 2303 	umull	r2, r3, r2, r3
 80026cc:	095b      	lsrs	r3, r3, #5
 80026ce:	f003 020f 	and.w	r2, r3, #15
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4442      	add	r2, r8
 80026d8:	609a      	str	r2, [r3, #8]
 80026da:	e0d0      	b.n	800287e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80026dc:	f7ff f996 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 80026e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	469a      	mov	sl, r3
 80026e6:	f04f 0b00 	mov.w	fp, #0
 80026ea:	46d0      	mov	r8, sl
 80026ec:	46d9      	mov	r9, fp
 80026ee:	eb18 0308 	adds.w	r3, r8, r8
 80026f2:	eb49 0409 	adc.w	r4, r9, r9
 80026f6:	4698      	mov	r8, r3
 80026f8:	46a1      	mov	r9, r4
 80026fa:	eb18 080a 	adds.w	r8, r8, sl
 80026fe:	eb49 090b 	adc.w	r9, r9, fp
 8002702:	f04f 0100 	mov.w	r1, #0
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800270e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002712:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002716:	4688      	mov	r8, r1
 8002718:	4691      	mov	r9, r2
 800271a:	eb1a 0508 	adds.w	r5, sl, r8
 800271e:	eb4b 0609 	adc.w	r6, fp, r9
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4619      	mov	r1, r3
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	f04f 0400 	mov.w	r4, #0
 8002734:	0094      	lsls	r4, r2, #2
 8002736:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800273a:	008b      	lsls	r3, r1, #2
 800273c:	461a      	mov	r2, r3
 800273e:	4623      	mov	r3, r4
 8002740:	4628      	mov	r0, r5
 8002742:	4631      	mov	r1, r6
 8002744:	f7fd fd4c 	bl	80001e0 <__aeabi_uldivmod>
 8002748:	4603      	mov	r3, r0
 800274a:	460c      	mov	r4, r1
 800274c:	461a      	mov	r2, r3
 800274e:	4b50      	ldr	r3, [pc, #320]	; (8002890 <UART_SetConfig+0x6f4>)
 8002750:	fba3 2302 	umull	r2, r3, r3, r2
 8002754:	095b      	lsrs	r3, r3, #5
 8002756:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	469b      	mov	fp, r3
 800275e:	f04f 0c00 	mov.w	ip, #0
 8002762:	46d9      	mov	r9, fp
 8002764:	46e2      	mov	sl, ip
 8002766:	eb19 0309 	adds.w	r3, r9, r9
 800276a:	eb4a 040a 	adc.w	r4, sl, sl
 800276e:	4699      	mov	r9, r3
 8002770:	46a2      	mov	sl, r4
 8002772:	eb19 090b 	adds.w	r9, r9, fp
 8002776:	eb4a 0a0c 	adc.w	sl, sl, ip
 800277a:	f04f 0100 	mov.w	r1, #0
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002786:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800278a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800278e:	4689      	mov	r9, r1
 8002790:	4692      	mov	sl, r2
 8002792:	eb1b 0509 	adds.w	r5, fp, r9
 8002796:	eb4c 060a 	adc.w	r6, ip, sl
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4619      	mov	r1, r3
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	f04f 0400 	mov.w	r4, #0
 80027ac:	0094      	lsls	r4, r2, #2
 80027ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027b2:	008b      	lsls	r3, r1, #2
 80027b4:	461a      	mov	r2, r3
 80027b6:	4623      	mov	r3, r4
 80027b8:	4628      	mov	r0, r5
 80027ba:	4631      	mov	r1, r6
 80027bc:	f7fd fd10 	bl	80001e0 <__aeabi_uldivmod>
 80027c0:	4603      	mov	r3, r0
 80027c2:	460c      	mov	r4, r1
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b32      	ldr	r3, [pc, #200]	; (8002890 <UART_SetConfig+0x6f4>)
 80027c8:	fba3 1302 	umull	r1, r3, r3, r2
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	2164      	movs	r1, #100	; 0x64
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	3332      	adds	r3, #50	; 0x32
 80027da:	4a2d      	ldr	r2, [pc, #180]	; (8002890 <UART_SetConfig+0x6f4>)
 80027dc:	fba2 2303 	umull	r2, r3, r2, r3
 80027e0:	095b      	lsrs	r3, r3, #5
 80027e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027e6:	4498      	add	r8, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	469b      	mov	fp, r3
 80027ec:	f04f 0c00 	mov.w	ip, #0
 80027f0:	46d9      	mov	r9, fp
 80027f2:	46e2      	mov	sl, ip
 80027f4:	eb19 0309 	adds.w	r3, r9, r9
 80027f8:	eb4a 040a 	adc.w	r4, sl, sl
 80027fc:	4699      	mov	r9, r3
 80027fe:	46a2      	mov	sl, r4
 8002800:	eb19 090b 	adds.w	r9, r9, fp
 8002804:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002808:	f04f 0100 	mov.w	r1, #0
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002814:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002818:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800281c:	4689      	mov	r9, r1
 800281e:	4692      	mov	sl, r2
 8002820:	eb1b 0509 	adds.w	r5, fp, r9
 8002824:	eb4c 060a 	adc.w	r6, ip, sl
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4619      	mov	r1, r3
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	f04f 0400 	mov.w	r4, #0
 800283a:	0094      	lsls	r4, r2, #2
 800283c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002840:	008b      	lsls	r3, r1, #2
 8002842:	461a      	mov	r2, r3
 8002844:	4623      	mov	r3, r4
 8002846:	4628      	mov	r0, r5
 8002848:	4631      	mov	r1, r6
 800284a:	f7fd fcc9 	bl	80001e0 <__aeabi_uldivmod>
 800284e:	4603      	mov	r3, r0
 8002850:	460c      	mov	r4, r1
 8002852:	461a      	mov	r2, r3
 8002854:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <UART_SetConfig+0x6f4>)
 8002856:	fba3 1302 	umull	r1, r3, r3, r2
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	2164      	movs	r1, #100	; 0x64
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	3332      	adds	r3, #50	; 0x32
 8002868:	4a09      	ldr	r2, [pc, #36]	; (8002890 <UART_SetConfig+0x6f4>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	095b      	lsrs	r3, r3, #5
 8002870:	f003 020f 	and.w	r2, r3, #15
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4442      	add	r2, r8
 800287a:	609a      	str	r2, [r3, #8]
}
 800287c:	e7ff      	b.n	800287e <UART_SetConfig+0x6e2>
 800287e:	bf00      	nop
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002888:	40011000 	.word	0x40011000
 800288c:	40011400 	.word	0x40011400
 8002890:	51eb851f 	.word	0x51eb851f

08002894 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800289e:	2300      	movs	r3, #0
 80028a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80028a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028a6:	2b84      	cmp	r3, #132	; 0x84
 80028a8:	d005      	beq.n	80028b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80028aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4413      	add	r3, r2
 80028b2:	3303      	adds	r3, #3
 80028b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80028b6:	68fb      	ldr	r3, [r7, #12]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80028c8:	f001 f934 	bl	8003b34 <vTaskStartScheduler>
  
  return osOK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80028d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028d4:	b089      	sub	sp, #36	; 0x24
 80028d6:	af04      	add	r7, sp, #16
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d020      	beq.n	8002926 <osThreadCreate+0x54>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d01c      	beq.n	8002926 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685c      	ldr	r4, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681d      	ldr	r5, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691e      	ldr	r6, [r3, #16]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff ffc8 	bl	8002894 <makeFreeRtosPriority>
 8002904:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800290e:	9202      	str	r2, [sp, #8]
 8002910:	9301      	str	r3, [sp, #4]
 8002912:	9100      	str	r1, [sp, #0]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	4632      	mov	r2, r6
 8002918:	4629      	mov	r1, r5
 800291a:	4620      	mov	r0, r4
 800291c:	f000 ff46 	bl	80037ac <xTaskCreateStatic>
 8002920:	4603      	mov	r3, r0
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	e01c      	b.n	8002960 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685c      	ldr	r4, [r3, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002932:	b29e      	uxth	r6, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff ffaa 	bl	8002894 <makeFreeRtosPriority>
 8002940:	4602      	mov	r2, r0
 8002942:	f107 030c 	add.w	r3, r7, #12
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	9200      	str	r2, [sp, #0]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	4632      	mov	r2, r6
 800294e:	4629      	mov	r1, r5
 8002950:	4620      	mov	r0, r4
 8002952:	f000 ff85 	bl	8003860 <xTaskCreate>
 8002956:	4603      	mov	r3, r0
 8002958:	2b01      	cmp	r3, #1
 800295a:	d001      	beq.n	8002960 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800295c:	2300      	movs	r3, #0
 800295e:	e000      	b.n	8002962 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002960:	68fb      	ldr	r3, [r7, #12]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800296a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8002970:	201c      	movs	r0, #28
 8002972:	f002 fc75 	bl	8005260 <pvPortMalloc>
 8002976:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3304      	adds	r3, #4
 8002988:	4618      	mov	r0, r3
 800298a:	f000 f98b 	bl	8002ca4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8002994:	687b      	ldr	r3, [r7, #4]
	}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b090      	sub	sp, #64	; 0x40
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d109      	bne.n	80029d4 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c4:	f383 8811 	msr	BASEPRI, r3
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	623b      	str	r3, [r7, #32]
 80029d2:	e7fe      	b.n	80029d2 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d009      	beq.n	80029f2 <xEventGroupWaitBits+0x52>
 80029de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e2:	f383 8811 	msr	BASEPRI, r3
 80029e6:	f3bf 8f6f 	isb	sy
 80029ea:	f3bf 8f4f 	dsb	sy
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	e7fe      	b.n	80029f0 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d109      	bne.n	8002a0c <xEventGroupWaitBits+0x6c>
 80029f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fc:	f383 8811 	msr	BASEPRI, r3
 8002a00:	f3bf 8f6f 	isb	sy
 8002a04:	f3bf 8f4f 	dsb	sy
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	e7fe      	b.n	8002a0a <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a0c:	f001 fd60 	bl	80044d0 <xTaskGetSchedulerState>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d102      	bne.n	8002a1c <xEventGroupWaitBits+0x7c>
 8002a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <xEventGroupWaitBits+0x80>
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e000      	b.n	8002a22 <xEventGroupWaitBits+0x82>
 8002a20:	2300      	movs	r3, #0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d109      	bne.n	8002a3a <xEventGroupWaitBits+0x9a>
 8002a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2a:	f383 8811 	msr	BASEPRI, r3
 8002a2e:	f3bf 8f6f 	isb	sy
 8002a32:	f3bf 8f4f 	dsb	sy
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	e7fe      	b.n	8002a38 <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8002a3a:	f001 f8df 	bl	8003bfc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	68b9      	ldr	r1, [r7, #8]
 8002a48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a4a:	f000 f909 	bl	8002c60 <prvTestWaitCondition>
 8002a4e:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8002a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00e      	beq.n	8002a74 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8002a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a58:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d028      	beq.n	8002ab6 <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	401a      	ands	r2, r3
 8002a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	e020      	b.n	8002ab6 <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8002a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d104      	bne.n	8002a84 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8002a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	633b      	str	r3, [r7, #48]	; 0x30
 8002a82:	e018      	b.n	8002ab6 <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a90:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8002a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a9e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa2:	1d18      	adds	r0, r3, #4
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002aac:	4619      	mov	r1, r3
 8002aae:	f001 fa95 	bl	8003fdc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8002ab6:	f001 f8af 	bl	8003c18 <xTaskResumeAll>
 8002aba:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8002abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d031      	beq.n	8002b26 <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d107      	bne.n	8002ad8 <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8002ac8:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <xEventGroupWaitBits+0x190>)
 8002aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8002ad8:	f001 fd9c 	bl	8004614 <uxTaskResetEventItemValue>
 8002adc:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d11a      	bne.n	8002b1e <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8002ae8:	f002 faa0 	bl	800502c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8002aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	68b9      	ldr	r1, [r7, #8]
 8002af6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002af8:	f000 f8b2 	bl	8002c60 <prvTestWaitCondition>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d009      	beq.n	8002b16 <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d006      	beq.n	8002b16 <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	401a      	ands	r2, r3
 8002b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b14:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8002b16:	2301      	movs	r3, #1
 8002b18:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8002b1a:	f002 fab5 	bl	8005088 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b24:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8002b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3740      	adds	r7, #64	; 0x40
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	e000ed04 	.word	0xe000ed04

08002b34 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08e      	sub	sp, #56	; 0x38
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d109      	bne.n	8002b64 <xEventGroupSetBits+0x30>
 8002b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	e7fe      	b.n	8002b62 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d009      	beq.n	8002b82 <xEventGroupSetBits+0x4e>
 8002b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	e7fe      	b.n	8002b80 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8002b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b84:	3304      	adds	r3, #4
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	3308      	adds	r3, #8
 8002b8c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8002b8e:	f001 f835 	bl	8003bfc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8002b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8002ba4:	e03c      	b.n	8002c20 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8002ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8002bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002bbc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002bc4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d108      	bne.n	8002be2 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8002bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00b      	beq.n	8002bf4 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be0:	e008      	b.n	8002bf4 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8002be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d101      	bne.n	8002bf4 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8002bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d010      	beq.n	8002c1c <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8002c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c14:	4619      	mov	r1, r3
 8002c16:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c18:	f001 faa6 	bl	8004168 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8002c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d1be      	bne.n	8002ba6 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	401a      	ands	r2, r3
 8002c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c34:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8002c36:	f000 ffef 	bl	8003c18 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8002c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3c:	681b      	ldr	r3, [r3, #0]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3738      	adds	r7, #56	; 0x38
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8002c50:	6839      	ldr	r1, [r7, #0]
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff ff6e 	bl	8002b34 <xEventGroupSetBits>
}
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d107      	bne.n	8002c86 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002c80:	2301      	movs	r3, #1
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	e007      	b.n	8002c96 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d101      	bne.n	8002c96 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002c92:	2301      	movs	r3, #1
 8002c94:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8002c96:	697b      	ldr	r3, [r7, #20]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	371c      	adds	r7, #28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f103 0208 	add.w	r2, r3, #8
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f103 0208 	add.w	r2, r3, #8
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f103 0208 	add.w	r2, r3, #8
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b085      	sub	sp, #20
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	601a      	str	r2, [r3, #0]
}
 8002d3a:	bf00      	nop
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d46:	b480      	push	{r7}
 8002d48:	b085      	sub	sp, #20
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5c:	d103      	bne.n	8002d66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	e00c      	b.n	8002d80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3308      	adds	r3, #8
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	e002      	b.n	8002d74 <vListInsert+0x2e>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d2f6      	bcs.n	8002d6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	601a      	str	r2, [r3, #0]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	6892      	ldr	r2, [r2, #8]
 8002dce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6852      	ldr	r2, [r2, #4]
 8002dd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d103      	bne.n	8002dec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	1e5a      	subs	r2, r3, #1
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d109      	bne.n	8002e34 <xQueueGenericReset+0x28>
 8002e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e24:	f383 8811 	msr	BASEPRI, r3
 8002e28:	f3bf 8f6f 	isb	sy
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	e7fe      	b.n	8002e32 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002e34:	f002 f8fa 	bl	800502c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e40:	68f9      	ldr	r1, [r7, #12]
 8002e42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	441a      	add	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e64:	3b01      	subs	r3, #1
 8002e66:	68f9      	ldr	r1, [r7, #12]
 8002e68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	441a      	add	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	22ff      	movs	r2, #255	; 0xff
 8002e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	22ff      	movs	r2, #255	; 0xff
 8002e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d114      	bne.n	8002eb4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d01a      	beq.n	8002ec8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	3310      	adds	r3, #16
 8002e96:	4618      	mov	r0, r3
 8002e98:	f001 f904 	bl	80040a4 <xTaskRemoveFromEventList>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d012      	beq.n	8002ec8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <xQueueGenericReset+0xcc>)
 8002ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	e009      	b.n	8002ec8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3310      	adds	r3, #16
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fef3 	bl	8002ca4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3324      	adds	r3, #36	; 0x24
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff feee 	bl	8002ca4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ec8:	f002 f8de 	bl	8005088 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ecc:	2301      	movs	r3, #1
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	e000ed04 	.word	0xe000ed04

08002edc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08e      	sub	sp, #56	; 0x38
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d109      	bne.n	8002f04 <xQueueGenericCreateStatic+0x28>
 8002ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef4:	f383 8811 	msr	BASEPRI, r3
 8002ef8:	f3bf 8f6f 	isb	sy
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f02:	e7fe      	b.n	8002f02 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <xQueueGenericCreateStatic+0x42>
 8002f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0e:	f383 8811 	msr	BASEPRI, r3
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1c:	e7fe      	b.n	8002f1c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <xQueueGenericCreateStatic+0x4e>
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <xQueueGenericCreateStatic+0x52>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <xQueueGenericCreateStatic+0x54>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d109      	bne.n	8002f48 <xQueueGenericCreateStatic+0x6c>
 8002f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	623b      	str	r3, [r7, #32]
 8002f46:	e7fe      	b.n	8002f46 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d102      	bne.n	8002f54 <xQueueGenericCreateStatic+0x78>
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <xQueueGenericCreateStatic+0x7c>
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <xQueueGenericCreateStatic+0x7e>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <xQueueGenericCreateStatic+0x96>
 8002f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	61fb      	str	r3, [r7, #28]
 8002f70:	e7fe      	b.n	8002f70 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f72:	2348      	movs	r3, #72	; 0x48
 8002f74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b48      	cmp	r3, #72	; 0x48
 8002f7a:	d009      	beq.n	8002f90 <xQueueGenericCreateStatic+0xb4>
 8002f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	61bb      	str	r3, [r7, #24]
 8002f8e:	e7fe      	b.n	8002f8e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002f90:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00d      	beq.n	8002fb8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002fa4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	4613      	mov	r3, r2
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 f805 	bl	8002fc2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3730      	adds	r7, #48	; 0x30
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d103      	bne.n	8002fde <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	e002      	b.n	8002fe4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	69b8      	ldr	r0, [r7, #24]
 8002ff4:	f7ff ff0a 	bl	8002e0c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ff8:	bf00      	nop
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08e      	sub	sp, #56	; 0x38
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
 800300c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800300e:	2300      	movs	r3, #0
 8003010:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003018:	2b00      	cmp	r3, #0
 800301a:	d109      	bne.n	8003030 <xQueueGenericSend+0x30>
 800301c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
 800302e:	e7fe      	b.n	800302e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d103      	bne.n	800303e <xQueueGenericSend+0x3e>
 8003036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <xQueueGenericSend+0x42>
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <xQueueGenericSend+0x44>
 8003042:	2300      	movs	r3, #0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d109      	bne.n	800305c <xQueueGenericSend+0x5c>
 8003048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304c:	f383 8811 	msr	BASEPRI, r3
 8003050:	f3bf 8f6f 	isb	sy
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
 800305a:	e7fe      	b.n	800305a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d103      	bne.n	800306a <xQueueGenericSend+0x6a>
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <xQueueGenericSend+0x6e>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <xQueueGenericSend+0x70>
 800306e:	2300      	movs	r3, #0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d109      	bne.n	8003088 <xQueueGenericSend+0x88>
 8003074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003078:	f383 8811 	msr	BASEPRI, r3
 800307c:	f3bf 8f6f 	isb	sy
 8003080:	f3bf 8f4f 	dsb	sy
 8003084:	623b      	str	r3, [r7, #32]
 8003086:	e7fe      	b.n	8003086 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003088:	f001 fa22 	bl	80044d0 <xTaskGetSchedulerState>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d102      	bne.n	8003098 <xQueueGenericSend+0x98>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <xQueueGenericSend+0x9c>
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <xQueueGenericSend+0x9e>
 800309c:	2300      	movs	r3, #0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <xQueueGenericSend+0xb6>
 80030a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a6:	f383 8811 	msr	BASEPRI, r3
 80030aa:	f3bf 8f6f 	isb	sy
 80030ae:	f3bf 8f4f 	dsb	sy
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	e7fe      	b.n	80030b4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030b6:	f001 ffb9 	bl	800502c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d302      	bcc.n	80030cc <xQueueGenericSend+0xcc>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d129      	bne.n	8003120 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030d2:	f000 f9ff 	bl	80034d4 <prvCopyDataToQueue>
 80030d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d010      	beq.n	8003102 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	3324      	adds	r3, #36	; 0x24
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 ffdd 	bl	80040a4 <xTaskRemoveFromEventList>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d013      	beq.n	8003118 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030f0:	4b3f      	ldr	r3, [pc, #252]	; (80031f0 <xQueueGenericSend+0x1f0>)
 80030f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	f3bf 8f4f 	dsb	sy
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	e00a      	b.n	8003118 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d007      	beq.n	8003118 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003108:	4b39      	ldr	r3, [pc, #228]	; (80031f0 <xQueueGenericSend+0x1f0>)
 800310a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003118:	f001 ffb6 	bl	8005088 <vPortExitCritical>
				return pdPASS;
 800311c:	2301      	movs	r3, #1
 800311e:	e063      	b.n	80031e8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d103      	bne.n	800312e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003126:	f001 ffaf 	bl	8005088 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800312a:	2300      	movs	r3, #0
 800312c:	e05c      	b.n	80031e8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800312e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003130:	2b00      	cmp	r3, #0
 8003132:	d106      	bne.n	8003142 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003134:	f107 0314 	add.w	r3, r7, #20
 8003138:	4618      	mov	r0, r3
 800313a:	f001 f875 	bl	8004228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800313e:	2301      	movs	r3, #1
 8003140:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003142:	f001 ffa1 	bl	8005088 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003146:	f000 fd59 	bl	8003bfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800314a:	f001 ff6f 	bl	800502c <vPortEnterCritical>
 800314e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003150:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003154:	b25b      	sxtb	r3, r3
 8003156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315a:	d103      	bne.n	8003164 <xQueueGenericSend+0x164>
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800316a:	b25b      	sxtb	r3, r3
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d103      	bne.n	800317a <xQueueGenericSend+0x17a>
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800317a:	f001 ff85 	bl	8005088 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800317e:	1d3a      	adds	r2, r7, #4
 8003180:	f107 0314 	add.w	r3, r7, #20
 8003184:	4611      	mov	r1, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f001 f864 	bl	8004254 <xTaskCheckForTimeOut>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d124      	bne.n	80031dc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003192:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003194:	f000 fa96 	bl	80036c4 <prvIsQueueFull>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d018      	beq.n	80031d0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800319e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a0:	3310      	adds	r3, #16
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	4611      	mov	r1, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 fef4 	bl	8003f94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80031ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031ae:	f000 fa21 	bl	80035f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80031b2:	f000 fd31 	bl	8003c18 <xTaskResumeAll>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f47f af7c 	bne.w	80030b6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80031be:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <xQueueGenericSend+0x1f0>)
 80031c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	e772      	b.n	80030b6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031d2:	f000 fa0f 	bl	80035f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031d6:	f000 fd1f 	bl	8003c18 <xTaskResumeAll>
 80031da:	e76c      	b.n	80030b6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031de:	f000 fa09 	bl	80035f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031e2:	f000 fd19 	bl	8003c18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3738      	adds	r7, #56	; 0x38
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	e000ed04 	.word	0xe000ed04

080031f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08e      	sub	sp, #56	; 0x38
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	2b00      	cmp	r3, #0
 800320a:	d109      	bne.n	8003220 <xQueueGenericSendFromISR+0x2c>
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
 800321e:	e7fe      	b.n	800321e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d103      	bne.n	800322e <xQueueGenericSendFromISR+0x3a>
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <xQueueGenericSendFromISR+0x3e>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <xQueueGenericSendFromISR+0x40>
 8003232:	2300      	movs	r3, #0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d109      	bne.n	800324c <xQueueGenericSendFromISR+0x58>
 8003238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323c:	f383 8811 	msr	BASEPRI, r3
 8003240:	f3bf 8f6f 	isb	sy
 8003244:	f3bf 8f4f 	dsb	sy
 8003248:	623b      	str	r3, [r7, #32]
 800324a:	e7fe      	b.n	800324a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d103      	bne.n	800325a <xQueueGenericSendFromISR+0x66>
 8003252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <xQueueGenericSendFromISR+0x6a>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <xQueueGenericSendFromISR+0x6c>
 800325e:	2300      	movs	r3, #0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d109      	bne.n	8003278 <xQueueGenericSendFromISR+0x84>
 8003264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	61fb      	str	r3, [r7, #28]
 8003276:	e7fe      	b.n	8003276 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003278:	f001 ffb4 	bl	80051e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800327c:	f3ef 8211 	mrs	r2, BASEPRI
 8003280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003284:	f383 8811 	msr	BASEPRI, r3
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	61ba      	str	r2, [r7, #24]
 8003292:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003294:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003296:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800329c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d302      	bcc.n	80032aa <xQueueGenericSendFromISR+0xb6>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d12c      	bne.n	8003304 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80032aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	68b9      	ldr	r1, [r7, #8]
 80032b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032ba:	f000 f90b 	bl	80034d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80032be:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c6:	d112      	bne.n	80032ee <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d016      	beq.n	80032fe <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d2:	3324      	adds	r3, #36	; 0x24
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 fee5 	bl	80040a4 <xTaskRemoveFromEventList>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00e      	beq.n	80032fe <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00b      	beq.n	80032fe <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e007      	b.n	80032fe <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032f2:	3301      	adds	r3, #1
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	b25a      	sxtb	r2, r3
 80032f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80032fe:	2301      	movs	r3, #1
 8003300:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003302:	e001      	b.n	8003308 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003304:	2300      	movs	r3, #0
 8003306:	637b      	str	r3, [r7, #52]	; 0x34
 8003308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003314:	4618      	mov	r0, r3
 8003316:	3738      	adds	r7, #56	; 0x38
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08c      	sub	sp, #48	; 0x30
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003328:	2300      	movs	r3, #0
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003332:	2b00      	cmp	r3, #0
 8003334:	d109      	bne.n	800334a <xQueueReceive+0x2e>
	__asm volatile
 8003336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333a:	f383 8811 	msr	BASEPRI, r3
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	f3bf 8f4f 	dsb	sy
 8003346:	623b      	str	r3, [r7, #32]
 8003348:	e7fe      	b.n	8003348 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d103      	bne.n	8003358 <xQueueReceive+0x3c>
 8003350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <xQueueReceive+0x40>
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <xQueueReceive+0x42>
 800335c:	2300      	movs	r3, #0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d109      	bne.n	8003376 <xQueueReceive+0x5a>
 8003362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003366:	f383 8811 	msr	BASEPRI, r3
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	61fb      	str	r3, [r7, #28]
 8003374:	e7fe      	b.n	8003374 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003376:	f001 f8ab 	bl	80044d0 <xTaskGetSchedulerState>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d102      	bne.n	8003386 <xQueueReceive+0x6a>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <xQueueReceive+0x6e>
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <xQueueReceive+0x70>
 800338a:	2300      	movs	r3, #0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d109      	bne.n	80033a4 <xQueueReceive+0x88>
 8003390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003394:	f383 8811 	msr	BASEPRI, r3
 8003398:	f3bf 8f6f 	isb	sy
 800339c:	f3bf 8f4f 	dsb	sy
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	e7fe      	b.n	80033a2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033a4:	f001 fe42 	bl	800502c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01f      	beq.n	80033f4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033b8:	f000 f8f6 	bl	80035a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033be:	1e5a      	subs	r2, r3, #1
 80033c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00f      	beq.n	80033ec <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ce:	3310      	adds	r3, #16
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fe67 	bl	80040a4 <xTaskRemoveFromEventList>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d007      	beq.n	80033ec <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033dc:	4b3c      	ldr	r3, [pc, #240]	; (80034d0 <xQueueReceive+0x1b4>)
 80033de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033ec:	f001 fe4c 	bl	8005088 <vPortExitCritical>
				return pdPASS;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e069      	b.n	80034c8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d103      	bne.n	8003402 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033fa:	f001 fe45 	bl	8005088 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033fe:	2300      	movs	r3, #0
 8003400:	e062      	b.n	80034c8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	2b00      	cmp	r3, #0
 8003406:	d106      	bne.n	8003416 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003408:	f107 0310 	add.w	r3, r7, #16
 800340c:	4618      	mov	r0, r3
 800340e:	f000 ff0b 	bl	8004228 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003412:	2301      	movs	r3, #1
 8003414:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003416:	f001 fe37 	bl	8005088 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800341a:	f000 fbef 	bl	8003bfc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800341e:	f001 fe05 	bl	800502c <vPortEnterCritical>
 8003422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003424:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003428:	b25b      	sxtb	r3, r3
 800342a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342e:	d103      	bne.n	8003438 <xQueueReceive+0x11c>
 8003430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800343e:	b25b      	sxtb	r3, r3
 8003440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003444:	d103      	bne.n	800344e <xQueueReceive+0x132>
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800344e:	f001 fe1b 	bl	8005088 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003452:	1d3a      	adds	r2, r7, #4
 8003454:	f107 0310 	add.w	r3, r7, #16
 8003458:	4611      	mov	r1, r2
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fefa 	bl	8004254 <xTaskCheckForTimeOut>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d123      	bne.n	80034ae <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003466:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003468:	f000 f916 	bl	8003698 <prvIsQueueEmpty>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d017      	beq.n	80034a2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003474:	3324      	adds	r3, #36	; 0x24
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	4611      	mov	r1, r2
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fd8a 	bl	8003f94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003482:	f000 f8b7 	bl	80035f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003486:	f000 fbc7 	bl	8003c18 <xTaskResumeAll>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d189      	bne.n	80033a4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003490:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <xQueueReceive+0x1b4>)
 8003492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	e780      	b.n	80033a4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80034a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034a4:	f000 f8a6 	bl	80035f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034a8:	f000 fbb6 	bl	8003c18 <xTaskResumeAll>
 80034ac:	e77a      	b.n	80033a4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80034ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034b0:	f000 f8a0 	bl	80035f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034b4:	f000 fbb0 	bl	8003c18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034ba:	f000 f8ed 	bl	8003698 <prvIsQueueEmpty>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f43f af6f 	beq.w	80033a4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3730      	adds	r7, #48	; 0x30
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	e000ed04 	.word	0xe000ed04

080034d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80034e0:	2300      	movs	r3, #0
 80034e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10d      	bne.n	800350e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d14d      	bne.n	8003596 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	4618      	mov	r0, r3
 8003500:	f001 f804 	bl	800450c <xTaskPriorityDisinherit>
 8003504:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	e043      	b.n	8003596 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d119      	bne.n	8003548 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6858      	ldr	r0, [r3, #4]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	461a      	mov	r2, r3
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	f002 f898 	bl	8005654 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	441a      	add	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	429a      	cmp	r2, r3
 800353c:	d32b      	bcc.n	8003596 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	e026      	b.n	8003596 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	68d8      	ldr	r0, [r3, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	461a      	mov	r2, r3
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	f002 f87e 	bl	8005654 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	425b      	negs	r3, r3
 8003562:	441a      	add	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d207      	bcs.n	8003584 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	425b      	negs	r3, r3
 800357e:	441a      	add	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d105      	bne.n	8003596 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	3b01      	subs	r3, #1
 8003594:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800359e:	697b      	ldr	r3, [r7, #20]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d018      	beq.n	80035ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	441a      	add	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d303      	bcc.n	80035dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68d9      	ldr	r1, [r3, #12]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	461a      	mov	r2, r3
 80035e6:	6838      	ldr	r0, [r7, #0]
 80035e8:	f002 f834 	bl	8005654 <memcpy>
	}
}
 80035ec:	bf00      	nop
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80035fc:	f001 fd16 	bl	800502c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003606:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003608:	e011      	b.n	800362e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	2b00      	cmp	r3, #0
 8003610:	d012      	beq.n	8003638 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3324      	adds	r3, #36	; 0x24
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fd44 	bl	80040a4 <xTaskRemoveFromEventList>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003622:	f000 fe77 	bl	8004314 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	3b01      	subs	r3, #1
 800362a:	b2db      	uxtb	r3, r3
 800362c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800362e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003632:	2b00      	cmp	r3, #0
 8003634:	dce9      	bgt.n	800360a <prvUnlockQueue+0x16>
 8003636:	e000      	b.n	800363a <prvUnlockQueue+0x46>
					break;
 8003638:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	22ff      	movs	r2, #255	; 0xff
 800363e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003642:	f001 fd21 	bl	8005088 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003646:	f001 fcf1 	bl	800502c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003650:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003652:	e011      	b.n	8003678 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d012      	beq.n	8003682 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3310      	adds	r3, #16
 8003660:	4618      	mov	r0, r3
 8003662:	f000 fd1f 	bl	80040a4 <xTaskRemoveFromEventList>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800366c:	f000 fe52 	bl	8004314 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003670:	7bbb      	ldrb	r3, [r7, #14]
 8003672:	3b01      	subs	r3, #1
 8003674:	b2db      	uxtb	r3, r3
 8003676:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003678:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800367c:	2b00      	cmp	r3, #0
 800367e:	dce9      	bgt.n	8003654 <prvUnlockQueue+0x60>
 8003680:	e000      	b.n	8003684 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003682:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	22ff      	movs	r2, #255	; 0xff
 8003688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800368c:	f001 fcfc 	bl	8005088 <vPortExitCritical>
}
 8003690:	bf00      	nop
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036a0:	f001 fcc4 	bl	800502c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d102      	bne.n	80036b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80036ac:	2301      	movs	r3, #1
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	e001      	b.n	80036b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036b6:	f001 fce7 	bl	8005088 <vPortExitCritical>

	return xReturn;
 80036ba:	68fb      	ldr	r3, [r7, #12]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036cc:	f001 fcae 	bl	800502c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d8:	429a      	cmp	r2, r3
 80036da:	d102      	bne.n	80036e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80036dc:	2301      	movs	r3, #1
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	e001      	b.n	80036e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036e6:	f001 fccf 	bl	8005088 <vPortExitCritical>

	return xReturn;
 80036ea:	68fb      	ldr	r3, [r7, #12]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	e014      	b.n	800372e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003704:	4a0e      	ldr	r2, [pc, #56]	; (8003740 <vQueueAddToRegistry+0x4c>)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10b      	bne.n	8003728 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003710:	490b      	ldr	r1, [pc, #44]	; (8003740 <vQueueAddToRegistry+0x4c>)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800371a:	4a09      	ldr	r2, [pc, #36]	; (8003740 <vQueueAddToRegistry+0x4c>)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	4413      	add	r3, r2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003726:	e005      	b.n	8003734 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3301      	adds	r3, #1
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b07      	cmp	r3, #7
 8003732:	d9e7      	bls.n	8003704 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003734:	bf00      	nop
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	200045d4 	.word	0x200045d4

08003744 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003754:	f001 fc6a 	bl	800502c <vPortEnterCritical>
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800375e:	b25b      	sxtb	r3, r3
 8003760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003764:	d103      	bne.n	800376e <vQueueWaitForMessageRestricted+0x2a>
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003774:	b25b      	sxtb	r3, r3
 8003776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377a:	d103      	bne.n	8003784 <vQueueWaitForMessageRestricted+0x40>
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003784:	f001 fc80 	bl	8005088 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378c:	2b00      	cmp	r3, #0
 800378e:	d106      	bne.n	800379e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	3324      	adds	r3, #36	; 0x24
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fc59 	bl	8004050 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800379e:	6978      	ldr	r0, [r7, #20]
 80037a0:	f7ff ff28 	bl	80035f4 <prvUnlockQueue>
	}
 80037a4:	bf00      	nop
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08e      	sub	sp, #56	; 0x38
 80037b0:	af04      	add	r7, sp, #16
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80037ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d109      	bne.n	80037d4 <xTaskCreateStatic+0x28>
 80037c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c4:	f383 8811 	msr	BASEPRI, r3
 80037c8:	f3bf 8f6f 	isb	sy
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	623b      	str	r3, [r7, #32]
 80037d2:	e7fe      	b.n	80037d2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80037d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <xTaskCreateStatic+0x42>
 80037da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037de:	f383 8811 	msr	BASEPRI, r3
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	61fb      	str	r3, [r7, #28]
 80037ec:	e7fe      	b.n	80037ec <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80037ee:	2354      	movs	r3, #84	; 0x54
 80037f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	2b54      	cmp	r3, #84	; 0x54
 80037f6:	d009      	beq.n	800380c <xTaskCreateStatic+0x60>
 80037f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fc:	f383 8811 	msr	BASEPRI, r3
 8003800:	f3bf 8f6f 	isb	sy
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	e7fe      	b.n	800380a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800380c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800380e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003810:	2b00      	cmp	r3, #0
 8003812:	d01e      	beq.n	8003852 <xTaskCreateStatic+0xa6>
 8003814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003816:	2b00      	cmp	r3, #0
 8003818:	d01b      	beq.n	8003852 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800381a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003822:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	2202      	movs	r2, #2
 8003828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800382c:	2300      	movs	r3, #0
 800382e:	9303      	str	r3, [sp, #12]
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	9302      	str	r3, [sp, #8]
 8003834:	f107 0314 	add.w	r3, r7, #20
 8003838:	9301      	str	r3, [sp, #4]
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 f850 	bl	80038ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800384a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800384c:	f000 f8d4 	bl	80039f8 <prvAddNewTaskToReadyList>
 8003850:	e001      	b.n	8003856 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003856:	697b      	ldr	r3, [r7, #20]
	}
 8003858:	4618      	mov	r0, r3
 800385a:	3728      	adds	r7, #40	; 0x28
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08c      	sub	sp, #48	; 0x30
 8003864:	af04      	add	r7, sp, #16
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003870:	88fb      	ldrh	r3, [r7, #6]
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4618      	mov	r0, r3
 8003876:	f001 fcf3 	bl	8005260 <pvPortMalloc>
 800387a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00e      	beq.n	80038a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003882:	2054      	movs	r0, #84	; 0x54
 8003884:	f001 fcec 	bl	8005260 <pvPortMalloc>
 8003888:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	631a      	str	r2, [r3, #48]	; 0x30
 8003896:	e005      	b.n	80038a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003898:	6978      	ldr	r0, [r7, #20]
 800389a:	f001 fda3 	bl	80053e4 <vPortFree>
 800389e:	e001      	b.n	80038a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d017      	beq.n	80038da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038b2:	88fa      	ldrh	r2, [r7, #6]
 80038b4:	2300      	movs	r3, #0
 80038b6:	9303      	str	r3, [sp, #12]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	9302      	str	r3, [sp, #8]
 80038bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	68b9      	ldr	r1, [r7, #8]
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f80e 	bl	80038ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038ce:	69f8      	ldr	r0, [r7, #28]
 80038d0:	f000 f892 	bl	80039f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038d4:	2301      	movs	r3, #1
 80038d6:	61bb      	str	r3, [r7, #24]
 80038d8:	e002      	b.n	80038e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038da:	f04f 33ff 	mov.w	r3, #4294967295
 80038de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038e0:	69bb      	ldr	r3, [r7, #24]
	}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3720      	adds	r7, #32
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b088      	sub	sp, #32
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	60f8      	str	r0, [r7, #12]
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	607a      	str	r2, [r7, #4]
 80038f6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80038f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003902:	3b01      	subs	r3, #1
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f023 0307 	bic.w	r3, r3, #7
 8003910:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	2b00      	cmp	r3, #0
 800391a:	d009      	beq.n	8003930 <prvInitialiseNewTask+0x46>
 800391c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003920:	f383 8811 	msr	BASEPRI, r3
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	e7fe      	b.n	800392e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d01f      	beq.n	8003976 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]
 800393a:	e012      	b.n	8003962 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	4413      	add	r3, r2
 8003942:	7819      	ldrb	r1, [r3, #0]
 8003944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	3334      	adds	r3, #52	; 0x34
 800394c:	460a      	mov	r2, r1
 800394e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	4413      	add	r3, r2
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d006      	beq.n	800396a <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	3301      	adds	r3, #1
 8003960:	61fb      	str	r3, [r7, #28]
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	2b0f      	cmp	r3, #15
 8003966:	d9e9      	bls.n	800393c <prvInitialiseNewTask+0x52>
 8003968:	e000      	b.n	800396c <prvInitialiseNewTask+0x82>
			{
				break;
 800396a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800396c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003974:	e003      	b.n	800397e <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800397e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003980:	2b06      	cmp	r3, #6
 8003982:	d901      	bls.n	8003988 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003984:	2306      	movs	r3, #6
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800398c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003992:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003996:	2200      	movs	r2, #0
 8003998:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	3304      	adds	r3, #4
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff f9a0 	bl	8002ce4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a6:	3318      	adds	r3, #24
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff f99b 	bl	8002ce4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b6:	f1c3 0207 	rsb	r2, r3, #7
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80039c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c6:	2200      	movs	r2, #0
 80039c8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	68f9      	ldr	r1, [r7, #12]
 80039d6:	69b8      	ldr	r0, [r7, #24]
 80039d8:	f001 fa00 	bl	8004ddc <pxPortInitialiseStack>
 80039dc:	4602      	mov	r2, r0
 80039de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80039e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039ee:	bf00      	nop
 80039f0:	3720      	adds	r7, #32
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a00:	f001 fb14 	bl	800502c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a04:	4b2a      	ldr	r3, [pc, #168]	; (8003ab0 <prvAddNewTaskToReadyList+0xb8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	4a29      	ldr	r2, [pc, #164]	; (8003ab0 <prvAddNewTaskToReadyList+0xb8>)
 8003a0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a0e:	4b29      	ldr	r3, [pc, #164]	; (8003ab4 <prvAddNewTaskToReadyList+0xbc>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a16:	4a27      	ldr	r2, [pc, #156]	; (8003ab4 <prvAddNewTaskToReadyList+0xbc>)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a1c:	4b24      	ldr	r3, [pc, #144]	; (8003ab0 <prvAddNewTaskToReadyList+0xb8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d110      	bne.n	8003a46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a24:	f000 fc9a 	bl	800435c <prvInitialiseTaskLists>
 8003a28:	e00d      	b.n	8003a46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a2a:	4b23      	ldr	r3, [pc, #140]	; (8003ab8 <prvAddNewTaskToReadyList+0xc0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d109      	bne.n	8003a46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a32:	4b20      	ldr	r3, [pc, #128]	; (8003ab4 <prvAddNewTaskToReadyList+0xbc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d802      	bhi.n	8003a46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a40:	4a1c      	ldr	r2, [pc, #112]	; (8003ab4 <prvAddNewTaskToReadyList+0xbc>)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a46:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <prvAddNewTaskToReadyList+0xc4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	4a1b      	ldr	r2, [pc, #108]	; (8003abc <prvAddNewTaskToReadyList+0xc4>)
 8003a4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	2201      	movs	r2, #1
 8003a56:	409a      	lsls	r2, r3
 8003a58:	4b19      	ldr	r3, [pc, #100]	; (8003ac0 <prvAddNewTaskToReadyList+0xc8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	4a18      	ldr	r2, [pc, #96]	; (8003ac0 <prvAddNewTaskToReadyList+0xc8>)
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4a15      	ldr	r2, [pc, #84]	; (8003ac4 <prvAddNewTaskToReadyList+0xcc>)
 8003a70:	441a      	add	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	3304      	adds	r3, #4
 8003a76:	4619      	mov	r1, r3
 8003a78:	4610      	mov	r0, r2
 8003a7a:	f7ff f940 	bl	8002cfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a7e:	f001 fb03 	bl	8005088 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a82:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <prvAddNewTaskToReadyList+0xc0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00e      	beq.n	8003aa8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a8a:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <prvAddNewTaskToReadyList+0xbc>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d207      	bcs.n	8003aa8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a98:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <prvAddNewTaskToReadyList+0xd0>)
 8003a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003aa8:	bf00      	nop
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	200007d8 	.word	0x200007d8
 8003ab4:	200006d8 	.word	0x200006d8
 8003ab8:	200007e4 	.word	0x200007e4
 8003abc:	200007f4 	.word	0x200007f4
 8003ac0:	200007e0 	.word	0x200007e0
 8003ac4:	200006dc 	.word	0x200006dc
 8003ac8:	e000ed04 	.word	0xe000ed04

08003acc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d016      	beq.n	8003b0c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ade:	4b13      	ldr	r3, [pc, #76]	; (8003b2c <vTaskDelay+0x60>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <vTaskDelay+0x2e>
 8003ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aea:	f383 8811 	msr	BASEPRI, r3
 8003aee:	f3bf 8f6f 	isb	sy
 8003af2:	f3bf 8f4f 	dsb	sy
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	e7fe      	b.n	8003af8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003afa:	f000 f87f 	bl	8003bfc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003afe:	2100      	movs	r1, #0
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 fd9f 	bl	8004644 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b06:	f000 f887 	bl	8003c18 <xTaskResumeAll>
 8003b0a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d107      	bne.n	8003b22 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003b12:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <vTaskDelay+0x64>)
 8003b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20000800 	.word	0x20000800
 8003b30:	e000ed04 	.word	0xe000ed04

08003b34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08a      	sub	sp, #40	; 0x28
 8003b38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b42:	463a      	mov	r2, r7
 8003b44:	1d39      	adds	r1, r7, #4
 8003b46:	f107 0308 	add.w	r3, r7, #8
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fc fcc8 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b50:	6839      	ldr	r1, [r7, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	9202      	str	r2, [sp, #8]
 8003b58:	9301      	str	r3, [sp, #4]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	460a      	mov	r2, r1
 8003b62:	4920      	ldr	r1, [pc, #128]	; (8003be4 <vTaskStartScheduler+0xb0>)
 8003b64:	4820      	ldr	r0, [pc, #128]	; (8003be8 <vTaskStartScheduler+0xb4>)
 8003b66:	f7ff fe21 	bl	80037ac <xTaskCreateStatic>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	4b1f      	ldr	r3, [pc, #124]	; (8003bec <vTaskStartScheduler+0xb8>)
 8003b6e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b70:	4b1e      	ldr	r3, [pc, #120]	; (8003bec <vTaskStartScheduler+0xb8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	e001      	b.n	8003b82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d102      	bne.n	8003b8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b88:	f000 fdc2 	bl	8004710 <xTimerCreateTimerTask>
 8003b8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d115      	bne.n	8003bc0 <vTaskStartScheduler+0x8c>
 8003b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b98:	f383 8811 	msr	BASEPRI, r3
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ba6:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <vTaskStartScheduler+0xbc>)
 8003ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bae:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <vTaskStartScheduler+0xc0>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003bb4:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <vTaskStartScheduler+0xc4>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bba:	f001 f999 	bl	8004ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bbe:	e00d      	b.n	8003bdc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc6:	d109      	bne.n	8003bdc <vTaskStartScheduler+0xa8>
 8003bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bcc:	f383 8811 	msr	BASEPRI, r3
 8003bd0:	f3bf 8f6f 	isb	sy
 8003bd4:	f3bf 8f4f 	dsb	sy
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	e7fe      	b.n	8003bda <vTaskStartScheduler+0xa6>
}
 8003bdc:	bf00      	nop
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	080057d0 	.word	0x080057d0
 8003be8:	0800432d 	.word	0x0800432d
 8003bec:	200007fc 	.word	0x200007fc
 8003bf0:	200007f8 	.word	0x200007f8
 8003bf4:	200007e4 	.word	0x200007e4
 8003bf8:	200007dc 	.word	0x200007dc

08003bfc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c00:	4b04      	ldr	r3, [pc, #16]	; (8003c14 <vTaskSuspendAll+0x18>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3301      	adds	r3, #1
 8003c06:	4a03      	ldr	r2, [pc, #12]	; (8003c14 <vTaskSuspendAll+0x18>)
 8003c08:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003c0a:	bf00      	nop
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	20000800 	.word	0x20000800

08003c18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c26:	4b41      	ldr	r3, [pc, #260]	; (8003d2c <xTaskResumeAll+0x114>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d109      	bne.n	8003c42 <xTaskResumeAll+0x2a>
 8003c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	e7fe      	b.n	8003c40 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c42:	f001 f9f3 	bl	800502c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c46:	4b39      	ldr	r3, [pc, #228]	; (8003d2c <xTaskResumeAll+0x114>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	4a37      	ldr	r2, [pc, #220]	; (8003d2c <xTaskResumeAll+0x114>)
 8003c4e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c50:	4b36      	ldr	r3, [pc, #216]	; (8003d2c <xTaskResumeAll+0x114>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d161      	bne.n	8003d1c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c58:	4b35      	ldr	r3, [pc, #212]	; (8003d30 <xTaskResumeAll+0x118>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d05d      	beq.n	8003d1c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c60:	e02e      	b.n	8003cc0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c62:	4b34      	ldr	r3, [pc, #208]	; (8003d34 <xTaskResumeAll+0x11c>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3318      	adds	r3, #24
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff f8a2 	bl	8002db8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	3304      	adds	r3, #4
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff f89d 	bl	8002db8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	2201      	movs	r2, #1
 8003c84:	409a      	lsls	r2, r3
 8003c86:	4b2c      	ldr	r3, [pc, #176]	; (8003d38 <xTaskResumeAll+0x120>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	4a2a      	ldr	r2, [pc, #168]	; (8003d38 <xTaskResumeAll+0x120>)
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4a27      	ldr	r2, [pc, #156]	; (8003d3c <xTaskResumeAll+0x124>)
 8003c9e:	441a      	add	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	f7ff f829 	bl	8002cfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb0:	4b23      	ldr	r3, [pc, #140]	; (8003d40 <xTaskResumeAll+0x128>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d302      	bcc.n	8003cc0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003cba:	4b22      	ldr	r3, [pc, #136]	; (8003d44 <xTaskResumeAll+0x12c>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cc0:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <xTaskResumeAll+0x11c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1cc      	bne.n	8003c62 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cce:	f000 fbdf 	bl	8004490 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003cd2:	4b1d      	ldr	r3, [pc, #116]	; (8003d48 <xTaskResumeAll+0x130>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d010      	beq.n	8003d00 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cde:	f000 f847 	bl	8003d70 <xTaskIncrementTick>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d002      	beq.n	8003cee <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003ce8:	4b16      	ldr	r3, [pc, #88]	; (8003d44 <xTaskResumeAll+0x12c>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f1      	bne.n	8003cde <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003cfa:	4b13      	ldr	r3, [pc, #76]	; (8003d48 <xTaskResumeAll+0x130>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d00:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <xTaskResumeAll+0x12c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d009      	beq.n	8003d1c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d0c:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <xTaskResumeAll+0x134>)
 8003d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d1c:	f001 f9b4 	bl	8005088 <vPortExitCritical>

	return xAlreadyYielded;
 8003d20:	68bb      	ldr	r3, [r7, #8]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20000800 	.word	0x20000800
 8003d30:	200007d8 	.word	0x200007d8
 8003d34:	20000798 	.word	0x20000798
 8003d38:	200007e0 	.word	0x200007e0
 8003d3c:	200006dc 	.word	0x200006dc
 8003d40:	200006d8 	.word	0x200006d8
 8003d44:	200007ec 	.word	0x200007ec
 8003d48:	200007e8 	.word	0x200007e8
 8003d4c:	e000ed04 	.word	0xe000ed04

08003d50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d56:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <xTaskGetTickCount+0x1c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d5c:	687b      	ldr	r3, [r7, #4]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	200007dc 	.word	0x200007dc

08003d70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d76:	2300      	movs	r3, #0
 8003d78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d7a:	4b4e      	ldr	r3, [pc, #312]	; (8003eb4 <xTaskIncrementTick+0x144>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f040 8087 	bne.w	8003e92 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d84:	4b4c      	ldr	r3, [pc, #304]	; (8003eb8 <xTaskIncrementTick+0x148>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d8c:	4a4a      	ldr	r2, [pc, #296]	; (8003eb8 <xTaskIncrementTick+0x148>)
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d11f      	bne.n	8003dd8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d98:	4b48      	ldr	r3, [pc, #288]	; (8003ebc <xTaskIncrementTick+0x14c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d009      	beq.n	8003db6 <xTaskIncrementTick+0x46>
 8003da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	e7fe      	b.n	8003db4 <xTaskIncrementTick+0x44>
 8003db6:	4b41      	ldr	r3, [pc, #260]	; (8003ebc <xTaskIncrementTick+0x14c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	4b40      	ldr	r3, [pc, #256]	; (8003ec0 <xTaskIncrementTick+0x150>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a3e      	ldr	r2, [pc, #248]	; (8003ebc <xTaskIncrementTick+0x14c>)
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	4a3e      	ldr	r2, [pc, #248]	; (8003ec0 <xTaskIncrementTick+0x150>)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	4b3e      	ldr	r3, [pc, #248]	; (8003ec4 <xTaskIncrementTick+0x154>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	4a3c      	ldr	r2, [pc, #240]	; (8003ec4 <xTaskIncrementTick+0x154>)
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	f000 fb5c 	bl	8004490 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003dd8:	4b3b      	ldr	r3, [pc, #236]	; (8003ec8 <xTaskIncrementTick+0x158>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d348      	bcc.n	8003e74 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003de2:	4b36      	ldr	r3, [pc, #216]	; (8003ebc <xTaskIncrementTick+0x14c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d104      	bne.n	8003df6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dec:	4b36      	ldr	r3, [pc, #216]	; (8003ec8 <xTaskIncrementTick+0x158>)
 8003dee:	f04f 32ff 	mov.w	r2, #4294967295
 8003df2:	601a      	str	r2, [r3, #0]
					break;
 8003df4:	e03e      	b.n	8003e74 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003df6:	4b31      	ldr	r3, [pc, #196]	; (8003ebc <xTaskIncrementTick+0x14c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d203      	bcs.n	8003e16 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e0e:	4a2e      	ldr	r2, [pc, #184]	; (8003ec8 <xTaskIncrementTick+0x158>)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e14:	e02e      	b.n	8003e74 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fe ffcc 	bl	8002db8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d004      	beq.n	8003e32 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	3318      	adds	r3, #24
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fe ffc3 	bl	8002db8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	2201      	movs	r2, #1
 8003e38:	409a      	lsls	r2, r3
 8003e3a:	4b24      	ldr	r3, [pc, #144]	; (8003ecc <xTaskIncrementTick+0x15c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	4a22      	ldr	r2, [pc, #136]	; (8003ecc <xTaskIncrementTick+0x15c>)
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4a1f      	ldr	r2, [pc, #124]	; (8003ed0 <xTaskIncrementTick+0x160>)
 8003e52:	441a      	add	r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	3304      	adds	r3, #4
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	f7fe ff4f 	bl	8002cfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e64:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <xTaskIncrementTick+0x164>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d3b9      	bcc.n	8003de2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e72:	e7b6      	b.n	8003de2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e74:	4b17      	ldr	r3, [pc, #92]	; (8003ed4 <xTaskIncrementTick+0x164>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7a:	4915      	ldr	r1, [pc, #84]	; (8003ed0 <xTaskIncrementTick+0x160>)
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d907      	bls.n	8003e9c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	e004      	b.n	8003e9c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003e92:	4b11      	ldr	r3, [pc, #68]	; (8003ed8 <xTaskIncrementTick+0x168>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3301      	adds	r3, #1
 8003e98:	4a0f      	ldr	r2, [pc, #60]	; (8003ed8 <xTaskIncrementTick+0x168>)
 8003e9a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003e9c:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <xTaskIncrementTick+0x16c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003ea8:	697b      	ldr	r3, [r7, #20]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20000800 	.word	0x20000800
 8003eb8:	200007dc 	.word	0x200007dc
 8003ebc:	20000790 	.word	0x20000790
 8003ec0:	20000794 	.word	0x20000794
 8003ec4:	200007f0 	.word	0x200007f0
 8003ec8:	200007f8 	.word	0x200007f8
 8003ecc:	200007e0 	.word	0x200007e0
 8003ed0:	200006dc 	.word	0x200006dc
 8003ed4:	200006d8 	.word	0x200006d8
 8003ed8:	200007e8 	.word	0x200007e8
 8003edc:	200007ec 	.word	0x200007ec

08003ee0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ee6:	4b26      	ldr	r3, [pc, #152]	; (8003f80 <vTaskSwitchContext+0xa0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003eee:	4b25      	ldr	r3, [pc, #148]	; (8003f84 <vTaskSwitchContext+0xa4>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ef4:	e03e      	b.n	8003f74 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003ef6:	4b23      	ldr	r3, [pc, #140]	; (8003f84 <vTaskSwitchContext+0xa4>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003efc:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <vTaskSwitchContext+0xa8>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	fab3 f383 	clz	r3, r3
 8003f08:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f0a:	7afb      	ldrb	r3, [r7, #11]
 8003f0c:	f1c3 031f 	rsb	r3, r3, #31
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	491e      	ldr	r1, [pc, #120]	; (8003f8c <vTaskSwitchContext+0xac>)
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4613      	mov	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <vTaskSwitchContext+0x5a>
	__asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	607b      	str	r3, [r7, #4]
 8003f38:	e7fe      	b.n	8003f38 <vTaskSwitchContext+0x58>
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4a11      	ldr	r2, [pc, #68]	; (8003f8c <vTaskSwitchContext+0xac>)
 8003f46:	4413      	add	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	605a      	str	r2, [r3, #4]
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	3308      	adds	r3, #8
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d104      	bne.n	8003f6a <vTaskSwitchContext+0x8a>
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4a07      	ldr	r2, [pc, #28]	; (8003f90 <vTaskSwitchContext+0xb0>)
 8003f72:	6013      	str	r3, [r2, #0]
}
 8003f74:	bf00      	nop
 8003f76:	371c      	adds	r7, #28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	20000800 	.word	0x20000800
 8003f84:	200007ec 	.word	0x200007ec
 8003f88:	200007e0 	.word	0x200007e0
 8003f8c:	200006dc 	.word	0x200006dc
 8003f90:	200006d8 	.word	0x200006d8

08003f94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d109      	bne.n	8003fb8 <vTaskPlaceOnEventList+0x24>
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	e7fe      	b.n	8003fb6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fb8:	4b07      	ldr	r3, [pc, #28]	; (8003fd8 <vTaskPlaceOnEventList+0x44>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3318      	adds	r3, #24
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7fe fec0 	bl	8002d46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	6838      	ldr	r0, [r7, #0]
 8003fca:	f000 fb3b 	bl	8004644 <prvAddCurrentTaskToDelayedList>
}
 8003fce:	bf00      	nop
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	200006d8 	.word	0x200006d8

08003fdc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <vTaskPlaceOnUnorderedEventList+0x26>
 8003fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	e7fe      	b.n	8004000 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8004002:	4b11      	ldr	r3, [pc, #68]	; (8004048 <vTaskPlaceOnUnorderedEventList+0x6c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d109      	bne.n	800401e <vTaskPlaceOnUnorderedEventList+0x42>
 800400a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	e7fe      	b.n	800401c <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800401e:	4b0b      	ldr	r3, [pc, #44]	; (800404c <vTaskPlaceOnUnorderedEventList+0x70>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004028:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800402a:	4b08      	ldr	r3, [pc, #32]	; (800404c <vTaskPlaceOnUnorderedEventList+0x70>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3318      	adds	r3, #24
 8004030:	4619      	mov	r1, r3
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f7fe fe63 	bl	8002cfe <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004038:	2101      	movs	r1, #1
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fb02 	bl	8004644 <prvAddCurrentTaskToDelayedList>
}
 8004040:	bf00      	nop
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000800 	.word	0x20000800
 800404c:	200006d8 	.word	0x200006d8

08004050 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d109      	bne.n	8004076 <vTaskPlaceOnEventListRestricted+0x26>
 8004062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	617b      	str	r3, [r7, #20]
 8004074:	e7fe      	b.n	8004074 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004076:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <vTaskPlaceOnEventListRestricted+0x50>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3318      	adds	r3, #24
 800407c:	4619      	mov	r1, r3
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f7fe fe3d 	bl	8002cfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800408a:	f04f 33ff 	mov.w	r3, #4294967295
 800408e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	68b8      	ldr	r0, [r7, #8]
 8004094:	f000 fad6 	bl	8004644 <prvAddCurrentTaskToDelayedList>
	}
 8004098:	bf00      	nop
 800409a:	3718      	adds	r7, #24
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	200006d8 	.word	0x200006d8

080040a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <xTaskRemoveFromEventList+0x2a>
 80040ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040be:	f383 8811 	msr	BASEPRI, r3
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	e7fe      	b.n	80040cc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	3318      	adds	r3, #24
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fe fe70 	bl	8002db8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040d8:	4b1d      	ldr	r3, [pc, #116]	; (8004150 <xTaskRemoveFromEventList+0xac>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d11c      	bne.n	800411a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	3304      	adds	r3, #4
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fe fe67 	bl	8002db8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ee:	2201      	movs	r2, #1
 80040f0:	409a      	lsls	r2, r3
 80040f2:	4b18      	ldr	r3, [pc, #96]	; (8004154 <xTaskRemoveFromEventList+0xb0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	4a16      	ldr	r2, [pc, #88]	; (8004154 <xTaskRemoveFromEventList+0xb0>)
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4a13      	ldr	r2, [pc, #76]	; (8004158 <xTaskRemoveFromEventList+0xb4>)
 800410a:	441a      	add	r2, r3
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	3304      	adds	r3, #4
 8004110:	4619      	mov	r1, r3
 8004112:	4610      	mov	r0, r2
 8004114:	f7fe fdf3 	bl	8002cfe <vListInsertEnd>
 8004118:	e005      	b.n	8004126 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	3318      	adds	r3, #24
 800411e:	4619      	mov	r1, r3
 8004120:	480e      	ldr	r0, [pc, #56]	; (800415c <xTaskRemoveFromEventList+0xb8>)
 8004122:	f7fe fdec 	bl	8002cfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412a:	4b0d      	ldr	r3, [pc, #52]	; (8004160 <xTaskRemoveFromEventList+0xbc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	429a      	cmp	r2, r3
 8004132:	d905      	bls.n	8004140 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004134:	2301      	movs	r3, #1
 8004136:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <xTaskRemoveFromEventList+0xc0>)
 800413a:	2201      	movs	r2, #1
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	e001      	b.n	8004144 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004144:	697b      	ldr	r3, [r7, #20]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000800 	.word	0x20000800
 8004154:	200007e0 	.word	0x200007e0
 8004158:	200006dc 	.word	0x200006dc
 800415c:	20000798 	.word	0x20000798
 8004160:	200006d8 	.word	0x200006d8
 8004164:	200007ec 	.word	0x200007ec

08004168 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8004172:	4b28      	ldr	r3, [pc, #160]	; (8004214 <vTaskRemoveFromUnorderedEventList+0xac>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <vTaskRemoveFromUnorderedEventList+0x26>
 800417a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	613b      	str	r3, [r7, #16]
 800418c:	e7fe      	b.n	800418c <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d109      	bne.n	80041b8 <vTaskRemoveFromUnorderedEventList+0x50>
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	e7fe      	b.n	80041b6 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7fe fdfd 	bl	8002db8 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	3304      	adds	r3, #4
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fe fdf8 	bl	8002db8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	2201      	movs	r2, #1
 80041ce:	409a      	lsls	r2, r3
 80041d0:	4b11      	ldr	r3, [pc, #68]	; (8004218 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	4a10      	ldr	r2, [pc, #64]	; (8004218 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4a0d      	ldr	r2, [pc, #52]	; (800421c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80041e8:	441a      	add	r2, r3
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	3304      	adds	r3, #4
 80041ee:	4619      	mov	r1, r3
 80041f0:	4610      	mov	r0, r2
 80041f2:	f7fe fd84 	bl	8002cfe <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041fa:	4b09      	ldr	r3, [pc, #36]	; (8004220 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004200:	429a      	cmp	r2, r3
 8004202:	d902      	bls.n	800420a <vTaskRemoveFromUnorderedEventList+0xa2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8004204:	4b07      	ldr	r3, [pc, #28]	; (8004224 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8004206:	2201      	movs	r2, #1
 8004208:	601a      	str	r2, [r3, #0]
	}
}
 800420a:	bf00      	nop
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20000800 	.word	0x20000800
 8004218:	200007e0 	.word	0x200007e0
 800421c:	200006dc 	.word	0x200006dc
 8004220:	200006d8 	.word	0x200006d8
 8004224:	200007ec 	.word	0x200007ec

08004228 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004230:	4b06      	ldr	r3, [pc, #24]	; (800424c <vTaskInternalSetTimeOutState+0x24>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004238:	4b05      	ldr	r3, [pc, #20]	; (8004250 <vTaskInternalSetTimeOutState+0x28>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	605a      	str	r2, [r3, #4]
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	200007f0 	.word	0x200007f0
 8004250:	200007dc 	.word	0x200007dc

08004254 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d109      	bne.n	8004278 <xTaskCheckForTimeOut+0x24>
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	613b      	str	r3, [r7, #16]
 8004276:	e7fe      	b.n	8004276 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <xTaskCheckForTimeOut+0x3e>
 800427e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	e7fe      	b.n	8004290 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004292:	f000 fecb 	bl	800502c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004296:	4b1d      	ldr	r3, [pc, #116]	; (800430c <xTaskCheckForTimeOut+0xb8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ae:	d102      	bne.n	80042b6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80042b0:	2300      	movs	r3, #0
 80042b2:	61fb      	str	r3, [r7, #28]
 80042b4:	e023      	b.n	80042fe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4b15      	ldr	r3, [pc, #84]	; (8004310 <xTaskCheckForTimeOut+0xbc>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d007      	beq.n	80042d2 <xTaskCheckForTimeOut+0x7e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d302      	bcc.n	80042d2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80042cc:	2301      	movs	r3, #1
 80042ce:	61fb      	str	r3, [r7, #28]
 80042d0:	e015      	b.n	80042fe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d20b      	bcs.n	80042f4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	1ad2      	subs	r2, r2, r3
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff ff9d 	bl	8004228 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	e004      	b.n	80042fe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80042fa:	2301      	movs	r3, #1
 80042fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80042fe:	f000 fec3 	bl	8005088 <vPortExitCritical>

	return xReturn;
 8004302:	69fb      	ldr	r3, [r7, #28]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3720      	adds	r7, #32
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	200007dc 	.word	0x200007dc
 8004310:	200007f0 	.word	0x200007f0

08004314 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004318:	4b03      	ldr	r3, [pc, #12]	; (8004328 <vTaskMissedYield+0x14>)
 800431a:	2201      	movs	r2, #1
 800431c:	601a      	str	r2, [r3, #0]
}
 800431e:	bf00      	nop
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	200007ec 	.word	0x200007ec

0800432c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004334:	f000 f852 	bl	80043dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004338:	4b06      	ldr	r3, [pc, #24]	; (8004354 <prvIdleTask+0x28>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d9f9      	bls.n	8004334 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <prvIdleTask+0x2c>)
 8004342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004350:	e7f0      	b.n	8004334 <prvIdleTask+0x8>
 8004352:	bf00      	nop
 8004354:	200006dc 	.word	0x200006dc
 8004358:	e000ed04 	.word	0xe000ed04

0800435c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004362:	2300      	movs	r3, #0
 8004364:	607b      	str	r3, [r7, #4]
 8004366:	e00c      	b.n	8004382 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	4613      	mov	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4a12      	ldr	r2, [pc, #72]	; (80043bc <prvInitialiseTaskLists+0x60>)
 8004374:	4413      	add	r3, r2
 8004376:	4618      	mov	r0, r3
 8004378:	f7fe fc94 	bl	8002ca4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3301      	adds	r3, #1
 8004380:	607b      	str	r3, [r7, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b06      	cmp	r3, #6
 8004386:	d9ef      	bls.n	8004368 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004388:	480d      	ldr	r0, [pc, #52]	; (80043c0 <prvInitialiseTaskLists+0x64>)
 800438a:	f7fe fc8b 	bl	8002ca4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800438e:	480d      	ldr	r0, [pc, #52]	; (80043c4 <prvInitialiseTaskLists+0x68>)
 8004390:	f7fe fc88 	bl	8002ca4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004394:	480c      	ldr	r0, [pc, #48]	; (80043c8 <prvInitialiseTaskLists+0x6c>)
 8004396:	f7fe fc85 	bl	8002ca4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800439a:	480c      	ldr	r0, [pc, #48]	; (80043cc <prvInitialiseTaskLists+0x70>)
 800439c:	f7fe fc82 	bl	8002ca4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043a0:	480b      	ldr	r0, [pc, #44]	; (80043d0 <prvInitialiseTaskLists+0x74>)
 80043a2:	f7fe fc7f 	bl	8002ca4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043a6:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <prvInitialiseTaskLists+0x78>)
 80043a8:	4a05      	ldr	r2, [pc, #20]	; (80043c0 <prvInitialiseTaskLists+0x64>)
 80043aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043ac:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <prvInitialiseTaskLists+0x7c>)
 80043ae:	4a05      	ldr	r2, [pc, #20]	; (80043c4 <prvInitialiseTaskLists+0x68>)
 80043b0:	601a      	str	r2, [r3, #0]
}
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	200006dc 	.word	0x200006dc
 80043c0:	20000768 	.word	0x20000768
 80043c4:	2000077c 	.word	0x2000077c
 80043c8:	20000798 	.word	0x20000798
 80043cc:	200007ac 	.word	0x200007ac
 80043d0:	200007c4 	.word	0x200007c4
 80043d4:	20000790 	.word	0x20000790
 80043d8:	20000794 	.word	0x20000794

080043dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043e2:	e019      	b.n	8004418 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043e4:	f000 fe22 	bl	800502c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043e8:	4b0f      	ldr	r3, [pc, #60]	; (8004428 <prvCheckTasksWaitingTermination+0x4c>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fe fcdf 	bl	8002db8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043fa:	4b0c      	ldr	r3, [pc, #48]	; (800442c <prvCheckTasksWaitingTermination+0x50>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3b01      	subs	r3, #1
 8004400:	4a0a      	ldr	r2, [pc, #40]	; (800442c <prvCheckTasksWaitingTermination+0x50>)
 8004402:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004404:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <prvCheckTasksWaitingTermination+0x54>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3b01      	subs	r3, #1
 800440a:	4a09      	ldr	r2, [pc, #36]	; (8004430 <prvCheckTasksWaitingTermination+0x54>)
 800440c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800440e:	f000 fe3b 	bl	8005088 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f80e 	bl	8004434 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004418:	4b05      	ldr	r3, [pc, #20]	; (8004430 <prvCheckTasksWaitingTermination+0x54>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e1      	bne.n	80043e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	200007ac 	.word	0x200007ac
 800442c:	200007d8 	.word	0x200007d8
 8004430:	200007c0 	.word	0x200007c0

08004434 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004442:	2b00      	cmp	r3, #0
 8004444:	d108      	bne.n	8004458 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	4618      	mov	r0, r3
 800444c:	f000 ffca 	bl	80053e4 <vPortFree>
				vPortFree( pxTCB );
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 ffc7 	bl	80053e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004456:	e017      	b.n	8004488 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800445e:	2b01      	cmp	r3, #1
 8004460:	d103      	bne.n	800446a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 ffbe 	bl	80053e4 <vPortFree>
	}
 8004468:	e00e      	b.n	8004488 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004470:	2b02      	cmp	r3, #2
 8004472:	d009      	beq.n	8004488 <prvDeleteTCB+0x54>
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	e7fe      	b.n	8004486 <prvDeleteTCB+0x52>
	}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004496:	4b0c      	ldr	r3, [pc, #48]	; (80044c8 <prvResetNextTaskUnblockTime+0x38>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d104      	bne.n	80044aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80044a0:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <prvResetNextTaskUnblockTime+0x3c>)
 80044a2:	f04f 32ff 	mov.w	r2, #4294967295
 80044a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80044a8:	e008      	b.n	80044bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044aa:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <prvResetNextTaskUnblockTime+0x38>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	4a04      	ldr	r2, [pc, #16]	; (80044cc <prvResetNextTaskUnblockTime+0x3c>)
 80044ba:	6013      	str	r3, [r2, #0]
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	20000790 	.word	0x20000790
 80044cc:	200007f8 	.word	0x200007f8

080044d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044d6:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <xTaskGetSchedulerState+0x34>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d102      	bne.n	80044e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044de:	2301      	movs	r3, #1
 80044e0:	607b      	str	r3, [r7, #4]
 80044e2:	e008      	b.n	80044f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044e4:	4b08      	ldr	r3, [pc, #32]	; (8004508 <xTaskGetSchedulerState+0x38>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d102      	bne.n	80044f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044ec:	2302      	movs	r3, #2
 80044ee:	607b      	str	r3, [r7, #4]
 80044f0:	e001      	b.n	80044f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044f2:	2300      	movs	r3, #0
 80044f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044f6:	687b      	ldr	r3, [r7, #4]
	}
 80044f8:	4618      	mov	r0, r3
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	200007e4 	.word	0x200007e4
 8004508:	20000800 	.word	0x20000800

0800450c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004518:	2300      	movs	r3, #0
 800451a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d06c      	beq.n	80045fc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004522:	4b39      	ldr	r3, [pc, #228]	; (8004608 <xTaskPriorityDisinherit+0xfc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	429a      	cmp	r2, r3
 800452a:	d009      	beq.n	8004540 <xTaskPriorityDisinherit+0x34>
 800452c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004530:	f383 8811 	msr	BASEPRI, r3
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	e7fe      	b.n	800453e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004544:	2b00      	cmp	r3, #0
 8004546:	d109      	bne.n	800455c <xTaskPriorityDisinherit+0x50>
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	e7fe      	b.n	800455a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004560:	1e5a      	subs	r2, r3, #1
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	429a      	cmp	r2, r3
 8004570:	d044      	beq.n	80045fc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004576:	2b00      	cmp	r3, #0
 8004578:	d140      	bne.n	80045fc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	3304      	adds	r3, #4
 800457e:	4618      	mov	r0, r3
 8004580:	f7fe fc1a 	bl	8002db8 <uxListRemove>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d115      	bne.n	80045b6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458e:	491f      	ldr	r1, [pc, #124]	; (800460c <xTaskPriorityDisinherit+0x100>)
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10a      	bne.n	80045b6 <xTaskPriorityDisinherit+0xaa>
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	2201      	movs	r2, #1
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	43da      	mvns	r2, r3
 80045ac:	4b18      	ldr	r3, [pc, #96]	; (8004610 <xTaskPriorityDisinherit+0x104>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4013      	ands	r3, r2
 80045b2:	4a17      	ldr	r2, [pc, #92]	; (8004610 <xTaskPriorityDisinherit+0x104>)
 80045b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c2:	f1c3 0207 	rsb	r2, r3, #7
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	2201      	movs	r2, #1
 80045d0:	409a      	lsls	r2, r3
 80045d2:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <xTaskPriorityDisinherit+0x104>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	4a0d      	ldr	r2, [pc, #52]	; (8004610 <xTaskPriorityDisinherit+0x104>)
 80045da:	6013      	str	r3, [r2, #0]
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4a08      	ldr	r2, [pc, #32]	; (800460c <xTaskPriorityDisinherit+0x100>)
 80045ea:	441a      	add	r2, r3
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4619      	mov	r1, r3
 80045f2:	4610      	mov	r0, r2
 80045f4:	f7fe fb83 	bl	8002cfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80045f8:	2301      	movs	r3, #1
 80045fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045fc:	697b      	ldr	r3, [r7, #20]
	}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	200006d8 	.word	0x200006d8
 800460c:	200006dc 	.word	0x200006dc
 8004610:	200007e0 	.word	0x200007e0

08004614 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800461a:	4b09      	ldr	r3, [pc, #36]	; (8004640 <uxTaskResetEventItemValue+0x2c>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004622:	4b07      	ldr	r3, [pc, #28]	; (8004640 <uxTaskResetEventItemValue+0x2c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004628:	4b05      	ldr	r3, [pc, #20]	; (8004640 <uxTaskResetEventItemValue+0x2c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f1c2 0207 	rsb	r2, r2, #7
 8004630:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8004632:	687b      	ldr	r3, [r7, #4]
}
 8004634:	4618      	mov	r0, r3
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	200006d8 	.word	0x200006d8

08004644 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800464e:	4b29      	ldr	r3, [pc, #164]	; (80046f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004654:	4b28      	ldr	r3, [pc, #160]	; (80046f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3304      	adds	r3, #4
 800465a:	4618      	mov	r0, r3
 800465c:	f7fe fbac 	bl	8002db8 <uxListRemove>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10b      	bne.n	800467e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004666:	4b24      	ldr	r3, [pc, #144]	; (80046f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	2201      	movs	r2, #1
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	43da      	mvns	r2, r3
 8004674:	4b21      	ldr	r3, [pc, #132]	; (80046fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4013      	ands	r3, r2
 800467a:	4a20      	ldr	r2, [pc, #128]	; (80046fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800467c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004684:	d10a      	bne.n	800469c <prvAddCurrentTaskToDelayedList+0x58>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d007      	beq.n	800469c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800468c:	4b1a      	ldr	r3, [pc, #104]	; (80046f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3304      	adds	r3, #4
 8004692:	4619      	mov	r1, r3
 8004694:	481a      	ldr	r0, [pc, #104]	; (8004700 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004696:	f7fe fb32 	bl	8002cfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800469a:	e026      	b.n	80046ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4413      	add	r3, r2
 80046a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046a4:	4b14      	ldr	r3, [pc, #80]	; (80046f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d209      	bcs.n	80046c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046b4:	4b13      	ldr	r3, [pc, #76]	; (8004704 <prvAddCurrentTaskToDelayedList+0xc0>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	4b0f      	ldr	r3, [pc, #60]	; (80046f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3304      	adds	r3, #4
 80046be:	4619      	mov	r1, r3
 80046c0:	4610      	mov	r0, r2
 80046c2:	f7fe fb40 	bl	8002d46 <vListInsert>
}
 80046c6:	e010      	b.n	80046ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046c8:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <prvAddCurrentTaskToDelayedList+0xc4>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3304      	adds	r3, #4
 80046d2:	4619      	mov	r1, r3
 80046d4:	4610      	mov	r0, r2
 80046d6:	f7fe fb36 	bl	8002d46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80046da:	4b0c      	ldr	r3, [pc, #48]	; (800470c <prvAddCurrentTaskToDelayedList+0xc8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d202      	bcs.n	80046ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80046e4:	4a09      	ldr	r2, [pc, #36]	; (800470c <prvAddCurrentTaskToDelayedList+0xc8>)
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	6013      	str	r3, [r2, #0]
}
 80046ea:	bf00      	nop
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	200007dc 	.word	0x200007dc
 80046f8:	200006d8 	.word	0x200006d8
 80046fc:	200007e0 	.word	0x200007e0
 8004700:	200007c4 	.word	0x200007c4
 8004704:	20000794 	.word	0x20000794
 8004708:	20000790 	.word	0x20000790
 800470c:	200007f8 	.word	0x200007f8

08004710 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08a      	sub	sp, #40	; 0x28
 8004714:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004716:	2300      	movs	r3, #0
 8004718:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800471a:	f000 faff 	bl	8004d1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800471e:	4b1c      	ldr	r3, [pc, #112]	; (8004790 <xTimerCreateTimerTask+0x80>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d021      	beq.n	800476a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004726:	2300      	movs	r3, #0
 8004728:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800472a:	2300      	movs	r3, #0
 800472c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800472e:	1d3a      	adds	r2, r7, #4
 8004730:	f107 0108 	add.w	r1, r7, #8
 8004734:	f107 030c 	add.w	r3, r7, #12
 8004738:	4618      	mov	r0, r3
 800473a:	f7fb feeb 	bl	8000514 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	9202      	str	r2, [sp, #8]
 8004746:	9301      	str	r3, [sp, #4]
 8004748:	2302      	movs	r3, #2
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	2300      	movs	r3, #0
 800474e:	460a      	mov	r2, r1
 8004750:	4910      	ldr	r1, [pc, #64]	; (8004794 <xTimerCreateTimerTask+0x84>)
 8004752:	4811      	ldr	r0, [pc, #68]	; (8004798 <xTimerCreateTimerTask+0x88>)
 8004754:	f7ff f82a 	bl	80037ac <xTaskCreateStatic>
 8004758:	4602      	mov	r2, r0
 800475a:	4b10      	ldr	r3, [pc, #64]	; (800479c <xTimerCreateTimerTask+0x8c>)
 800475c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800475e:	4b0f      	ldr	r3, [pc, #60]	; (800479c <xTimerCreateTimerTask+0x8c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004766:	2301      	movs	r3, #1
 8004768:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d109      	bne.n	8004784 <xTimerCreateTimerTask+0x74>
 8004770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	e7fe      	b.n	8004782 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004784:	697b      	ldr	r3, [r7, #20]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	20000834 	.word	0x20000834
 8004794:	080057d8 	.word	0x080057d8
 8004798:	080048d1 	.word	0x080048d1
 800479c:	20000838 	.word	0x20000838

080047a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08a      	sub	sp, #40	; 0x28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
 80047ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d109      	bne.n	80047cc <xTimerGenericCommand+0x2c>
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	623b      	str	r3, [r7, #32]
 80047ca:	e7fe      	b.n	80047ca <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80047cc:	4b19      	ldr	r3, [pc, #100]	; (8004834 <xTimerGenericCommand+0x94>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d02a      	beq.n	800482a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b05      	cmp	r3, #5
 80047e4:	dc18      	bgt.n	8004818 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80047e6:	f7ff fe73 	bl	80044d0 <xTaskGetSchedulerState>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d109      	bne.n	8004804 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80047f0:	4b10      	ldr	r3, [pc, #64]	; (8004834 <xTimerGenericCommand+0x94>)
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	f107 0110 	add.w	r1, r7, #16
 80047f8:	2300      	movs	r3, #0
 80047fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047fc:	f7fe fc00 	bl	8003000 <xQueueGenericSend>
 8004800:	6278      	str	r0, [r7, #36]	; 0x24
 8004802:	e012      	b.n	800482a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004804:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <xTimerGenericCommand+0x94>)
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	f107 0110 	add.w	r1, r7, #16
 800480c:	2300      	movs	r3, #0
 800480e:	2200      	movs	r2, #0
 8004810:	f7fe fbf6 	bl	8003000 <xQueueGenericSend>
 8004814:	6278      	str	r0, [r7, #36]	; 0x24
 8004816:	e008      	b.n	800482a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004818:	4b06      	ldr	r3, [pc, #24]	; (8004834 <xTimerGenericCommand+0x94>)
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	f107 0110 	add.w	r1, r7, #16
 8004820:	2300      	movs	r3, #0
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	f7fe fce6 	bl	80031f4 <xQueueGenericSendFromISR>
 8004828:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800482c:	4618      	mov	r0, r3
 800482e:	3728      	adds	r7, #40	; 0x28
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20000834 	.word	0x20000834

08004838 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af02      	add	r7, sp, #8
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004842:	4b22      	ldr	r3, [pc, #136]	; (80048cc <prvProcessExpiredTimer+0x94>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	3304      	adds	r3, #4
 8004850:	4618      	mov	r0, r3
 8004852:	f7fe fab1 	bl	8002db8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d021      	beq.n	80048a8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	699a      	ldr	r2, [r3, #24]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	18d1      	adds	r1, r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	6978      	ldr	r0, [r7, #20]
 8004872:	f000 f8d1 	bl	8004a18 <prvInsertTimerInActiveList>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01e      	beq.n	80048ba <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800487c:	2300      	movs	r3, #0
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	2300      	movs	r3, #0
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	2100      	movs	r1, #0
 8004886:	6978      	ldr	r0, [r7, #20]
 8004888:	f7ff ff8a 	bl	80047a0 <xTimerGenericCommand>
 800488c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d112      	bne.n	80048ba <prvProcessExpiredTimer+0x82>
 8004894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004898:	f383 8811 	msr	BASEPRI, r3
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	e7fe      	b.n	80048a6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048ae:	f023 0301 	bic.w	r3, r3, #1
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	6978      	ldr	r0, [r7, #20]
 80048c0:	4798      	blx	r3
}
 80048c2:	bf00      	nop
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	2000082c 	.word	0x2000082c

080048d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048d8:	f107 0308 	add.w	r3, r7, #8
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 f857 	bl	8004990 <prvGetNextExpireTime>
 80048e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4619      	mov	r1, r3
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 f803 	bl	80048f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80048ee:	f000 f8d5 	bl	8004a9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048f2:	e7f1      	b.n	80048d8 <prvTimerTask+0x8>

080048f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80048fe:	f7ff f97d 	bl	8003bfc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004902:	f107 0308 	add.w	r3, r7, #8
 8004906:	4618      	mov	r0, r3
 8004908:	f000 f866 	bl	80049d8 <prvSampleTimeNow>
 800490c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d130      	bne.n	8004976 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10a      	bne.n	8004930 <prvProcessTimerOrBlockTask+0x3c>
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	429a      	cmp	r2, r3
 8004920:	d806      	bhi.n	8004930 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004922:	f7ff f979 	bl	8003c18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004926:	68f9      	ldr	r1, [r7, #12]
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff ff85 	bl	8004838 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800492e:	e024      	b.n	800497a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d008      	beq.n	8004948 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004936:	4b13      	ldr	r3, [pc, #76]	; (8004984 <prvProcessTimerOrBlockTask+0x90>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <prvProcessTimerOrBlockTask+0x50>
 8004940:	2301      	movs	r3, #1
 8004942:	e000      	b.n	8004946 <prvProcessTimerOrBlockTask+0x52>
 8004944:	2300      	movs	r3, #0
 8004946:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004948:	4b0f      	ldr	r3, [pc, #60]	; (8004988 <prvProcessTimerOrBlockTask+0x94>)
 800494a:	6818      	ldr	r0, [r3, #0]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	4619      	mov	r1, r3
 8004956:	f7fe fef5 	bl	8003744 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800495a:	f7ff f95d 	bl	8003c18 <xTaskResumeAll>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10a      	bne.n	800497a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004964:	4b09      	ldr	r3, [pc, #36]	; (800498c <prvProcessTimerOrBlockTask+0x98>)
 8004966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	f3bf 8f6f 	isb	sy
}
 8004974:	e001      	b.n	800497a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004976:	f7ff f94f 	bl	8003c18 <xTaskResumeAll>
}
 800497a:	bf00      	nop
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000830 	.word	0x20000830
 8004988:	20000834 	.word	0x20000834
 800498c:	e000ed04 	.word	0xe000ed04

08004990 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004998:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <prvGetNextExpireTime+0x44>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <prvGetNextExpireTime+0x16>
 80049a2:	2201      	movs	r2, #1
 80049a4:	e000      	b.n	80049a8 <prvGetNextExpireTime+0x18>
 80049a6:	2200      	movs	r2, #0
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d105      	bne.n	80049c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049b4:	4b07      	ldr	r3, [pc, #28]	; (80049d4 <prvGetNextExpireTime+0x44>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	e001      	b.n	80049c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80049c4:	68fb      	ldr	r3, [r7, #12]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	2000082c 	.word	0x2000082c

080049d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80049e0:	f7ff f9b6 	bl	8003d50 <xTaskGetTickCount>
 80049e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80049e6:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <prvSampleTimeNow+0x3c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d205      	bcs.n	80049fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80049f0:	f000 f930 	bl	8004c54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	e002      	b.n	8004a02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a02:	4a04      	ldr	r2, [pc, #16]	; (8004a14 <prvSampleTimeNow+0x3c>)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a08:	68fb      	ldr	r3, [r7, #12]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	2000083c 	.word	0x2000083c

08004a18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a26:	2300      	movs	r3, #0
 8004a28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d812      	bhi.n	8004a64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	1ad2      	subs	r2, r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d302      	bcc.n	8004a52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	e01b      	b.n	8004a8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a52:	4b10      	ldr	r3, [pc, #64]	; (8004a94 <prvInsertTimerInActiveList+0x7c>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	f7fe f972 	bl	8002d46 <vListInsert>
 8004a62:	e012      	b.n	8004a8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d206      	bcs.n	8004a7a <prvInsertTimerInActiveList+0x62>
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d302      	bcc.n	8004a7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004a74:	2301      	movs	r3, #1
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	e007      	b.n	8004a8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a7a:	4b07      	ldr	r3, [pc, #28]	; (8004a98 <prvInsertTimerInActiveList+0x80>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3304      	adds	r3, #4
 8004a82:	4619      	mov	r1, r3
 8004a84:	4610      	mov	r0, r2
 8004a86:	f7fe f95e 	bl	8002d46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004a8a:	697b      	ldr	r3, [r7, #20]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	20000830 	.word	0x20000830
 8004a98:	2000082c 	.word	0x2000082c

08004a9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08e      	sub	sp, #56	; 0x38
 8004aa0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004aa2:	e0c6      	b.n	8004c32 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	da17      	bge.n	8004ada <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004aaa:	1d3b      	adds	r3, r7, #4
 8004aac:	3304      	adds	r3, #4
 8004aae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d109      	bne.n	8004aca <prvProcessReceivedCommands+0x2e>
 8004ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	61fb      	str	r3, [r7, #28]
 8004ac8:	e7fe      	b.n	8004ac8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ad0:	6850      	ldr	r0, [r2, #4]
 8004ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ad4:	6892      	ldr	r2, [r2, #8]
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f2c0 80a7 	blt.w	8004c30 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d004      	beq.n	8004af8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	3304      	adds	r3, #4
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fe f960 	bl	8002db8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004af8:	463b      	mov	r3, r7
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7ff ff6c 	bl	80049d8 <prvSampleTimeNow>
 8004b00:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b09      	cmp	r3, #9
 8004b06:	f200 8094 	bhi.w	8004c32 <prvProcessReceivedCommands+0x196>
 8004b0a:	a201      	add	r2, pc, #4	; (adr r2, 8004b10 <prvProcessReceivedCommands+0x74>)
 8004b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b10:	08004b39 	.word	0x08004b39
 8004b14:	08004b39 	.word	0x08004b39
 8004b18:	08004b39 	.word	0x08004b39
 8004b1c:	08004bab 	.word	0x08004bab
 8004b20:	08004bbf 	.word	0x08004bbf
 8004b24:	08004c07 	.word	0x08004c07
 8004b28:	08004b39 	.word	0x08004b39
 8004b2c:	08004b39 	.word	0x08004b39
 8004b30:	08004bab 	.word	0x08004bab
 8004b34:	08004bbf 	.word	0x08004bbf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b3e:	f043 0301 	orr.w	r3, r3, #1
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	18d1      	adds	r1, r2, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b58:	f7ff ff5e 	bl	8004a18 <prvInsertTimerInActiveList>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d067      	beq.n	8004c32 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d05c      	beq.n	8004c32 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	441a      	add	r2, r3
 8004b80:	2300      	movs	r3, #0
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	2300      	movs	r3, #0
 8004b86:	2100      	movs	r1, #0
 8004b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b8a:	f7ff fe09 	bl	80047a0 <xTimerGenericCommand>
 8004b8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d14d      	bne.n	8004c32 <prvProcessReceivedCommands+0x196>
 8004b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	61bb      	str	r3, [r7, #24]
 8004ba8:	e7fe      	b.n	8004ba8 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8004bbc:	e039      	b.n	8004c32 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004bc4:	f043 0301 	orr.w	r3, r3, #1
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d109      	bne.n	8004bf2 <prvProcessReceivedCommands+0x156>
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	e7fe      	b.n	8004bf0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	18d1      	adds	r1, r2, r3
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c00:	f7ff ff0a 	bl	8004a18 <prvInsertTimerInActiveList>
					break;
 8004c04:	e015      	b.n	8004c32 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d103      	bne.n	8004c1c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8004c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c16:	f000 fbe5 	bl	80053e4 <vPortFree>
 8004c1a:	e00a      	b.n	8004c32 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c22:	f023 0301 	bic.w	r3, r3, #1
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c2e:	e000      	b.n	8004c32 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004c30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c32:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <prvProcessReceivedCommands+0x1b4>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	1d39      	adds	r1, r7, #4
 8004c38:	2200      	movs	r2, #0
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fe fb6e 	bl	800331c <xQueueReceive>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f47f af2e 	bne.w	8004aa4 <prvProcessReceivedCommands+0x8>
	}
}
 8004c48:	bf00      	nop
 8004c4a:	3730      	adds	r7, #48	; 0x30
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	20000834 	.word	0x20000834

08004c54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c5a:	e047      	b.n	8004cec <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c5c:	4b2d      	ldr	r3, [pc, #180]	; (8004d14 <prvSwitchTimerLists+0xc0>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c66:	4b2b      	ldr	r3, [pc, #172]	; (8004d14 <prvSwitchTimerLists+0xc0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	3304      	adds	r3, #4
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fe f89f 	bl	8002db8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d02d      	beq.n	8004cec <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	4413      	add	r3, r2
 8004c98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d90e      	bls.n	8004cc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cae:	4b19      	ldr	r3, [pc, #100]	; (8004d14 <prvSwitchTimerLists+0xc0>)
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4610      	mov	r0, r2
 8004cba:	f7fe f844 	bl	8002d46 <vListInsert>
 8004cbe:	e015      	b.n	8004cec <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	2100      	movs	r1, #0
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f7ff fd68 	bl	80047a0 <xTimerGenericCommand>
 8004cd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d109      	bne.n	8004cec <prvSwitchTimerLists+0x98>
 8004cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	603b      	str	r3, [r7, #0]
 8004cea:	e7fe      	b.n	8004cea <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cec:	4b09      	ldr	r3, [pc, #36]	; (8004d14 <prvSwitchTimerLists+0xc0>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1b2      	bne.n	8004c5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004cf6:	4b07      	ldr	r3, [pc, #28]	; (8004d14 <prvSwitchTimerLists+0xc0>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004cfc:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <prvSwitchTimerLists+0xc4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a04      	ldr	r2, [pc, #16]	; (8004d14 <prvSwitchTimerLists+0xc0>)
 8004d02:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d04:	4a04      	ldr	r2, [pc, #16]	; (8004d18 <prvSwitchTimerLists+0xc4>)
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	6013      	str	r3, [r2, #0]
}
 8004d0a:	bf00      	nop
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	2000082c 	.word	0x2000082c
 8004d18:	20000830 	.word	0x20000830

08004d1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d22:	f000 f983 	bl	800502c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d26:	4b15      	ldr	r3, [pc, #84]	; (8004d7c <prvCheckForValidListAndQueue+0x60>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d120      	bne.n	8004d70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d2e:	4814      	ldr	r0, [pc, #80]	; (8004d80 <prvCheckForValidListAndQueue+0x64>)
 8004d30:	f7fd ffb8 	bl	8002ca4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d34:	4813      	ldr	r0, [pc, #76]	; (8004d84 <prvCheckForValidListAndQueue+0x68>)
 8004d36:	f7fd ffb5 	bl	8002ca4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d3a:	4b13      	ldr	r3, [pc, #76]	; (8004d88 <prvCheckForValidListAndQueue+0x6c>)
 8004d3c:	4a10      	ldr	r2, [pc, #64]	; (8004d80 <prvCheckForValidListAndQueue+0x64>)
 8004d3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d40:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <prvCheckForValidListAndQueue+0x70>)
 8004d42:	4a10      	ldr	r2, [pc, #64]	; (8004d84 <prvCheckForValidListAndQueue+0x68>)
 8004d44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d46:	2300      	movs	r3, #0
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	4b11      	ldr	r3, [pc, #68]	; (8004d90 <prvCheckForValidListAndQueue+0x74>)
 8004d4c:	4a11      	ldr	r2, [pc, #68]	; (8004d94 <prvCheckForValidListAndQueue+0x78>)
 8004d4e:	2110      	movs	r1, #16
 8004d50:	200a      	movs	r0, #10
 8004d52:	f7fe f8c3 	bl	8002edc <xQueueGenericCreateStatic>
 8004d56:	4602      	mov	r2, r0
 8004d58:	4b08      	ldr	r3, [pc, #32]	; (8004d7c <prvCheckForValidListAndQueue+0x60>)
 8004d5a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d5c:	4b07      	ldr	r3, [pc, #28]	; (8004d7c <prvCheckForValidListAndQueue+0x60>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d64:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <prvCheckForValidListAndQueue+0x60>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	490b      	ldr	r1, [pc, #44]	; (8004d98 <prvCheckForValidListAndQueue+0x7c>)
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fe fcc2 	bl	80036f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d70:	f000 f98a 	bl	8005088 <vPortExitCritical>
}
 8004d74:	bf00      	nop
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000834 	.word	0x20000834
 8004d80:	20000804 	.word	0x20000804
 8004d84:	20000818 	.word	0x20000818
 8004d88:	2000082c 	.word	0x2000082c
 8004d8c:	20000830 	.word	0x20000830
 8004d90:	200008e0 	.word	0x200008e0
 8004d94:	20000840 	.word	0x20000840
 8004d98:	080057e0 	.word	0x080057e0

08004d9c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08a      	sub	sp, #40	; 0x28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8004daa:	f06f 0301 	mvn.w	r3, #1
 8004dae:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004dbc:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <xTimerPendFunctionCallFromISR+0x3c>)
 8004dbe:	6818      	ldr	r0, [r3, #0]
 8004dc0:	f107 0114 	add.w	r1, r7, #20
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	f7fe fa14 	bl	80031f4 <xQueueGenericSendFromISR>
 8004dcc:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3728      	adds	r7, #40	; 0x28
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	20000834 	.word	0x20000834

08004ddc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	3b04      	subs	r3, #4
 8004dec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004df4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	3b04      	subs	r3, #4
 8004dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f023 0201 	bic.w	r2, r3, #1
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	3b04      	subs	r3, #4
 8004e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e0c:	4a0c      	ldr	r2, [pc, #48]	; (8004e40 <pxPortInitialiseStack+0x64>)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3b14      	subs	r3, #20
 8004e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	3b04      	subs	r3, #4
 8004e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f06f 0202 	mvn.w	r2, #2
 8004e2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	3b20      	subs	r3, #32
 8004e30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e32:	68fb      	ldr	r3, [r7, #12]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	08004e45 	.word	0x08004e45

08004e44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e4e:	4b11      	ldr	r3, [pc, #68]	; (8004e94 <prvTaskExitError+0x50>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e56:	d009      	beq.n	8004e6c <prvTaskExitError+0x28>
 8004e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5c:	f383 8811 	msr	BASEPRI, r3
 8004e60:	f3bf 8f6f 	isb	sy
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	e7fe      	b.n	8004e6a <prvTaskExitError+0x26>
 8004e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e70:	f383 8811 	msr	BASEPRI, r3
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e7e:	bf00      	nop
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0fc      	beq.n	8004e80 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e86:	bf00      	nop
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	20000010 	.word	0x20000010
	...

08004ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ea0:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <pxCurrentTCBConst2>)
 8004ea2:	6819      	ldr	r1, [r3, #0]
 8004ea4:	6808      	ldr	r0, [r1, #0]
 8004ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eaa:	f380 8809 	msr	PSP, r0
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f380 8811 	msr	BASEPRI, r0
 8004eba:	4770      	bx	lr
 8004ebc:	f3af 8000 	nop.w

08004ec0 <pxCurrentTCBConst2>:
 8004ec0:	200006d8 	.word	0x200006d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop

08004ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ec8:	4808      	ldr	r0, [pc, #32]	; (8004eec <prvPortStartFirstTask+0x24>)
 8004eca:	6800      	ldr	r0, [r0, #0]
 8004ecc:	6800      	ldr	r0, [r0, #0]
 8004ece:	f380 8808 	msr	MSP, r0
 8004ed2:	f04f 0000 	mov.w	r0, #0
 8004ed6:	f380 8814 	msr	CONTROL, r0
 8004eda:	b662      	cpsie	i
 8004edc:	b661      	cpsie	f
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	df00      	svc	0
 8004ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004eea:	bf00      	nop
 8004eec:	e000ed08 	.word	0xe000ed08

08004ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ef6:	4b44      	ldr	r3, [pc, #272]	; (8005008 <xPortStartScheduler+0x118>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a44      	ldr	r2, [pc, #272]	; (800500c <xPortStartScheduler+0x11c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d109      	bne.n	8004f14 <xPortStartScheduler+0x24>
 8004f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	613b      	str	r3, [r7, #16]
 8004f12:	e7fe      	b.n	8004f12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f14:	4b3c      	ldr	r3, [pc, #240]	; (8005008 <xPortStartScheduler+0x118>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a3d      	ldr	r2, [pc, #244]	; (8005010 <xPortStartScheduler+0x120>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d109      	bne.n	8004f32 <xPortStartScheduler+0x42>
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	e7fe      	b.n	8004f30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f32:	4b38      	ldr	r3, [pc, #224]	; (8005014 <xPortStartScheduler+0x124>)
 8004f34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	22ff      	movs	r2, #255	; 0xff
 8004f42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f4c:	78fb      	ldrb	r3, [r7, #3]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	4b30      	ldr	r3, [pc, #192]	; (8005018 <xPortStartScheduler+0x128>)
 8004f58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f5a:	4b30      	ldr	r3, [pc, #192]	; (800501c <xPortStartScheduler+0x12c>)
 8004f5c:	2207      	movs	r2, #7
 8004f5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f60:	e009      	b.n	8004f76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004f62:	4b2e      	ldr	r3, [pc, #184]	; (800501c <xPortStartScheduler+0x12c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	4a2c      	ldr	r2, [pc, #176]	; (800501c <xPortStartScheduler+0x12c>)
 8004f6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f76:	78fb      	ldrb	r3, [r7, #3]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7e:	2b80      	cmp	r3, #128	; 0x80
 8004f80:	d0ef      	beq.n	8004f62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f82:	4b26      	ldr	r3, [pc, #152]	; (800501c <xPortStartScheduler+0x12c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f1c3 0307 	rsb	r3, r3, #7
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	d009      	beq.n	8004fa2 <xPortStartScheduler+0xb2>
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	60bb      	str	r3, [r7, #8]
 8004fa0:	e7fe      	b.n	8004fa0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fa2:	4b1e      	ldr	r3, [pc, #120]	; (800501c <xPortStartScheduler+0x12c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	021b      	lsls	r3, r3, #8
 8004fa8:	4a1c      	ldr	r2, [pc, #112]	; (800501c <xPortStartScheduler+0x12c>)
 8004faa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fac:	4b1b      	ldr	r3, [pc, #108]	; (800501c <xPortStartScheduler+0x12c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fb4:	4a19      	ldr	r2, [pc, #100]	; (800501c <xPortStartScheduler+0x12c>)
 8004fb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fc0:	4b17      	ldr	r3, [pc, #92]	; (8005020 <xPortStartScheduler+0x130>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a16      	ldr	r2, [pc, #88]	; (8005020 <xPortStartScheduler+0x130>)
 8004fc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004fcc:	4b14      	ldr	r3, [pc, #80]	; (8005020 <xPortStartScheduler+0x130>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a13      	ldr	r2, [pc, #76]	; (8005020 <xPortStartScheduler+0x130>)
 8004fd2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004fd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fd8:	f000 f8d6 	bl	8005188 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004fdc:	4b11      	ldr	r3, [pc, #68]	; (8005024 <xPortStartScheduler+0x134>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004fe2:	f000 f8f5 	bl	80051d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004fe6:	4b10      	ldr	r3, [pc, #64]	; (8005028 <xPortStartScheduler+0x138>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a0f      	ldr	r2, [pc, #60]	; (8005028 <xPortStartScheduler+0x138>)
 8004fec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ff0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ff2:	f7ff ff69 	bl	8004ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ff6:	f7fe ff73 	bl	8003ee0 <vTaskSwitchContext>
	prvTaskExitError();
 8004ffa:	f7ff ff23 	bl	8004e44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	e000ed00 	.word	0xe000ed00
 800500c:	410fc271 	.word	0x410fc271
 8005010:	410fc270 	.word	0x410fc270
 8005014:	e000e400 	.word	0xe000e400
 8005018:	20000928 	.word	0x20000928
 800501c:	2000092c 	.word	0x2000092c
 8005020:	e000ed20 	.word	0xe000ed20
 8005024:	20000010 	.word	0x20000010
 8005028:	e000ef34 	.word	0xe000ef34

0800502c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005044:	4b0e      	ldr	r3, [pc, #56]	; (8005080 <vPortEnterCritical+0x54>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3301      	adds	r3, #1
 800504a:	4a0d      	ldr	r2, [pc, #52]	; (8005080 <vPortEnterCritical+0x54>)
 800504c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800504e:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <vPortEnterCritical+0x54>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d10e      	bne.n	8005074 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005056:	4b0b      	ldr	r3, [pc, #44]	; (8005084 <vPortEnterCritical+0x58>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d009      	beq.n	8005074 <vPortEnterCritical+0x48>
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	603b      	str	r3, [r7, #0]
 8005072:	e7fe      	b.n	8005072 <vPortEnterCritical+0x46>
	}
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	20000010 	.word	0x20000010
 8005084:	e000ed04 	.word	0xe000ed04

08005088 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800508e:	4b11      	ldr	r3, [pc, #68]	; (80050d4 <vPortExitCritical+0x4c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d109      	bne.n	80050aa <vPortExitCritical+0x22>
 8005096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	607b      	str	r3, [r7, #4]
 80050a8:	e7fe      	b.n	80050a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80050aa:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <vPortExitCritical+0x4c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	4a08      	ldr	r2, [pc, #32]	; (80050d4 <vPortExitCritical+0x4c>)
 80050b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050b4:	4b07      	ldr	r3, [pc, #28]	; (80050d4 <vPortExitCritical+0x4c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d104      	bne.n	80050c6 <vPortExitCritical+0x3e>
 80050bc:	2300      	movs	r3, #0
 80050be:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	20000010 	.word	0x20000010
	...

080050e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80050e0:	f3ef 8009 	mrs	r0, PSP
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	4b15      	ldr	r3, [pc, #84]	; (8005140 <pxCurrentTCBConst>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	f01e 0f10 	tst.w	lr, #16
 80050f0:	bf08      	it	eq
 80050f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80050f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fa:	6010      	str	r0, [r2, #0]
 80050fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005104:	f380 8811 	msr	BASEPRI, r0
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f7fe fee6 	bl	8003ee0 <vTaskSwitchContext>
 8005114:	f04f 0000 	mov.w	r0, #0
 8005118:	f380 8811 	msr	BASEPRI, r0
 800511c:	bc09      	pop	{r0, r3}
 800511e:	6819      	ldr	r1, [r3, #0]
 8005120:	6808      	ldr	r0, [r1, #0]
 8005122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005126:	f01e 0f10 	tst.w	lr, #16
 800512a:	bf08      	it	eq
 800512c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005130:	f380 8809 	msr	PSP, r0
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	f3af 8000 	nop.w

08005140 <pxCurrentTCBConst>:
 8005140:	200006d8 	.word	0x200006d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop

08005148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005160:	f7fe fe06 	bl	8003d70 <xTaskIncrementTick>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800516a:	4b06      	ldr	r3, [pc, #24]	; (8005184 <SysTick_Handler+0x3c>)
 800516c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	2300      	movs	r3, #0
 8005174:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800517c:	bf00      	nop
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	e000ed04 	.word	0xe000ed04

08005188 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800518c:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <vPortSetupTimerInterrupt+0x34>)
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005192:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <vPortSetupTimerInterrupt+0x38>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005198:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <vPortSetupTimerInterrupt+0x3c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a0a      	ldr	r2, [pc, #40]	; (80051c8 <vPortSetupTimerInterrupt+0x40>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	099b      	lsrs	r3, r3, #6
 80051a4:	4a09      	ldr	r2, [pc, #36]	; (80051cc <vPortSetupTimerInterrupt+0x44>)
 80051a6:	3b01      	subs	r3, #1
 80051a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051aa:	4b04      	ldr	r3, [pc, #16]	; (80051bc <vPortSetupTimerInterrupt+0x34>)
 80051ac:	2207      	movs	r2, #7
 80051ae:	601a      	str	r2, [r3, #0]
}
 80051b0:	bf00      	nop
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	e000e010 	.word	0xe000e010
 80051c0:	e000e018 	.word	0xe000e018
 80051c4:	20000004 	.word	0x20000004
 80051c8:	10624dd3 	.word	0x10624dd3
 80051cc:	e000e014 	.word	0xe000e014

080051d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80051d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80051e0 <vPortEnableVFP+0x10>
 80051d4:	6801      	ldr	r1, [r0, #0]
 80051d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80051da:	6001      	str	r1, [r0, #0]
 80051dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80051de:	bf00      	nop
 80051e0:	e000ed88 	.word	0xe000ed88

080051e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80051ea:	f3ef 8305 	mrs	r3, IPSR
 80051ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b0f      	cmp	r3, #15
 80051f4:	d913      	bls.n	800521e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80051f6:	4a16      	ldr	r2, [pc, #88]	; (8005250 <vPortValidateInterruptPriority+0x6c>)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005200:	4b14      	ldr	r3, [pc, #80]	; (8005254 <vPortValidateInterruptPriority+0x70>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	7afa      	ldrb	r2, [r7, #11]
 8005206:	429a      	cmp	r2, r3
 8005208:	d209      	bcs.n	800521e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	607b      	str	r3, [r7, #4]
 800521c:	e7fe      	b.n	800521c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800521e:	4b0e      	ldr	r3, [pc, #56]	; (8005258 <vPortValidateInterruptPriority+0x74>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005226:	4b0d      	ldr	r3, [pc, #52]	; (800525c <vPortValidateInterruptPriority+0x78>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	429a      	cmp	r2, r3
 800522c:	d909      	bls.n	8005242 <vPortValidateInterruptPriority+0x5e>
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	603b      	str	r3, [r7, #0]
 8005240:	e7fe      	b.n	8005240 <vPortValidateInterruptPriority+0x5c>
	}
 8005242:	bf00      	nop
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	e000e3f0 	.word	0xe000e3f0
 8005254:	20000928 	.word	0x20000928
 8005258:	e000ed0c 	.word	0xe000ed0c
 800525c:	2000092c 	.word	0x2000092c

08005260 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b08a      	sub	sp, #40	; 0x28
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005268:	2300      	movs	r3, #0
 800526a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800526c:	f7fe fcc6 	bl	8003bfc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005270:	4b57      	ldr	r3, [pc, #348]	; (80053d0 <pvPortMalloc+0x170>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005278:	f000 f90c 	bl	8005494 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800527c:	4b55      	ldr	r3, [pc, #340]	; (80053d4 <pvPortMalloc+0x174>)
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4013      	ands	r3, r2
 8005284:	2b00      	cmp	r3, #0
 8005286:	f040 808c 	bne.w	80053a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d01c      	beq.n	80052ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005290:	2208      	movs	r2, #8
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4413      	add	r3, r2
 8005296:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d013      	beq.n	80052ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f023 0307 	bic.w	r3, r3, #7
 80052a8:	3308      	adds	r3, #8
 80052aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f003 0307 	and.w	r3, r3, #7
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d009      	beq.n	80052ca <pvPortMalloc+0x6a>
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	e7fe      	b.n	80052c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d068      	beq.n	80053a2 <pvPortMalloc+0x142>
 80052d0:	4b41      	ldr	r3, [pc, #260]	; (80053d8 <pvPortMalloc+0x178>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d863      	bhi.n	80053a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052da:	4b40      	ldr	r3, [pc, #256]	; (80053dc <pvPortMalloc+0x17c>)
 80052dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052de:	4b3f      	ldr	r3, [pc, #252]	; (80053dc <pvPortMalloc+0x17c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052e4:	e004      	b.n	80052f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d903      	bls.n	8005302 <pvPortMalloc+0xa2>
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1f1      	bne.n	80052e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005302:	4b33      	ldr	r3, [pc, #204]	; (80053d0 <pvPortMalloc+0x170>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005308:	429a      	cmp	r2, r3
 800530a:	d04a      	beq.n	80053a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2208      	movs	r2, #8
 8005312:	4413      	add	r3, r2
 8005314:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	1ad2      	subs	r2, r2, r3
 8005326:	2308      	movs	r3, #8
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	429a      	cmp	r2, r3
 800532c:	d91e      	bls.n	800536c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800532e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4413      	add	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	2b00      	cmp	r3, #0
 800533e:	d009      	beq.n	8005354 <pvPortMalloc+0xf4>
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	e7fe      	b.n	8005352 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	1ad2      	subs	r2, r2, r3
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005366:	69b8      	ldr	r0, [r7, #24]
 8005368:	f000 f8f6 	bl	8005558 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800536c:	4b1a      	ldr	r3, [pc, #104]	; (80053d8 <pvPortMalloc+0x178>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	4a18      	ldr	r2, [pc, #96]	; (80053d8 <pvPortMalloc+0x178>)
 8005378:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800537a:	4b17      	ldr	r3, [pc, #92]	; (80053d8 <pvPortMalloc+0x178>)
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	4b18      	ldr	r3, [pc, #96]	; (80053e0 <pvPortMalloc+0x180>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d203      	bcs.n	800538e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005386:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <pvPortMalloc+0x178>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a15      	ldr	r2, [pc, #84]	; (80053e0 <pvPortMalloc+0x180>)
 800538c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	4b10      	ldr	r3, [pc, #64]	; (80053d4 <pvPortMalloc+0x174>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	431a      	orrs	r2, r3
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053a2:	f7fe fc39 	bl	8003c18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d009      	beq.n	80053c4 <pvPortMalloc+0x164>
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	e7fe      	b.n	80053c2 <pvPortMalloc+0x162>
	return pvReturn;
 80053c4:	69fb      	ldr	r3, [r7, #28]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3728      	adds	r7, #40	; 0x28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20004538 	.word	0x20004538
 80053d4:	20004544 	.word	0x20004544
 80053d8:	2000453c 	.word	0x2000453c
 80053dc:	20004530 	.word	0x20004530
 80053e0:	20004540 	.word	0x20004540

080053e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d046      	beq.n	8005484 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80053f6:	2308      	movs	r3, #8
 80053f8:	425b      	negs	r3, r3
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	4413      	add	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	4b20      	ldr	r3, [pc, #128]	; (800548c <vPortFree+0xa8>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4013      	ands	r3, r2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d109      	bne.n	8005426 <vPortFree+0x42>
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	e7fe      	b.n	8005424 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d009      	beq.n	8005442 <vPortFree+0x5e>
 800542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	60bb      	str	r3, [r7, #8]
 8005440:	e7fe      	b.n	8005440 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	4b11      	ldr	r3, [pc, #68]	; (800548c <vPortFree+0xa8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4013      	ands	r3, r2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d019      	beq.n	8005484 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d115      	bne.n	8005484 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	4b0b      	ldr	r3, [pc, #44]	; (800548c <vPortFree+0xa8>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	43db      	mvns	r3, r3
 8005462:	401a      	ands	r2, r3
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005468:	f7fe fbc8 	bl	8003bfc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	4b07      	ldr	r3, [pc, #28]	; (8005490 <vPortFree+0xac>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4413      	add	r3, r2
 8005476:	4a06      	ldr	r2, [pc, #24]	; (8005490 <vPortFree+0xac>)
 8005478:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800547a:	6938      	ldr	r0, [r7, #16]
 800547c:	f000 f86c 	bl	8005558 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005480:	f7fe fbca 	bl	8003c18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005484:	bf00      	nop
 8005486:	3718      	adds	r7, #24
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	20004544 	.word	0x20004544
 8005490:	2000453c 	.word	0x2000453c

08005494 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800549a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800549e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054a0:	4b27      	ldr	r3, [pc, #156]	; (8005540 <prvHeapInit+0xac>)
 80054a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00c      	beq.n	80054c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3307      	adds	r3, #7
 80054b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0307 	bic.w	r3, r3, #7
 80054ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	4a1f      	ldr	r2, [pc, #124]	; (8005540 <prvHeapInit+0xac>)
 80054c4:	4413      	add	r3, r2
 80054c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054cc:	4a1d      	ldr	r2, [pc, #116]	; (8005544 <prvHeapInit+0xb0>)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80054d2:	4b1c      	ldr	r3, [pc, #112]	; (8005544 <prvHeapInit+0xb0>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	4413      	add	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80054e0:	2208      	movs	r2, #8
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0307 	bic.w	r3, r3, #7
 80054ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4a15      	ldr	r2, [pc, #84]	; (8005548 <prvHeapInit+0xb4>)
 80054f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80054f6:	4b14      	ldr	r3, [pc, #80]	; (8005548 <prvHeapInit+0xb4>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2200      	movs	r2, #0
 80054fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80054fe:	4b12      	ldr	r3, [pc, #72]	; (8005548 <prvHeapInit+0xb4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	1ad2      	subs	r2, r2, r3
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005514:	4b0c      	ldr	r3, [pc, #48]	; (8005548 <prvHeapInit+0xb4>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	4a0a      	ldr	r2, [pc, #40]	; (800554c <prvHeapInit+0xb8>)
 8005522:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	4a09      	ldr	r2, [pc, #36]	; (8005550 <prvHeapInit+0xbc>)
 800552a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800552c:	4b09      	ldr	r3, [pc, #36]	; (8005554 <prvHeapInit+0xc0>)
 800552e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005532:	601a      	str	r2, [r3, #0]
}
 8005534:	bf00      	nop
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	20000930 	.word	0x20000930
 8005544:	20004530 	.word	0x20004530
 8005548:	20004538 	.word	0x20004538
 800554c:	20004540 	.word	0x20004540
 8005550:	2000453c 	.word	0x2000453c
 8005554:	20004544 	.word	0x20004544

08005558 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005560:	4b28      	ldr	r3, [pc, #160]	; (8005604 <prvInsertBlockIntoFreeList+0xac>)
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	e002      	b.n	800556c <prvInsertBlockIntoFreeList+0x14>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	429a      	cmp	r2, r3
 8005574:	d8f7      	bhi.n	8005566 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	4413      	add	r3, r2
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	429a      	cmp	r2, r3
 8005586:	d108      	bne.n	800559a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	441a      	add	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	441a      	add	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d118      	bne.n	80055e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	4b15      	ldr	r3, [pc, #84]	; (8005608 <prvInsertBlockIntoFreeList+0xb0>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d00d      	beq.n	80055d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	441a      	add	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	e008      	b.n	80055e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055d6:	4b0c      	ldr	r3, [pc, #48]	; (8005608 <prvInsertBlockIntoFreeList+0xb0>)
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	e003      	b.n	80055e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d002      	beq.n	80055f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055f6:	bf00      	nop
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	20004530 	.word	0x20004530
 8005608:	20004538 	.word	0x20004538

0800560c <__libc_init_array>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	4e0d      	ldr	r6, [pc, #52]	; (8005644 <__libc_init_array+0x38>)
 8005610:	4c0d      	ldr	r4, [pc, #52]	; (8005648 <__libc_init_array+0x3c>)
 8005612:	1ba4      	subs	r4, r4, r6
 8005614:	10a4      	asrs	r4, r4, #2
 8005616:	2500      	movs	r5, #0
 8005618:	42a5      	cmp	r5, r4
 800561a:	d109      	bne.n	8005630 <__libc_init_array+0x24>
 800561c:	4e0b      	ldr	r6, [pc, #44]	; (800564c <__libc_init_array+0x40>)
 800561e:	4c0c      	ldr	r4, [pc, #48]	; (8005650 <__libc_init_array+0x44>)
 8005620:	f000 f82c 	bl	800567c <_init>
 8005624:	1ba4      	subs	r4, r4, r6
 8005626:	10a4      	asrs	r4, r4, #2
 8005628:	2500      	movs	r5, #0
 800562a:	42a5      	cmp	r5, r4
 800562c:	d105      	bne.n	800563a <__libc_init_array+0x2e>
 800562e:	bd70      	pop	{r4, r5, r6, pc}
 8005630:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005634:	4798      	blx	r3
 8005636:	3501      	adds	r5, #1
 8005638:	e7ee      	b.n	8005618 <__libc_init_array+0xc>
 800563a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800563e:	4798      	blx	r3
 8005640:	3501      	adds	r5, #1
 8005642:	e7f2      	b.n	800562a <__libc_init_array+0x1e>
 8005644:	08005808 	.word	0x08005808
 8005648:	08005808 	.word	0x08005808
 800564c:	08005808 	.word	0x08005808
 8005650:	0800580c 	.word	0x0800580c

08005654 <memcpy>:
 8005654:	b510      	push	{r4, lr}
 8005656:	1e43      	subs	r3, r0, #1
 8005658:	440a      	add	r2, r1
 800565a:	4291      	cmp	r1, r2
 800565c:	d100      	bne.n	8005660 <memcpy+0xc>
 800565e:	bd10      	pop	{r4, pc}
 8005660:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005664:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005668:	e7f7      	b.n	800565a <memcpy+0x6>

0800566a <memset>:
 800566a:	4402      	add	r2, r0
 800566c:	4603      	mov	r3, r0
 800566e:	4293      	cmp	r3, r2
 8005670:	d100      	bne.n	8005674 <memset+0xa>
 8005672:	4770      	bx	lr
 8005674:	f803 1b01 	strb.w	r1, [r3], #1
 8005678:	e7f9      	b.n	800566e <memset+0x4>
	...

0800567c <_init>:
 800567c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567e:	bf00      	nop
 8005680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005682:	bc08      	pop	{r3}
 8005684:	469e      	mov	lr, r3
 8005686:	4770      	bx	lr

08005688 <_fini>:
 8005688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568a:	bf00      	nop
 800568c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800568e:	bc08      	pop	{r3}
 8005690:	469e      	mov	lr, r3
 8005692:	4770      	bx	lr
