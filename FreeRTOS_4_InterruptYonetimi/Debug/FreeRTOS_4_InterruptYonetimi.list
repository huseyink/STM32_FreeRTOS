
FreeRTOS_4_InterruptYonetimi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004ce4  08004ce4  00014ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004db0  08004db0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004db0  08004db0  00014db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004db8  08004db8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004db8  08004db8  00014db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dbc  08004dbc  00014dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004058  20000010  08004dd0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004068  08004dd0  00024068  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130c4  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002935  00000000  00000000  00033104  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010d0  00000000  00000000  00035a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f98  00000000  00000000  00036b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022901  00000000  00000000  00037aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cbaf  00000000  00000000  0005a3a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2724  00000000  00000000  00066f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013967c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045f8  00000000  00000000  001396f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ccc 	.word	0x08004ccc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004ccc 	.word	0x08004ccc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000080 	.word	0x20000080

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b090      	sub	sp, #64	; 0x40
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fb15 	bl	8000b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f84d 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f8df 	bl	80006e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000526:	f000 f8b3 	bl	8000690 <MX_USART2_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of xBinarySemaphore */
  osSemaphoreDef(xBinarySemaphore);
 800052a:	2300      	movs	r3, #0
 800052c:	63bb      	str	r3, [r7, #56]	; 0x38
 800052e:	2300      	movs	r3, #0
 8000530:	63fb      	str	r3, [r7, #60]	; 0x3c
  xBinarySemaphoreHandle = osSemaphoreCreate(osSemaphore(xBinarySemaphore), 1);
 8000532:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000536:	2101      	movs	r1, #1
 8000538:	4618      	mov	r0, r3
 800053a:	f002 f9e0 	bl	80028fe <osSemaphoreCreate>
 800053e:	4602      	mov	r2, r0
 8000540:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <main+0x90>)
 8000542:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */

  xBinarySemaphore = xSemaphoreCreateBinary();
 8000544:	2203      	movs	r2, #3
 8000546:	2100      	movs	r1, #0
 8000548:	2001      	movs	r0, #1
 800054a:	f002 fb9a 	bl	8002c82 <xQueueGenericCreate>
 800054e:	4602      	mov	r2, r0
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <main+0x94>)
 8000552:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of PeriodicTask */
  osThreadDef(PeriodicTask, vPeriodicTask, osPriorityNormal, 0, 128);
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <main+0x98>)
 8000556:	f107 041c 	add.w	r4, r7, #28
 800055a:	461d      	mov	r5, r3
 800055c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000560:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000564:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PeriodicTaskHandle = osThreadCreate(osThread(PeriodicTask), NULL);
 8000568:	f107 031c 	add.w	r3, r7, #28
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f002 f979 	bl	8002866 <osThreadCreate>
 8000574:	4602      	mov	r2, r0
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <main+0x9c>)
 8000578:	601a      	str	r2, [r3, #0]

  /* definition and creation of HandlerTask */
  osThreadDef(HandlerTask, HandlerFunction, osPriorityAboveNormal, 0, 128);
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <main+0xa0>)
 800057c:	463c      	mov	r4, r7
 800057e:	461d      	mov	r5, r3
 8000580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HandlerTaskHandle = osThreadCreate(osThread(HandlerTask), NULL);
 800058c:	463b      	mov	r3, r7
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f002 f968 	bl	8002866 <osThreadCreate>
 8000596:	4602      	mov	r2, r0
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <main+0xa4>)
 800059a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800059c:	f002 f95c 	bl	8002858 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <main+0x8c>
 80005a2:	bf00      	nop
 80005a4:	20003fd4 	.word	0x20003fd4
 80005a8:	20003fd0 	.word	0x20003fd0
 80005ac:	08004cf4 	.word	0x08004cf4
 80005b0:	20003fd8 	.word	0x20003fd8
 80005b4:	08004d1c 	.word	0x08004d1c
 80005b8:	20004020 	.word	0x20004020

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f004 fb75 	bl	8004cba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b28      	ldr	r3, [pc, #160]	; (8000688 <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a27      	ldr	r2, [pc, #156]	; (8000688 <SystemClock_Config+0xcc>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b25      	ldr	r3, [pc, #148]	; (8000688 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a21      	ldr	r2, [pc, #132]	; (800068c <SystemClock_Config+0xd0>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000630:	23a8      	movs	r3, #168	; 0xa8
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000638:	2304      	movs	r3, #4
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fd73 	bl	800112c <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800064c:	f000 f946 	bl	80008dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000666:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2105      	movs	r1, #5
 800066e:	4618      	mov	r0, r3
 8000670:	f000 ffcc 	bl	800160c <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800067a:	f000 f92f 	bl	80008dc <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	; 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_USART2_UART_Init+0x50>)
 8000698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 800069c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_USART2_UART_Init+0x4c>)
 80006c8:	f001 fc02 	bl	8001ed0 <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006d2:	f000 f903 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20003fdc 	.word	0x20003fdc
 80006e0:	40004400 	.word	0x40004400

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <MX_GPIO_Init+0xc4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a29      	ldr	r2, [pc, #164]	; (80007a8 <MX_GPIO_Init+0xc4>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b27      	ldr	r3, [pc, #156]	; (80007a8 <MX_GPIO_Init+0xc4>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b23      	ldr	r3, [pc, #140]	; (80007a8 <MX_GPIO_Init+0xc4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a22      	ldr	r2, [pc, #136]	; (80007a8 <MX_GPIO_Init+0xc4>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <MX_GPIO_Init+0xc4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_GPIO_Init+0xc4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a1b      	ldr	r2, [pc, #108]	; (80007a8 <MX_GPIO_Init+0xc4>)
 800073c:	f043 0308 	orr.w	r3, r3, #8
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MX_GPIO_Init+0xc4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0308 	and.w	r3, r3, #8
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USER_LED_G_Pin|USER_LED_O_Pin|USER_LED_R_Pin|USER_LED_B_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000754:	4815      	ldr	r0, [pc, #84]	; (80007ac <MX_GPIO_Init+0xc8>)
 8000756:	f000 fcb5 	bl	80010c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 800075a:	2301      	movs	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_GPIO_Init+0xcc>)
 8000760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000762:	2302      	movs	r3, #2
 8000764:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	4619      	mov	r1, r3
 800076c:	4811      	ldr	r0, [pc, #68]	; (80007b4 <MX_GPIO_Init+0xd0>)
 800076e:	f000 fb0f 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_G_Pin USER_LED_O_Pin USER_LED_R_Pin USER_LED_B_Pin */
  GPIO_InitStruct.Pin = USER_LED_G_Pin|USER_LED_O_Pin|USER_LED_R_Pin|USER_LED_B_Pin;
 8000772:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	4808      	ldr	r0, [pc, #32]	; (80007ac <MX_GPIO_Init+0xc8>)
 800078c:	f000 fb00 	bl	8000d90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2105      	movs	r1, #5
 8000794:	2006      	movs	r0, #6
 8000796:	f000 fad1 	bl	8000d3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800079a:	2006      	movs	r0, #6
 800079c:	f000 faea 	bl	8000d74 <HAL_NVIC_EnableIRQ>

}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020c00 	.word	0x40020c00
 80007b0:	10110000 	.word	0x10110000
 80007b4:	40020000 	.word	0x40020000

080007b8 <UartPrint>:

/* USER CODE BEGIN 4 */

void UartPrint(char* message)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 20);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff fd05 	bl	80001d0 <strlen>
 80007c6:	4603      	mov	r3, r0
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	2314      	movs	r3, #20
 80007cc:	6879      	ldr	r1, [r7, #4]
 80007ce:	4803      	ldr	r0, [pc, #12]	; (80007dc <UartPrint+0x24>)
 80007d0:	f001 fbcb 	bl	8001f6a <HAL_UART_Transmit>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20003fdc 	.word	0x20003fdc

080007e0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0

	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != 0)
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <EXTI0_IRQHandler+0x50>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d019      	beq.n	8000826 <EXTI0_IRQHandler+0x46>
	{
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]

		UartPrint("ISR is running...\r\n");
 80007f6:	480f      	ldr	r0, [pc, #60]	; (8000834 <EXTI0_IRQHandler+0x54>)
 80007f8:	f7ff ffde 	bl	80007b8 <UartPrint>

		xSemaphoreGiveFromISR(xBinarySemaphore,&xHigherPriorityTaskWoken);
 80007fc:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <EXTI0_IRQHandler+0x58>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	1d3a      	adds	r2, r7, #4
 8000802:	4611      	mov	r1, r2
 8000804:	4618      	mov	r0, r3
 8000806:	f002 fb95 	bl	8002f34 <xQueueGiveFromISR>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <EXTI0_IRQHandler+0x50>)
 800080c:	2201      	movs	r2, #1
 800080e:	615a      	str	r2, [r3, #20]

		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d007      	beq.n	8000826 <EXTI0_IRQHandler+0x46>
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <EXTI0_IRQHandler+0x5c>)
 8000818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	f3bf 8f4f 	dsb	sy
 8000822:	f3bf 8f6f 	isb	sy
	}


}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40013c00 	.word	0x40013c00
 8000834:	08004d38 	.word	0x08004d38
 8000838:	20003fd0 	.word	0x20003fd0
 800083c:	e000ed04 	.word	0xe000ed04

08000840 <vPeriodicTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vPeriodicTask */
void vPeriodicTask(void const * argument)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	const TickType_t xDelay500ms = pdMS_TO_TICKS( 500UL );
 8000848:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800084c:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay( xDelay500ms );
 800084e:	68f8      	ldr	r0, [r7, #12]
 8000850:	f002 ff94 	bl	800377c <vTaskDelay>

	  HAL_GPIO_TogglePin(USER_LED_B_GPIO_Port, USER_LED_B_Pin);
 8000854:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000858:	4806      	ldr	r0, [pc, #24]	; (8000874 <vPeriodicTask+0x34>)
 800085a:	f000 fc4c 	bl	80010f6 <HAL_GPIO_TogglePin>
	  HAL_GPIO_WritePin(USER_LED_G_GPIO_Port, USER_LED_G_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000864:	4803      	ldr	r0, [pc, #12]	; (8000874 <vPeriodicTask+0x34>)
 8000866:	f000 fc2d 	bl	80010c4 <HAL_GPIO_WritePin>

	  UartPrint("Bu bir periyodik gorevdir!!!\r\n");
 800086a:	4803      	ldr	r0, [pc, #12]	; (8000878 <vPeriodicTask+0x38>)
 800086c:	f7ff ffa4 	bl	80007b8 <UartPrint>
	  vTaskDelay( xDelay500ms );
 8000870:	e7ed      	b.n	800084e <vPeriodicTask+0xe>
 8000872:	bf00      	nop
 8000874:	40020c00 	.word	0x40020c00
 8000878:	08004d4c 	.word	0x08004d4c

0800087c <HandlerFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HandlerFunction */
void HandlerFunction(void const * argument)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HandlerFunction */
  /* Infinite loop */
  for(;;)
  {

	  if(xSemaphoreTake(xBinarySemaphore,portMAX_DELAY) == pdPASS)
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <HandlerFunction+0x30>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f04f 31ff 	mov.w	r1, #4294967295
 800088c:	4618      	mov	r0, r3
 800088e:	f002 fbdb 	bl	8003048 <xQueueSemaphoreTake>
 8000892:	4603      	mov	r3, r0
 8000894:	2b01      	cmp	r3, #1
 8000896:	d1f5      	bne.n	8000884 <HandlerFunction+0x8>
	  {
		  HAL_GPIO_WritePin(USER_LED_G_GPIO_Port, USER_LED_G_Pin, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089e:	4804      	ldr	r0, [pc, #16]	; (80008b0 <HandlerFunction+0x34>)
 80008a0:	f000 fc10 	bl	80010c4 <HAL_GPIO_WritePin>
		  UartPrint("Handler fonksiyonuna girdiniz!!\r\n");
 80008a4:	4803      	ldr	r0, [pc, #12]	; (80008b4 <HandlerFunction+0x38>)
 80008a6:	f7ff ff87 	bl	80007b8 <UartPrint>
	  if(xSemaphoreTake(xBinarySemaphore,portMAX_DELAY) == pdPASS)
 80008aa:	e7eb      	b.n	8000884 <HandlerFunction+0x8>
 80008ac:	20003fd0 	.word	0x20003fd0
 80008b0:	40020c00 	.word	0x40020c00
 80008b4:	08004d6c 	.word	0x08004d6c

080008b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d101      	bne.n	80008ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ca:	f000 f95f 	bl	8000b8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40010000 	.word	0x40010000

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
	...

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <HAL_MspInit+0x4c>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	4a0f      	ldr	r2, [pc, #60]	; (8000938 <HAL_MspInit+0x4c>)
 80008fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000900:	6453      	str	r3, [r2, #68]	; 0x44
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <HAL_MspInit+0x4c>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <HAL_MspInit+0x4c>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	4a08      	ldr	r2, [pc, #32]	; (8000938 <HAL_MspInit+0x4c>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091c:	6413      	str	r3, [r2, #64]	; 0x40
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_MspInit+0x4c>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a19      	ldr	r2, [pc, #100]	; (80009c0 <HAL_UART_MspInit+0x84>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d12b      	bne.n	80009b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <HAL_UART_MspInit+0x88>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <HAL_UART_MspInit+0x88>)
 8000968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_UART_MspInit+0x88>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <HAL_UART_MspInit+0x88>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a10      	ldr	r2, [pc, #64]	; (80009c4 <HAL_UART_MspInit+0x88>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <HAL_UART_MspInit+0x88>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000996:	230c      	movs	r3, #12
 8000998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a2:	2303      	movs	r3, #3
 80009a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009a6:	2307      	movs	r3, #7
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <HAL_UART_MspInit+0x8c>)
 80009b2:	f000 f9ed 	bl	8000d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009b6:	bf00      	nop
 80009b8:	3728      	adds	r7, #40	; 0x28
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40004400 	.word	0x40004400
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020000 	.word	0x40020000

080009cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08c      	sub	sp, #48	; 0x30
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	2019      	movs	r0, #25
 80009e2:	f000 f9ab 	bl	8000d3c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80009e6:	2019      	movs	r0, #25
 80009e8:	f000 f9c4 	bl	8000d74 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <HAL_InitTick+0xa4>)
 80009f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f4:	4a1e      	ldr	r2, [pc, #120]	; (8000a70 <HAL_InitTick+0xa4>)
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	6453      	str	r3, [r2, #68]	; 0x44
 80009fc:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <HAL_InitTick+0xa4>)
 80009fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a08:	f107 0210 	add.w	r2, r7, #16
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4611      	mov	r1, r2
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 ffec 	bl	80019f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a18:	f000 ffd6 	bl	80019c8 <HAL_RCC_GetPCLK2Freq>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a24:	4a13      	ldr	r2, [pc, #76]	; (8000a74 <HAL_InitTick+0xa8>)
 8000a26:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2a:	0c9b      	lsrs	r3, r3, #18
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <HAL_InitTick+0xac>)
 8000a32:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <HAL_InitTick+0xb0>)
 8000a34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <HAL_InitTick+0xac>)
 8000a38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a3c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <HAL_InitTick+0xac>)
 8000a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a42:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <HAL_InitTick+0xac>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <HAL_InitTick+0xac>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a50:	4809      	ldr	r0, [pc, #36]	; (8000a78 <HAL_InitTick+0xac>)
 8000a52:	f000 ffff 	bl	8001a54 <HAL_TIM_Base_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d104      	bne.n	8000a66 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a5c:	4806      	ldr	r0, [pc, #24]	; (8000a78 <HAL_InitTick+0xac>)
 8000a5e:	f001 f82e 	bl	8001abe <HAL_TIM_Base_Start_IT>
 8000a62:	4603      	mov	r3, r0
 8000a64:	e000      	b.n	8000a68 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3730      	adds	r7, #48	; 0x30
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40023800 	.word	0x40023800
 8000a74:	431bde83 	.word	0x431bde83
 8000a78:	20004024 	.word	0x20004024
 8000a7c:	40010000 	.word	0x40010000

08000a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <HardFault_Handler+0x4>

08000a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <MemManage_Handler+0x4>

08000a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <BusFault_Handler+0x4>

08000aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <UsageFault_Handler+0x4>

08000aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000aba:	f001 f824 	bl	8001b06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20004024 	.word	0x20004024

08000ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <SystemInit+0x28>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <SystemInit+0x28>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <SystemInit+0x28>)
 8000ade:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ae2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000af8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000afa:	e003      	b.n	8000b04 <LoopCopyDataInit>

08000afc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000afe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b02:	3104      	adds	r1, #4

08000b04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b04:	480b      	ldr	r0, [pc, #44]	; (8000b34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b0c:	d3f6      	bcc.n	8000afc <CopyDataInit>
  ldr  r2, =_sbss
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b10:	e002      	b.n	8000b18 <LoopFillZerobss>

08000b12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b14:	f842 3b04 	str.w	r3, [r2], #4

08000b18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b1c:	d3f9      	bcc.n	8000b12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b1e:	f7ff ffd3 	bl	8000ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b22:	f004 f89b 	bl	8004c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b26:	f7ff fcf5 	bl	8000514 <main>
  bx  lr    
 8000b2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b2c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b30:	08004dc0 	.word	0x08004dc0
  ldr  r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b38:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000b3c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000b40:	20004068 	.word	0x20004068

08000b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <HAL_Init+0x40>)
 8000b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <HAL_Init+0x40>)
 8000b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_Init+0x40>)
 8000b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 f8d8 	bl	8000d26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f7ff ff28 	bl	80009cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b7c:	f7ff feb6 	bl	80008ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023c00 	.word	0x40023c00

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20004064 	.word	0x20004064

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20004064 	.word	0x20004064

08000bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfe:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	60d3      	str	r3, [r2, #12]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <__NVIC_GetPriorityGrouping+0x18>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	f003 0307 	and.w	r3, r3, #7
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	db0b      	blt.n	8000c5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	f003 021f 	and.w	r2, r3, #31
 8000c48:	4907      	ldr	r1, [pc, #28]	; (8000c68 <__NVIC_EnableIRQ+0x38>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	095b      	lsrs	r3, r3, #5
 8000c50:	2001      	movs	r0, #1
 8000c52:	fa00 f202 	lsl.w	r2, r0, r2
 8000c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000e100 	.word	0xe000e100

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0a      	blt.n	8000c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	490c      	ldr	r1, [pc, #48]	; (8000cb8 <__NVIC_SetPriority+0x4c>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	440b      	add	r3, r1
 8000c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c94:	e00a      	b.n	8000cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4908      	ldr	r1, [pc, #32]	; (8000cbc <__NVIC_SetPriority+0x50>)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	3b04      	subs	r3, #4
 8000ca4:	0112      	lsls	r2, r2, #4
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	440b      	add	r3, r1
 8000caa:	761a      	strb	r2, [r3, #24]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e100 	.word	0xe000e100
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f1c3 0307 	rsb	r3, r3, #7
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	bf28      	it	cs
 8000cde:	2304      	movcs	r3, #4
 8000ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d902      	bls.n	8000cf0 <NVIC_EncodePriority+0x30>
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3b03      	subs	r3, #3
 8000cee:	e000      	b.n	8000cf2 <NVIC_EncodePriority+0x32>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d08:	f04f 31ff 	mov.w	r1, #4294967295
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d12:	43d9      	mvns	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	4313      	orrs	r3, r2
         );
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3724      	adds	r7, #36	; 0x24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ff4c 	bl	8000bcc <__NVIC_SetPriorityGrouping>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
 8000d48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d4e:	f7ff ff61 	bl	8000c14 <__NVIC_GetPriorityGrouping>
 8000d52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	68b9      	ldr	r1, [r7, #8]
 8000d58:	6978      	ldr	r0, [r7, #20]
 8000d5a:	f7ff ffb1 	bl	8000cc0 <NVIC_EncodePriority>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d64:	4611      	mov	r1, r2
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff80 	bl	8000c6c <__NVIC_SetPriority>
}
 8000d6c:	bf00      	nop
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff54 	bl	8000c30 <__NVIC_EnableIRQ>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
 8000daa:	e16b      	b.n	8001084 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dac:	2201      	movs	r2, #1
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	697a      	ldr	r2, [r7, #20]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	f040 815a 	bne.w	800107e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d00b      	beq.n	8000dea <HAL_GPIO_Init+0x5a>
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d007      	beq.n	8000dea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dde:	2b11      	cmp	r3, #17
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b12      	cmp	r3, #18
 8000de8:	d130      	bne.n	8000e4c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	2203      	movs	r2, #3
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	68da      	ldr	r2, [r3, #12]
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e20:	2201      	movs	r2, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	091b      	lsrs	r3, r3, #4
 8000e36:	f003 0201 	and.w	r2, r3, #1
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	2203      	movs	r2, #3
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	689a      	ldr	r2, [r3, #8]
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0xfc>
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b12      	cmp	r3, #18
 8000e8a:	d123      	bne.n	8000ed4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	08da      	lsrs	r2, r3, #3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3208      	adds	r2, #8
 8000e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	f003 0307 	and.w	r3, r3, #7
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	220f      	movs	r2, #15
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	691a      	ldr	r2, [r3, #16]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	08da      	lsrs	r2, r3, #3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3208      	adds	r2, #8
 8000ece:	69b9      	ldr	r1, [r7, #24]
 8000ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0203 	and.w	r2, r3, #3
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 80b4 	beq.w	800107e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b5f      	ldr	r3, [pc, #380]	; (8001098 <HAL_GPIO_Init+0x308>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a5e      	ldr	r2, [pc, #376]	; (8001098 <HAL_GPIO_Init+0x308>)
 8000f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b5c      	ldr	r3, [pc, #368]	; (8001098 <HAL_GPIO_Init+0x308>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f32:	4a5a      	ldr	r2, [pc, #360]	; (800109c <HAL_GPIO_Init+0x30c>)
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	3302      	adds	r3, #2
 8000f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	220f      	movs	r2, #15
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a51      	ldr	r2, [pc, #324]	; (80010a0 <HAL_GPIO_Init+0x310>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d02b      	beq.n	8000fb6 <HAL_GPIO_Init+0x226>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a50      	ldr	r2, [pc, #320]	; (80010a4 <HAL_GPIO_Init+0x314>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d025      	beq.n	8000fb2 <HAL_GPIO_Init+0x222>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4f      	ldr	r2, [pc, #316]	; (80010a8 <HAL_GPIO_Init+0x318>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d01f      	beq.n	8000fae <HAL_GPIO_Init+0x21e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4e      	ldr	r2, [pc, #312]	; (80010ac <HAL_GPIO_Init+0x31c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d019      	beq.n	8000faa <HAL_GPIO_Init+0x21a>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4d      	ldr	r2, [pc, #308]	; (80010b0 <HAL_GPIO_Init+0x320>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d013      	beq.n	8000fa6 <HAL_GPIO_Init+0x216>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4c      	ldr	r2, [pc, #304]	; (80010b4 <HAL_GPIO_Init+0x324>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d00d      	beq.n	8000fa2 <HAL_GPIO_Init+0x212>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4b      	ldr	r2, [pc, #300]	; (80010b8 <HAL_GPIO_Init+0x328>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d007      	beq.n	8000f9e <HAL_GPIO_Init+0x20e>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4a      	ldr	r2, [pc, #296]	; (80010bc <HAL_GPIO_Init+0x32c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d101      	bne.n	8000f9a <HAL_GPIO_Init+0x20a>
 8000f96:	2307      	movs	r3, #7
 8000f98:	e00e      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000f9a:	2308      	movs	r3, #8
 8000f9c:	e00c      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000f9e:	2306      	movs	r3, #6
 8000fa0:	e00a      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	e008      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	e006      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000faa:	2303      	movs	r3, #3
 8000fac:	e004      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <HAL_GPIO_Init+0x228>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	69fa      	ldr	r2, [r7, #28]
 8000fba:	f002 0203 	and.w	r2, r2, #3
 8000fbe:	0092      	lsls	r2, r2, #2
 8000fc0:	4093      	lsls	r3, r2
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc8:	4934      	ldr	r1, [pc, #208]	; (800109c <HAL_GPIO_Init+0x30c>)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fd6:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <HAL_GPIO_Init+0x330>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ffa:	4a31      	ldr	r2, [pc, #196]	; (80010c0 <HAL_GPIO_Init+0x330>)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001000:	4b2f      	ldr	r3, [pc, #188]	; (80010c0 <HAL_GPIO_Init+0x330>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001024:	4a26      	ldr	r2, [pc, #152]	; (80010c0 <HAL_GPIO_Init+0x330>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <HAL_GPIO_Init+0x330>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800104e:	4a1c      	ldr	r2, [pc, #112]	; (80010c0 <HAL_GPIO_Init+0x330>)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <HAL_GPIO_Init+0x330>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001078:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <HAL_GPIO_Init+0x330>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3301      	adds	r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	2b0f      	cmp	r3, #15
 8001088:	f67f ae90 	bls.w	8000dac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800108c:	bf00      	nop
 800108e:	3724      	adds	r7, #36	; 0x24
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	40023800 	.word	0x40023800
 800109c:	40013800 	.word	0x40013800
 80010a0:	40020000 	.word	0x40020000
 80010a4:	40020400 	.word	0x40020400
 80010a8:	40020800 	.word	0x40020800
 80010ac:	40020c00 	.word	0x40020c00
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40021400 	.word	0x40021400
 80010b8:	40021800 	.word	0x40021800
 80010bc:	40021c00 	.word	0x40021c00
 80010c0:	40013c00 	.word	0x40013c00

080010c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
 80010d0:	4613      	mov	r3, r2
 80010d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d4:	787b      	ldrb	r3, [r7, #1]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010da:	887a      	ldrh	r2, [r7, #2]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010e0:	e003      	b.n	80010ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010e2:	887b      	ldrh	r3, [r7, #2]
 80010e4:	041a      	lsls	r2, r3, #16
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	619a      	str	r2, [r3, #24]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	460b      	mov	r3, r1
 8001100:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	695a      	ldr	r2, [r3, #20]
 8001106:	887b      	ldrh	r3, [r7, #2]
 8001108:	401a      	ands	r2, r3
 800110a:	887b      	ldrh	r3, [r7, #2]
 800110c:	429a      	cmp	r2, r3
 800110e:	d104      	bne.n	800111a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	041a      	lsls	r2, r3, #16
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001118:	e002      	b.n	8001120 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800111a:	887a      	ldrh	r2, [r7, #2]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	619a      	str	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e25b      	b.n	80015f6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	d075      	beq.n	8001236 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800114a:	4ba3      	ldr	r3, [pc, #652]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 030c 	and.w	r3, r3, #12
 8001152:	2b04      	cmp	r3, #4
 8001154:	d00c      	beq.n	8001170 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001156:	4ba0      	ldr	r3, [pc, #640]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800115e:	2b08      	cmp	r3, #8
 8001160:	d112      	bne.n	8001188 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001162:	4b9d      	ldr	r3, [pc, #628]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800116a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800116e:	d10b      	bne.n	8001188 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001170:	4b99      	ldr	r3, [pc, #612]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d05b      	beq.n	8001234 <HAL_RCC_OscConfig+0x108>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d157      	bne.n	8001234 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e236      	b.n	80015f6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001190:	d106      	bne.n	80011a0 <HAL_RCC_OscConfig+0x74>
 8001192:	4b91      	ldr	r3, [pc, #580]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a90      	ldr	r2, [pc, #576]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	e01d      	b.n	80011dc <HAL_RCC_OscConfig+0xb0>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011a8:	d10c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x98>
 80011aa:	4b8b      	ldr	r3, [pc, #556]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a8a      	ldr	r2, [pc, #552]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	4b88      	ldr	r3, [pc, #544]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a87      	ldr	r2, [pc, #540]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e00b      	b.n	80011dc <HAL_RCC_OscConfig+0xb0>
 80011c4:	4b84      	ldr	r3, [pc, #528]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a83      	ldr	r2, [pc, #524]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	4b81      	ldr	r3, [pc, #516]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a80      	ldr	r2, [pc, #512]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80011d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d013      	beq.n	800120c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fce6 	bl	8000bb4 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ec:	f7ff fce2 	bl	8000bb4 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b64      	cmp	r3, #100	; 0x64
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e1fb      	b.n	80015f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fe:	4b76      	ldr	r3, [pc, #472]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f0      	beq.n	80011ec <HAL_RCC_OscConfig+0xc0>
 800120a:	e014      	b.n	8001236 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120c:	f7ff fcd2 	bl	8000bb4 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001214:	f7ff fcce 	bl	8000bb4 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b64      	cmp	r3, #100	; 0x64
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e1e7      	b.n	80015f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001226:	4b6c      	ldr	r3, [pc, #432]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f0      	bne.n	8001214 <HAL_RCC_OscConfig+0xe8>
 8001232:	e000      	b.n	8001236 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d063      	beq.n	800130a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001242:	4b65      	ldr	r3, [pc, #404]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 030c 	and.w	r3, r3, #12
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00b      	beq.n	8001266 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800124e:	4b62      	ldr	r3, [pc, #392]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001256:	2b08      	cmp	r3, #8
 8001258:	d11c      	bne.n	8001294 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800125a:	4b5f      	ldr	r3, [pc, #380]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d116      	bne.n	8001294 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001266:	4b5c      	ldr	r3, [pc, #368]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d005      	beq.n	800127e <HAL_RCC_OscConfig+0x152>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d001      	beq.n	800127e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e1bb      	b.n	80015f6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127e:	4b56      	ldr	r3, [pc, #344]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	4952      	ldr	r1, [pc, #328]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 800128e:	4313      	orrs	r3, r2
 8001290:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001292:	e03a      	b.n	800130a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d020      	beq.n	80012de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800129c:	4b4f      	ldr	r3, [pc, #316]	; (80013dc <HAL_RCC_OscConfig+0x2b0>)
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a2:	f7ff fc87 	bl	8000bb4 <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012aa:	f7ff fc83 	bl	8000bb4 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e19c      	b.n	80015f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012bc:	4b46      	ldr	r3, [pc, #280]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0f0      	beq.n	80012aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c8:	4b43      	ldr	r3, [pc, #268]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	4940      	ldr	r1, [pc, #256]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	600b      	str	r3, [r1, #0]
 80012dc:	e015      	b.n	800130a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012de:	4b3f      	ldr	r3, [pc, #252]	; (80013dc <HAL_RCC_OscConfig+0x2b0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e4:	f7ff fc66 	bl	8000bb4 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ec:	f7ff fc62 	bl	8000bb4 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e17b      	b.n	80015f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fe:	4b36      	ldr	r3, [pc, #216]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	2b00      	cmp	r3, #0
 8001314:	d030      	beq.n	8001378 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d016      	beq.n	800134c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800131e:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <HAL_RCC_OscConfig+0x2b4>)
 8001320:	2201      	movs	r2, #1
 8001322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001324:	f7ff fc46 	bl	8000bb4 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800132c:	f7ff fc42 	bl	8000bb4 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e15b      	b.n	80015f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800133e:	4b26      	ldr	r3, [pc, #152]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 8001340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d0f0      	beq.n	800132c <HAL_RCC_OscConfig+0x200>
 800134a:	e015      	b.n	8001378 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800134c:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <HAL_RCC_OscConfig+0x2b4>)
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001352:	f7ff fc2f 	bl	8000bb4 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800135a:	f7ff fc2b 	bl	8000bb4 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e144      	b.n	80015f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800136c:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 800136e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1f0      	bne.n	800135a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 80a0 	beq.w	80014c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001386:	2300      	movs	r3, #0
 8001388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10f      	bne.n	80013b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013b2:	2301      	movs	r3, #1
 80013b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <HAL_RCC_OscConfig+0x2b8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d121      	bne.n	8001406 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_RCC_OscConfig+0x2b8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_RCC_OscConfig+0x2b8>)
 80013c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ce:	f7ff fbf1 	bl	8000bb4 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d4:	e011      	b.n	80013fa <HAL_RCC_OscConfig+0x2ce>
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800
 80013dc:	42470000 	.word	0x42470000
 80013e0:	42470e80 	.word	0x42470e80
 80013e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e8:	f7ff fbe4 	bl	8000bb4 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e0fd      	b.n	80015f6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fa:	4b81      	ldr	r3, [pc, #516]	; (8001600 <HAL_RCC_OscConfig+0x4d4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d106      	bne.n	800141c <HAL_RCC_OscConfig+0x2f0>
 800140e:	4b7d      	ldr	r3, [pc, #500]	; (8001604 <HAL_RCC_OscConfig+0x4d8>)
 8001410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001412:	4a7c      	ldr	r2, [pc, #496]	; (8001604 <HAL_RCC_OscConfig+0x4d8>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6713      	str	r3, [r2, #112]	; 0x70
 800141a:	e01c      	b.n	8001456 <HAL_RCC_OscConfig+0x32a>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	2b05      	cmp	r3, #5
 8001422:	d10c      	bne.n	800143e <HAL_RCC_OscConfig+0x312>
 8001424:	4b77      	ldr	r3, [pc, #476]	; (8001604 <HAL_RCC_OscConfig+0x4d8>)
 8001426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001428:	4a76      	ldr	r2, [pc, #472]	; (8001604 <HAL_RCC_OscConfig+0x4d8>)
 800142a:	f043 0304 	orr.w	r3, r3, #4
 800142e:	6713      	str	r3, [r2, #112]	; 0x70
 8001430:	4b74      	ldr	r3, [pc, #464]	; (8001604 <HAL_RCC_OscConfig+0x4d8>)
 8001432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001434:	4a73      	ldr	r2, [pc, #460]	; (8001604 <HAL_RCC_OscConfig+0x4d8>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6713      	str	r3, [r2, #112]	; 0x70
 800143c:	e00b      	b.n	8001456 <HAL_RCC_OscConfig+0x32a>
 800143e:	4b71      	ldr	r3, [pc, #452]	; (8001604 <HAL_RCC_OscConfig+0x4d8>)
 8001440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001442:	4a70      	ldr	r2, [pc, #448]	; (8001604 <HAL_RCC_OscConfig+0x4d8>)
 8001444:	f023 0301 	bic.w	r3, r3, #1
 8001448:	6713      	str	r3, [r2, #112]	; 0x70
 800144a:	4b6e      	ldr	r3, [pc, #440]	; (8001604 <HAL_RCC_OscConfig+0x4d8>)
 800144c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144e:	4a6d      	ldr	r2, [pc, #436]	; (8001604 <HAL_RCC_OscConfig+0x4d8>)
 8001450:	f023 0304 	bic.w	r3, r3, #4
 8001454:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d015      	beq.n	800148a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145e:	f7ff fba9 	bl	8000bb4 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001464:	e00a      	b.n	800147c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001466:	f7ff fba5 	bl	8000bb4 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	f241 3288 	movw	r2, #5000	; 0x1388
 8001474:	4293      	cmp	r3, r2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e0bc      	b.n	80015f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800147c:	4b61      	ldr	r3, [pc, #388]	; (8001604 <HAL_RCC_OscConfig+0x4d8>)
 800147e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0ee      	beq.n	8001466 <HAL_RCC_OscConfig+0x33a>
 8001488:	e014      	b.n	80014b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148a:	f7ff fb93 	bl	8000bb4 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001490:	e00a      	b.n	80014a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001492:	f7ff fb8f 	bl	8000bb4 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e0a6      	b.n	80015f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a8:	4b56      	ldr	r3, [pc, #344]	; (8001604 <HAL_RCC_OscConfig+0x4d8>)
 80014aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1ee      	bne.n	8001492 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014b4:	7dfb      	ldrb	r3, [r7, #23]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d105      	bne.n	80014c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ba:	4b52      	ldr	r3, [pc, #328]	; (8001604 <HAL_RCC_OscConfig+0x4d8>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a51      	ldr	r2, [pc, #324]	; (8001604 <HAL_RCC_OscConfig+0x4d8>)
 80014c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 8092 	beq.w	80015f4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014d0:	4b4c      	ldr	r3, [pc, #304]	; (8001604 <HAL_RCC_OscConfig+0x4d8>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d05c      	beq.n	8001596 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d141      	bne.n	8001568 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014e4:	4b48      	ldr	r3, [pc, #288]	; (8001608 <HAL_RCC_OscConfig+0x4dc>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ea:	f7ff fb63 	bl	8000bb4 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f2:	f7ff fb5f 	bl	8000bb4 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e078      	b.n	80015f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001504:	4b3f      	ldr	r3, [pc, #252]	; (8001604 <HAL_RCC_OscConfig+0x4d8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1f0      	bne.n	80014f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69da      	ldr	r2, [r3, #28]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	431a      	orrs	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	019b      	lsls	r3, r3, #6
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001526:	085b      	lsrs	r3, r3, #1
 8001528:	3b01      	subs	r3, #1
 800152a:	041b      	lsls	r3, r3, #16
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001532:	061b      	lsls	r3, r3, #24
 8001534:	4933      	ldr	r1, [pc, #204]	; (8001604 <HAL_RCC_OscConfig+0x4d8>)
 8001536:	4313      	orrs	r3, r2
 8001538:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800153a:	4b33      	ldr	r3, [pc, #204]	; (8001608 <HAL_RCC_OscConfig+0x4dc>)
 800153c:	2201      	movs	r2, #1
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fb38 	bl	8000bb4 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001548:	f7ff fb34 	bl	8000bb4 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e04d      	b.n	80015f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800155a:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <HAL_RCC_OscConfig+0x4d8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x41c>
 8001566:	e045      	b.n	80015f4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001568:	4b27      	ldr	r3, [pc, #156]	; (8001608 <HAL_RCC_OscConfig+0x4dc>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156e:	f7ff fb21 	bl	8000bb4 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001576:	f7ff fb1d 	bl	8000bb4 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e036      	b.n	80015f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001588:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <HAL_RCC_OscConfig+0x4d8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1f0      	bne.n	8001576 <HAL_RCC_OscConfig+0x44a>
 8001594:	e02e      	b.n	80015f4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d101      	bne.n	80015a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e029      	b.n	80015f6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <HAL_RCC_OscConfig+0x4d8>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d11c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d115      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015ca:	4013      	ands	r3, r2
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d10d      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015de:	429a      	cmp	r2, r3
 80015e0:	d106      	bne.n	80015f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d001      	beq.n	80015f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40007000 	.word	0x40007000
 8001604:	40023800 	.word	0x40023800
 8001608:	42470060 	.word	0x42470060

0800160c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e0cc      	b.n	80017ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001620:	4b68      	ldr	r3, [pc, #416]	; (80017c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 030f 	and.w	r3, r3, #15
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	429a      	cmp	r2, r3
 800162c:	d90c      	bls.n	8001648 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162e:	4b65      	ldr	r3, [pc, #404]	; (80017c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001636:	4b63      	ldr	r3, [pc, #396]	; (80017c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	d001      	beq.n	8001648 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e0b8      	b.n	80017ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d020      	beq.n	8001696 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001660:	4b59      	ldr	r3, [pc, #356]	; (80017c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	4a58      	ldr	r2, [pc, #352]	; (80017c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800166a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	2b00      	cmp	r3, #0
 8001676:	d005      	beq.n	8001684 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001678:	4b53      	ldr	r3, [pc, #332]	; (80017c8 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	4a52      	ldr	r2, [pc, #328]	; (80017c8 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001682:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001684:	4b50      	ldr	r3, [pc, #320]	; (80017c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	494d      	ldr	r1, [pc, #308]	; (80017c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	4313      	orrs	r3, r2
 8001694:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d044      	beq.n	800172c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d107      	bne.n	80016ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016aa:	4b47      	ldr	r3, [pc, #284]	; (80017c8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d119      	bne.n	80016ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e07f      	b.n	80017ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d003      	beq.n	80016ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d107      	bne.n	80016da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ca:	4b3f      	ldr	r3, [pc, #252]	; (80017c8 <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d109      	bne.n	80016ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e06f      	b.n	80017ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016da:	4b3b      	ldr	r3, [pc, #236]	; (80017c8 <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e067      	b.n	80017ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ea:	4b37      	ldr	r3, [pc, #220]	; (80017c8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f023 0203 	bic.w	r2, r3, #3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4934      	ldr	r1, [pc, #208]	; (80017c8 <HAL_RCC_ClockConfig+0x1bc>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016fc:	f7ff fa5a 	bl	8000bb4 <HAL_GetTick>
 8001700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001702:	e00a      	b.n	800171a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001704:	f7ff fa56 	bl	8000bb4 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001712:	4293      	cmp	r3, r2
 8001714:	d901      	bls.n	800171a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e04f      	b.n	80017ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171a:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 020c 	and.w	r2, r3, #12
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	429a      	cmp	r2, r3
 800172a:	d1eb      	bne.n	8001704 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800172c:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <HAL_RCC_ClockConfig+0x1b8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 030f 	and.w	r3, r3, #15
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d20c      	bcs.n	8001754 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173a:	4b22      	ldr	r3, [pc, #136]	; (80017c4 <HAL_RCC_ClockConfig+0x1b8>)
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001742:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d001      	beq.n	8001754 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e032      	b.n	80017ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d008      	beq.n	8001772 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	4916      	ldr	r1, [pc, #88]	; (80017c8 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	4313      	orrs	r3, r2
 8001770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b00      	cmp	r3, #0
 800177c:	d009      	beq.n	8001792 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	490e      	ldr	r1, [pc, #56]	; (80017c8 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	4313      	orrs	r3, r2
 8001790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001792:	f000 f821 	bl	80017d8 <HAL_RCC_GetSysClockFreq>
 8001796:	4601      	mov	r1, r0
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	091b      	lsrs	r3, r3, #4
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	5cd3      	ldrb	r3, [r2, r3]
 80017a6:	fa21 f303 	lsr.w	r3, r1, r3
 80017aa:	4a09      	ldr	r2, [pc, #36]	; (80017d0 <HAL_RCC_ClockConfig+0x1c4>)
 80017ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_RCC_ClockConfig+0x1c8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff f90a 	bl	80009cc <HAL_InitTick>

  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023c00 	.word	0x40023c00
 80017c8:	40023800 	.word	0x40023800
 80017cc:	08004d98 	.word	0x08004d98
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000004 	.word	0x20000004

080017d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	2300      	movs	r3, #0
 80017e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017ee:	4b63      	ldr	r3, [pc, #396]	; (800197c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d007      	beq.n	800180a <HAL_RCC_GetSysClockFreq+0x32>
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d008      	beq.n	8001810 <HAL_RCC_GetSysClockFreq+0x38>
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 80b4 	bne.w	800196c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001804:	4b5e      	ldr	r3, [pc, #376]	; (8001980 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001806:	60bb      	str	r3, [r7, #8]
       break;
 8001808:	e0b3      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800180a:	4b5e      	ldr	r3, [pc, #376]	; (8001984 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800180c:	60bb      	str	r3, [r7, #8]
      break;
 800180e:	e0b0      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001810:	4b5a      	ldr	r3, [pc, #360]	; (800197c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001818:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800181a:	4b58      	ldr	r3, [pc, #352]	; (800197c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d04a      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001826:	4b55      	ldr	r3, [pc, #340]	; (800197c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	099b      	lsrs	r3, r3, #6
 800182c:	f04f 0400 	mov.w	r4, #0
 8001830:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	ea03 0501 	and.w	r5, r3, r1
 800183c:	ea04 0602 	and.w	r6, r4, r2
 8001840:	4629      	mov	r1, r5
 8001842:	4632      	mov	r2, r6
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	f04f 0400 	mov.w	r4, #0
 800184c:	0154      	lsls	r4, r2, #5
 800184e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001852:	014b      	lsls	r3, r1, #5
 8001854:	4619      	mov	r1, r3
 8001856:	4622      	mov	r2, r4
 8001858:	1b49      	subs	r1, r1, r5
 800185a:	eb62 0206 	sbc.w	r2, r2, r6
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	f04f 0400 	mov.w	r4, #0
 8001866:	0194      	lsls	r4, r2, #6
 8001868:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800186c:	018b      	lsls	r3, r1, #6
 800186e:	1a5b      	subs	r3, r3, r1
 8001870:	eb64 0402 	sbc.w	r4, r4, r2
 8001874:	f04f 0100 	mov.w	r1, #0
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	00e2      	lsls	r2, r4, #3
 800187e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001882:	00d9      	lsls	r1, r3, #3
 8001884:	460b      	mov	r3, r1
 8001886:	4614      	mov	r4, r2
 8001888:	195b      	adds	r3, r3, r5
 800188a:	eb44 0406 	adc.w	r4, r4, r6
 800188e:	f04f 0100 	mov.w	r1, #0
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	0262      	lsls	r2, r4, #9
 8001898:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800189c:	0259      	lsls	r1, r3, #9
 800189e:	460b      	mov	r3, r1
 80018a0:	4614      	mov	r4, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	4621      	mov	r1, r4
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f04f 0400 	mov.w	r4, #0
 80018ac:	461a      	mov	r2, r3
 80018ae:	4623      	mov	r3, r4
 80018b0:	f7fe fc96 	bl	80001e0 <__aeabi_uldivmod>
 80018b4:	4603      	mov	r3, r0
 80018b6:	460c      	mov	r4, r1
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	e049      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018bc:	4b2f      	ldr	r3, [pc, #188]	; (800197c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	099b      	lsrs	r3, r3, #6
 80018c2:	f04f 0400 	mov.w	r4, #0
 80018c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	ea03 0501 	and.w	r5, r3, r1
 80018d2:	ea04 0602 	and.w	r6, r4, r2
 80018d6:	4629      	mov	r1, r5
 80018d8:	4632      	mov	r2, r6
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	f04f 0400 	mov.w	r4, #0
 80018e2:	0154      	lsls	r4, r2, #5
 80018e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018e8:	014b      	lsls	r3, r1, #5
 80018ea:	4619      	mov	r1, r3
 80018ec:	4622      	mov	r2, r4
 80018ee:	1b49      	subs	r1, r1, r5
 80018f0:	eb62 0206 	sbc.w	r2, r2, r6
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	f04f 0400 	mov.w	r4, #0
 80018fc:	0194      	lsls	r4, r2, #6
 80018fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001902:	018b      	lsls	r3, r1, #6
 8001904:	1a5b      	subs	r3, r3, r1
 8001906:	eb64 0402 	sbc.w	r4, r4, r2
 800190a:	f04f 0100 	mov.w	r1, #0
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	00e2      	lsls	r2, r4, #3
 8001914:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001918:	00d9      	lsls	r1, r3, #3
 800191a:	460b      	mov	r3, r1
 800191c:	4614      	mov	r4, r2
 800191e:	195b      	adds	r3, r3, r5
 8001920:	eb44 0406 	adc.w	r4, r4, r6
 8001924:	f04f 0100 	mov.w	r1, #0
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	02a2      	lsls	r2, r4, #10
 800192e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001932:	0299      	lsls	r1, r3, #10
 8001934:	460b      	mov	r3, r1
 8001936:	4614      	mov	r4, r2
 8001938:	4618      	mov	r0, r3
 800193a:	4621      	mov	r1, r4
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f04f 0400 	mov.w	r4, #0
 8001942:	461a      	mov	r2, r3
 8001944:	4623      	mov	r3, r4
 8001946:	f7fe fc4b 	bl	80001e0 <__aeabi_uldivmod>
 800194a:	4603      	mov	r3, r0
 800194c:	460c      	mov	r4, r1
 800194e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	0c1b      	lsrs	r3, r3, #16
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	3301      	adds	r3, #1
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	fbb2 f3f3 	udiv	r3, r2, r3
 8001968:	60bb      	str	r3, [r7, #8]
      break;
 800196a:	e002      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800196e:	60bb      	str	r3, [r7, #8]
      break;
 8001970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001972:	68bb      	ldr	r3, [r7, #8]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800197c:	40023800 	.word	0x40023800
 8001980:	00f42400 	.word	0x00f42400
 8001984:	007a1200 	.word	0x007a1200

08001988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800198c:	4b03      	ldr	r3, [pc, #12]	; (800199c <HAL_RCC_GetHCLKFreq+0x14>)
 800198e:	681b      	ldr	r3, [r3, #0]
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000000 	.word	0x20000000

080019a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019a4:	f7ff fff0 	bl	8001988 <HAL_RCC_GetHCLKFreq>
 80019a8:	4601      	mov	r1, r0
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	0a9b      	lsrs	r3, r3, #10
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	4a03      	ldr	r2, [pc, #12]	; (80019c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019b6:	5cd3      	ldrb	r3, [r2, r3]
 80019b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019bc:	4618      	mov	r0, r3
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	08004da8 	.word	0x08004da8

080019c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019cc:	f7ff ffdc 	bl	8001988 <HAL_RCC_GetHCLKFreq>
 80019d0:	4601      	mov	r1, r0
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	0b5b      	lsrs	r3, r3, #13
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	4a03      	ldr	r2, [pc, #12]	; (80019ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80019de:	5cd3      	ldrb	r3, [r2, r3]
 80019e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800
 80019ec:	08004da8 	.word	0x08004da8

080019f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	220f      	movs	r2, #15
 80019fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_RCC_GetClockConfig+0x5c>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 0203 	and.w	r2, r3, #3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <HAL_RCC_GetClockConfig+0x5c>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <HAL_RCC_GetClockConfig+0x5c>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_RCC_GetClockConfig+0x5c>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <HAL_RCC_GetClockConfig+0x60>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 020f 	and.w	r2, r3, #15
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	601a      	str	r2, [r3, #0]
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40023c00 	.word	0x40023c00

08001a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e01d      	b.n	8001aa2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f815 	bl	8001aaa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2202      	movs	r2, #2
 8001a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3304      	adds	r3, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4610      	mov	r0, r2
 8001a94:	f000 f968 	bl	8001d68 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b085      	sub	sp, #20
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f042 0201 	orr.w	r2, r2, #1
 8001ad4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2b06      	cmp	r3, #6
 8001ae6:	d007      	beq.n	8001af8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0201 	orr.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d122      	bne.n	8001b62 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d11b      	bne.n	8001b62 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f06f 0202 	mvn.w	r2, #2
 8001b32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f8ee 	bl	8001d2a <HAL_TIM_IC_CaptureCallback>
 8001b4e:	e005      	b.n	8001b5c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f8e0 	bl	8001d16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f8f1 	bl	8001d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d122      	bne.n	8001bb6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d11b      	bne.n	8001bb6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f06f 0204 	mvn.w	r2, #4
 8001b86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f8c4 	bl	8001d2a <HAL_TIM_IC_CaptureCallback>
 8001ba2:	e005      	b.n	8001bb0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f8b6 	bl	8001d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f8c7 	bl	8001d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d122      	bne.n	8001c0a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d11b      	bne.n	8001c0a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f06f 0208 	mvn.w	r2, #8
 8001bda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2204      	movs	r2, #4
 8001be0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f89a 	bl	8001d2a <HAL_TIM_IC_CaptureCallback>
 8001bf6:	e005      	b.n	8001c04 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f88c 	bl	8001d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f89d 	bl	8001d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	f003 0310 	and.w	r3, r3, #16
 8001c14:	2b10      	cmp	r3, #16
 8001c16:	d122      	bne.n	8001c5e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	2b10      	cmp	r3, #16
 8001c24:	d11b      	bne.n	8001c5e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f06f 0210 	mvn.w	r2, #16
 8001c2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2208      	movs	r2, #8
 8001c34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f870 	bl	8001d2a <HAL_TIM_IC_CaptureCallback>
 8001c4a:	e005      	b.n	8001c58 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f862 	bl	8001d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f873 	bl	8001d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d10e      	bne.n	8001c8a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d107      	bne.n	8001c8a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f06f 0201 	mvn.w	r2, #1
 8001c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7fe fe17 	bl	80008b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c94:	2b80      	cmp	r3, #128	; 0x80
 8001c96:	d10e      	bne.n	8001cb6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca2:	2b80      	cmp	r3, #128	; 0x80
 8001ca4:	d107      	bne.n	8001cb6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f903 	bl	8001ebc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc0:	2b40      	cmp	r3, #64	; 0x40
 8001cc2:	d10e      	bne.n	8001ce2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cce:	2b40      	cmp	r3, #64	; 0x40
 8001cd0:	d107      	bne.n	8001ce2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f838 	bl	8001d52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	691b      	ldr	r3, [r3, #16]
 8001ce8:	f003 0320 	and.w	r3, r3, #32
 8001cec:	2b20      	cmp	r3, #32
 8001cee:	d10e      	bne.n	8001d0e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f003 0320 	and.w	r3, r3, #32
 8001cfa:	2b20      	cmp	r3, #32
 8001cfc:	d107      	bne.n	8001d0e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f06f 0220 	mvn.w	r2, #32
 8001d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f8cd 	bl	8001ea8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a40      	ldr	r2, [pc, #256]	; (8001e7c <TIM_Base_SetConfig+0x114>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d013      	beq.n	8001da8 <TIM_Base_SetConfig+0x40>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d86:	d00f      	beq.n	8001da8 <TIM_Base_SetConfig+0x40>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a3d      	ldr	r2, [pc, #244]	; (8001e80 <TIM_Base_SetConfig+0x118>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d00b      	beq.n	8001da8 <TIM_Base_SetConfig+0x40>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a3c      	ldr	r2, [pc, #240]	; (8001e84 <TIM_Base_SetConfig+0x11c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d007      	beq.n	8001da8 <TIM_Base_SetConfig+0x40>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a3b      	ldr	r2, [pc, #236]	; (8001e88 <TIM_Base_SetConfig+0x120>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d003      	beq.n	8001da8 <TIM_Base_SetConfig+0x40>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a3a      	ldr	r2, [pc, #232]	; (8001e8c <TIM_Base_SetConfig+0x124>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d108      	bne.n	8001dba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a2f      	ldr	r2, [pc, #188]	; (8001e7c <TIM_Base_SetConfig+0x114>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d02b      	beq.n	8001e1a <TIM_Base_SetConfig+0xb2>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc8:	d027      	beq.n	8001e1a <TIM_Base_SetConfig+0xb2>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a2c      	ldr	r2, [pc, #176]	; (8001e80 <TIM_Base_SetConfig+0x118>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d023      	beq.n	8001e1a <TIM_Base_SetConfig+0xb2>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a2b      	ldr	r2, [pc, #172]	; (8001e84 <TIM_Base_SetConfig+0x11c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d01f      	beq.n	8001e1a <TIM_Base_SetConfig+0xb2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a2a      	ldr	r2, [pc, #168]	; (8001e88 <TIM_Base_SetConfig+0x120>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d01b      	beq.n	8001e1a <TIM_Base_SetConfig+0xb2>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a29      	ldr	r2, [pc, #164]	; (8001e8c <TIM_Base_SetConfig+0x124>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d017      	beq.n	8001e1a <TIM_Base_SetConfig+0xb2>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a28      	ldr	r2, [pc, #160]	; (8001e90 <TIM_Base_SetConfig+0x128>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d013      	beq.n	8001e1a <TIM_Base_SetConfig+0xb2>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a27      	ldr	r2, [pc, #156]	; (8001e94 <TIM_Base_SetConfig+0x12c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00f      	beq.n	8001e1a <TIM_Base_SetConfig+0xb2>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a26      	ldr	r2, [pc, #152]	; (8001e98 <TIM_Base_SetConfig+0x130>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00b      	beq.n	8001e1a <TIM_Base_SetConfig+0xb2>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a25      	ldr	r2, [pc, #148]	; (8001e9c <TIM_Base_SetConfig+0x134>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d007      	beq.n	8001e1a <TIM_Base_SetConfig+0xb2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a24      	ldr	r2, [pc, #144]	; (8001ea0 <TIM_Base_SetConfig+0x138>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d003      	beq.n	8001e1a <TIM_Base_SetConfig+0xb2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a23      	ldr	r2, [pc, #140]	; (8001ea4 <TIM_Base_SetConfig+0x13c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d108      	bne.n	8001e2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <TIM_Base_SetConfig+0x114>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d003      	beq.n	8001e60 <TIM_Base_SetConfig+0xf8>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a0c      	ldr	r2, [pc, #48]	; (8001e8c <TIM_Base_SetConfig+0x124>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d103      	bne.n	8001e68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	615a      	str	r2, [r3, #20]
}
 8001e6e:	bf00      	nop
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40010000 	.word	0x40010000
 8001e80:	40000400 	.word	0x40000400
 8001e84:	40000800 	.word	0x40000800
 8001e88:	40000c00 	.word	0x40000c00
 8001e8c:	40010400 	.word	0x40010400
 8001e90:	40014000 	.word	0x40014000
 8001e94:	40014400 	.word	0x40014400
 8001e98:	40014800 	.word	0x40014800
 8001e9c:	40001800 	.word	0x40001800
 8001ea0:	40001c00 	.word	0x40001c00
 8001ea4:	40002000 	.word	0x40002000

08001ea8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e03f      	b.n	8001f62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d106      	bne.n	8001efc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7fe fd20 	bl	800093c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2224      	movs	r2, #36	; 0x24
 8001f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f90b 	bl	8002130 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	695a      	ldr	r2, [r3, #20]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68da      	ldr	r2, [r3, #12]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2220      	movs	r2, #32
 8001f54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b088      	sub	sp, #32
 8001f6e:	af02      	add	r7, sp, #8
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	603b      	str	r3, [r7, #0]
 8001f76:	4613      	mov	r3, r2
 8001f78:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b20      	cmp	r3, #32
 8001f88:	f040 8083 	bne.w	8002092 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d002      	beq.n	8001f98 <HAL_UART_Transmit+0x2e>
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e07b      	b.n	8002094 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_UART_Transmit+0x40>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e074      	b.n	8002094 <HAL_UART_Transmit+0x12a>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2221      	movs	r2, #33	; 0x21
 8001fbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001fc0:	f7fe fdf8 	bl	8000bb4 <HAL_GetTick>
 8001fc4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	88fa      	ldrh	r2, [r7, #6]
 8001fca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	88fa      	ldrh	r2, [r7, #6]
 8001fd0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001fda:	e042      	b.n	8002062 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ff2:	d122      	bne.n	800203a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2180      	movs	r1, #128	; 0x80
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 f84c 	bl	800209c <UART_WaitOnFlagUntilTimeout>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e042      	b.n	8002094 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002020:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d103      	bne.n	8002032 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	3302      	adds	r3, #2
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	e017      	b.n	8002062 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	3301      	adds	r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	e013      	b.n	8002062 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2200      	movs	r2, #0
 8002042:	2180      	movs	r1, #128	; 0x80
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 f829 	bl	800209c <UART_WaitOnFlagUntilTimeout>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e01f      	b.n	8002094 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	60ba      	str	r2, [r7, #8]
 800205a:	781a      	ldrb	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002066:	b29b      	uxth	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1b7      	bne.n	8001fdc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2200      	movs	r2, #0
 8002074:	2140      	movs	r1, #64	; 0x40
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 f810 	bl	800209c <UART_WaitOnFlagUntilTimeout>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e006      	b.n	8002094 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2220      	movs	r2, #32
 800208a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	e000      	b.n	8002094 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002092:	2302      	movs	r3, #2
  }
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	4613      	mov	r3, r2
 80020aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020ac:	e02c      	b.n	8002108 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b4:	d028      	beq.n	8002108 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <UART_WaitOnFlagUntilTimeout+0x30>
 80020bc:	f7fe fd7a 	bl	8000bb4 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d21d      	bcs.n	8002108 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020da:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2220      	movs	r2, #32
 80020f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2220      	movs	r2, #32
 80020f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e00f      	b.n	8002128 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	4013      	ands	r3, r2
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	429a      	cmp	r2, r3
 8002116:	bf0c      	ite	eq
 8002118:	2301      	moveq	r3, #1
 800211a:	2300      	movne	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	461a      	mov	r2, r3
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	429a      	cmp	r2, r3
 8002124:	d0c3      	beq.n	80020ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002134:	b085      	sub	sp, #20
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	4313      	orrs	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002172:	f023 030c 	bic.w	r3, r3, #12
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	68f9      	ldr	r1, [r7, #12]
 800217c:	430b      	orrs	r3, r1
 800217e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800219e:	f040 818b 	bne.w	80024b8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4ac1      	ldr	r2, [pc, #772]	; (80024ac <UART_SetConfig+0x37c>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d005      	beq.n	80021b8 <UART_SetConfig+0x88>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4abf      	ldr	r2, [pc, #764]	; (80024b0 <UART_SetConfig+0x380>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	f040 80bd 	bne.w	8002332 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021b8:	f7ff fc06 	bl	80019c8 <HAL_RCC_GetPCLK2Freq>
 80021bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	461d      	mov	r5, r3
 80021c2:	f04f 0600 	mov.w	r6, #0
 80021c6:	46a8      	mov	r8, r5
 80021c8:	46b1      	mov	r9, r6
 80021ca:	eb18 0308 	adds.w	r3, r8, r8
 80021ce:	eb49 0409 	adc.w	r4, r9, r9
 80021d2:	4698      	mov	r8, r3
 80021d4:	46a1      	mov	r9, r4
 80021d6:	eb18 0805 	adds.w	r8, r8, r5
 80021da:	eb49 0906 	adc.w	r9, r9, r6
 80021de:	f04f 0100 	mov.w	r1, #0
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80021f2:	4688      	mov	r8, r1
 80021f4:	4691      	mov	r9, r2
 80021f6:	eb18 0005 	adds.w	r0, r8, r5
 80021fa:	eb49 0106 	adc.w	r1, r9, r6
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	461d      	mov	r5, r3
 8002204:	f04f 0600 	mov.w	r6, #0
 8002208:	196b      	adds	r3, r5, r5
 800220a:	eb46 0406 	adc.w	r4, r6, r6
 800220e:	461a      	mov	r2, r3
 8002210:	4623      	mov	r3, r4
 8002212:	f7fd ffe5 	bl	80001e0 <__aeabi_uldivmod>
 8002216:	4603      	mov	r3, r0
 8002218:	460c      	mov	r4, r1
 800221a:	461a      	mov	r2, r3
 800221c:	4ba5      	ldr	r3, [pc, #660]	; (80024b4 <UART_SetConfig+0x384>)
 800221e:	fba3 2302 	umull	r2, r3, r3, r2
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	461d      	mov	r5, r3
 800222c:	f04f 0600 	mov.w	r6, #0
 8002230:	46a9      	mov	r9, r5
 8002232:	46b2      	mov	sl, r6
 8002234:	eb19 0309 	adds.w	r3, r9, r9
 8002238:	eb4a 040a 	adc.w	r4, sl, sl
 800223c:	4699      	mov	r9, r3
 800223e:	46a2      	mov	sl, r4
 8002240:	eb19 0905 	adds.w	r9, r9, r5
 8002244:	eb4a 0a06 	adc.w	sl, sl, r6
 8002248:	f04f 0100 	mov.w	r1, #0
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002254:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002258:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800225c:	4689      	mov	r9, r1
 800225e:	4692      	mov	sl, r2
 8002260:	eb19 0005 	adds.w	r0, r9, r5
 8002264:	eb4a 0106 	adc.w	r1, sl, r6
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	461d      	mov	r5, r3
 800226e:	f04f 0600 	mov.w	r6, #0
 8002272:	196b      	adds	r3, r5, r5
 8002274:	eb46 0406 	adc.w	r4, r6, r6
 8002278:	461a      	mov	r2, r3
 800227a:	4623      	mov	r3, r4
 800227c:	f7fd ffb0 	bl	80001e0 <__aeabi_uldivmod>
 8002280:	4603      	mov	r3, r0
 8002282:	460c      	mov	r4, r1
 8002284:	461a      	mov	r2, r3
 8002286:	4b8b      	ldr	r3, [pc, #556]	; (80024b4 <UART_SetConfig+0x384>)
 8002288:	fba3 1302 	umull	r1, r3, r3, r2
 800228c:	095b      	lsrs	r3, r3, #5
 800228e:	2164      	movs	r1, #100	; 0x64
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	3332      	adds	r3, #50	; 0x32
 800229a:	4a86      	ldr	r2, [pc, #536]	; (80024b4 <UART_SetConfig+0x384>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	095b      	lsrs	r3, r3, #5
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022a8:	4498      	add	r8, r3
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	461d      	mov	r5, r3
 80022ae:	f04f 0600 	mov.w	r6, #0
 80022b2:	46a9      	mov	r9, r5
 80022b4:	46b2      	mov	sl, r6
 80022b6:	eb19 0309 	adds.w	r3, r9, r9
 80022ba:	eb4a 040a 	adc.w	r4, sl, sl
 80022be:	4699      	mov	r9, r3
 80022c0:	46a2      	mov	sl, r4
 80022c2:	eb19 0905 	adds.w	r9, r9, r5
 80022c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80022ca:	f04f 0100 	mov.w	r1, #0
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022de:	4689      	mov	r9, r1
 80022e0:	4692      	mov	sl, r2
 80022e2:	eb19 0005 	adds.w	r0, r9, r5
 80022e6:	eb4a 0106 	adc.w	r1, sl, r6
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	461d      	mov	r5, r3
 80022f0:	f04f 0600 	mov.w	r6, #0
 80022f4:	196b      	adds	r3, r5, r5
 80022f6:	eb46 0406 	adc.w	r4, r6, r6
 80022fa:	461a      	mov	r2, r3
 80022fc:	4623      	mov	r3, r4
 80022fe:	f7fd ff6f 	bl	80001e0 <__aeabi_uldivmod>
 8002302:	4603      	mov	r3, r0
 8002304:	460c      	mov	r4, r1
 8002306:	461a      	mov	r2, r3
 8002308:	4b6a      	ldr	r3, [pc, #424]	; (80024b4 <UART_SetConfig+0x384>)
 800230a:	fba3 1302 	umull	r1, r3, r3, r2
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	2164      	movs	r1, #100	; 0x64
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	3332      	adds	r3, #50	; 0x32
 800231c:	4a65      	ldr	r2, [pc, #404]	; (80024b4 <UART_SetConfig+0x384>)
 800231e:	fba2 2303 	umull	r2, r3, r2, r3
 8002322:	095b      	lsrs	r3, r3, #5
 8002324:	f003 0207 	and.w	r2, r3, #7
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4442      	add	r2, r8
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	e26f      	b.n	8002812 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002332:	f7ff fb35 	bl	80019a0 <HAL_RCC_GetPCLK1Freq>
 8002336:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	461d      	mov	r5, r3
 800233c:	f04f 0600 	mov.w	r6, #0
 8002340:	46a8      	mov	r8, r5
 8002342:	46b1      	mov	r9, r6
 8002344:	eb18 0308 	adds.w	r3, r8, r8
 8002348:	eb49 0409 	adc.w	r4, r9, r9
 800234c:	4698      	mov	r8, r3
 800234e:	46a1      	mov	r9, r4
 8002350:	eb18 0805 	adds.w	r8, r8, r5
 8002354:	eb49 0906 	adc.w	r9, r9, r6
 8002358:	f04f 0100 	mov.w	r1, #0
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002364:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002368:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800236c:	4688      	mov	r8, r1
 800236e:	4691      	mov	r9, r2
 8002370:	eb18 0005 	adds.w	r0, r8, r5
 8002374:	eb49 0106 	adc.w	r1, r9, r6
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	461d      	mov	r5, r3
 800237e:	f04f 0600 	mov.w	r6, #0
 8002382:	196b      	adds	r3, r5, r5
 8002384:	eb46 0406 	adc.w	r4, r6, r6
 8002388:	461a      	mov	r2, r3
 800238a:	4623      	mov	r3, r4
 800238c:	f7fd ff28 	bl	80001e0 <__aeabi_uldivmod>
 8002390:	4603      	mov	r3, r0
 8002392:	460c      	mov	r4, r1
 8002394:	461a      	mov	r2, r3
 8002396:	4b47      	ldr	r3, [pc, #284]	; (80024b4 <UART_SetConfig+0x384>)
 8002398:	fba3 2302 	umull	r2, r3, r3, r2
 800239c:	095b      	lsrs	r3, r3, #5
 800239e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	461d      	mov	r5, r3
 80023a6:	f04f 0600 	mov.w	r6, #0
 80023aa:	46a9      	mov	r9, r5
 80023ac:	46b2      	mov	sl, r6
 80023ae:	eb19 0309 	adds.w	r3, r9, r9
 80023b2:	eb4a 040a 	adc.w	r4, sl, sl
 80023b6:	4699      	mov	r9, r3
 80023b8:	46a2      	mov	sl, r4
 80023ba:	eb19 0905 	adds.w	r9, r9, r5
 80023be:	eb4a 0a06 	adc.w	sl, sl, r6
 80023c2:	f04f 0100 	mov.w	r1, #0
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023d6:	4689      	mov	r9, r1
 80023d8:	4692      	mov	sl, r2
 80023da:	eb19 0005 	adds.w	r0, r9, r5
 80023de:	eb4a 0106 	adc.w	r1, sl, r6
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	461d      	mov	r5, r3
 80023e8:	f04f 0600 	mov.w	r6, #0
 80023ec:	196b      	adds	r3, r5, r5
 80023ee:	eb46 0406 	adc.w	r4, r6, r6
 80023f2:	461a      	mov	r2, r3
 80023f4:	4623      	mov	r3, r4
 80023f6:	f7fd fef3 	bl	80001e0 <__aeabi_uldivmod>
 80023fa:	4603      	mov	r3, r0
 80023fc:	460c      	mov	r4, r1
 80023fe:	461a      	mov	r2, r3
 8002400:	4b2c      	ldr	r3, [pc, #176]	; (80024b4 <UART_SetConfig+0x384>)
 8002402:	fba3 1302 	umull	r1, r3, r3, r2
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2164      	movs	r1, #100	; 0x64
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	3332      	adds	r3, #50	; 0x32
 8002414:	4a27      	ldr	r2, [pc, #156]	; (80024b4 <UART_SetConfig+0x384>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002422:	4498      	add	r8, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	461d      	mov	r5, r3
 8002428:	f04f 0600 	mov.w	r6, #0
 800242c:	46a9      	mov	r9, r5
 800242e:	46b2      	mov	sl, r6
 8002430:	eb19 0309 	adds.w	r3, r9, r9
 8002434:	eb4a 040a 	adc.w	r4, sl, sl
 8002438:	4699      	mov	r9, r3
 800243a:	46a2      	mov	sl, r4
 800243c:	eb19 0905 	adds.w	r9, r9, r5
 8002440:	eb4a 0a06 	adc.w	sl, sl, r6
 8002444:	f04f 0100 	mov.w	r1, #0
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002450:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002454:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002458:	4689      	mov	r9, r1
 800245a:	4692      	mov	sl, r2
 800245c:	eb19 0005 	adds.w	r0, r9, r5
 8002460:	eb4a 0106 	adc.w	r1, sl, r6
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	461d      	mov	r5, r3
 800246a:	f04f 0600 	mov.w	r6, #0
 800246e:	196b      	adds	r3, r5, r5
 8002470:	eb46 0406 	adc.w	r4, r6, r6
 8002474:	461a      	mov	r2, r3
 8002476:	4623      	mov	r3, r4
 8002478:	f7fd feb2 	bl	80001e0 <__aeabi_uldivmod>
 800247c:	4603      	mov	r3, r0
 800247e:	460c      	mov	r4, r1
 8002480:	461a      	mov	r2, r3
 8002482:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <UART_SetConfig+0x384>)
 8002484:	fba3 1302 	umull	r1, r3, r3, r2
 8002488:	095b      	lsrs	r3, r3, #5
 800248a:	2164      	movs	r1, #100	; 0x64
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	3332      	adds	r3, #50	; 0x32
 8002496:	4a07      	ldr	r2, [pc, #28]	; (80024b4 <UART_SetConfig+0x384>)
 8002498:	fba2 2303 	umull	r2, r3, r2, r3
 800249c:	095b      	lsrs	r3, r3, #5
 800249e:	f003 0207 	and.w	r2, r3, #7
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4442      	add	r2, r8
 80024a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80024aa:	e1b2      	b.n	8002812 <UART_SetConfig+0x6e2>
 80024ac:	40011000 	.word	0x40011000
 80024b0:	40011400 	.word	0x40011400
 80024b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4ad7      	ldr	r2, [pc, #860]	; (800281c <UART_SetConfig+0x6ec>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d005      	beq.n	80024ce <UART_SetConfig+0x39e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4ad6      	ldr	r2, [pc, #856]	; (8002820 <UART_SetConfig+0x6f0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	f040 80d1 	bne.w	8002670 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80024ce:	f7ff fa7b 	bl	80019c8 <HAL_RCC_GetPCLK2Freq>
 80024d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	469a      	mov	sl, r3
 80024d8:	f04f 0b00 	mov.w	fp, #0
 80024dc:	46d0      	mov	r8, sl
 80024de:	46d9      	mov	r9, fp
 80024e0:	eb18 0308 	adds.w	r3, r8, r8
 80024e4:	eb49 0409 	adc.w	r4, r9, r9
 80024e8:	4698      	mov	r8, r3
 80024ea:	46a1      	mov	r9, r4
 80024ec:	eb18 080a 	adds.w	r8, r8, sl
 80024f0:	eb49 090b 	adc.w	r9, r9, fp
 80024f4:	f04f 0100 	mov.w	r1, #0
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002500:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002504:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002508:	4688      	mov	r8, r1
 800250a:	4691      	mov	r9, r2
 800250c:	eb1a 0508 	adds.w	r5, sl, r8
 8002510:	eb4b 0609 	adc.w	r6, fp, r9
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4619      	mov	r1, r3
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	f04f 0400 	mov.w	r4, #0
 8002526:	0094      	lsls	r4, r2, #2
 8002528:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800252c:	008b      	lsls	r3, r1, #2
 800252e:	461a      	mov	r2, r3
 8002530:	4623      	mov	r3, r4
 8002532:	4628      	mov	r0, r5
 8002534:	4631      	mov	r1, r6
 8002536:	f7fd fe53 	bl	80001e0 <__aeabi_uldivmod>
 800253a:	4603      	mov	r3, r0
 800253c:	460c      	mov	r4, r1
 800253e:	461a      	mov	r2, r3
 8002540:	4bb8      	ldr	r3, [pc, #736]	; (8002824 <UART_SetConfig+0x6f4>)
 8002542:	fba3 2302 	umull	r2, r3, r3, r2
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	469b      	mov	fp, r3
 8002550:	f04f 0c00 	mov.w	ip, #0
 8002554:	46d9      	mov	r9, fp
 8002556:	46e2      	mov	sl, ip
 8002558:	eb19 0309 	adds.w	r3, r9, r9
 800255c:	eb4a 040a 	adc.w	r4, sl, sl
 8002560:	4699      	mov	r9, r3
 8002562:	46a2      	mov	sl, r4
 8002564:	eb19 090b 	adds.w	r9, r9, fp
 8002568:	eb4a 0a0c 	adc.w	sl, sl, ip
 800256c:	f04f 0100 	mov.w	r1, #0
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002578:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800257c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002580:	4689      	mov	r9, r1
 8002582:	4692      	mov	sl, r2
 8002584:	eb1b 0509 	adds.w	r5, fp, r9
 8002588:	eb4c 060a 	adc.w	r6, ip, sl
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4619      	mov	r1, r3
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	f04f 0400 	mov.w	r4, #0
 800259e:	0094      	lsls	r4, r2, #2
 80025a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025a4:	008b      	lsls	r3, r1, #2
 80025a6:	461a      	mov	r2, r3
 80025a8:	4623      	mov	r3, r4
 80025aa:	4628      	mov	r0, r5
 80025ac:	4631      	mov	r1, r6
 80025ae:	f7fd fe17 	bl	80001e0 <__aeabi_uldivmod>
 80025b2:	4603      	mov	r3, r0
 80025b4:	460c      	mov	r4, r1
 80025b6:	461a      	mov	r2, r3
 80025b8:	4b9a      	ldr	r3, [pc, #616]	; (8002824 <UART_SetConfig+0x6f4>)
 80025ba:	fba3 1302 	umull	r1, r3, r3, r2
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	2164      	movs	r1, #100	; 0x64
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	3332      	adds	r3, #50	; 0x32
 80025cc:	4a95      	ldr	r2, [pc, #596]	; (8002824 <UART_SetConfig+0x6f4>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025d8:	4498      	add	r8, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	469b      	mov	fp, r3
 80025de:	f04f 0c00 	mov.w	ip, #0
 80025e2:	46d9      	mov	r9, fp
 80025e4:	46e2      	mov	sl, ip
 80025e6:	eb19 0309 	adds.w	r3, r9, r9
 80025ea:	eb4a 040a 	adc.w	r4, sl, sl
 80025ee:	4699      	mov	r9, r3
 80025f0:	46a2      	mov	sl, r4
 80025f2:	eb19 090b 	adds.w	r9, r9, fp
 80025f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80025fa:	f04f 0100 	mov.w	r1, #0
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002606:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800260a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800260e:	4689      	mov	r9, r1
 8002610:	4692      	mov	sl, r2
 8002612:	eb1b 0509 	adds.w	r5, fp, r9
 8002616:	eb4c 060a 	adc.w	r6, ip, sl
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	4619      	mov	r1, r3
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	f04f 0400 	mov.w	r4, #0
 800262c:	0094      	lsls	r4, r2, #2
 800262e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002632:	008b      	lsls	r3, r1, #2
 8002634:	461a      	mov	r2, r3
 8002636:	4623      	mov	r3, r4
 8002638:	4628      	mov	r0, r5
 800263a:	4631      	mov	r1, r6
 800263c:	f7fd fdd0 	bl	80001e0 <__aeabi_uldivmod>
 8002640:	4603      	mov	r3, r0
 8002642:	460c      	mov	r4, r1
 8002644:	461a      	mov	r2, r3
 8002646:	4b77      	ldr	r3, [pc, #476]	; (8002824 <UART_SetConfig+0x6f4>)
 8002648:	fba3 1302 	umull	r1, r3, r3, r2
 800264c:	095b      	lsrs	r3, r3, #5
 800264e:	2164      	movs	r1, #100	; 0x64
 8002650:	fb01 f303 	mul.w	r3, r1, r3
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	3332      	adds	r3, #50	; 0x32
 800265a:	4a72      	ldr	r2, [pc, #456]	; (8002824 <UART_SetConfig+0x6f4>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	f003 020f 	and.w	r2, r3, #15
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4442      	add	r2, r8
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	e0d0      	b.n	8002812 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002670:	f7ff f996 	bl	80019a0 <HAL_RCC_GetPCLK1Freq>
 8002674:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	469a      	mov	sl, r3
 800267a:	f04f 0b00 	mov.w	fp, #0
 800267e:	46d0      	mov	r8, sl
 8002680:	46d9      	mov	r9, fp
 8002682:	eb18 0308 	adds.w	r3, r8, r8
 8002686:	eb49 0409 	adc.w	r4, r9, r9
 800268a:	4698      	mov	r8, r3
 800268c:	46a1      	mov	r9, r4
 800268e:	eb18 080a 	adds.w	r8, r8, sl
 8002692:	eb49 090b 	adc.w	r9, r9, fp
 8002696:	f04f 0100 	mov.w	r1, #0
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80026a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80026a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80026aa:	4688      	mov	r8, r1
 80026ac:	4691      	mov	r9, r2
 80026ae:	eb1a 0508 	adds.w	r5, sl, r8
 80026b2:	eb4b 0609 	adc.w	r6, fp, r9
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4619      	mov	r1, r3
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	f04f 0400 	mov.w	r4, #0
 80026c8:	0094      	lsls	r4, r2, #2
 80026ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026ce:	008b      	lsls	r3, r1, #2
 80026d0:	461a      	mov	r2, r3
 80026d2:	4623      	mov	r3, r4
 80026d4:	4628      	mov	r0, r5
 80026d6:	4631      	mov	r1, r6
 80026d8:	f7fd fd82 	bl	80001e0 <__aeabi_uldivmod>
 80026dc:	4603      	mov	r3, r0
 80026de:	460c      	mov	r4, r1
 80026e0:	461a      	mov	r2, r3
 80026e2:	4b50      	ldr	r3, [pc, #320]	; (8002824 <UART_SetConfig+0x6f4>)
 80026e4:	fba3 2302 	umull	r2, r3, r3, r2
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	469b      	mov	fp, r3
 80026f2:	f04f 0c00 	mov.w	ip, #0
 80026f6:	46d9      	mov	r9, fp
 80026f8:	46e2      	mov	sl, ip
 80026fa:	eb19 0309 	adds.w	r3, r9, r9
 80026fe:	eb4a 040a 	adc.w	r4, sl, sl
 8002702:	4699      	mov	r9, r3
 8002704:	46a2      	mov	sl, r4
 8002706:	eb19 090b 	adds.w	r9, r9, fp
 800270a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800270e:	f04f 0100 	mov.w	r1, #0
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800271a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800271e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002722:	4689      	mov	r9, r1
 8002724:	4692      	mov	sl, r2
 8002726:	eb1b 0509 	adds.w	r5, fp, r9
 800272a:	eb4c 060a 	adc.w	r6, ip, sl
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4619      	mov	r1, r3
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	f04f 0400 	mov.w	r4, #0
 8002740:	0094      	lsls	r4, r2, #2
 8002742:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002746:	008b      	lsls	r3, r1, #2
 8002748:	461a      	mov	r2, r3
 800274a:	4623      	mov	r3, r4
 800274c:	4628      	mov	r0, r5
 800274e:	4631      	mov	r1, r6
 8002750:	f7fd fd46 	bl	80001e0 <__aeabi_uldivmod>
 8002754:	4603      	mov	r3, r0
 8002756:	460c      	mov	r4, r1
 8002758:	461a      	mov	r2, r3
 800275a:	4b32      	ldr	r3, [pc, #200]	; (8002824 <UART_SetConfig+0x6f4>)
 800275c:	fba3 1302 	umull	r1, r3, r3, r2
 8002760:	095b      	lsrs	r3, r3, #5
 8002762:	2164      	movs	r1, #100	; 0x64
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	3332      	adds	r3, #50	; 0x32
 800276e:	4a2d      	ldr	r2, [pc, #180]	; (8002824 <UART_SetConfig+0x6f4>)
 8002770:	fba2 2303 	umull	r2, r3, r2, r3
 8002774:	095b      	lsrs	r3, r3, #5
 8002776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800277a:	4498      	add	r8, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	469b      	mov	fp, r3
 8002780:	f04f 0c00 	mov.w	ip, #0
 8002784:	46d9      	mov	r9, fp
 8002786:	46e2      	mov	sl, ip
 8002788:	eb19 0309 	adds.w	r3, r9, r9
 800278c:	eb4a 040a 	adc.w	r4, sl, sl
 8002790:	4699      	mov	r9, r3
 8002792:	46a2      	mov	sl, r4
 8002794:	eb19 090b 	adds.w	r9, r9, fp
 8002798:	eb4a 0a0c 	adc.w	sl, sl, ip
 800279c:	f04f 0100 	mov.w	r1, #0
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027b0:	4689      	mov	r9, r1
 80027b2:	4692      	mov	sl, r2
 80027b4:	eb1b 0509 	adds.w	r5, fp, r9
 80027b8:	eb4c 060a 	adc.w	r6, ip, sl
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4619      	mov	r1, r3
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	f04f 0400 	mov.w	r4, #0
 80027ce:	0094      	lsls	r4, r2, #2
 80027d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027d4:	008b      	lsls	r3, r1, #2
 80027d6:	461a      	mov	r2, r3
 80027d8:	4623      	mov	r3, r4
 80027da:	4628      	mov	r0, r5
 80027dc:	4631      	mov	r1, r6
 80027de:	f7fd fcff 	bl	80001e0 <__aeabi_uldivmod>
 80027e2:	4603      	mov	r3, r0
 80027e4:	460c      	mov	r4, r1
 80027e6:	461a      	mov	r2, r3
 80027e8:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <UART_SetConfig+0x6f4>)
 80027ea:	fba3 1302 	umull	r1, r3, r3, r2
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	2164      	movs	r1, #100	; 0x64
 80027f2:	fb01 f303 	mul.w	r3, r1, r3
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	3332      	adds	r3, #50	; 0x32
 80027fc:	4a09      	ldr	r2, [pc, #36]	; (8002824 <UART_SetConfig+0x6f4>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	f003 020f 	and.w	r2, r3, #15
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4442      	add	r2, r8
 800280e:	609a      	str	r2, [r3, #8]
}
 8002810:	e7ff      	b.n	8002812 <UART_SetConfig+0x6e2>
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800281c:	40011000 	.word	0x40011000
 8002820:	40011400 	.word	0x40011400
 8002824:	51eb851f 	.word	0x51eb851f

08002828 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800283a:	2b84      	cmp	r3, #132	; 0x84
 800283c:	d005      	beq.n	800284a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800283e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4413      	add	r3, r2
 8002846:	3303      	adds	r3, #3
 8002848:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800284a:	68fb      	ldr	r3, [r7, #12]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800285c:	f000 ffc2 	bl	80037e4 <vTaskStartScheduler>
  
  return osOK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	bd80      	pop	{r7, pc}

08002866 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002866:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002868:	b089      	sub	sp, #36	; 0x24
 800286a:	af04      	add	r7, sp, #16
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d020      	beq.n	80028ba <osThreadCreate+0x54>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d01c      	beq.n	80028ba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685c      	ldr	r4, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681d      	ldr	r5, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691e      	ldr	r6, [r3, #16]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff ffc8 	bl	8002828 <makeFreeRtosPriority>
 8002898:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028a2:	9202      	str	r2, [sp, #8]
 80028a4:	9301      	str	r3, [sp, #4]
 80028a6:	9100      	str	r1, [sp, #0]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	4632      	mov	r2, r6
 80028ac:	4629      	mov	r1, r5
 80028ae:	4620      	mov	r0, r4
 80028b0:	f000 fdd4 	bl	800345c <xTaskCreateStatic>
 80028b4:	4603      	mov	r3, r0
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	e01c      	b.n	80028f4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685c      	ldr	r4, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028c6:	b29e      	uxth	r6, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ffaa 	bl	8002828 <makeFreeRtosPriority>
 80028d4:	4602      	mov	r2, r0
 80028d6:	f107 030c 	add.w	r3, r7, #12
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	9200      	str	r2, [sp, #0]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	4632      	mov	r2, r6
 80028e2:	4629      	mov	r1, r5
 80028e4:	4620      	mov	r0, r4
 80028e6:	f000 fe13 	bl	8003510 <xTaskCreate>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d001      	beq.n	80028f4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	e000      	b.n	80028f6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80028f4:	68fb      	ldr	r3, [r7, #12]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028fe <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80028fe:	b580      	push	{r7, lr}
 8002900:	b086      	sub	sp, #24
 8002902:	af02      	add	r7, sp, #8
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d010      	beq.n	8002932 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d10b      	bne.n	800292e <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	2303      	movs	r3, #3
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	4613      	mov	r3, r2
 8002920:	2200      	movs	r2, #0
 8002922:	2100      	movs	r1, #0
 8002924:	2001      	movs	r0, #1
 8002926:	f000 f939 	bl	8002b9c <xQueueGenericCreateStatic>
 800292a:	4603      	mov	r3, r0
 800292c:	e016      	b.n	800295c <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800292e:	2300      	movs	r3, #0
 8002930:	e014      	b.n	800295c <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d110      	bne.n	800295a <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8002938:	2203      	movs	r2, #3
 800293a:	2100      	movs	r1, #0
 800293c:	2001      	movs	r0, #1
 800293e:	f000 f9a0 	bl	8002c82 <xQueueGenericCreate>
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <osSemaphoreCreate+0x58>
 800294a:	2300      	movs	r3, #0
 800294c:	2200      	movs	r2, #0
 800294e:	2100      	movs	r1, #0
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 f9f5 	bl	8002d40 <xQueueGenericSend>
      return sema;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	e000      	b.n	800295c <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800295a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f103 0208 	add.w	r2, r3, #8
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f04f 32ff 	mov.w	r2, #4294967295
 800297c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f103 0208 	add.w	r2, r3, #8
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f103 0208 	add.w	r2, r3, #8
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029be:	b480      	push	{r7}
 80029c0:	b085      	sub	sp, #20
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	601a      	str	r2, [r3, #0]
}
 80029fa:	bf00      	nop
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d103      	bne.n	8002a26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	e00c      	b.n	8002a40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3308      	adds	r3, #8
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	e002      	b.n	8002a34 <vListInsert+0x2e>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d2f6      	bcs.n	8002a2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	601a      	str	r2, [r3, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6892      	ldr	r2, [r2, #8]
 8002a8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6852      	ldr	r2, [r2, #4]
 8002a98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d103      	bne.n	8002aac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	1e5a      	subs	r2, r3, #1
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d109      	bne.n	8002af4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae4:	f383 8811 	msr	BASEPRI, r3
 8002ae8:	f3bf 8f6f 	isb	sy
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	e7fe      	b.n	8002af2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002af4:	f001 fdc2 	bl	800467c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b00:	68f9      	ldr	r1, [r7, #12]
 8002b02:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b04:	fb01 f303 	mul.w	r3, r1, r3
 8002b08:	441a      	add	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b24:	3b01      	subs	r3, #1
 8002b26:	68f9      	ldr	r1, [r7, #12]
 8002b28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b2a:	fb01 f303 	mul.w	r3, r1, r3
 8002b2e:	441a      	add	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	22ff      	movs	r2, #255	; 0xff
 8002b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	22ff      	movs	r2, #255	; 0xff
 8002b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d114      	bne.n	8002b74 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d01a      	beq.n	8002b88 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3310      	adds	r3, #16
 8002b56:	4618      	mov	r0, r3
 8002b58:	f001 f882 	bl	8003c60 <xTaskRemoveFromEventList>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d012      	beq.n	8002b88 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <xQueueGenericReset+0xcc>)
 8002b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	f3bf 8f4f 	dsb	sy
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	e009      	b.n	8002b88 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	3310      	adds	r3, #16
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff fef3 	bl	8002964 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	3324      	adds	r3, #36	; 0x24
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff feee 	bl	8002964 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b88:	f001 fda6 	bl	80046d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b8c:	2301      	movs	r3, #1
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	e000ed04 	.word	0xe000ed04

08002b9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08e      	sub	sp, #56	; 0x38
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d109      	bne.n	8002bc4 <xQueueGenericCreateStatic+0x28>
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bc2:	e7fe      	b.n	8002bc2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <xQueueGenericCreateStatic+0x42>
 8002bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bce:	f383 8811 	msr	BASEPRI, r3
 8002bd2:	f3bf 8f6f 	isb	sy
 8002bd6:	f3bf 8f4f 	dsb	sy
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
 8002bdc:	e7fe      	b.n	8002bdc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <xQueueGenericCreateStatic+0x4e>
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <xQueueGenericCreateStatic+0x52>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <xQueueGenericCreateStatic+0x54>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d109      	bne.n	8002c08 <xQueueGenericCreateStatic+0x6c>
 8002bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf8:	f383 8811 	msr	BASEPRI, r3
 8002bfc:	f3bf 8f6f 	isb	sy
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	623b      	str	r3, [r7, #32]
 8002c06:	e7fe      	b.n	8002c06 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d102      	bne.n	8002c14 <xQueueGenericCreateStatic+0x78>
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <xQueueGenericCreateStatic+0x7c>
 8002c14:	2301      	movs	r3, #1
 8002c16:	e000      	b.n	8002c1a <xQueueGenericCreateStatic+0x7e>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d109      	bne.n	8002c32 <xQueueGenericCreateStatic+0x96>
 8002c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c22:	f383 8811 	msr	BASEPRI, r3
 8002c26:	f3bf 8f6f 	isb	sy
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	61fb      	str	r3, [r7, #28]
 8002c30:	e7fe      	b.n	8002c30 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c32:	2348      	movs	r3, #72	; 0x48
 8002c34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2b48      	cmp	r3, #72	; 0x48
 8002c3a:	d009      	beq.n	8002c50 <xQueueGenericCreateStatic+0xb4>
 8002c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c40:	f383 8811 	msr	BASEPRI, r3
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	61bb      	str	r3, [r7, #24]
 8002c4e:	e7fe      	b.n	8002c4e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00d      	beq.n	8002c78 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c64:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f844 	bl	8002d00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3730      	adds	r7, #48	; 0x30
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b08a      	sub	sp, #40	; 0x28
 8002c86:	af02      	add	r7, sp, #8
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <xQueueGenericCreate+0x28>
 8002c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9a:	f383 8811 	msr	BASEPRI, r3
 8002c9e:	f3bf 8f6f 	isb	sy
 8002ca2:	f3bf 8f4f 	dsb	sy
 8002ca6:	613b      	str	r3, [r7, #16]
 8002ca8:	e7fe      	b.n	8002ca8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d102      	bne.n	8002cb6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61fb      	str	r3, [r7, #28]
 8002cb4:	e004      	b.n	8002cc0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	fb02 f303 	mul.w	r3, r2, r3
 8002cbe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	3348      	adds	r3, #72	; 0x48
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f001 fdf3 	bl	80048b0 <pvPortMalloc>
 8002cca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d011      	beq.n	8002cf6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	3348      	adds	r3, #72	; 0x48
 8002cda:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ce4:	79fa      	ldrb	r2, [r7, #7]
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	4613      	mov	r3, r2
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	68b9      	ldr	r1, [r7, #8]
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f805 	bl	8002d00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002cf6:	69bb      	ldr	r3, [r7, #24]
	}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3720      	adds	r7, #32
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d103      	bne.n	8002d1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	e002      	b.n	8002d22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d2e:	2101      	movs	r1, #1
 8002d30:	69b8      	ldr	r0, [r7, #24]
 8002d32:	f7ff fecb 	bl	8002acc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08e      	sub	sp, #56	; 0x38
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d109      	bne.n	8002d70 <xQueueGenericSend+0x30>
 8002d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d60:	f383 8811 	msr	BASEPRI, r3
 8002d64:	f3bf 8f6f 	isb	sy
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d6e:	e7fe      	b.n	8002d6e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d103      	bne.n	8002d7e <xQueueGenericSend+0x3e>
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <xQueueGenericSend+0x42>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <xQueueGenericSend+0x44>
 8002d82:	2300      	movs	r3, #0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d109      	bne.n	8002d9c <xQueueGenericSend+0x5c>
 8002d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
 8002d9a:	e7fe      	b.n	8002d9a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d103      	bne.n	8002daa <xQueueGenericSend+0x6a>
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <xQueueGenericSend+0x6e>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <xQueueGenericSend+0x70>
 8002dae:	2300      	movs	r3, #0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d109      	bne.n	8002dc8 <xQueueGenericSend+0x88>
 8002db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	623b      	str	r3, [r7, #32]
 8002dc6:	e7fe      	b.n	8002dc6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dc8:	f001 f900 	bl	8003fcc <xTaskGetSchedulerState>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d102      	bne.n	8002dd8 <xQueueGenericSend+0x98>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <xQueueGenericSend+0x9c>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <xQueueGenericSend+0x9e>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <xQueueGenericSend+0xb6>
 8002de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de6:	f383 8811 	msr	BASEPRI, r3
 8002dea:	f3bf 8f6f 	isb	sy
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	61fb      	str	r3, [r7, #28]
 8002df4:	e7fe      	b.n	8002df4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002df6:	f001 fc41 	bl	800467c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d302      	bcc.n	8002e0c <xQueueGenericSend+0xcc>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d129      	bne.n	8002e60 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e12:	f000 fa39 	bl	8003288 <prvCopyDataToQueue>
 8002e16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d010      	beq.n	8002e42 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e22:	3324      	adds	r3, #36	; 0x24
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 ff1b 	bl	8003c60 <xTaskRemoveFromEventList>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d013      	beq.n	8002e58 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e30:	4b3f      	ldr	r3, [pc, #252]	; (8002f30 <xQueueGenericSend+0x1f0>)
 8002e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	f3bf 8f4f 	dsb	sy
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	e00a      	b.n	8002e58 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e48:	4b39      	ldr	r3, [pc, #228]	; (8002f30 <xQueueGenericSend+0x1f0>)
 8002e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e58:	f001 fc3e 	bl	80046d8 <vPortExitCritical>
				return pdPASS;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e063      	b.n	8002f28 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d103      	bne.n	8002e6e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e66:	f001 fc37 	bl	80046d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	e05c      	b.n	8002f28 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d106      	bne.n	8002e82 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e74:	f107 0314 	add.w	r3, r7, #20
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 ff53 	bl	8003d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e82:	f001 fc29 	bl	80046d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e86:	f000 fd0b 	bl	80038a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e8a:	f001 fbf7 	bl	800467c <vPortEnterCritical>
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e94:	b25b      	sxtb	r3, r3
 8002e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9a:	d103      	bne.n	8002ea4 <xQueueGenericSend+0x164>
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eaa:	b25b      	sxtb	r3, r3
 8002eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb0:	d103      	bne.n	8002eba <xQueueGenericSend+0x17a>
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002eba:	f001 fc0d 	bl	80046d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ebe:	1d3a      	adds	r2, r7, #4
 8002ec0:	f107 0314 	add.w	r3, r7, #20
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 ff42 	bl	8003d50 <xTaskCheckForTimeOut>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d124      	bne.n	8002f1c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ed2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ed4:	f000 faaa 	bl	800342c <prvIsQueueFull>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d018      	beq.n	8002f10 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	3310      	adds	r3, #16
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fe96 	bl	8003c18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002eec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eee:	f000 fa35 	bl	800335c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ef2:	f000 fce3 	bl	80038bc <xTaskResumeAll>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f47f af7c 	bne.w	8002df6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002efe:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <xQueueGenericSend+0x1f0>)
 8002f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	e772      	b.n	8002df6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f12:	f000 fa23 	bl	800335c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f16:	f000 fcd1 	bl	80038bc <xTaskResumeAll>
 8002f1a:	e76c      	b.n	8002df6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f1e:	f000 fa1d 	bl	800335c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f22:	f000 fccb 	bl	80038bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3738      	adds	r7, #56	; 0x38
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	e000ed04 	.word	0xe000ed04

08002f34 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08e      	sub	sp, #56	; 0x38
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d109      	bne.n	8002f5c <xQueueGiveFromISR+0x28>
 8002f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	623b      	str	r3, [r7, #32]
 8002f5a:	e7fe      	b.n	8002f5a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d009      	beq.n	8002f78 <xQueueGiveFromISR+0x44>
 8002f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	e7fe      	b.n	8002f76 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d103      	bne.n	8002f88 <xQueueGiveFromISR+0x54>
 8002f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <xQueueGiveFromISR+0x58>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <xQueueGiveFromISR+0x5a>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d109      	bne.n	8002fa6 <xQueueGiveFromISR+0x72>
 8002f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f96:	f383 8811 	msr	BASEPRI, r3
 8002f9a:	f3bf 8f6f 	isb	sy
 8002f9e:	f3bf 8f4f 	dsb	sy
 8002fa2:	61bb      	str	r3, [r7, #24]
 8002fa4:	e7fe      	b.n	8002fa4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fa6:	f001 fc45 	bl	8004834 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002faa:	f3ef 8211 	mrs	r2, BASEPRI
 8002fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb2:	f383 8811 	msr	BASEPRI, r3
 8002fb6:	f3bf 8f6f 	isb	sy
 8002fba:	f3bf 8f4f 	dsb	sy
 8002fbe:	617a      	str	r2, [r7, #20]
 8002fc0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fc2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d22b      	bcs.n	800302e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002fe8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d112      	bne.n	8003018 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d016      	beq.n	8003028 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffc:	3324      	adds	r3, #36	; 0x24
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fe2e 	bl	8003c60 <xTaskRemoveFromEventList>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00e      	beq.n	8003028 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00b      	beq.n	8003028 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2201      	movs	r2, #1
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	e007      	b.n	8003028 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800301c:	3301      	adds	r3, #1
 800301e:	b2db      	uxtb	r3, r3
 8003020:	b25a      	sxtb	r2, r3
 8003022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003028:	2301      	movs	r3, #1
 800302a:	637b      	str	r3, [r7, #52]	; 0x34
 800302c:	e001      	b.n	8003032 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800302e:	2300      	movs	r3, #0
 8003030:	637b      	str	r3, [r7, #52]	; 0x34
 8003032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003034:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800303c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800303e:	4618      	mov	r0, r3
 8003040:	3738      	adds	r7, #56	; 0x38
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08e      	sub	sp, #56	; 0x38
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003052:	2300      	movs	r3, #0
 8003054:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800305a:	2300      	movs	r3, #0
 800305c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800305e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003060:	2b00      	cmp	r3, #0
 8003062:	d109      	bne.n	8003078 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8003064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	623b      	str	r3, [r7, #32]
 8003076:	e7fe      	b.n	8003076 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	2b00      	cmp	r3, #0
 800307e:	d009      	beq.n	8003094 <xQueueSemaphoreTake+0x4c>
 8003080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	e7fe      	b.n	8003092 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003094:	f000 ff9a 	bl	8003fcc <xTaskGetSchedulerState>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d102      	bne.n	80030a4 <xQueueSemaphoreTake+0x5c>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <xQueueSemaphoreTake+0x60>
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <xQueueSemaphoreTake+0x62>
 80030a8:	2300      	movs	r3, #0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d109      	bne.n	80030c2 <xQueueSemaphoreTake+0x7a>
 80030ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b2:	f383 8811 	msr	BASEPRI, r3
 80030b6:	f3bf 8f6f 	isb	sy
 80030ba:	f3bf 8f4f 	dsb	sy
 80030be:	61bb      	str	r3, [r7, #24]
 80030c0:	e7fe      	b.n	80030c0 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030c2:	f001 fadb 	bl	800467c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80030c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ca:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80030cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d024      	beq.n	800311c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80030d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d4:	1e5a      	subs	r2, r3, #1
 80030d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d104      	bne.n	80030ec <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80030e2:	f001 f92d 	bl	8004340 <pvTaskIncrementMutexHeldCount>
 80030e6:	4602      	mov	r2, r0
 80030e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00f      	beq.n	8003114 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f6:	3310      	adds	r3, #16
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fdb1 	bl	8003c60 <xTaskRemoveFromEventList>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d007      	beq.n	8003114 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003104:	4b53      	ldr	r3, [pc, #332]	; (8003254 <xQueueSemaphoreTake+0x20c>)
 8003106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003114:	f001 fae0 	bl	80046d8 <vPortExitCritical>
				return pdPASS;
 8003118:	2301      	movs	r3, #1
 800311a:	e096      	b.n	800324a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d110      	bne.n	8003144 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003124:	2b00      	cmp	r3, #0
 8003126:	d009      	beq.n	800313c <xQueueSemaphoreTake+0xf4>
 8003128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312c:	f383 8811 	msr	BASEPRI, r3
 8003130:	f3bf 8f6f 	isb	sy
 8003134:	f3bf 8f4f 	dsb	sy
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	e7fe      	b.n	800313a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800313c:	f001 facc 	bl	80046d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003140:	2300      	movs	r3, #0
 8003142:	e082      	b.n	800324a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800314a:	f107 030c 	add.w	r3, r7, #12
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fde8 	bl	8003d24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003154:	2301      	movs	r3, #1
 8003156:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003158:	f001 fabe 	bl	80046d8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800315c:	f000 fba0 	bl	80038a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003160:	f001 fa8c 	bl	800467c <vPortEnterCritical>
 8003164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003166:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800316a:	b25b      	sxtb	r3, r3
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d103      	bne.n	800317a <xQueueSemaphoreTake+0x132>
 8003172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800317a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003180:	b25b      	sxtb	r3, r3
 8003182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003186:	d103      	bne.n	8003190 <xQueueSemaphoreTake+0x148>
 8003188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003190:	f001 faa2 	bl	80046d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003194:	463a      	mov	r2, r7
 8003196:	f107 030c 	add.w	r3, r7, #12
 800319a:	4611      	mov	r1, r2
 800319c:	4618      	mov	r0, r3
 800319e:	f000 fdd7 	bl	8003d50 <xTaskCheckForTimeOut>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d132      	bne.n	800320e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031aa:	f000 f929 	bl	8003400 <prvIsQueueEmpty>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d026      	beq.n	8003202 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d109      	bne.n	80031d0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80031bc:	f001 fa5e 	bl	800467c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80031c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 ff1f 	bl	8004008 <xTaskPriorityInherit>
 80031ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80031cc:	f001 fa84 	bl	80046d8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d2:	3324      	adds	r3, #36	; 0x24
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	4611      	mov	r1, r2
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 fd1d 	bl	8003c18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031e0:	f000 f8bc 	bl	800335c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031e4:	f000 fb6a 	bl	80038bc <xTaskResumeAll>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f47f af69 	bne.w	80030c2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80031f0:	4b18      	ldr	r3, [pc, #96]	; (8003254 <xQueueSemaphoreTake+0x20c>)
 80031f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	e75f      	b.n	80030c2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003204:	f000 f8aa 	bl	800335c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003208:	f000 fb58 	bl	80038bc <xTaskResumeAll>
 800320c:	e759      	b.n	80030c2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800320e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003210:	f000 f8a4 	bl	800335c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003214:	f000 fb52 	bl	80038bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003218:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800321a:	f000 f8f1 	bl	8003400 <prvIsQueueEmpty>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	f43f af4e 	beq.w	80030c2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00d      	beq.n	8003248 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800322c:	f001 fa26 	bl	800467c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003230:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003232:	f000 f811 	bl	8003258 <prvGetDisinheritPriorityAfterTimeout>
 8003236:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800323e:	4618      	mov	r0, r3
 8003240:	f000 ffe6 	bl	8004210 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003244:	f001 fa48 	bl	80046d8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003248:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800324a:	4618      	mov	r0, r3
 800324c:	3738      	adds	r7, #56	; 0x38
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	e000ed04 	.word	0xe000ed04

08003258 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	2b00      	cmp	r3, #0
 8003266:	d006      	beq.n	8003276 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f1c3 0307 	rsb	r3, r3, #7
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	e001      	b.n	800327a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800327a:	68fb      	ldr	r3, [r7, #12]
	}
 800327c:	4618      	mov	r0, r3
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003294:	2300      	movs	r3, #0
 8003296:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10d      	bne.n	80032c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d14d      	bne.n	800334a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 ff28 	bl	8004108 <xTaskPriorityDisinherit>
 80032b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	e043      	b.n	800334a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d119      	bne.n	80032fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6858      	ldr	r0, [r3, #4]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	461a      	mov	r2, r3
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	f001 fce6 	bl	8004ca4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	441a      	add	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d32b      	bcc.n	800334a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	e026      	b.n	800334a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	68d8      	ldr	r0, [r3, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	461a      	mov	r2, r3
 8003306:	68b9      	ldr	r1, [r7, #8]
 8003308:	f001 fccc 	bl	8004ca4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	425b      	negs	r3, r3
 8003316:	441a      	add	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d207      	bcs.n	8003338 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	425b      	negs	r3, r3
 8003332:	441a      	add	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d105      	bne.n	800334a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	3b01      	subs	r3, #1
 8003348:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003352:	697b      	ldr	r3, [r7, #20]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003364:	f001 f98a 	bl	800467c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800336e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003370:	e011      	b.n	8003396 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	2b00      	cmp	r3, #0
 8003378:	d012      	beq.n	80033a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3324      	adds	r3, #36	; 0x24
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fc6e 	bl	8003c60 <xTaskRemoveFromEventList>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800338a:	f000 fd41 	bl	8003e10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800338e:	7bfb      	ldrb	r3, [r7, #15]
 8003390:	3b01      	subs	r3, #1
 8003392:	b2db      	uxtb	r3, r3
 8003394:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800339a:	2b00      	cmp	r3, #0
 800339c:	dce9      	bgt.n	8003372 <prvUnlockQueue+0x16>
 800339e:	e000      	b.n	80033a2 <prvUnlockQueue+0x46>
					break;
 80033a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	22ff      	movs	r2, #255	; 0xff
 80033a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80033aa:	f001 f995 	bl	80046d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80033ae:	f001 f965 	bl	800467c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033ba:	e011      	b.n	80033e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d012      	beq.n	80033ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3310      	adds	r3, #16
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fc49 	bl	8003c60 <xTaskRemoveFromEventList>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033d4:	f000 fd1c 	bl	8003e10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033d8:	7bbb      	ldrb	r3, [r7, #14]
 80033da:	3b01      	subs	r3, #1
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	dce9      	bgt.n	80033bc <prvUnlockQueue+0x60>
 80033e8:	e000      	b.n	80033ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	22ff      	movs	r2, #255	; 0xff
 80033f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80033f4:	f001 f970 	bl	80046d8 <vPortExitCritical>
}
 80033f8:	bf00      	nop
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003408:	f001 f938 	bl	800467c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	2b00      	cmp	r3, #0
 8003412:	d102      	bne.n	800341a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003414:	2301      	movs	r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e001      	b.n	800341e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800341e:	f001 f95b 	bl	80046d8 <vPortExitCritical>

	return xReturn;
 8003422:	68fb      	ldr	r3, [r7, #12]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003434:	f001 f922 	bl	800467c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003440:	429a      	cmp	r2, r3
 8003442:	d102      	bne.n	800344a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003444:	2301      	movs	r3, #1
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	e001      	b.n	800344e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800344e:	f001 f943 	bl	80046d8 <vPortExitCritical>

	return xReturn;
 8003452:	68fb      	ldr	r3, [r7, #12]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08e      	sub	sp, #56	; 0x38
 8003460:	af04      	add	r7, sp, #16
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800346a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346c:	2b00      	cmp	r3, #0
 800346e:	d109      	bne.n	8003484 <xTaskCreateStatic+0x28>
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	623b      	str	r3, [r7, #32]
 8003482:	e7fe      	b.n	8003482 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <xTaskCreateStatic+0x42>
 800348a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	61fb      	str	r3, [r7, #28]
 800349c:	e7fe      	b.n	800349c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800349e:	2354      	movs	r3, #84	; 0x54
 80034a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2b54      	cmp	r3, #84	; 0x54
 80034a6:	d009      	beq.n	80034bc <xTaskCreateStatic+0x60>
 80034a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	61bb      	str	r3, [r7, #24]
 80034ba:	e7fe      	b.n	80034ba <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80034bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80034be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d01e      	beq.n	8003502 <xTaskCreateStatic+0xa6>
 80034c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d01b      	beq.n	8003502 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80034dc:	2300      	movs	r3, #0
 80034de:	9303      	str	r3, [sp, #12]
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	9302      	str	r3, [sp, #8]
 80034e4:	f107 0314 	add.w	r3, r7, #20
 80034e8:	9301      	str	r3, [sp, #4]
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 f850 	bl	800359a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034fc:	f000 f8d4 	bl	80036a8 <prvAddNewTaskToReadyList>
 8003500:	e001      	b.n	8003506 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003506:	697b      	ldr	r3, [r7, #20]
	}
 8003508:	4618      	mov	r0, r3
 800350a:	3728      	adds	r7, #40	; 0x28
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08c      	sub	sp, #48	; 0x30
 8003514:	af04      	add	r7, sp, #16
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	4613      	mov	r3, r2
 800351e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4618      	mov	r0, r3
 8003526:	f001 f9c3 	bl	80048b0 <pvPortMalloc>
 800352a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00e      	beq.n	8003550 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003532:	2054      	movs	r0, #84	; 0x54
 8003534:	f001 f9bc 	bl	80048b0 <pvPortMalloc>
 8003538:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	631a      	str	r2, [r3, #48]	; 0x30
 8003546:	e005      	b.n	8003554 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003548:	6978      	ldr	r0, [r7, #20]
 800354a:	f001 fa73 	bl	8004a34 <vPortFree>
 800354e:	e001      	b.n	8003554 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003550:	2300      	movs	r3, #0
 8003552:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d017      	beq.n	800358a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003562:	88fa      	ldrh	r2, [r7, #6]
 8003564:	2300      	movs	r3, #0
 8003566:	9303      	str	r3, [sp, #12]
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	9302      	str	r3, [sp, #8]
 800356c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356e:	9301      	str	r3, [sp, #4]
 8003570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68b9      	ldr	r1, [r7, #8]
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 f80e 	bl	800359a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800357e:	69f8      	ldr	r0, [r7, #28]
 8003580:	f000 f892 	bl	80036a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003584:	2301      	movs	r3, #1
 8003586:	61bb      	str	r3, [r7, #24]
 8003588:	e002      	b.n	8003590 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800358a:	f04f 33ff 	mov.w	r3, #4294967295
 800358e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003590:	69bb      	ldr	r3, [r7, #24]
	}
 8003592:	4618      	mov	r0, r3
 8003594:	3720      	adds	r7, #32
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b088      	sub	sp, #32
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035b2:	3b01      	subs	r3, #1
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	f023 0307 	bic.w	r3, r3, #7
 80035c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d009      	beq.n	80035e0 <prvInitialiseNewTask+0x46>
 80035cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d0:	f383 8811 	msr	BASEPRI, r3
 80035d4:	f3bf 8f6f 	isb	sy
 80035d8:	f3bf 8f4f 	dsb	sy
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	e7fe      	b.n	80035de <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d01f      	beq.n	8003626 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
 80035ea:	e012      	b.n	8003612 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	4413      	add	r3, r2
 80035f2:	7819      	ldrb	r1, [r3, #0]
 80035f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	4413      	add	r3, r2
 80035fa:	3334      	adds	r3, #52	; 0x34
 80035fc:	460a      	mov	r2, r1
 80035fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	4413      	add	r3, r2
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d006      	beq.n	800361a <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	3301      	adds	r3, #1
 8003610:	61fb      	str	r3, [r7, #28]
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	2b0f      	cmp	r3, #15
 8003616:	d9e9      	bls.n	80035ec <prvInitialiseNewTask+0x52>
 8003618:	e000      	b.n	800361c <prvInitialiseNewTask+0x82>
			{
				break;
 800361a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003624:	e003      	b.n	800362e <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003630:	2b06      	cmp	r3, #6
 8003632:	d901      	bls.n	8003638 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003634:	2306      	movs	r3, #6
 8003636:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800363c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003642:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	2200      	movs	r2, #0
 8003648:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800364a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364c:	3304      	adds	r3, #4
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff f9a8 	bl	80029a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003656:	3318      	adds	r3, #24
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff f9a3 	bl	80029a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003662:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003666:	f1c3 0207 	rsb	r2, r3, #7
 800366a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003672:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003676:	2200      	movs	r2, #0
 8003678:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	68f9      	ldr	r1, [r7, #12]
 8003686:	69b8      	ldr	r0, [r7, #24]
 8003688:	f000 fed4 	bl	8004434 <pxPortInitialiseStack>
 800368c:	4602      	mov	r2, r0
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800369c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800369e:	bf00      	nop
 80036a0:	3720      	adds	r7, #32
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
	...

080036a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80036b0:	f000 ffe4 	bl	800467c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80036b4:	4b2a      	ldr	r3, [pc, #168]	; (8003760 <prvAddNewTaskToReadyList+0xb8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	3301      	adds	r3, #1
 80036ba:	4a29      	ldr	r2, [pc, #164]	; (8003760 <prvAddNewTaskToReadyList+0xb8>)
 80036bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80036be:	4b29      	ldr	r3, [pc, #164]	; (8003764 <prvAddNewTaskToReadyList+0xbc>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80036c6:	4a27      	ldr	r2, [pc, #156]	; (8003764 <prvAddNewTaskToReadyList+0xbc>)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036cc:	4b24      	ldr	r3, [pc, #144]	; (8003760 <prvAddNewTaskToReadyList+0xb8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d110      	bne.n	80036f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80036d4:	f000 fbc0 	bl	8003e58 <prvInitialiseTaskLists>
 80036d8:	e00d      	b.n	80036f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80036da:	4b23      	ldr	r3, [pc, #140]	; (8003768 <prvAddNewTaskToReadyList+0xc0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036e2:	4b20      	ldr	r3, [pc, #128]	; (8003764 <prvAddNewTaskToReadyList+0xbc>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d802      	bhi.n	80036f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80036f0:	4a1c      	ldr	r2, [pc, #112]	; (8003764 <prvAddNewTaskToReadyList+0xbc>)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036f6:	4b1d      	ldr	r3, [pc, #116]	; (800376c <prvAddNewTaskToReadyList+0xc4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	3301      	adds	r3, #1
 80036fc:	4a1b      	ldr	r2, [pc, #108]	; (800376c <prvAddNewTaskToReadyList+0xc4>)
 80036fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	2201      	movs	r2, #1
 8003706:	409a      	lsls	r2, r3
 8003708:	4b19      	ldr	r3, [pc, #100]	; (8003770 <prvAddNewTaskToReadyList+0xc8>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4313      	orrs	r3, r2
 800370e:	4a18      	ldr	r2, [pc, #96]	; (8003770 <prvAddNewTaskToReadyList+0xc8>)
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4a15      	ldr	r2, [pc, #84]	; (8003774 <prvAddNewTaskToReadyList+0xcc>)
 8003720:	441a      	add	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3304      	adds	r3, #4
 8003726:	4619      	mov	r1, r3
 8003728:	4610      	mov	r0, r2
 800372a:	f7ff f948 	bl	80029be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800372e:	f000 ffd3 	bl	80046d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003732:	4b0d      	ldr	r3, [pc, #52]	; (8003768 <prvAddNewTaskToReadyList+0xc0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00e      	beq.n	8003758 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800373a:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <prvAddNewTaskToReadyList+0xbc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	429a      	cmp	r2, r3
 8003746:	d207      	bcs.n	8003758 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <prvAddNewTaskToReadyList+0xd0>)
 800374a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003758:	bf00      	nop
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000380 	.word	0x20000380
 8003764:	20000280 	.word	0x20000280
 8003768:	2000038c 	.word	0x2000038c
 800376c:	2000039c 	.word	0x2000039c
 8003770:	20000388 	.word	0x20000388
 8003774:	20000284 	.word	0x20000284
 8003778:	e000ed04 	.word	0xe000ed04

0800377c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d016      	beq.n	80037bc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800378e:	4b13      	ldr	r3, [pc, #76]	; (80037dc <vTaskDelay+0x60>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <vTaskDelay+0x2e>
 8003796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379a:	f383 8811 	msr	BASEPRI, r3
 800379e:	f3bf 8f6f 	isb	sy
 80037a2:	f3bf 8f4f 	dsb	sy
 80037a6:	60bb      	str	r3, [r7, #8]
 80037a8:	e7fe      	b.n	80037a8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80037aa:	f000 f879 	bl	80038a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037ae:	2100      	movs	r1, #0
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fdd9 	bl	8004368 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80037b6:	f000 f881 	bl	80038bc <xTaskResumeAll>
 80037ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d107      	bne.n	80037d2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80037c2:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <vTaskDelay+0x64>)
 80037c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80037d2:	bf00      	nop
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	200003a8 	.word	0x200003a8
 80037e0:	e000ed04 	.word	0xe000ed04

080037e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08a      	sub	sp, #40	; 0x28
 80037e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80037f2:	463a      	mov	r2, r7
 80037f4:	1d39      	adds	r1, r7, #4
 80037f6:	f107 0308 	add.w	r3, r7, #8
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fc fe70 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003800:	6839      	ldr	r1, [r7, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	9202      	str	r2, [sp, #8]
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	2300      	movs	r3, #0
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	2300      	movs	r3, #0
 8003810:	460a      	mov	r2, r1
 8003812:	491d      	ldr	r1, [pc, #116]	; (8003888 <vTaskStartScheduler+0xa4>)
 8003814:	481d      	ldr	r0, [pc, #116]	; (800388c <vTaskStartScheduler+0xa8>)
 8003816:	f7ff fe21 	bl	800345c <xTaskCreateStatic>
 800381a:	4602      	mov	r2, r0
 800381c:	4b1c      	ldr	r3, [pc, #112]	; (8003890 <vTaskStartScheduler+0xac>)
 800381e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003820:	4b1b      	ldr	r3, [pc, #108]	; (8003890 <vTaskStartScheduler+0xac>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003828:	2301      	movs	r3, #1
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	e001      	b.n	8003832 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d115      	bne.n	8003864 <vTaskStartScheduler+0x80>
 8003838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800384a:	4b12      	ldr	r3, [pc, #72]	; (8003894 <vTaskStartScheduler+0xb0>)
 800384c:	f04f 32ff 	mov.w	r2, #4294967295
 8003850:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003852:	4b11      	ldr	r3, [pc, #68]	; (8003898 <vTaskStartScheduler+0xb4>)
 8003854:	2201      	movs	r2, #1
 8003856:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003858:	4b10      	ldr	r3, [pc, #64]	; (800389c <vTaskStartScheduler+0xb8>)
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800385e:	f000 fe6f 	bl	8004540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003862:	e00d      	b.n	8003880 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386a:	d109      	bne.n	8003880 <vTaskStartScheduler+0x9c>
 800386c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003870:	f383 8811 	msr	BASEPRI, r3
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	e7fe      	b.n	800387e <vTaskStartScheduler+0x9a>
}
 8003880:	bf00      	nop
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	08004d90 	.word	0x08004d90
 800388c:	08003e29 	.word	0x08003e29
 8003890:	200003a4 	.word	0x200003a4
 8003894:	200003a0 	.word	0x200003a0
 8003898:	2000038c 	.word	0x2000038c
 800389c:	20000384 	.word	0x20000384

080038a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80038a4:	4b04      	ldr	r3, [pc, #16]	; (80038b8 <vTaskSuspendAll+0x18>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3301      	adds	r3, #1
 80038aa:	4a03      	ldr	r2, [pc, #12]	; (80038b8 <vTaskSuspendAll+0x18>)
 80038ac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80038ae:	bf00      	nop
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	200003a8 	.word	0x200003a8

080038bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80038ca:	4b41      	ldr	r3, [pc, #260]	; (80039d0 <xTaskResumeAll+0x114>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <xTaskResumeAll+0x2a>
 80038d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d6:	f383 8811 	msr	BASEPRI, r3
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	e7fe      	b.n	80038e4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80038e6:	f000 fec9 	bl	800467c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80038ea:	4b39      	ldr	r3, [pc, #228]	; (80039d0 <xTaskResumeAll+0x114>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	4a37      	ldr	r2, [pc, #220]	; (80039d0 <xTaskResumeAll+0x114>)
 80038f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038f4:	4b36      	ldr	r3, [pc, #216]	; (80039d0 <xTaskResumeAll+0x114>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d161      	bne.n	80039c0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038fc:	4b35      	ldr	r3, [pc, #212]	; (80039d4 <xTaskResumeAll+0x118>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d05d      	beq.n	80039c0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003904:	e02e      	b.n	8003964 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003906:	4b34      	ldr	r3, [pc, #208]	; (80039d8 <xTaskResumeAll+0x11c>)
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	3318      	adds	r3, #24
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff f8b0 	bl	8002a78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	3304      	adds	r3, #4
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff f8ab 	bl	8002a78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	2201      	movs	r2, #1
 8003928:	409a      	lsls	r2, r3
 800392a:	4b2c      	ldr	r3, [pc, #176]	; (80039dc <xTaskResumeAll+0x120>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4313      	orrs	r3, r2
 8003930:	4a2a      	ldr	r2, [pc, #168]	; (80039dc <xTaskResumeAll+0x120>)
 8003932:	6013      	str	r3, [r2, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4a27      	ldr	r2, [pc, #156]	; (80039e0 <xTaskResumeAll+0x124>)
 8003942:	441a      	add	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	3304      	adds	r3, #4
 8003948:	4619      	mov	r1, r3
 800394a:	4610      	mov	r0, r2
 800394c:	f7ff f837 	bl	80029be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003954:	4b23      	ldr	r3, [pc, #140]	; (80039e4 <xTaskResumeAll+0x128>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	429a      	cmp	r2, r3
 800395c:	d302      	bcc.n	8003964 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800395e:	4b22      	ldr	r3, [pc, #136]	; (80039e8 <xTaskResumeAll+0x12c>)
 8003960:	2201      	movs	r2, #1
 8003962:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003964:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <xTaskResumeAll+0x11c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1cc      	bne.n	8003906 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003972:	f000 fb0b 	bl	8003f8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003976:	4b1d      	ldr	r3, [pc, #116]	; (80039ec <xTaskResumeAll+0x130>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d010      	beq.n	80039a4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003982:	f000 f837 	bl	80039f4 <xTaskIncrementTick>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800398c:	4b16      	ldr	r3, [pc, #88]	; (80039e8 <xTaskResumeAll+0x12c>)
 800398e:	2201      	movs	r2, #1
 8003990:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3b01      	subs	r3, #1
 8003996:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f1      	bne.n	8003982 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800399e:	4b13      	ldr	r3, [pc, #76]	; (80039ec <xTaskResumeAll+0x130>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039a4:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <xTaskResumeAll+0x12c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d009      	beq.n	80039c0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80039ac:	2301      	movs	r3, #1
 80039ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80039b0:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <xTaskResumeAll+0x134>)
 80039b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039c0:	f000 fe8a 	bl	80046d8 <vPortExitCritical>

	return xAlreadyYielded;
 80039c4:	68bb      	ldr	r3, [r7, #8]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	200003a8 	.word	0x200003a8
 80039d4:	20000380 	.word	0x20000380
 80039d8:	20000340 	.word	0x20000340
 80039dc:	20000388 	.word	0x20000388
 80039e0:	20000284 	.word	0x20000284
 80039e4:	20000280 	.word	0x20000280
 80039e8:	20000394 	.word	0x20000394
 80039ec:	20000390 	.word	0x20000390
 80039f0:	e000ed04 	.word	0xe000ed04

080039f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039fe:	4b4e      	ldr	r3, [pc, #312]	; (8003b38 <xTaskIncrementTick+0x144>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f040 8087 	bne.w	8003b16 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a08:	4b4c      	ldr	r3, [pc, #304]	; (8003b3c <xTaskIncrementTick+0x148>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a10:	4a4a      	ldr	r2, [pc, #296]	; (8003b3c <xTaskIncrementTick+0x148>)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d11f      	bne.n	8003a5c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a1c:	4b48      	ldr	r3, [pc, #288]	; (8003b40 <xTaskIncrementTick+0x14c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d009      	beq.n	8003a3a <xTaskIncrementTick+0x46>
 8003a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	e7fe      	b.n	8003a38 <xTaskIncrementTick+0x44>
 8003a3a:	4b41      	ldr	r3, [pc, #260]	; (8003b40 <xTaskIncrementTick+0x14c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	4b40      	ldr	r3, [pc, #256]	; (8003b44 <xTaskIncrementTick+0x150>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a3e      	ldr	r2, [pc, #248]	; (8003b40 <xTaskIncrementTick+0x14c>)
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	4a3e      	ldr	r2, [pc, #248]	; (8003b44 <xTaskIncrementTick+0x150>)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	4b3e      	ldr	r3, [pc, #248]	; (8003b48 <xTaskIncrementTick+0x154>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3301      	adds	r3, #1
 8003a54:	4a3c      	ldr	r2, [pc, #240]	; (8003b48 <xTaskIncrementTick+0x154>)
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	f000 fa98 	bl	8003f8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a5c:	4b3b      	ldr	r3, [pc, #236]	; (8003b4c <xTaskIncrementTick+0x158>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d348      	bcc.n	8003af8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a66:	4b36      	ldr	r3, [pc, #216]	; (8003b40 <xTaskIncrementTick+0x14c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d104      	bne.n	8003a7a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a70:	4b36      	ldr	r3, [pc, #216]	; (8003b4c <xTaskIncrementTick+0x158>)
 8003a72:	f04f 32ff 	mov.w	r2, #4294967295
 8003a76:	601a      	str	r2, [r3, #0]
					break;
 8003a78:	e03e      	b.n	8003af8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a7a:	4b31      	ldr	r3, [pc, #196]	; (8003b40 <xTaskIncrementTick+0x14c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d203      	bcs.n	8003a9a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a92:	4a2e      	ldr	r2, [pc, #184]	; (8003b4c <xTaskIncrementTick+0x158>)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a98:	e02e      	b.n	8003af8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fe ffea 	bl	8002a78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d004      	beq.n	8003ab6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	3318      	adds	r3, #24
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fe ffe1 	bl	8002a78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	2201      	movs	r2, #1
 8003abc:	409a      	lsls	r2, r3
 8003abe:	4b24      	ldr	r3, [pc, #144]	; (8003b50 <xTaskIncrementTick+0x15c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	4a22      	ldr	r2, [pc, #136]	; (8003b50 <xTaskIncrementTick+0x15c>)
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4a1f      	ldr	r2, [pc, #124]	; (8003b54 <xTaskIncrementTick+0x160>)
 8003ad6:	441a      	add	r2, r3
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	3304      	adds	r3, #4
 8003adc:	4619      	mov	r1, r3
 8003ade:	4610      	mov	r0, r2
 8003ae0:	f7fe ff6d 	bl	80029be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae8:	4b1b      	ldr	r3, [pc, #108]	; (8003b58 <xTaskIncrementTick+0x164>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d3b9      	bcc.n	8003a66 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003af2:	2301      	movs	r3, #1
 8003af4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003af6:	e7b6      	b.n	8003a66 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003af8:	4b17      	ldr	r3, [pc, #92]	; (8003b58 <xTaskIncrementTick+0x164>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afe:	4915      	ldr	r1, [pc, #84]	; (8003b54 <xTaskIncrementTick+0x160>)
 8003b00:	4613      	mov	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d907      	bls.n	8003b20 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003b10:	2301      	movs	r3, #1
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	e004      	b.n	8003b20 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003b16:	4b11      	ldr	r3, [pc, #68]	; (8003b5c <xTaskIncrementTick+0x168>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	4a0f      	ldr	r2, [pc, #60]	; (8003b5c <xTaskIncrementTick+0x168>)
 8003b1e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003b20:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <xTaskIncrementTick+0x16c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003b2c:	697b      	ldr	r3, [r7, #20]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	200003a8 	.word	0x200003a8
 8003b3c:	20000384 	.word	0x20000384
 8003b40:	20000338 	.word	0x20000338
 8003b44:	2000033c 	.word	0x2000033c
 8003b48:	20000398 	.word	0x20000398
 8003b4c:	200003a0 	.word	0x200003a0
 8003b50:	20000388 	.word	0x20000388
 8003b54:	20000284 	.word	0x20000284
 8003b58:	20000280 	.word	0x20000280
 8003b5c:	20000390 	.word	0x20000390
 8003b60:	20000394 	.word	0x20000394

08003b64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b6a:	4b26      	ldr	r3, [pc, #152]	; (8003c04 <vTaskSwitchContext+0xa0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b72:	4b25      	ldr	r3, [pc, #148]	; (8003c08 <vTaskSwitchContext+0xa4>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b78:	e03e      	b.n	8003bf8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003b7a:	4b23      	ldr	r3, [pc, #140]	; (8003c08 <vTaskSwitchContext+0xa4>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b80:	4b22      	ldr	r3, [pc, #136]	; (8003c0c <vTaskSwitchContext+0xa8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	fab3 f383 	clz	r3, r3
 8003b8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003b8e:	7afb      	ldrb	r3, [r7, #11]
 8003b90:	f1c3 031f 	rsb	r3, r3, #31
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	491e      	ldr	r1, [pc, #120]	; (8003c10 <vTaskSwitchContext+0xac>)
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <vTaskSwitchContext+0x5a>
	__asm volatile
 8003baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	607b      	str	r3, [r7, #4]
 8003bbc:	e7fe      	b.n	8003bbc <vTaskSwitchContext+0x58>
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4a11      	ldr	r2, [pc, #68]	; (8003c10 <vTaskSwitchContext+0xac>)
 8003bca:	4413      	add	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	605a      	str	r2, [r3, #4]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	3308      	adds	r3, #8
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d104      	bne.n	8003bee <vTaskSwitchContext+0x8a>
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	605a      	str	r2, [r3, #4]
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	4a07      	ldr	r2, [pc, #28]	; (8003c14 <vTaskSwitchContext+0xb0>)
 8003bf6:	6013      	str	r3, [r2, #0]
}
 8003bf8:	bf00      	nop
 8003bfa:	371c      	adds	r7, #28
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	200003a8 	.word	0x200003a8
 8003c08:	20000394 	.word	0x20000394
 8003c0c:	20000388 	.word	0x20000388
 8003c10:	20000284 	.word	0x20000284
 8003c14:	20000280 	.word	0x20000280

08003c18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d109      	bne.n	8003c3c <vTaskPlaceOnEventList+0x24>
 8003c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	e7fe      	b.n	8003c3a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c3c:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <vTaskPlaceOnEventList+0x44>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3318      	adds	r3, #24
 8003c42:	4619      	mov	r1, r3
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7fe fede 	bl	8002a06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	6838      	ldr	r0, [r7, #0]
 8003c4e:	f000 fb8b 	bl	8004368 <prvAddCurrentTaskToDelayedList>
}
 8003c52:	bf00      	nop
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000280 	.word	0x20000280

08003c60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d109      	bne.n	8003c8a <xTaskRemoveFromEventList+0x2a>
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	e7fe      	b.n	8003c88 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	3318      	adds	r3, #24
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe fef2 	bl	8002a78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c94:	4b1d      	ldr	r3, [pc, #116]	; (8003d0c <xTaskRemoveFromEventList+0xac>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d11c      	bne.n	8003cd6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fe fee9 	bl	8002a78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003caa:	2201      	movs	r2, #1
 8003cac:	409a      	lsls	r2, r3
 8003cae:	4b18      	ldr	r3, [pc, #96]	; (8003d10 <xTaskRemoveFromEventList+0xb0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	4a16      	ldr	r2, [pc, #88]	; (8003d10 <xTaskRemoveFromEventList+0xb0>)
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4a13      	ldr	r2, [pc, #76]	; (8003d14 <xTaskRemoveFromEventList+0xb4>)
 8003cc6:	441a      	add	r2, r3
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	3304      	adds	r3, #4
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4610      	mov	r0, r2
 8003cd0:	f7fe fe75 	bl	80029be <vListInsertEnd>
 8003cd4:	e005      	b.n	8003ce2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	3318      	adds	r3, #24
 8003cda:	4619      	mov	r1, r3
 8003cdc:	480e      	ldr	r0, [pc, #56]	; (8003d18 <xTaskRemoveFromEventList+0xb8>)
 8003cde:	f7fe fe6e 	bl	80029be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <xTaskRemoveFromEventList+0xbc>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d905      	bls.n	8003cfc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003cf4:	4b0a      	ldr	r3, [pc, #40]	; (8003d20 <xTaskRemoveFromEventList+0xc0>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	e001      	b.n	8003d00 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003d00:	697b      	ldr	r3, [r7, #20]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	200003a8 	.word	0x200003a8
 8003d10:	20000388 	.word	0x20000388
 8003d14:	20000284 	.word	0x20000284
 8003d18:	20000340 	.word	0x20000340
 8003d1c:	20000280 	.word	0x20000280
 8003d20:	20000394 	.word	0x20000394

08003d24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d2c:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <vTaskInternalSetTimeOutState+0x24>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d34:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <vTaskInternalSetTimeOutState+0x28>)
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	605a      	str	r2, [r3, #4]
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	20000398 	.word	0x20000398
 8003d4c:	20000384 	.word	0x20000384

08003d50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d109      	bne.n	8003d74 <xTaskCheckForTimeOut+0x24>
 8003d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	e7fe      	b.n	8003d72 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <xTaskCheckForTimeOut+0x3e>
 8003d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7e:	f383 8811 	msr	BASEPRI, r3
 8003d82:	f3bf 8f6f 	isb	sy
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	e7fe      	b.n	8003d8c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003d8e:	f000 fc75 	bl	800467c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d92:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <xTaskCheckForTimeOut+0xb8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003daa:	d102      	bne.n	8003db2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003dac:	2300      	movs	r3, #0
 8003dae:	61fb      	str	r3, [r7, #28]
 8003db0:	e023      	b.n	8003dfa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	4b15      	ldr	r3, [pc, #84]	; (8003e0c <xTaskCheckForTimeOut+0xbc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d007      	beq.n	8003dce <xTaskCheckForTimeOut+0x7e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d302      	bcc.n	8003dce <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	61fb      	str	r3, [r7, #28]
 8003dcc:	e015      	b.n	8003dfa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d20b      	bcs.n	8003df0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	1ad2      	subs	r2, r2, r3
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f7ff ff9d 	bl	8003d24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]
 8003dee:	e004      	b.n	8003dfa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003df6:	2301      	movs	r3, #1
 8003df8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003dfa:	f000 fc6d 	bl	80046d8 <vPortExitCritical>

	return xReturn;
 8003dfe:	69fb      	ldr	r3, [r7, #28]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3720      	adds	r7, #32
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	20000384 	.word	0x20000384
 8003e0c:	20000398 	.word	0x20000398

08003e10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003e14:	4b03      	ldr	r3, [pc, #12]	; (8003e24 <vTaskMissedYield+0x14>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
}
 8003e1a:	bf00      	nop
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	20000394 	.word	0x20000394

08003e28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e30:	f000 f852 	bl	8003ed8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e34:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <prvIdleTask+0x28>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d9f9      	bls.n	8003e30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <prvIdleTask+0x2c>)
 8003e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e4c:	e7f0      	b.n	8003e30 <prvIdleTask+0x8>
 8003e4e:	bf00      	nop
 8003e50:	20000284 	.word	0x20000284
 8003e54:	e000ed04 	.word	0xe000ed04

08003e58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e5e:	2300      	movs	r3, #0
 8003e60:	607b      	str	r3, [r7, #4]
 8003e62:	e00c      	b.n	8003e7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4a12      	ldr	r2, [pc, #72]	; (8003eb8 <prvInitialiseTaskLists+0x60>)
 8003e70:	4413      	add	r3, r2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fe fd76 	bl	8002964 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	607b      	str	r3, [r7, #4]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b06      	cmp	r3, #6
 8003e82:	d9ef      	bls.n	8003e64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e84:	480d      	ldr	r0, [pc, #52]	; (8003ebc <prvInitialiseTaskLists+0x64>)
 8003e86:	f7fe fd6d 	bl	8002964 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e8a:	480d      	ldr	r0, [pc, #52]	; (8003ec0 <prvInitialiseTaskLists+0x68>)
 8003e8c:	f7fe fd6a 	bl	8002964 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e90:	480c      	ldr	r0, [pc, #48]	; (8003ec4 <prvInitialiseTaskLists+0x6c>)
 8003e92:	f7fe fd67 	bl	8002964 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e96:	480c      	ldr	r0, [pc, #48]	; (8003ec8 <prvInitialiseTaskLists+0x70>)
 8003e98:	f7fe fd64 	bl	8002964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e9c:	480b      	ldr	r0, [pc, #44]	; (8003ecc <prvInitialiseTaskLists+0x74>)
 8003e9e:	f7fe fd61 	bl	8002964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ea2:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <prvInitialiseTaskLists+0x78>)
 8003ea4:	4a05      	ldr	r2, [pc, #20]	; (8003ebc <prvInitialiseTaskLists+0x64>)
 8003ea6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ea8:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <prvInitialiseTaskLists+0x7c>)
 8003eaa:	4a05      	ldr	r2, [pc, #20]	; (8003ec0 <prvInitialiseTaskLists+0x68>)
 8003eac:	601a      	str	r2, [r3, #0]
}
 8003eae:	bf00      	nop
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20000284 	.word	0x20000284
 8003ebc:	20000310 	.word	0x20000310
 8003ec0:	20000324 	.word	0x20000324
 8003ec4:	20000340 	.word	0x20000340
 8003ec8:	20000354 	.word	0x20000354
 8003ecc:	2000036c 	.word	0x2000036c
 8003ed0:	20000338 	.word	0x20000338
 8003ed4:	2000033c 	.word	0x2000033c

08003ed8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ede:	e019      	b.n	8003f14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ee0:	f000 fbcc 	bl	800467c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ee4:	4b0f      	ldr	r3, [pc, #60]	; (8003f24 <prvCheckTasksWaitingTermination+0x4c>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fe fdc1 	bl	8002a78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ef6:	4b0c      	ldr	r3, [pc, #48]	; (8003f28 <prvCheckTasksWaitingTermination+0x50>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	4a0a      	ldr	r2, [pc, #40]	; (8003f28 <prvCheckTasksWaitingTermination+0x50>)
 8003efe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003f00:	4b0a      	ldr	r3, [pc, #40]	; (8003f2c <prvCheckTasksWaitingTermination+0x54>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	4a09      	ldr	r2, [pc, #36]	; (8003f2c <prvCheckTasksWaitingTermination+0x54>)
 8003f08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003f0a:	f000 fbe5 	bl	80046d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f80e 	bl	8003f30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f14:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <prvCheckTasksWaitingTermination+0x54>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e1      	bne.n	8003ee0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f1c:	bf00      	nop
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	20000354 	.word	0x20000354
 8003f28:	20000380 	.word	0x20000380
 8003f2c:	20000368 	.word	0x20000368

08003f30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d108      	bne.n	8003f54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fd74 	bl	8004a34 <vPortFree>
				vPortFree( pxTCB );
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 fd71 	bl	8004a34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f52:	e017      	b.n	8003f84 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d103      	bne.n	8003f66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fd68 	bl	8004a34 <vPortFree>
	}
 8003f64:	e00e      	b.n	8003f84 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d009      	beq.n	8003f84 <prvDeleteTCB+0x54>
 8003f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	e7fe      	b.n	8003f82 <prvDeleteTCB+0x52>
	}
 8003f84:	bf00      	nop
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f92:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <prvResetNextTaskUnblockTime+0x38>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d104      	bne.n	8003fa6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <prvResetNextTaskUnblockTime+0x3c>)
 8003f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003fa4:	e008      	b.n	8003fb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fa6:	4b07      	ldr	r3, [pc, #28]	; (8003fc4 <prvResetNextTaskUnblockTime+0x38>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	4a04      	ldr	r2, [pc, #16]	; (8003fc8 <prvResetNextTaskUnblockTime+0x3c>)
 8003fb6:	6013      	str	r3, [r2, #0]
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	20000338 	.word	0x20000338
 8003fc8:	200003a0 	.word	0x200003a0

08003fcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003fd2:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <xTaskGetSchedulerState+0x34>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d102      	bne.n	8003fe0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	607b      	str	r3, [r7, #4]
 8003fde:	e008      	b.n	8003ff2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fe0:	4b08      	ldr	r3, [pc, #32]	; (8004004 <xTaskGetSchedulerState+0x38>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d102      	bne.n	8003fee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	607b      	str	r3, [r7, #4]
 8003fec:	e001      	b.n	8003ff2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ff2:	687b      	ldr	r3, [r7, #4]
	}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	2000038c 	.word	0x2000038c
 8004004:	200003a8 	.word	0x200003a8

08004008 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004014:	2300      	movs	r3, #0
 8004016:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d069      	beq.n	80040f2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004022:	4b36      	ldr	r3, [pc, #216]	; (80040fc <xTaskPriorityInherit+0xf4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	429a      	cmp	r2, r3
 800402a:	d259      	bcs.n	80040e0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	db06      	blt.n	8004042 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004034:	4b31      	ldr	r3, [pc, #196]	; (80040fc <xTaskPriorityInherit+0xf4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	f1c3 0207 	rsb	r2, r3, #7
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	6959      	ldr	r1, [r3, #20]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4a2b      	ldr	r2, [pc, #172]	; (8004100 <xTaskPriorityInherit+0xf8>)
 8004054:	4413      	add	r3, r2
 8004056:	4299      	cmp	r1, r3
 8004058:	d13a      	bne.n	80040d0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	3304      	adds	r3, #4
 800405e:	4618      	mov	r0, r3
 8004060:	f7fe fd0a 	bl	8002a78 <uxListRemove>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d115      	bne.n	8004096 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406e:	4924      	ldr	r1, [pc, #144]	; (8004100 <xTaskPriorityInherit+0xf8>)
 8004070:	4613      	mov	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10a      	bne.n	8004096 <xTaskPriorityInherit+0x8e>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	2201      	movs	r2, #1
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	43da      	mvns	r2, r3
 800408c:	4b1d      	ldr	r3, [pc, #116]	; (8004104 <xTaskPriorityInherit+0xfc>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4013      	ands	r3, r2
 8004092:	4a1c      	ldr	r2, [pc, #112]	; (8004104 <xTaskPriorityInherit+0xfc>)
 8004094:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004096:	4b19      	ldr	r3, [pc, #100]	; (80040fc <xTaskPriorityInherit+0xf4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	2201      	movs	r2, #1
 80040a6:	409a      	lsls	r2, r3
 80040a8:	4b16      	ldr	r3, [pc, #88]	; (8004104 <xTaskPriorityInherit+0xfc>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	4a15      	ldr	r2, [pc, #84]	; (8004104 <xTaskPriorityInherit+0xfc>)
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4a10      	ldr	r2, [pc, #64]	; (8004100 <xTaskPriorityInherit+0xf8>)
 80040c0:	441a      	add	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	3304      	adds	r3, #4
 80040c6:	4619      	mov	r1, r3
 80040c8:	4610      	mov	r0, r2
 80040ca:	f7fe fc78 	bl	80029be <vListInsertEnd>
 80040ce:	e004      	b.n	80040da <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80040d0:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <xTaskPriorityInherit+0xf4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80040da:	2301      	movs	r3, #1
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	e008      	b.n	80040f2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040e4:	4b05      	ldr	r3, [pc, #20]	; (80040fc <xTaskPriorityInherit+0xf4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d201      	bcs.n	80040f2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80040ee:	2301      	movs	r3, #1
 80040f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80040f2:	68fb      	ldr	r3, [r7, #12]
	}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20000280 	.word	0x20000280
 8004100:	20000284 	.word	0x20000284
 8004104:	20000388 	.word	0x20000388

08004108 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d06c      	beq.n	80041f8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800411e:	4b39      	ldr	r3, [pc, #228]	; (8004204 <xTaskPriorityDisinherit+0xfc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	429a      	cmp	r2, r3
 8004126:	d009      	beq.n	800413c <xTaskPriorityDisinherit+0x34>
 8004128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	e7fe      	b.n	800413a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004140:	2b00      	cmp	r3, #0
 8004142:	d109      	bne.n	8004158 <xTaskPriorityDisinherit+0x50>
 8004144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004148:	f383 8811 	msr	BASEPRI, r3
 800414c:	f3bf 8f6f 	isb	sy
 8004150:	f3bf 8f4f 	dsb	sy
 8004154:	60bb      	str	r3, [r7, #8]
 8004156:	e7fe      	b.n	8004156 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800415c:	1e5a      	subs	r2, r3, #1
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416a:	429a      	cmp	r2, r3
 800416c:	d044      	beq.n	80041f8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004172:	2b00      	cmp	r3, #0
 8004174:	d140      	bne.n	80041f8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	3304      	adds	r3, #4
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe fc7c 	bl	8002a78 <uxListRemove>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d115      	bne.n	80041b2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418a:	491f      	ldr	r1, [pc, #124]	; (8004208 <xTaskPriorityDisinherit+0x100>)
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10a      	bne.n	80041b2 <xTaskPriorityDisinherit+0xaa>
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	2201      	movs	r2, #1
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	43da      	mvns	r2, r3
 80041a8:	4b18      	ldr	r3, [pc, #96]	; (800420c <xTaskPriorityDisinherit+0x104>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4013      	ands	r3, r2
 80041ae:	4a17      	ldr	r2, [pc, #92]	; (800420c <xTaskPriorityDisinherit+0x104>)
 80041b0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	f1c3 0207 	rsb	r2, r3, #7
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	2201      	movs	r2, #1
 80041cc:	409a      	lsls	r2, r3
 80041ce:	4b0f      	ldr	r3, [pc, #60]	; (800420c <xTaskPriorityDisinherit+0x104>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	4a0d      	ldr	r2, [pc, #52]	; (800420c <xTaskPriorityDisinherit+0x104>)
 80041d6:	6013      	str	r3, [r2, #0]
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4a08      	ldr	r2, [pc, #32]	; (8004208 <xTaskPriorityDisinherit+0x100>)
 80041e6:	441a      	add	r2, r3
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	3304      	adds	r3, #4
 80041ec:	4619      	mov	r1, r3
 80041ee:	4610      	mov	r0, r2
 80041f0:	f7fe fbe5 	bl	80029be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80041f4:	2301      	movs	r3, #1
 80041f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041f8:	697b      	ldr	r3, [r7, #20]
	}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20000280 	.word	0x20000280
 8004208:	20000284 	.word	0x20000284
 800420c:	20000388 	.word	0x20000388

08004210 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800421e:	2301      	movs	r3, #1
 8004220:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 8081 	beq.w	800432c <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422e:	2b00      	cmp	r3, #0
 8004230:	d109      	bne.n	8004246 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8004232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	e7fe      	b.n	8004244 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d902      	bls.n	8004256 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	61fb      	str	r3, [r7, #28]
 8004254:	e002      	b.n	800425c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	69fa      	ldr	r2, [r7, #28]
 8004262:	429a      	cmp	r2, r3
 8004264:	d062      	beq.n	800432c <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	429a      	cmp	r2, r3
 800426e:	d15d      	bne.n	800432c <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004270:	4b30      	ldr	r3, [pc, #192]	; (8004334 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	429a      	cmp	r2, r3
 8004278:	d109      	bne.n	800428e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800427a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427e:	f383 8811 	msr	BASEPRI, r3
 8004282:	f3bf 8f6f 	isb	sy
 8004286:	f3bf 8f4f 	dsb	sy
 800428a:	60bb      	str	r3, [r7, #8]
 800428c:	e7fe      	b.n	800428c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004292:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	db04      	blt.n	80042ac <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	f1c3 0207 	rsb	r2, r3, #7
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	6959      	ldr	r1, [r3, #20]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4613      	mov	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4a1f      	ldr	r2, [pc, #124]	; (8004338 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80042bc:	4413      	add	r3, r2
 80042be:	4299      	cmp	r1, r3
 80042c0:	d134      	bne.n	800432c <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	3304      	adds	r3, #4
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fe fbd6 	bl	8002a78 <uxListRemove>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d115      	bne.n	80042fe <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d6:	4918      	ldr	r1, [pc, #96]	; (8004338 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80042d8:	4613      	mov	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10a      	bne.n	80042fe <vTaskPriorityDisinheritAfterTimeout+0xee>
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	2201      	movs	r2, #1
 80042ee:	fa02 f303 	lsl.w	r3, r2, r3
 80042f2:	43da      	mvns	r2, r3
 80042f4:	4b11      	ldr	r3, [pc, #68]	; (800433c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4013      	ands	r3, r2
 80042fa:	4a10      	ldr	r2, [pc, #64]	; (800433c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80042fc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004302:	2201      	movs	r2, #1
 8004304:	409a      	lsls	r2, r3
 8004306:	4b0d      	ldr	r3, [pc, #52]	; (800433c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4313      	orrs	r3, r2
 800430c:	4a0b      	ldr	r2, [pc, #44]	; (800433c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004314:	4613      	mov	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4a06      	ldr	r2, [pc, #24]	; (8004338 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800431e:	441a      	add	r2, r3
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	3304      	adds	r3, #4
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f7fe fb49 	bl	80029be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800432c:	bf00      	nop
 800432e:	3720      	adds	r7, #32
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	20000280 	.word	0x20000280
 8004338:	20000284 	.word	0x20000284
 800433c:	20000388 	.word	0x20000388

08004340 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004344:	4b07      	ldr	r3, [pc, #28]	; (8004364 <pvTaskIncrementMutexHeldCount+0x24>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d004      	beq.n	8004356 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <pvTaskIncrementMutexHeldCount+0x24>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004352:	3201      	adds	r2, #1
 8004354:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004356:	4b03      	ldr	r3, [pc, #12]	; (8004364 <pvTaskIncrementMutexHeldCount+0x24>)
 8004358:	681b      	ldr	r3, [r3, #0]
	}
 800435a:	4618      	mov	r0, r3
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	20000280 	.word	0x20000280

08004368 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004372:	4b29      	ldr	r3, [pc, #164]	; (8004418 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004378:	4b28      	ldr	r3, [pc, #160]	; (800441c <prvAddCurrentTaskToDelayedList+0xb4>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3304      	adds	r3, #4
 800437e:	4618      	mov	r0, r3
 8004380:	f7fe fb7a 	bl	8002a78 <uxListRemove>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10b      	bne.n	80043a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800438a:	4b24      	ldr	r3, [pc, #144]	; (800441c <prvAddCurrentTaskToDelayedList+0xb4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	2201      	movs	r2, #1
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43da      	mvns	r2, r3
 8004398:	4b21      	ldr	r3, [pc, #132]	; (8004420 <prvAddCurrentTaskToDelayedList+0xb8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4013      	ands	r3, r2
 800439e:	4a20      	ldr	r2, [pc, #128]	; (8004420 <prvAddCurrentTaskToDelayedList+0xb8>)
 80043a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a8:	d10a      	bne.n	80043c0 <prvAddCurrentTaskToDelayedList+0x58>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d007      	beq.n	80043c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043b0:	4b1a      	ldr	r3, [pc, #104]	; (800441c <prvAddCurrentTaskToDelayedList+0xb4>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3304      	adds	r3, #4
 80043b6:	4619      	mov	r1, r3
 80043b8:	481a      	ldr	r0, [pc, #104]	; (8004424 <prvAddCurrentTaskToDelayedList+0xbc>)
 80043ba:	f7fe fb00 	bl	80029be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043be:	e026      	b.n	800440e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4413      	add	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043c8:	4b14      	ldr	r3, [pc, #80]	; (800441c <prvAddCurrentTaskToDelayedList+0xb4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d209      	bcs.n	80043ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043d8:	4b13      	ldr	r3, [pc, #76]	; (8004428 <prvAddCurrentTaskToDelayedList+0xc0>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	4b0f      	ldr	r3, [pc, #60]	; (800441c <prvAddCurrentTaskToDelayedList+0xb4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3304      	adds	r3, #4
 80043e2:	4619      	mov	r1, r3
 80043e4:	4610      	mov	r0, r2
 80043e6:	f7fe fb0e 	bl	8002a06 <vListInsert>
}
 80043ea:	e010      	b.n	800440e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043ec:	4b0f      	ldr	r3, [pc, #60]	; (800442c <prvAddCurrentTaskToDelayedList+0xc4>)
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	4b0a      	ldr	r3, [pc, #40]	; (800441c <prvAddCurrentTaskToDelayedList+0xb4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3304      	adds	r3, #4
 80043f6:	4619      	mov	r1, r3
 80043f8:	4610      	mov	r0, r2
 80043fa:	f7fe fb04 	bl	8002a06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043fe:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	429a      	cmp	r2, r3
 8004406:	d202      	bcs.n	800440e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004408:	4a09      	ldr	r2, [pc, #36]	; (8004430 <prvAddCurrentTaskToDelayedList+0xc8>)
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	6013      	str	r3, [r2, #0]
}
 800440e:	bf00      	nop
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	20000384 	.word	0x20000384
 800441c:	20000280 	.word	0x20000280
 8004420:	20000388 	.word	0x20000388
 8004424:	2000036c 	.word	0x2000036c
 8004428:	2000033c 	.word	0x2000033c
 800442c:	20000338 	.word	0x20000338
 8004430:	200003a0 	.word	0x200003a0

08004434 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3b04      	subs	r3, #4
 8004444:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800444c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3b04      	subs	r3, #4
 8004452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f023 0201 	bic.w	r2, r3, #1
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3b04      	subs	r3, #4
 8004462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004464:	4a0c      	ldr	r2, [pc, #48]	; (8004498 <pxPortInitialiseStack+0x64>)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	3b14      	subs	r3, #20
 800446e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3b04      	subs	r3, #4
 800447a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f06f 0202 	mvn.w	r2, #2
 8004482:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	3b20      	subs	r3, #32
 8004488:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800448a:	68fb      	ldr	r3, [r7, #12]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	0800449d 	.word	0x0800449d

0800449c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80044a2:	2300      	movs	r3, #0
 80044a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80044a6:	4b11      	ldr	r3, [pc, #68]	; (80044ec <prvTaskExitError+0x50>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ae:	d009      	beq.n	80044c4 <prvTaskExitError+0x28>
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	e7fe      	b.n	80044c2 <prvTaskExitError+0x26>
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80044d6:	bf00      	nop
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0fc      	beq.n	80044d8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80044de:	bf00      	nop
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	2000000c 	.word	0x2000000c

080044f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80044f0:	4b07      	ldr	r3, [pc, #28]	; (8004510 <pxCurrentTCBConst2>)
 80044f2:	6819      	ldr	r1, [r3, #0]
 80044f4:	6808      	ldr	r0, [r1, #0]
 80044f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fa:	f380 8809 	msr	PSP, r0
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f04f 0000 	mov.w	r0, #0
 8004506:	f380 8811 	msr	BASEPRI, r0
 800450a:	4770      	bx	lr
 800450c:	f3af 8000 	nop.w

08004510 <pxCurrentTCBConst2>:
 8004510:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop

08004518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004518:	4808      	ldr	r0, [pc, #32]	; (800453c <prvPortStartFirstTask+0x24>)
 800451a:	6800      	ldr	r0, [r0, #0]
 800451c:	6800      	ldr	r0, [r0, #0]
 800451e:	f380 8808 	msr	MSP, r0
 8004522:	f04f 0000 	mov.w	r0, #0
 8004526:	f380 8814 	msr	CONTROL, r0
 800452a:	b662      	cpsie	i
 800452c:	b661      	cpsie	f
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	df00      	svc	0
 8004538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800453a:	bf00      	nop
 800453c:	e000ed08 	.word	0xe000ed08

08004540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004546:	4b44      	ldr	r3, [pc, #272]	; (8004658 <xPortStartScheduler+0x118>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a44      	ldr	r2, [pc, #272]	; (800465c <xPortStartScheduler+0x11c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d109      	bne.n	8004564 <xPortStartScheduler+0x24>
 8004550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	e7fe      	b.n	8004562 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004564:	4b3c      	ldr	r3, [pc, #240]	; (8004658 <xPortStartScheduler+0x118>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a3d      	ldr	r2, [pc, #244]	; (8004660 <xPortStartScheduler+0x120>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d109      	bne.n	8004582 <xPortStartScheduler+0x42>
 800456e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	e7fe      	b.n	8004580 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004582:	4b38      	ldr	r3, [pc, #224]	; (8004664 <xPortStartScheduler+0x124>)
 8004584:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	22ff      	movs	r2, #255	; 0xff
 8004592:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	4b30      	ldr	r3, [pc, #192]	; (8004668 <xPortStartScheduler+0x128>)
 80045a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045aa:	4b30      	ldr	r3, [pc, #192]	; (800466c <xPortStartScheduler+0x12c>)
 80045ac:	2207      	movs	r2, #7
 80045ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045b0:	e009      	b.n	80045c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80045b2:	4b2e      	ldr	r3, [pc, #184]	; (800466c <xPortStartScheduler+0x12c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	4a2c      	ldr	r2, [pc, #176]	; (800466c <xPortStartScheduler+0x12c>)
 80045ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045c6:	78fb      	ldrb	r3, [r7, #3]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ce:	2b80      	cmp	r3, #128	; 0x80
 80045d0:	d0ef      	beq.n	80045b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045d2:	4b26      	ldr	r3, [pc, #152]	; (800466c <xPortStartScheduler+0x12c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f1c3 0307 	rsb	r3, r3, #7
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d009      	beq.n	80045f2 <xPortStartScheduler+0xb2>
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	60bb      	str	r3, [r7, #8]
 80045f0:	e7fe      	b.n	80045f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045f2:	4b1e      	ldr	r3, [pc, #120]	; (800466c <xPortStartScheduler+0x12c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	4a1c      	ldr	r2, [pc, #112]	; (800466c <xPortStartScheduler+0x12c>)
 80045fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045fc:	4b1b      	ldr	r3, [pc, #108]	; (800466c <xPortStartScheduler+0x12c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004604:	4a19      	ldr	r2, [pc, #100]	; (800466c <xPortStartScheduler+0x12c>)
 8004606:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	b2da      	uxtb	r2, r3
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004610:	4b17      	ldr	r3, [pc, #92]	; (8004670 <xPortStartScheduler+0x130>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a16      	ldr	r2, [pc, #88]	; (8004670 <xPortStartScheduler+0x130>)
 8004616:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800461a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800461c:	4b14      	ldr	r3, [pc, #80]	; (8004670 <xPortStartScheduler+0x130>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a13      	ldr	r2, [pc, #76]	; (8004670 <xPortStartScheduler+0x130>)
 8004622:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004626:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004628:	f000 f8d6 	bl	80047d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800462c:	4b11      	ldr	r3, [pc, #68]	; (8004674 <xPortStartScheduler+0x134>)
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004632:	f000 f8f5 	bl	8004820 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004636:	4b10      	ldr	r3, [pc, #64]	; (8004678 <xPortStartScheduler+0x138>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a0f      	ldr	r2, [pc, #60]	; (8004678 <xPortStartScheduler+0x138>)
 800463c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004640:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004642:	f7ff ff69 	bl	8004518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004646:	f7ff fa8d 	bl	8003b64 <vTaskSwitchContext>
	prvTaskExitError();
 800464a:	f7ff ff27 	bl	800449c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	e000ed00 	.word	0xe000ed00
 800465c:	410fc271 	.word	0x410fc271
 8004660:	410fc270 	.word	0x410fc270
 8004664:	e000e400 	.word	0xe000e400
 8004668:	200003ac 	.word	0x200003ac
 800466c:	200003b0 	.word	0x200003b0
 8004670:	e000ed20 	.word	0xe000ed20
 8004674:	2000000c 	.word	0x2000000c
 8004678:	e000ef34 	.word	0xe000ef34

0800467c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004694:	4b0e      	ldr	r3, [pc, #56]	; (80046d0 <vPortEnterCritical+0x54>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3301      	adds	r3, #1
 800469a:	4a0d      	ldr	r2, [pc, #52]	; (80046d0 <vPortEnterCritical+0x54>)
 800469c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800469e:	4b0c      	ldr	r3, [pc, #48]	; (80046d0 <vPortEnterCritical+0x54>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d10e      	bne.n	80046c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046a6:	4b0b      	ldr	r3, [pc, #44]	; (80046d4 <vPortEnterCritical+0x58>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d009      	beq.n	80046c4 <vPortEnterCritical+0x48>
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	603b      	str	r3, [r7, #0]
 80046c2:	e7fe      	b.n	80046c2 <vPortEnterCritical+0x46>
	}
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	2000000c 	.word	0x2000000c
 80046d4:	e000ed04 	.word	0xe000ed04

080046d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80046de:	4b11      	ldr	r3, [pc, #68]	; (8004724 <vPortExitCritical+0x4c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d109      	bne.n	80046fa <vPortExitCritical+0x22>
 80046e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	607b      	str	r3, [r7, #4]
 80046f8:	e7fe      	b.n	80046f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80046fa:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <vPortExitCritical+0x4c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3b01      	subs	r3, #1
 8004700:	4a08      	ldr	r2, [pc, #32]	; (8004724 <vPortExitCritical+0x4c>)
 8004702:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004704:	4b07      	ldr	r3, [pc, #28]	; (8004724 <vPortExitCritical+0x4c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d104      	bne.n	8004716 <vPortExitCritical+0x3e>
 800470c:	2300      	movs	r3, #0
 800470e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	2000000c 	.word	0x2000000c
	...

08004730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004730:	f3ef 8009 	mrs	r0, PSP
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	4b15      	ldr	r3, [pc, #84]	; (8004790 <pxCurrentTCBConst>)
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	f01e 0f10 	tst.w	lr, #16
 8004740:	bf08      	it	eq
 8004742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800474a:	6010      	str	r0, [r2, #0]
 800474c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004750:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004754:	f380 8811 	msr	BASEPRI, r0
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f7ff fa00 	bl	8003b64 <vTaskSwitchContext>
 8004764:	f04f 0000 	mov.w	r0, #0
 8004768:	f380 8811 	msr	BASEPRI, r0
 800476c:	bc09      	pop	{r0, r3}
 800476e:	6819      	ldr	r1, [r3, #0]
 8004770:	6808      	ldr	r0, [r1, #0]
 8004772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004776:	f01e 0f10 	tst.w	lr, #16
 800477a:	bf08      	it	eq
 800477c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004780:	f380 8809 	msr	PSP, r0
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	f3af 8000 	nop.w

08004790 <pxCurrentTCBConst>:
 8004790:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop

08004798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
	__asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80047b0:	f7ff f920 	bl	80039f4 <xTaskIncrementTick>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047ba:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <SysTick_Handler+0x3c>)
 80047bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	2300      	movs	r3, #0
 80047c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80047cc:	bf00      	nop
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	e000ed04 	.word	0xe000ed04

080047d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047dc:	4b0b      	ldr	r3, [pc, #44]	; (800480c <vPortSetupTimerInterrupt+0x34>)
 80047de:	2200      	movs	r2, #0
 80047e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047e2:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <vPortSetupTimerInterrupt+0x38>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047e8:	4b0a      	ldr	r3, [pc, #40]	; (8004814 <vPortSetupTimerInterrupt+0x3c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a0a      	ldr	r2, [pc, #40]	; (8004818 <vPortSetupTimerInterrupt+0x40>)
 80047ee:	fba2 2303 	umull	r2, r3, r2, r3
 80047f2:	099b      	lsrs	r3, r3, #6
 80047f4:	4a09      	ldr	r2, [pc, #36]	; (800481c <vPortSetupTimerInterrupt+0x44>)
 80047f6:	3b01      	subs	r3, #1
 80047f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047fa:	4b04      	ldr	r3, [pc, #16]	; (800480c <vPortSetupTimerInterrupt+0x34>)
 80047fc:	2207      	movs	r2, #7
 80047fe:	601a      	str	r2, [r3, #0]
}
 8004800:	bf00      	nop
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	e000e010 	.word	0xe000e010
 8004810:	e000e018 	.word	0xe000e018
 8004814:	20000000 	.word	0x20000000
 8004818:	10624dd3 	.word	0x10624dd3
 800481c:	e000e014 	.word	0xe000e014

08004820 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004820:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004830 <vPortEnableVFP+0x10>
 8004824:	6801      	ldr	r1, [r0, #0]
 8004826:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800482a:	6001      	str	r1, [r0, #0]
 800482c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800482e:	bf00      	nop
 8004830:	e000ed88 	.word	0xe000ed88

08004834 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800483a:	f3ef 8305 	mrs	r3, IPSR
 800483e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b0f      	cmp	r3, #15
 8004844:	d913      	bls.n	800486e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004846:	4a16      	ldr	r2, [pc, #88]	; (80048a0 <vPortValidateInterruptPriority+0x6c>)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004850:	4b14      	ldr	r3, [pc, #80]	; (80048a4 <vPortValidateInterruptPriority+0x70>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	7afa      	ldrb	r2, [r7, #11]
 8004856:	429a      	cmp	r2, r3
 8004858:	d209      	bcs.n	800486e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	607b      	str	r3, [r7, #4]
 800486c:	e7fe      	b.n	800486c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800486e:	4b0e      	ldr	r3, [pc, #56]	; (80048a8 <vPortValidateInterruptPriority+0x74>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004876:	4b0d      	ldr	r3, [pc, #52]	; (80048ac <vPortValidateInterruptPriority+0x78>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d909      	bls.n	8004892 <vPortValidateInterruptPriority+0x5e>
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	e7fe      	b.n	8004890 <vPortValidateInterruptPriority+0x5c>
	}
 8004892:	bf00      	nop
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	e000e3f0 	.word	0xe000e3f0
 80048a4:	200003ac 	.word	0x200003ac
 80048a8:	e000ed0c 	.word	0xe000ed0c
 80048ac:	200003b0 	.word	0x200003b0

080048b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08a      	sub	sp, #40	; 0x28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80048bc:	f7fe fff0 	bl	80038a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80048c0:	4b57      	ldr	r3, [pc, #348]	; (8004a20 <pvPortMalloc+0x170>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80048c8:	f000 f90c 	bl	8004ae4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80048cc:	4b55      	ldr	r3, [pc, #340]	; (8004a24 <pvPortMalloc+0x174>)
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f040 808c 	bne.w	80049f2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01c      	beq.n	800491a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80048e0:	2208      	movs	r2, #8
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4413      	add	r3, r2
 80048e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d013      	beq.n	800491a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f023 0307 	bic.w	r3, r3, #7
 80048f8:	3308      	adds	r3, #8
 80048fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	2b00      	cmp	r3, #0
 8004904:	d009      	beq.n	800491a <pvPortMalloc+0x6a>
 8004906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	e7fe      	b.n	8004918 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d068      	beq.n	80049f2 <pvPortMalloc+0x142>
 8004920:	4b41      	ldr	r3, [pc, #260]	; (8004a28 <pvPortMalloc+0x178>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	429a      	cmp	r2, r3
 8004928:	d863      	bhi.n	80049f2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800492a:	4b40      	ldr	r3, [pc, #256]	; (8004a2c <pvPortMalloc+0x17c>)
 800492c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800492e:	4b3f      	ldr	r3, [pc, #252]	; (8004a2c <pvPortMalloc+0x17c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004934:	e004      	b.n	8004940 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	429a      	cmp	r2, r3
 8004948:	d903      	bls.n	8004952 <pvPortMalloc+0xa2>
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f1      	bne.n	8004936 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004952:	4b33      	ldr	r3, [pc, #204]	; (8004a20 <pvPortMalloc+0x170>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004958:	429a      	cmp	r2, r3
 800495a:	d04a      	beq.n	80049f2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2208      	movs	r2, #8
 8004962:	4413      	add	r3, r2
 8004964:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	1ad2      	subs	r2, r2, r3
 8004976:	2308      	movs	r3, #8
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	429a      	cmp	r2, r3
 800497c:	d91e      	bls.n	80049bc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800497e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4413      	add	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	2b00      	cmp	r3, #0
 800498e:	d009      	beq.n	80049a4 <pvPortMalloc+0xf4>
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	e7fe      	b.n	80049a2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	1ad2      	subs	r2, r2, r3
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049b6:	69b8      	ldr	r0, [r7, #24]
 80049b8:	f000 f8f6 	bl	8004ba8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049bc:	4b1a      	ldr	r3, [pc, #104]	; (8004a28 <pvPortMalloc+0x178>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	4a18      	ldr	r2, [pc, #96]	; (8004a28 <pvPortMalloc+0x178>)
 80049c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049ca:	4b17      	ldr	r3, [pc, #92]	; (8004a28 <pvPortMalloc+0x178>)
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	4b18      	ldr	r3, [pc, #96]	; (8004a30 <pvPortMalloc+0x180>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d203      	bcs.n	80049de <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049d6:	4b14      	ldr	r3, [pc, #80]	; (8004a28 <pvPortMalloc+0x178>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a15      	ldr	r2, [pc, #84]	; (8004a30 <pvPortMalloc+0x180>)
 80049dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	4b10      	ldr	r3, [pc, #64]	; (8004a24 <pvPortMalloc+0x174>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80049f2:	f7fe ff63 	bl	80038bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d009      	beq.n	8004a14 <pvPortMalloc+0x164>
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	e7fe      	b.n	8004a12 <pvPortMalloc+0x162>
	return pvReturn;
 8004a14:	69fb      	ldr	r3, [r7, #28]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3728      	adds	r7, #40	; 0x28
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20003fbc 	.word	0x20003fbc
 8004a24:	20003fc8 	.word	0x20003fc8
 8004a28:	20003fc0 	.word	0x20003fc0
 8004a2c:	20003fb4 	.word	0x20003fb4
 8004a30:	20003fc4 	.word	0x20003fc4

08004a34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d046      	beq.n	8004ad4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a46:	2308      	movs	r3, #8
 8004a48:	425b      	negs	r3, r3
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	4b20      	ldr	r3, [pc, #128]	; (8004adc <vPortFree+0xa8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d109      	bne.n	8004a76 <vPortFree+0x42>
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	e7fe      	b.n	8004a74 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d009      	beq.n	8004a92 <vPortFree+0x5e>
 8004a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	60bb      	str	r3, [r7, #8]
 8004a90:	e7fe      	b.n	8004a90 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	4b11      	ldr	r3, [pc, #68]	; (8004adc <vPortFree+0xa8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d019      	beq.n	8004ad4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d115      	bne.n	8004ad4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <vPortFree+0xa8>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	401a      	ands	r2, r3
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ab8:	f7fe fef2 	bl	80038a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <vPortFree+0xac>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	4a06      	ldr	r2, [pc, #24]	; (8004ae0 <vPortFree+0xac>)
 8004ac8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004aca:	6938      	ldr	r0, [r7, #16]
 8004acc:	f000 f86c 	bl	8004ba8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ad0:	f7fe fef4 	bl	80038bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ad4:	bf00      	nop
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	20003fc8 	.word	0x20003fc8
 8004ae0:	20003fc0 	.word	0x20003fc0

08004ae4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004aea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004aee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004af0:	4b27      	ldr	r3, [pc, #156]	; (8004b90 <prvHeapInit+0xac>)
 8004af2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00c      	beq.n	8004b18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3307      	adds	r3, #7
 8004b02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0307 	bic.w	r3, r3, #7
 8004b0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	4a1f      	ldr	r2, [pc, #124]	; (8004b90 <prvHeapInit+0xac>)
 8004b14:	4413      	add	r3, r2
 8004b16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b1c:	4a1d      	ldr	r2, [pc, #116]	; (8004b94 <prvHeapInit+0xb0>)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b22:	4b1c      	ldr	r3, [pc, #112]	; (8004b94 <prvHeapInit+0xb0>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b30:	2208      	movs	r2, #8
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1a9b      	subs	r3, r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 0307 	bic.w	r3, r3, #7
 8004b3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4a15      	ldr	r2, [pc, #84]	; (8004b98 <prvHeapInit+0xb4>)
 8004b44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b46:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <prvHeapInit+0xb4>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b4e:	4b12      	ldr	r3, [pc, #72]	; (8004b98 <prvHeapInit+0xb4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	1ad2      	subs	r2, r2, r3
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b64:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <prvHeapInit+0xb4>)
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	4a0a      	ldr	r2, [pc, #40]	; (8004b9c <prvHeapInit+0xb8>)
 8004b72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	4a09      	ldr	r2, [pc, #36]	; (8004ba0 <prvHeapInit+0xbc>)
 8004b7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b7c:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <prvHeapInit+0xc0>)
 8004b7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b82:	601a      	str	r2, [r3, #0]
}
 8004b84:	bf00      	nop
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	200003b4 	.word	0x200003b4
 8004b94:	20003fb4 	.word	0x20003fb4
 8004b98:	20003fbc 	.word	0x20003fbc
 8004b9c:	20003fc4 	.word	0x20003fc4
 8004ba0:	20003fc0 	.word	0x20003fc0
 8004ba4:	20003fc8 	.word	0x20003fc8

08004ba8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004bb0:	4b28      	ldr	r3, [pc, #160]	; (8004c54 <prvInsertBlockIntoFreeList+0xac>)
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	e002      	b.n	8004bbc <prvInsertBlockIntoFreeList+0x14>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d8f7      	bhi.n	8004bb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d108      	bne.n	8004bea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	441a      	add	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	441a      	add	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d118      	bne.n	8004c30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4b15      	ldr	r3, [pc, #84]	; (8004c58 <prvInsertBlockIntoFreeList+0xb0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d00d      	beq.n	8004c26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	441a      	add	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	e008      	b.n	8004c38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c26:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <prvInsertBlockIntoFreeList+0xb0>)
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	e003      	b.n	8004c38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d002      	beq.n	8004c46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c46:	bf00      	nop
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	20003fb4 	.word	0x20003fb4
 8004c58:	20003fbc 	.word	0x20003fbc

08004c5c <__libc_init_array>:
 8004c5c:	b570      	push	{r4, r5, r6, lr}
 8004c5e:	4e0d      	ldr	r6, [pc, #52]	; (8004c94 <__libc_init_array+0x38>)
 8004c60:	4c0d      	ldr	r4, [pc, #52]	; (8004c98 <__libc_init_array+0x3c>)
 8004c62:	1ba4      	subs	r4, r4, r6
 8004c64:	10a4      	asrs	r4, r4, #2
 8004c66:	2500      	movs	r5, #0
 8004c68:	42a5      	cmp	r5, r4
 8004c6a:	d109      	bne.n	8004c80 <__libc_init_array+0x24>
 8004c6c:	4e0b      	ldr	r6, [pc, #44]	; (8004c9c <__libc_init_array+0x40>)
 8004c6e:	4c0c      	ldr	r4, [pc, #48]	; (8004ca0 <__libc_init_array+0x44>)
 8004c70:	f000 f82c 	bl	8004ccc <_init>
 8004c74:	1ba4      	subs	r4, r4, r6
 8004c76:	10a4      	asrs	r4, r4, #2
 8004c78:	2500      	movs	r5, #0
 8004c7a:	42a5      	cmp	r5, r4
 8004c7c:	d105      	bne.n	8004c8a <__libc_init_array+0x2e>
 8004c7e:	bd70      	pop	{r4, r5, r6, pc}
 8004c80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c84:	4798      	blx	r3
 8004c86:	3501      	adds	r5, #1
 8004c88:	e7ee      	b.n	8004c68 <__libc_init_array+0xc>
 8004c8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c8e:	4798      	blx	r3
 8004c90:	3501      	adds	r5, #1
 8004c92:	e7f2      	b.n	8004c7a <__libc_init_array+0x1e>
 8004c94:	08004db8 	.word	0x08004db8
 8004c98:	08004db8 	.word	0x08004db8
 8004c9c:	08004db8 	.word	0x08004db8
 8004ca0:	08004dbc 	.word	0x08004dbc

08004ca4 <memcpy>:
 8004ca4:	b510      	push	{r4, lr}
 8004ca6:	1e43      	subs	r3, r0, #1
 8004ca8:	440a      	add	r2, r1
 8004caa:	4291      	cmp	r1, r2
 8004cac:	d100      	bne.n	8004cb0 <memcpy+0xc>
 8004cae:	bd10      	pop	{r4, pc}
 8004cb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cb8:	e7f7      	b.n	8004caa <memcpy+0x6>

08004cba <memset>:
 8004cba:	4402      	add	r2, r0
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d100      	bne.n	8004cc4 <memset+0xa>
 8004cc2:	4770      	bx	lr
 8004cc4:	f803 1b01 	strb.w	r1, [r3], #1
 8004cc8:	e7f9      	b.n	8004cbe <memset+0x4>
	...

08004ccc <_init>:
 8004ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cce:	bf00      	nop
 8004cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cd2:	bc08      	pop	{r3}
 8004cd4:	469e      	mov	lr, r3
 8004cd6:	4770      	bx	lr

08004cd8 <_fini>:
 8004cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cda:	bf00      	nop
 8004cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cde:	bc08      	pop	{r3}
 8004ce0:	469e      	mov	lr, r3
 8004ce2:	4770      	bx	lr
