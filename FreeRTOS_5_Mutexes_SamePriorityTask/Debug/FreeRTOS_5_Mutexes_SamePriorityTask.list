
FreeRTOS_5_Mutexes_SamePriorityTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004ea4  08004ea4  00014ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f34  08004f34  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004f34  08004f34  00014f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f3c  08004f3c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f3c  08004f3c  00014f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f40  08004f40  00014f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000404c  20000010  08004f54  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000405c  08004f54  0002405c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ff4  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002935  00000000  00000000  00033034  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c8  00000000  00000000  00035970  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f90  00000000  00000000  00036a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022477  00000000  00000000  000379c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cae6  00000000  00000000  00059e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1506  00000000  00000000  00066925  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137e2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045d4  00000000  00000000  00137ea8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e8c 	.word	0x08004e8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004e8c 	.word	0x08004e8c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000080 	.word	0x20000080

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b090      	sub	sp, #64	; 0x40
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fad9 	bl	8000ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f841 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f8d3 	bl	80006cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000526:	f000 f8a7 	bl	8000678 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MutexA */
  osMutexDef(MutexA);
 800052a:	2300      	movs	r3, #0
 800052c:	63bb      	str	r3, [r7, #56]	; 0x38
 800052e:	2300      	movs	r3, #0
 8000530:	63fb      	str	r3, [r7, #60]	; 0x3c
  MutexAHandle = osMutexCreate(osMutex(MutexA));
 8000532:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000536:	4618      	mov	r0, r3
 8000538:	f002 f99d 	bl	8002876 <osMutexCreate>
 800053c:	4602      	mov	r2, r0
 800053e:	4b14      	ldr	r3, [pc, #80]	; (8000590 <main+0x7c>)
 8000540:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskA */
  osThreadDef(TaskA, TaskA_Handle, osPriorityNormal, 0, 128);
 8000542:	4b14      	ldr	r3, [pc, #80]	; (8000594 <main+0x80>)
 8000544:	f107 041c 	add.w	r4, r7, #28
 8000548:	461d      	mov	r5, r3
 800054a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000552:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskAHandle = osThreadCreate(osThread(TaskA), NULL);
 8000556:	f107 031c 	add.w	r3, r7, #28
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f002 f93e 	bl	80027de <osThreadCreate>
 8000562:	4602      	mov	r2, r0
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <main+0x84>)
 8000566:	601a      	str	r2, [r3, #0]

  /* definition and creation of TaskB */
  osThreadDef(TaskB, TaskB_Handle, osPriorityNormal, 0, 128);
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <main+0x88>)
 800056a:	463c      	mov	r4, r7
 800056c:	461d      	mov	r5, r3
 800056e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000572:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000576:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskBHandle = osThreadCreate(osThread(TaskB), NULL);
 800057a:	463b      	mov	r3, r7
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f002 f92d 	bl	80027de <osThreadCreate>
 8000584:	4602      	mov	r2, r0
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <main+0x8c>)
 8000588:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800058a:	f002 f921 	bl	80027d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058e:	e7fe      	b.n	800058e <main+0x7a>
 8000590:	20003fcc 	.word	0x20003fcc
 8000594:	08004eac 	.word	0x08004eac
 8000598:	20004010 	.word	0x20004010
 800059c:	08004ed0 	.word	0x08004ed0
 80005a0:	20004014 	.word	0x20004014

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	; 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f004 fc61 	bl	8004e7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b28      	ldr	r3, [pc, #160]	; (8000670 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a27      	ldr	r2, [pc, #156]	; (8000670 <SystemClock_Config+0xcc>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b25      	ldr	r3, [pc, #148]	; (8000670 <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b22      	ldr	r3, [pc, #136]	; (8000674 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <SystemClock_Config+0xd0>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000600:	2301      	movs	r3, #1
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000608:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000618:	23a8      	movs	r3, #168	; 0xa8
 800061a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000620:	2304      	movs	r3, #4
 8000622:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fd29 	bl	8001080 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000634:	f000 f916 	bl	8000864 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063c:	2302      	movs	r3, #2
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000644:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000648:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2105      	movs	r1, #5
 8000656:	4618      	mov	r0, r3
 8000658:	f000 ff82 	bl	8001560 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000662:	f000 f8ff 	bl	8000864 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	; 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <MX_USART2_UART_Init+0x50>)
 8000680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006b0:	f001 fbb8 	bl	8001e24 <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ba:	f000 f8d3 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20003fd0 	.word	0x20003fd0
 80006c8:	40004400 	.word	0x40004400

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <MX_GPIO_Init+0xc4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a29      	ldr	r2, [pc, #164]	; (8000790 <MX_GPIO_Init+0xc4>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b27      	ldr	r3, [pc, #156]	; (8000790 <MX_GPIO_Init+0xc4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <MX_GPIO_Init+0xc4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a22      	ldr	r2, [pc, #136]	; (8000790 <MX_GPIO_Init+0xc4>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <MX_GPIO_Init+0xc4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <MX_GPIO_Init+0xc4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a1b      	ldr	r2, [pc, #108]	; (8000790 <MX_GPIO_Init+0xc4>)
 8000724:	f043 0308 	orr.w	r3, r3, #8
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <MX_GPIO_Init+0xc4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0308 	and.w	r3, r3, #8
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USER_LED_G_Pin|USER_LED_O_Pin|USER_LED_R_Pin|USER_LED_B_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800073c:	4815      	ldr	r0, [pc, #84]	; (8000794 <MX_GPIO_Init+0xc8>)
 800073e:	f000 fc85 	bl	800104c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000742:	2301      	movs	r3, #1
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_GPIO_Init+0xcc>)
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800074a:	2302      	movs	r3, #2
 800074c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	4619      	mov	r1, r3
 8000754:	4811      	ldr	r0, [pc, #68]	; (800079c <MX_GPIO_Init+0xd0>)
 8000756:	f000 fadf 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_G_Pin USER_LED_O_Pin USER_LED_R_Pin USER_LED_B_Pin */
  GPIO_InitStruct.Pin = USER_LED_G_Pin|USER_LED_O_Pin|USER_LED_R_Pin|USER_LED_B_Pin;
 800075a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800075e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	2301      	movs	r3, #1
 8000762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	4619      	mov	r1, r3
 8000772:	4808      	ldr	r0, [pc, #32]	; (8000794 <MX_GPIO_Init+0xc8>)
 8000774:	f000 fad0 	bl	8000d18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2105      	movs	r1, #5
 800077c:	2006      	movs	r0, #6
 800077e:	f000 faa1 	bl	8000cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000782:	2006      	movs	r0, #6
 8000784:	f000 faba 	bl	8000cfc <HAL_NVIC_EnableIRQ>

}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40020c00 	.word	0x40020c00
 8000798:	10110000 	.word	0x10110000
 800079c:	40020000 	.word	0x40020000

080007a0 <UartPrint>:

/* USER CODE BEGIN 4 */

void UartPrint(char* message)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,( uint8_t* )message, strlen(message), 20);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f7ff fd11 	bl	80001d0 <strlen>
 80007ae:	4603      	mov	r3, r0
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	2314      	movs	r3, #20
 80007b4:	6879      	ldr	r1, [r7, #4]
 80007b6:	4803      	ldr	r0, [pc, #12]	; (80007c4 <UartPrint+0x24>)
 80007b8:	f001 fb81 	bl	8001ebe <HAL_UART_Transmit>
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20003fd0 	.word	0x20003fd0

080007c8 <TaskA_Handle>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskA_Handle */
void TaskA_Handle(void const * argument)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	  osMutexWait(MutexAHandle, portMAX_DELAY); // TaskA mutexi alir.
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <TaskA_Handle+0x3c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f04f 31ff 	mov.w	r1, #4294967295
 80007d8:	4618      	mov	r0, r3
 80007da:	f002 f865 	bl	80028a8 <osMutexWait>

	  UartPrint("Hello from TaskA.\r\n");
 80007de:	480a      	ldr	r0, [pc, #40]	; (8000808 <TaskA_Handle+0x40>)
 80007e0:	f7ff ffde 	bl	80007a0 <UartPrint>

	  for(uint32_t i = 0; i < 100000; i++); // Burada TaskA'yi oyalariz fakat TimeSlicing algoritmasina gore bu kisim yarida birakilip TaskB'ye gecilmektedir.
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	e002      	b.n	80007f0 <TaskA_Handle+0x28>
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	3301      	adds	r3, #1
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	4a06      	ldr	r2, [pc, #24]	; (800080c <TaskA_Handle+0x44>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d9f8      	bls.n	80007ea <TaskA_Handle+0x22>

	  osMutexRelease(MutexAHandle); // TaskA kaldigi yerden devam edip mutex'i verse de calisma sirasi halen daha TaskA'da oldugundan
 80007f8:	4b02      	ldr	r3, [pc, #8]	; (8000804 <TaskA_Handle+0x3c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 f8a1 	bl	8002944 <osMutexRelease>
	  osMutexWait(MutexAHandle, portMAX_DELAY); // TaskA mutexi alir.
 8000802:	e7e5      	b.n	80007d0 <TaskA_Handle+0x8>
 8000804:	20003fcc 	.word	0x20003fcc
 8000808:	08004eec 	.word	0x08004eec
 800080c:	0001869f 	.word	0x0001869f

08000810 <TaskB_Handle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskB_Handle */
void TaskB_Handle(void const * argument)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	  osMutexWait(MutexAHandle, portMAX_DELAY); // TaskB'ye gecildiginde ise Mutex halen daha TaskA'da oldugundan
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <TaskB_Handle+0x28>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f04f 31ff 	mov.w	r1, #4294967295
 8000820:	4618      	mov	r0, r3
 8000822:	f002 f841 	bl	80028a8 <osMutexWait>
	  	  	  	  	  	  	  	  	  	  	    // TaskB blocked durumuna gecer ve TaskA kaldigi yerden devam eder.

	  UartPrint("Hello from TaskB.\r\n");
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <TaskB_Handle+0x2c>)
 8000828:	f7ff ffba 	bl	80007a0 <UartPrint>

	  osMutexRelease(MutexAHandle);
 800082c:	4b02      	ldr	r3, [pc, #8]	; (8000838 <TaskB_Handle+0x28>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f002 f887 	bl	8002944 <osMutexRelease>
	  osMutexWait(MutexAHandle, portMAX_DELAY); // TaskB'ye gecildiginde ise Mutex halen daha TaskA'da oldugundan
 8000836:	e7ef      	b.n	8000818 <TaskB_Handle+0x8>
 8000838:	20003fcc 	.word	0x20003fcc
 800083c:	08004f00 	.word	0x08004f00

08000840 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d101      	bne.n	8000856 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000852:	f000 f95f 	bl	8000b14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40010000 	.word	0x40010000

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
	...

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <HAL_MspInit+0x4c>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <HAL_MspInit+0x4c>)
 8000884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000888:	6453      	str	r3, [r2, #68]	; 0x44
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_MspInit+0x4c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <HAL_MspInit+0x4c>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800

080008c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a19      	ldr	r2, [pc, #100]	; (8000948 <HAL_UART_MspInit+0x84>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d12b      	bne.n	800093e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <HAL_UART_MspInit+0x88>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	4a17      	ldr	r2, [pc, #92]	; (800094c <HAL_UART_MspInit+0x88>)
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_UART_MspInit+0x88>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_UART_MspInit+0x88>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a10      	ldr	r2, [pc, #64]	; (800094c <HAL_UART_MspInit+0x88>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_UART_MspInit+0x88>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800091e:	230c      	movs	r3, #12
 8000920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092a:	2303      	movs	r3, #3
 800092c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800092e:	2307      	movs	r3, #7
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <HAL_UART_MspInit+0x8c>)
 800093a:	f000 f9ed 	bl	8000d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800093e:	bf00      	nop
 8000940:	3728      	adds	r7, #40	; 0x28
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40004400 	.word	0x40004400
 800094c:	40023800 	.word	0x40023800
 8000950:	40020000 	.word	0x40020000

08000954 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08c      	sub	sp, #48	; 0x30
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000964:	2200      	movs	r2, #0
 8000966:	6879      	ldr	r1, [r7, #4]
 8000968:	2019      	movs	r0, #25
 800096a:	f000 f9ab 	bl	8000cc4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800096e:	2019      	movs	r0, #25
 8000970:	f000 f9c4 	bl	8000cfc <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <HAL_InitTick+0xa4>)
 800097a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097c:	4a1e      	ldr	r2, [pc, #120]	; (80009f8 <HAL_InitTick+0xa4>)
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	6453      	str	r3, [r2, #68]	; 0x44
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <HAL_InitTick+0xa4>)
 8000986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000990:	f107 0210 	add.w	r2, r7, #16
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4611      	mov	r1, r2
 800099a:	4618      	mov	r0, r3
 800099c:	f000 ffd2 	bl	8001944 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80009a0:	f000 ffbc 	bl	800191c <HAL_RCC_GetPCLK2Freq>
 80009a4:	4603      	mov	r3, r0
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80009aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ac:	4a13      	ldr	r2, [pc, #76]	; (80009fc <HAL_InitTick+0xa8>)
 80009ae:	fba2 2303 	umull	r2, r3, r2, r3
 80009b2:	0c9b      	lsrs	r3, r3, #18
 80009b4:	3b01      	subs	r3, #1
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <HAL_InitTick+0xac>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <HAL_InitTick+0xb0>)
 80009bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <HAL_InitTick+0xac>)
 80009c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009c4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009c6:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <HAL_InitTick+0xac>)
 80009c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <HAL_InitTick+0xac>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <HAL_InitTick+0xac>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80009d8:	4809      	ldr	r0, [pc, #36]	; (8000a00 <HAL_InitTick+0xac>)
 80009da:	f000 ffe5 	bl	80019a8 <HAL_TIM_Base_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d104      	bne.n	80009ee <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80009e4:	4806      	ldr	r0, [pc, #24]	; (8000a00 <HAL_InitTick+0xac>)
 80009e6:	f001 f814 	bl	8001a12 <HAL_TIM_Base_Start_IT>
 80009ea:	4603      	mov	r3, r0
 80009ec:	e000      	b.n	80009f0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3730      	adds	r7, #48	; 0x30
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40023800 	.word	0x40023800
 80009fc:	431bde83 	.word	0x431bde83
 8000a00:	20004018 	.word	0x20004018
 8000a04:	40010000 	.word	0x40010000

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <HardFault_Handler+0x4>

08000a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <MemManage_Handler+0x4>

08000a22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a42:	f001 f80a 	bl	8001a5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20004018 	.word	0x20004018

08000a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <SystemInit+0x28>)
 8000a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5a:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <SystemInit+0x28>)
 8000a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <SystemInit+0x28>)
 8000a66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a6a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a82:	e003      	b.n	8000a8c <LoopCopyDataInit>

08000a84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a8a:	3104      	adds	r1, #4

08000a8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a8c:	480b      	ldr	r0, [pc, #44]	; (8000abc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a94:	d3f6      	bcc.n	8000a84 <CopyDataInit>
  ldr  r2, =_sbss
 8000a96:	4a0b      	ldr	r2, [pc, #44]	; (8000ac4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a98:	e002      	b.n	8000aa0 <LoopFillZerobss>

08000a9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a9c:	f842 3b04 	str.w	r3, [r2], #4

08000aa0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000aa2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000aa4:	d3f9      	bcc.n	8000a9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aa6:	f7ff ffd3 	bl	8000a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aaa:	f004 f9b7 	bl	8004e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aae:	f7ff fd31 	bl	8000514 <main>
  bx  lr    
 8000ab2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ab4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ab8:	08004f44 	.word	0x08004f44
  ldr  r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ac0:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000ac4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000ac8:	2000405c 	.word	0x2000405c

08000acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC_IRQHandler>
	...

08000ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <HAL_Init+0x40>)
 8000ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <HAL_Init+0x40>)
 8000ae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <HAL_Init+0x40>)
 8000af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 f8d8 	bl	8000cae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afe:	2000      	movs	r0, #0
 8000b00:	f7ff ff28 	bl	8000954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b04:	f7ff feb6 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023c00 	.word	0x40023c00

08000b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_IncTick+0x20>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_IncTick+0x24>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <HAL_IncTick+0x24>)
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20004058 	.word	0x20004058

08000b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <HAL_GetTick+0x14>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20004058 	.word	0x20004058

08000b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	f003 0307 	and.w	r3, r3, #7
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db0b      	blt.n	8000be2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 021f 	and.w	r2, r3, #31
 8000bd0:	4907      	ldr	r1, [pc, #28]	; (8000bf0 <__NVIC_EnableIRQ+0x38>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	fa00 f202 	lsl.w	r2, r0, r2
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db0a      	blt.n	8000c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	490c      	ldr	r1, [pc, #48]	; (8000c40 <__NVIC_SetPriority+0x4c>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	0112      	lsls	r2, r2, #4
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	440b      	add	r3, r1
 8000c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c1c:	e00a      	b.n	8000c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4908      	ldr	r1, [pc, #32]	; (8000c44 <__NVIC_SetPriority+0x50>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	0112      	lsls	r2, r2, #4
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	440b      	add	r3, r1
 8000c32:	761a      	strb	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f1c3 0307 	rsb	r3, r3, #7
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	bf28      	it	cs
 8000c66:	2304      	movcs	r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d902      	bls.n	8000c78 <NVIC_EncodePriority+0x30>
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3b03      	subs	r3, #3
 8000c76:	e000      	b.n	8000c7a <NVIC_EncodePriority+0x32>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43da      	mvns	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	43d9      	mvns	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	4313      	orrs	r3, r2
         );
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3724      	adds	r7, #36	; 0x24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ff4c 	bl	8000b54 <__NVIC_SetPriorityGrouping>
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
 8000cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd6:	f7ff ff61 	bl	8000b9c <__NVIC_GetPriorityGrouping>
 8000cda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	68b9      	ldr	r1, [r7, #8]
 8000ce0:	6978      	ldr	r0, [r7, #20]
 8000ce2:	f7ff ffb1 	bl	8000c48 <NVIC_EncodePriority>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cec:	4611      	mov	r1, r2
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff80 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000cf4:	bf00      	nop
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff54 	bl	8000bb8 <__NVIC_EnableIRQ>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
 8000d32:	e16b      	b.n	800100c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d34:	2201      	movs	r2, #1
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	f040 815a 	bne.w	8001006 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d00b      	beq.n	8000d72 <HAL_GPIO_Init+0x5a>
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d007      	beq.n	8000d72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d66:	2b11      	cmp	r3, #17
 8000d68:	d003      	beq.n	8000d72 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b12      	cmp	r3, #18
 8000d70:	d130      	bne.n	8000dd4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da8:	2201      	movs	r2, #1
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	091b      	lsrs	r3, r3, #4
 8000dbe:	f003 0201 	and.w	r2, r3, #1
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	2203      	movs	r2, #3
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	43db      	mvns	r3, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	689a      	ldr	r2, [r3, #8]
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d003      	beq.n	8000e14 <HAL_GPIO_Init+0xfc>
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b12      	cmp	r3, #18
 8000e12:	d123      	bne.n	8000e5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	08da      	lsrs	r2, r3, #3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3208      	adds	r2, #8
 8000e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	220f      	movs	r2, #15
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	691a      	ldr	r2, [r3, #16]
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	08da      	lsrs	r2, r3, #3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3208      	adds	r2, #8
 8000e56:	69b9      	ldr	r1, [r7, #24]
 8000e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0203 	and.w	r2, r3, #3
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f000 80b4 	beq.w	8001006 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b5f      	ldr	r3, [pc, #380]	; (8001020 <HAL_GPIO_Init+0x308>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	4a5e      	ldr	r2, [pc, #376]	; (8001020 <HAL_GPIO_Init+0x308>)
 8000ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eac:	6453      	str	r3, [r2, #68]	; 0x44
 8000eae:	4b5c      	ldr	r3, [pc, #368]	; (8001020 <HAL_GPIO_Init+0x308>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eba:	4a5a      	ldr	r2, [pc, #360]	; (8001024 <HAL_GPIO_Init+0x30c>)
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a51      	ldr	r2, [pc, #324]	; (8001028 <HAL_GPIO_Init+0x310>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d02b      	beq.n	8000f3e <HAL_GPIO_Init+0x226>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a50      	ldr	r2, [pc, #320]	; (800102c <HAL_GPIO_Init+0x314>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d025      	beq.n	8000f3a <HAL_GPIO_Init+0x222>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4f      	ldr	r2, [pc, #316]	; (8001030 <HAL_GPIO_Init+0x318>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d01f      	beq.n	8000f36 <HAL_GPIO_Init+0x21e>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4e      	ldr	r2, [pc, #312]	; (8001034 <HAL_GPIO_Init+0x31c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d019      	beq.n	8000f32 <HAL_GPIO_Init+0x21a>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4d      	ldr	r2, [pc, #308]	; (8001038 <HAL_GPIO_Init+0x320>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d013      	beq.n	8000f2e <HAL_GPIO_Init+0x216>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4c      	ldr	r2, [pc, #304]	; (800103c <HAL_GPIO_Init+0x324>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d00d      	beq.n	8000f2a <HAL_GPIO_Init+0x212>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4b      	ldr	r2, [pc, #300]	; (8001040 <HAL_GPIO_Init+0x328>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d007      	beq.n	8000f26 <HAL_GPIO_Init+0x20e>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4a      	ldr	r2, [pc, #296]	; (8001044 <HAL_GPIO_Init+0x32c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d101      	bne.n	8000f22 <HAL_GPIO_Init+0x20a>
 8000f1e:	2307      	movs	r3, #7
 8000f20:	e00e      	b.n	8000f40 <HAL_GPIO_Init+0x228>
 8000f22:	2308      	movs	r3, #8
 8000f24:	e00c      	b.n	8000f40 <HAL_GPIO_Init+0x228>
 8000f26:	2306      	movs	r3, #6
 8000f28:	e00a      	b.n	8000f40 <HAL_GPIO_Init+0x228>
 8000f2a:	2305      	movs	r3, #5
 8000f2c:	e008      	b.n	8000f40 <HAL_GPIO_Init+0x228>
 8000f2e:	2304      	movs	r3, #4
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x228>
 8000f32:	2303      	movs	r3, #3
 8000f34:	e004      	b.n	8000f40 <HAL_GPIO_Init+0x228>
 8000f36:	2302      	movs	r3, #2
 8000f38:	e002      	b.n	8000f40 <HAL_GPIO_Init+0x228>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <HAL_GPIO_Init+0x228>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	69fa      	ldr	r2, [r7, #28]
 8000f42:	f002 0203 	and.w	r2, r2, #3
 8000f46:	0092      	lsls	r2, r2, #2
 8000f48:	4093      	lsls	r3, r2
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f50:	4934      	ldr	r1, [pc, #208]	; (8001024 <HAL_GPIO_Init+0x30c>)
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	089b      	lsrs	r3, r3, #2
 8000f56:	3302      	adds	r3, #2
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f5e:	4b3a      	ldr	r3, [pc, #232]	; (8001048 <HAL_GPIO_Init+0x330>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f82:	4a31      	ldr	r2, [pc, #196]	; (8001048 <HAL_GPIO_Init+0x330>)
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f88:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <HAL_GPIO_Init+0x330>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fac:	4a26      	ldr	r2, [pc, #152]	; (8001048 <HAL_GPIO_Init+0x330>)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb2:	4b25      	ldr	r3, [pc, #148]	; (8001048 <HAL_GPIO_Init+0x330>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fd6:	4a1c      	ldr	r2, [pc, #112]	; (8001048 <HAL_GPIO_Init+0x330>)
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <HAL_GPIO_Init+0x330>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001000:	4a11      	ldr	r2, [pc, #68]	; (8001048 <HAL_GPIO_Init+0x330>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3301      	adds	r3, #1
 800100a:	61fb      	str	r3, [r7, #28]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	2b0f      	cmp	r3, #15
 8001010:	f67f ae90 	bls.w	8000d34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001014:	bf00      	nop
 8001016:	3724      	adds	r7, #36	; 0x24
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	40023800 	.word	0x40023800
 8001024:	40013800 	.word	0x40013800
 8001028:	40020000 	.word	0x40020000
 800102c:	40020400 	.word	0x40020400
 8001030:	40020800 	.word	0x40020800
 8001034:	40020c00 	.word	0x40020c00
 8001038:	40021000 	.word	0x40021000
 800103c:	40021400 	.word	0x40021400
 8001040:	40021800 	.word	0x40021800
 8001044:	40021c00 	.word	0x40021c00
 8001048:	40013c00 	.word	0x40013c00

0800104c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	807b      	strh	r3, [r7, #2]
 8001058:	4613      	mov	r3, r2
 800105a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800105c:	787b      	ldrb	r3, [r7, #1]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001068:	e003      	b.n	8001072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	041a      	lsls	r2, r3, #16
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	619a      	str	r2, [r3, #24]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e25b      	b.n	800154a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d075      	beq.n	800118a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800109e:	4ba3      	ldr	r3, [pc, #652]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	d00c      	beq.n	80010c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010aa:	4ba0      	ldr	r3, [pc, #640]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010b2:	2b08      	cmp	r3, #8
 80010b4:	d112      	bne.n	80010dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010b6:	4b9d      	ldr	r3, [pc, #628]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010c2:	d10b      	bne.n	80010dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c4:	4b99      	ldr	r3, [pc, #612]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d05b      	beq.n	8001188 <HAL_RCC_OscConfig+0x108>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d157      	bne.n	8001188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e236      	b.n	800154a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e4:	d106      	bne.n	80010f4 <HAL_RCC_OscConfig+0x74>
 80010e6:	4b91      	ldr	r3, [pc, #580]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a90      	ldr	r2, [pc, #576]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 80010ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e01d      	b.n	8001130 <HAL_RCC_OscConfig+0xb0>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0x98>
 80010fe:	4b8b      	ldr	r3, [pc, #556]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a8a      	ldr	r2, [pc, #552]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 8001104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	4b88      	ldr	r3, [pc, #544]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a87      	ldr	r2, [pc, #540]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 8001110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e00b      	b.n	8001130 <HAL_RCC_OscConfig+0xb0>
 8001118:	4b84      	ldr	r3, [pc, #528]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a83      	ldr	r2, [pc, #524]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 800111e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	4b81      	ldr	r3, [pc, #516]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a80      	ldr	r2, [pc, #512]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 800112a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d013      	beq.n	8001160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001138:	f7ff fd00 	bl	8000b3c <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113e:	e008      	b.n	8001152 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001140:	f7ff fcfc 	bl	8000b3c <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b64      	cmp	r3, #100	; 0x64
 800114c:	d901      	bls.n	8001152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e1fb      	b.n	800154a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001152:	4b76      	ldr	r3, [pc, #472]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0f0      	beq.n	8001140 <HAL_RCC_OscConfig+0xc0>
 800115e:	e014      	b.n	800118a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001160:	f7ff fcec 	bl	8000b3c <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001168:	f7ff fce8 	bl	8000b3c <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b64      	cmp	r3, #100	; 0x64
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e1e7      	b.n	800154a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117a:	4b6c      	ldr	r3, [pc, #432]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f0      	bne.n	8001168 <HAL_RCC_OscConfig+0xe8>
 8001186:	e000      	b.n	800118a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d063      	beq.n	800125e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001196:	4b65      	ldr	r3, [pc, #404]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 030c 	and.w	r3, r3, #12
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00b      	beq.n	80011ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011a2:	4b62      	ldr	r3, [pc, #392]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011aa:	2b08      	cmp	r3, #8
 80011ac:	d11c      	bne.n	80011e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ae:	4b5f      	ldr	r3, [pc, #380]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d116      	bne.n	80011e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ba:	4b5c      	ldr	r3, [pc, #368]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d005      	beq.n	80011d2 <HAL_RCC_OscConfig+0x152>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d001      	beq.n	80011d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e1bb      	b.n	800154a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d2:	4b56      	ldr	r3, [pc, #344]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4952      	ldr	r1, [pc, #328]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e6:	e03a      	b.n	800125e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d020      	beq.n	8001232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011f0:	4b4f      	ldr	r3, [pc, #316]	; (8001330 <HAL_RCC_OscConfig+0x2b0>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f6:	f7ff fca1 	bl	8000b3c <HAL_GetTick>
 80011fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011fe:	f7ff fc9d 	bl	8000b3c <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e19c      	b.n	800154a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001210:	4b46      	ldr	r3, [pc, #280]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f0      	beq.n	80011fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121c:	4b43      	ldr	r3, [pc, #268]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	4940      	ldr	r1, [pc, #256]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 800122c:	4313      	orrs	r3, r2
 800122e:	600b      	str	r3, [r1, #0]
 8001230:	e015      	b.n	800125e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001232:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <HAL_RCC_OscConfig+0x2b0>)
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001238:	f7ff fc80 	bl	8000b3c <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001240:	f7ff fc7c 	bl	8000b3c <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e17b      	b.n	800154a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001252:	4b36      	ldr	r3, [pc, #216]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	2b00      	cmp	r3, #0
 8001268:	d030      	beq.n	80012cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d016      	beq.n	80012a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001272:	4b30      	ldr	r3, [pc, #192]	; (8001334 <HAL_RCC_OscConfig+0x2b4>)
 8001274:	2201      	movs	r2, #1
 8001276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001278:	f7ff fc60 	bl	8000b3c <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001280:	f7ff fc5c 	bl	8000b3c <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e15b      	b.n	800154a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001292:	4b26      	ldr	r3, [pc, #152]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 8001294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f0      	beq.n	8001280 <HAL_RCC_OscConfig+0x200>
 800129e:	e015      	b.n	80012cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a0:	4b24      	ldr	r3, [pc, #144]	; (8001334 <HAL_RCC_OscConfig+0x2b4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a6:	f7ff fc49 	bl	8000b3c <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ae:	f7ff fc45 	bl	8000b3c <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e144      	b.n	800154a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c0:	4b1a      	ldr	r3, [pc, #104]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 80012c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1f0      	bne.n	80012ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 80a0 	beq.w	800141a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10f      	bne.n	800130a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	4a0e      	ldr	r2, [pc, #56]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f8:	6413      	str	r3, [r2, #64]	; 0x40
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001306:	2301      	movs	r3, #1
 8001308:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_RCC_OscConfig+0x2b8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001312:	2b00      	cmp	r3, #0
 8001314:	d121      	bne.n	800135a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_RCC_OscConfig+0x2b8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_RCC_OscConfig+0x2b8>)
 800131c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001322:	f7ff fc0b 	bl	8000b3c <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001328:	e011      	b.n	800134e <HAL_RCC_OscConfig+0x2ce>
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	42470000 	.word	0x42470000
 8001334:	42470e80 	.word	0x42470e80
 8001338:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800133c:	f7ff fbfe 	bl	8000b3c <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e0fd      	b.n	800154a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134e:	4b81      	ldr	r3, [pc, #516]	; (8001554 <HAL_RCC_OscConfig+0x4d4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f0      	beq.n	800133c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d106      	bne.n	8001370 <HAL_RCC_OscConfig+0x2f0>
 8001362:	4b7d      	ldr	r3, [pc, #500]	; (8001558 <HAL_RCC_OscConfig+0x4d8>)
 8001364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001366:	4a7c      	ldr	r2, [pc, #496]	; (8001558 <HAL_RCC_OscConfig+0x4d8>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6713      	str	r3, [r2, #112]	; 0x70
 800136e:	e01c      	b.n	80013aa <HAL_RCC_OscConfig+0x32a>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2b05      	cmp	r3, #5
 8001376:	d10c      	bne.n	8001392 <HAL_RCC_OscConfig+0x312>
 8001378:	4b77      	ldr	r3, [pc, #476]	; (8001558 <HAL_RCC_OscConfig+0x4d8>)
 800137a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137c:	4a76      	ldr	r2, [pc, #472]	; (8001558 <HAL_RCC_OscConfig+0x4d8>)
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	6713      	str	r3, [r2, #112]	; 0x70
 8001384:	4b74      	ldr	r3, [pc, #464]	; (8001558 <HAL_RCC_OscConfig+0x4d8>)
 8001386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001388:	4a73      	ldr	r2, [pc, #460]	; (8001558 <HAL_RCC_OscConfig+0x4d8>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6713      	str	r3, [r2, #112]	; 0x70
 8001390:	e00b      	b.n	80013aa <HAL_RCC_OscConfig+0x32a>
 8001392:	4b71      	ldr	r3, [pc, #452]	; (8001558 <HAL_RCC_OscConfig+0x4d8>)
 8001394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001396:	4a70      	ldr	r2, [pc, #448]	; (8001558 <HAL_RCC_OscConfig+0x4d8>)
 8001398:	f023 0301 	bic.w	r3, r3, #1
 800139c:	6713      	str	r3, [r2, #112]	; 0x70
 800139e:	4b6e      	ldr	r3, [pc, #440]	; (8001558 <HAL_RCC_OscConfig+0x4d8>)
 80013a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a2:	4a6d      	ldr	r2, [pc, #436]	; (8001558 <HAL_RCC_OscConfig+0x4d8>)
 80013a4:	f023 0304 	bic.w	r3, r3, #4
 80013a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d015      	beq.n	80013de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b2:	f7ff fbc3 	bl	8000b3c <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b8:	e00a      	b.n	80013d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ba:	f7ff fbbf 	bl	8000b3c <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e0bc      	b.n	800154a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d0:	4b61      	ldr	r3, [pc, #388]	; (8001558 <HAL_RCC_OscConfig+0x4d8>)
 80013d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0ee      	beq.n	80013ba <HAL_RCC_OscConfig+0x33a>
 80013dc:	e014      	b.n	8001408 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013de:	f7ff fbad 	bl	8000b3c <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e4:	e00a      	b.n	80013fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e6:	f7ff fba9 	bl	8000b3c <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e0a6      	b.n	800154a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013fc:	4b56      	ldr	r3, [pc, #344]	; (8001558 <HAL_RCC_OscConfig+0x4d8>)
 80013fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1ee      	bne.n	80013e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001408:	7dfb      	ldrb	r3, [r7, #23]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d105      	bne.n	800141a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800140e:	4b52      	ldr	r3, [pc, #328]	; (8001558 <HAL_RCC_OscConfig+0x4d8>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	4a51      	ldr	r2, [pc, #324]	; (8001558 <HAL_RCC_OscConfig+0x4d8>)
 8001414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001418:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 8092 	beq.w	8001548 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001424:	4b4c      	ldr	r3, [pc, #304]	; (8001558 <HAL_RCC_OscConfig+0x4d8>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 030c 	and.w	r3, r3, #12
 800142c:	2b08      	cmp	r3, #8
 800142e:	d05c      	beq.n	80014ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d141      	bne.n	80014bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001438:	4b48      	ldr	r3, [pc, #288]	; (800155c <HAL_RCC_OscConfig+0x4dc>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143e:	f7ff fb7d 	bl	8000b3c <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001446:	f7ff fb79 	bl	8000b3c <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e078      	b.n	800154a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001458:	4b3f      	ldr	r3, [pc, #252]	; (8001558 <HAL_RCC_OscConfig+0x4d8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1f0      	bne.n	8001446 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69da      	ldr	r2, [r3, #28]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	431a      	orrs	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	019b      	lsls	r3, r3, #6
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147a:	085b      	lsrs	r3, r3, #1
 800147c:	3b01      	subs	r3, #1
 800147e:	041b      	lsls	r3, r3, #16
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001486:	061b      	lsls	r3, r3, #24
 8001488:	4933      	ldr	r1, [pc, #204]	; (8001558 <HAL_RCC_OscConfig+0x4d8>)
 800148a:	4313      	orrs	r3, r2
 800148c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800148e:	4b33      	ldr	r3, [pc, #204]	; (800155c <HAL_RCC_OscConfig+0x4dc>)
 8001490:	2201      	movs	r2, #1
 8001492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff fb52 	bl	8000b3c <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800149c:	f7ff fb4e 	bl	8000b3c <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e04d      	b.n	800154a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ae:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <HAL_RCC_OscConfig+0x4d8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f0      	beq.n	800149c <HAL_RCC_OscConfig+0x41c>
 80014ba:	e045      	b.n	8001548 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014bc:	4b27      	ldr	r3, [pc, #156]	; (800155c <HAL_RCC_OscConfig+0x4dc>)
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c2:	f7ff fb3b 	bl	8000b3c <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ca:	f7ff fb37 	bl	8000b3c <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e036      	b.n	800154a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014dc:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <HAL_RCC_OscConfig+0x4d8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1f0      	bne.n	80014ca <HAL_RCC_OscConfig+0x44a>
 80014e8:	e02e      	b.n	8001548 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d101      	bne.n	80014f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e029      	b.n	800154a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014f6:	4b18      	ldr	r3, [pc, #96]	; (8001558 <HAL_RCC_OscConfig+0x4d8>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	429a      	cmp	r2, r3
 8001508:	d11c      	bne.n	8001544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001514:	429a      	cmp	r2, r3
 8001516:	d115      	bne.n	8001544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800151e:	4013      	ands	r3, r2
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001524:	4293      	cmp	r3, r2
 8001526:	d10d      	bne.n	8001544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001532:	429a      	cmp	r2, r3
 8001534:	d106      	bne.n	8001544 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001540:	429a      	cmp	r2, r3
 8001542:	d001      	beq.n	8001548 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40007000 	.word	0x40007000
 8001558:	40023800 	.word	0x40023800
 800155c:	42470060 	.word	0x42470060

08001560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0cc      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001574:	4b68      	ldr	r3, [pc, #416]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 030f 	and.w	r3, r3, #15
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d90c      	bls.n	800159c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001582:	4b65      	ldr	r3, [pc, #404]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158a:	4b63      	ldr	r3, [pc, #396]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d001      	beq.n	800159c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0b8      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d020      	beq.n	80015ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015b4:	4b59      	ldr	r3, [pc, #356]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	4a58      	ldr	r2, [pc, #352]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015cc:	4b53      	ldr	r3, [pc, #332]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4a52      	ldr	r2, [pc, #328]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d8:	4b50      	ldr	r3, [pc, #320]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	494d      	ldr	r1, [pc, #308]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d044      	beq.n	8001680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d107      	bne.n	800160e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	4b47      	ldr	r3, [pc, #284]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d119      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e07f      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d003      	beq.n	800161e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800161a:	2b03      	cmp	r3, #3
 800161c:	d107      	bne.n	800162e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161e:	4b3f      	ldr	r3, [pc, #252]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d109      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e06f      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162e:	4b3b      	ldr	r3, [pc, #236]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e067      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800163e:	4b37      	ldr	r3, [pc, #220]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f023 0203 	bic.w	r2, r3, #3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	4934      	ldr	r1, [pc, #208]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	4313      	orrs	r3, r2
 800164e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001650:	f7ff fa74 	bl	8000b3c <HAL_GetTick>
 8001654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001656:	e00a      	b.n	800166e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001658:	f7ff fa70 	bl	8000b3c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f241 3288 	movw	r2, #5000	; 0x1388
 8001666:	4293      	cmp	r3, r2
 8001668:	d901      	bls.n	800166e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e04f      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166e:	4b2b      	ldr	r3, [pc, #172]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 020c 	and.w	r2, r3, #12
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	429a      	cmp	r2, r3
 800167e:	d1eb      	bne.n	8001658 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001680:	4b25      	ldr	r3, [pc, #148]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 030f 	and.w	r3, r3, #15
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d20c      	bcs.n	80016a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168e:	4b22      	ldr	r3, [pc, #136]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001696:	4b20      	ldr	r3, [pc, #128]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e032      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d008      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	4916      	ldr	r1, [pc, #88]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d009      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	490e      	ldr	r1, [pc, #56]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016e6:	f000 f821 	bl	800172c <HAL_RCC_GetSysClockFreq>
 80016ea:	4601      	mov	r1, r0
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <HAL_RCC_ClockConfig+0x1c0>)
 80016f8:	5cd3      	ldrb	r3, [r2, r3]
 80016fa:	fa21 f303 	lsr.w	r3, r1, r3
 80016fe:	4a09      	ldr	r2, [pc, #36]	; (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_RCC_ClockConfig+0x1c8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff f924 	bl	8000954 <HAL_InitTick>

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023c00 	.word	0x40023c00
 800171c:	40023800 	.word	0x40023800
 8001720:	08004f1c 	.word	0x08004f1c
 8001724:	20000000 	.word	0x20000000
 8001728:	20000004 	.word	0x20000004

0800172c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800172c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	2300      	movs	r3, #0
 800173c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001742:	4b63      	ldr	r3, [pc, #396]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	2b04      	cmp	r3, #4
 800174c:	d007      	beq.n	800175e <HAL_RCC_GetSysClockFreq+0x32>
 800174e:	2b08      	cmp	r3, #8
 8001750:	d008      	beq.n	8001764 <HAL_RCC_GetSysClockFreq+0x38>
 8001752:	2b00      	cmp	r3, #0
 8001754:	f040 80b4 	bne.w	80018c0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001758:	4b5e      	ldr	r3, [pc, #376]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800175a:	60bb      	str	r3, [r7, #8]
       break;
 800175c:	e0b3      	b.n	80018c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800175e:	4b5e      	ldr	r3, [pc, #376]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001760:	60bb      	str	r3, [r7, #8]
      break;
 8001762:	e0b0      	b.n	80018c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001764:	4b5a      	ldr	r3, [pc, #360]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800176c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800176e:	4b58      	ldr	r3, [pc, #352]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d04a      	beq.n	8001810 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800177a:	4b55      	ldr	r3, [pc, #340]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	099b      	lsrs	r3, r3, #6
 8001780:	f04f 0400 	mov.w	r4, #0
 8001784:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	ea03 0501 	and.w	r5, r3, r1
 8001790:	ea04 0602 	and.w	r6, r4, r2
 8001794:	4629      	mov	r1, r5
 8001796:	4632      	mov	r2, r6
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	f04f 0400 	mov.w	r4, #0
 80017a0:	0154      	lsls	r4, r2, #5
 80017a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017a6:	014b      	lsls	r3, r1, #5
 80017a8:	4619      	mov	r1, r3
 80017aa:	4622      	mov	r2, r4
 80017ac:	1b49      	subs	r1, r1, r5
 80017ae:	eb62 0206 	sbc.w	r2, r2, r6
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	f04f 0400 	mov.w	r4, #0
 80017ba:	0194      	lsls	r4, r2, #6
 80017bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017c0:	018b      	lsls	r3, r1, #6
 80017c2:	1a5b      	subs	r3, r3, r1
 80017c4:	eb64 0402 	sbc.w	r4, r4, r2
 80017c8:	f04f 0100 	mov.w	r1, #0
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	00e2      	lsls	r2, r4, #3
 80017d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017d6:	00d9      	lsls	r1, r3, #3
 80017d8:	460b      	mov	r3, r1
 80017da:	4614      	mov	r4, r2
 80017dc:	195b      	adds	r3, r3, r5
 80017de:	eb44 0406 	adc.w	r4, r4, r6
 80017e2:	f04f 0100 	mov.w	r1, #0
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	0262      	lsls	r2, r4, #9
 80017ec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80017f0:	0259      	lsls	r1, r3, #9
 80017f2:	460b      	mov	r3, r1
 80017f4:	4614      	mov	r4, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	4621      	mov	r1, r4
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f04f 0400 	mov.w	r4, #0
 8001800:	461a      	mov	r2, r3
 8001802:	4623      	mov	r3, r4
 8001804:	f7fe fcec 	bl	80001e0 <__aeabi_uldivmod>
 8001808:	4603      	mov	r3, r0
 800180a:	460c      	mov	r4, r1
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	e049      	b.n	80018a4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001810:	4b2f      	ldr	r3, [pc, #188]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	099b      	lsrs	r3, r3, #6
 8001816:	f04f 0400 	mov.w	r4, #0
 800181a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	ea03 0501 	and.w	r5, r3, r1
 8001826:	ea04 0602 	and.w	r6, r4, r2
 800182a:	4629      	mov	r1, r5
 800182c:	4632      	mov	r2, r6
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	f04f 0400 	mov.w	r4, #0
 8001836:	0154      	lsls	r4, r2, #5
 8001838:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800183c:	014b      	lsls	r3, r1, #5
 800183e:	4619      	mov	r1, r3
 8001840:	4622      	mov	r2, r4
 8001842:	1b49      	subs	r1, r1, r5
 8001844:	eb62 0206 	sbc.w	r2, r2, r6
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	f04f 0400 	mov.w	r4, #0
 8001850:	0194      	lsls	r4, r2, #6
 8001852:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001856:	018b      	lsls	r3, r1, #6
 8001858:	1a5b      	subs	r3, r3, r1
 800185a:	eb64 0402 	sbc.w	r4, r4, r2
 800185e:	f04f 0100 	mov.w	r1, #0
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	00e2      	lsls	r2, r4, #3
 8001868:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800186c:	00d9      	lsls	r1, r3, #3
 800186e:	460b      	mov	r3, r1
 8001870:	4614      	mov	r4, r2
 8001872:	195b      	adds	r3, r3, r5
 8001874:	eb44 0406 	adc.w	r4, r4, r6
 8001878:	f04f 0100 	mov.w	r1, #0
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	02a2      	lsls	r2, r4, #10
 8001882:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001886:	0299      	lsls	r1, r3, #10
 8001888:	460b      	mov	r3, r1
 800188a:	4614      	mov	r4, r2
 800188c:	4618      	mov	r0, r3
 800188e:	4621      	mov	r1, r4
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f04f 0400 	mov.w	r4, #0
 8001896:	461a      	mov	r2, r3
 8001898:	4623      	mov	r3, r4
 800189a:	f7fe fca1 	bl	80001e0 <__aeabi_uldivmod>
 800189e:	4603      	mov	r3, r0
 80018a0:	460c      	mov	r4, r1
 80018a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	0c1b      	lsrs	r3, r3, #16
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	3301      	adds	r3, #1
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018bc:	60bb      	str	r3, [r7, #8]
      break;
 80018be:	e002      	b.n	80018c6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80018c2:	60bb      	str	r3, [r7, #8]
      break;
 80018c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018c6:	68bb      	ldr	r3, [r7, #8]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018d0:	40023800 	.word	0x40023800
 80018d4:	00f42400 	.word	0x00f42400
 80018d8:	007a1200 	.word	0x007a1200

080018dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80018e2:	681b      	ldr	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000000 	.word	0x20000000

080018f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018f8:	f7ff fff0 	bl	80018dc <HAL_RCC_GetHCLKFreq>
 80018fc:	4601      	mov	r1, r0
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	0a9b      	lsrs	r3, r3, #10
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	4a03      	ldr	r2, [pc, #12]	; (8001918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800190a:	5cd3      	ldrb	r3, [r2, r3]
 800190c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001910:	4618      	mov	r0, r3
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40023800 	.word	0x40023800
 8001918:	08004f2c 	.word	0x08004f2c

0800191c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001920:	f7ff ffdc 	bl	80018dc <HAL_RCC_GetHCLKFreq>
 8001924:	4601      	mov	r1, r0
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	0b5b      	lsrs	r3, r3, #13
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	4a03      	ldr	r2, [pc, #12]	; (8001940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001932:	5cd3      	ldrb	r3, [r2, r3]
 8001934:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001938:	4618      	mov	r0, r3
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40023800 	.word	0x40023800
 8001940:	08004f2c 	.word	0x08004f2c

08001944 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	220f      	movs	r2, #15
 8001952:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 0203 	and.w	r2, r3, #3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_RCC_GetClockConfig+0x5c>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_RCC_GetClockConfig+0x5c>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	08db      	lsrs	r3, r3, #3
 800197e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001986:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <HAL_RCC_GetClockConfig+0x60>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 020f 	and.w	r2, r3, #15
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	601a      	str	r2, [r3, #0]
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40023c00 	.word	0x40023c00

080019a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e01d      	b.n	80019f6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d106      	bne.n	80019d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f815 	bl	80019fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3304      	adds	r3, #4
 80019e4:	4619      	mov	r1, r3
 80019e6:	4610      	mov	r0, r2
 80019e8:	f000 f968 	bl	8001cbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b085      	sub	sp, #20
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f042 0201 	orr.w	r2, r2, #1
 8001a28:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b06      	cmp	r3, #6
 8001a3a:	d007      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d122      	bne.n	8001ab6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d11b      	bne.n	8001ab6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f06f 0202 	mvn.w	r2, #2
 8001a86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f8ee 	bl	8001c7e <HAL_TIM_IC_CaptureCallback>
 8001aa2:	e005      	b.n	8001ab0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f8e0 	bl	8001c6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f8f1 	bl	8001c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d122      	bne.n	8001b0a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d11b      	bne.n	8001b0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f06f 0204 	mvn.w	r2, #4
 8001ada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f8c4 	bl	8001c7e <HAL_TIM_IC_CaptureCallback>
 8001af6:	e005      	b.n	8001b04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f8b6 	bl	8001c6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f8c7 	bl	8001c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d122      	bne.n	8001b5e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d11b      	bne.n	8001b5e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f06f 0208 	mvn.w	r2, #8
 8001b2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2204      	movs	r2, #4
 8001b34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 f89a 	bl	8001c7e <HAL_TIM_IC_CaptureCallback>
 8001b4a:	e005      	b.n	8001b58 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f88c 	bl	8001c6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f89d 	bl	8001c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	f003 0310 	and.w	r3, r3, #16
 8001b68:	2b10      	cmp	r3, #16
 8001b6a:	d122      	bne.n	8001bb2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	2b10      	cmp	r3, #16
 8001b78:	d11b      	bne.n	8001bb2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f06f 0210 	mvn.w	r2, #16
 8001b82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2208      	movs	r2, #8
 8001b88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f870 	bl	8001c7e <HAL_TIM_IC_CaptureCallback>
 8001b9e:	e005      	b.n	8001bac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f862 	bl	8001c6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f873 	bl	8001c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d10e      	bne.n	8001bde <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d107      	bne.n	8001bde <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f06f 0201 	mvn.w	r2, #1
 8001bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7fe fe31 	bl	8000840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be8:	2b80      	cmp	r3, #128	; 0x80
 8001bea:	d10e      	bne.n	8001c0a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf6:	2b80      	cmp	r3, #128	; 0x80
 8001bf8:	d107      	bne.n	8001c0a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f903 	bl	8001e10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c14:	2b40      	cmp	r3, #64	; 0x40
 8001c16:	d10e      	bne.n	8001c36 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c22:	2b40      	cmp	r3, #64	; 0x40
 8001c24:	d107      	bne.n	8001c36 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f838 	bl	8001ca6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	f003 0320 	and.w	r3, r3, #32
 8001c40:	2b20      	cmp	r3, #32
 8001c42:	d10e      	bne.n	8001c62 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	f003 0320 	and.w	r3, r3, #32
 8001c4e:	2b20      	cmp	r3, #32
 8001c50:	d107      	bne.n	8001c62 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f06f 0220 	mvn.w	r2, #32
 8001c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f8cd 	bl	8001dfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a40      	ldr	r2, [pc, #256]	; (8001dd0 <TIM_Base_SetConfig+0x114>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d013      	beq.n	8001cfc <TIM_Base_SetConfig+0x40>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cda:	d00f      	beq.n	8001cfc <TIM_Base_SetConfig+0x40>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a3d      	ldr	r2, [pc, #244]	; (8001dd4 <TIM_Base_SetConfig+0x118>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d00b      	beq.n	8001cfc <TIM_Base_SetConfig+0x40>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a3c      	ldr	r2, [pc, #240]	; (8001dd8 <TIM_Base_SetConfig+0x11c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d007      	beq.n	8001cfc <TIM_Base_SetConfig+0x40>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a3b      	ldr	r2, [pc, #236]	; (8001ddc <TIM_Base_SetConfig+0x120>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d003      	beq.n	8001cfc <TIM_Base_SetConfig+0x40>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a3a      	ldr	r2, [pc, #232]	; (8001de0 <TIM_Base_SetConfig+0x124>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d108      	bne.n	8001d0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a2f      	ldr	r2, [pc, #188]	; (8001dd0 <TIM_Base_SetConfig+0x114>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d02b      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d1c:	d027      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a2c      	ldr	r2, [pc, #176]	; (8001dd4 <TIM_Base_SetConfig+0x118>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d023      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a2b      	ldr	r2, [pc, #172]	; (8001dd8 <TIM_Base_SetConfig+0x11c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d01f      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a2a      	ldr	r2, [pc, #168]	; (8001ddc <TIM_Base_SetConfig+0x120>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d01b      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a29      	ldr	r2, [pc, #164]	; (8001de0 <TIM_Base_SetConfig+0x124>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d017      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a28      	ldr	r2, [pc, #160]	; (8001de4 <TIM_Base_SetConfig+0x128>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d013      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a27      	ldr	r2, [pc, #156]	; (8001de8 <TIM_Base_SetConfig+0x12c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00f      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a26      	ldr	r2, [pc, #152]	; (8001dec <TIM_Base_SetConfig+0x130>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00b      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a25      	ldr	r2, [pc, #148]	; (8001df0 <TIM_Base_SetConfig+0x134>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d007      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a24      	ldr	r2, [pc, #144]	; (8001df4 <TIM_Base_SetConfig+0x138>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d003      	beq.n	8001d6e <TIM_Base_SetConfig+0xb2>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a23      	ldr	r2, [pc, #140]	; (8001df8 <TIM_Base_SetConfig+0x13c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d108      	bne.n	8001d80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <TIM_Base_SetConfig+0x114>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d003      	beq.n	8001db4 <TIM_Base_SetConfig+0xf8>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a0c      	ldr	r2, [pc, #48]	; (8001de0 <TIM_Base_SetConfig+0x124>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d103      	bne.n	8001dbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	615a      	str	r2, [r3, #20]
}
 8001dc2:	bf00      	nop
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40010000 	.word	0x40010000
 8001dd4:	40000400 	.word	0x40000400
 8001dd8:	40000800 	.word	0x40000800
 8001ddc:	40000c00 	.word	0x40000c00
 8001de0:	40010400 	.word	0x40010400
 8001de4:	40014000 	.word	0x40014000
 8001de8:	40014400 	.word	0x40014400
 8001dec:	40014800 	.word	0x40014800
 8001df0:	40001800 	.word	0x40001800
 8001df4:	40001c00 	.word	0x40001c00
 8001df8:	40002000 	.word	0x40002000

08001dfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e03f      	b.n	8001eb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d106      	bne.n	8001e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe fd3a 	bl	80008c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2224      	movs	r2, #36	; 0x24
 8001e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f90b 	bl	8002084 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b088      	sub	sp, #32
 8001ec2:	af02      	add	r7, sp, #8
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b20      	cmp	r3, #32
 8001edc:	f040 8083 	bne.w	8001fe6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d002      	beq.n	8001eec <HAL_UART_Transmit+0x2e>
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e07b      	b.n	8001fe8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_UART_Transmit+0x40>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e074      	b.n	8001fe8 <HAL_UART_Transmit+0x12a>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2221      	movs	r2, #33	; 0x21
 8001f10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001f14:	f7fe fe12 	bl	8000b3c <HAL_GetTick>
 8001f18:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	88fa      	ldrh	r2, [r7, #6]
 8001f1e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	88fa      	ldrh	r2, [r7, #6]
 8001f24:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001f2e:	e042      	b.n	8001fb6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	3b01      	subs	r3, #1
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f46:	d122      	bne.n	8001f8e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2180      	movs	r1, #128	; 0x80
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 f84c 	bl	8001ff0 <UART_WaitOnFlagUntilTimeout>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e042      	b.n	8001fe8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f74:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d103      	bne.n	8001f86 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	3302      	adds	r3, #2
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	e017      	b.n	8001fb6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	e013      	b.n	8001fb6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	2200      	movs	r2, #0
 8001f96:	2180      	movs	r1, #128	; 0x80
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f000 f829 	bl	8001ff0 <UART_WaitOnFlagUntilTimeout>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e01f      	b.n	8001fe8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	60ba      	str	r2, [r7, #8]
 8001fae:	781a      	ldrb	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1b7      	bne.n	8001f30 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2140      	movs	r1, #64	; 0x40
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 f810 	bl	8001ff0 <UART_WaitOnFlagUntilTimeout>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e006      	b.n	8001fe8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e000      	b.n	8001fe8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001fe6:	2302      	movs	r3, #2
  }
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002000:	e02c      	b.n	800205c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002008:	d028      	beq.n	800205c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d007      	beq.n	8002020 <UART_WaitOnFlagUntilTimeout+0x30>
 8002010:	f7fe fd94 	bl	8000b3c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	429a      	cmp	r2, r3
 800201e:	d21d      	bcs.n	800205c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800202e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695a      	ldr	r2, [r3, #20]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0201 	bic.w	r2, r2, #1
 800203e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2220      	movs	r2, #32
 800204c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e00f      	b.n	800207c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	4013      	ands	r3, r2
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	429a      	cmp	r2, r3
 800206a:	bf0c      	ite	eq
 800206c:	2301      	moveq	r3, #1
 800206e:	2300      	movne	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	429a      	cmp	r2, r3
 8002078:	d0c3      	beq.n	8002002 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002088:	b085      	sub	sp, #20
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80020c6:	f023 030c 	bic.w	r3, r3, #12
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	68f9      	ldr	r1, [r7, #12]
 80020d0:	430b      	orrs	r3, r1
 80020d2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	699a      	ldr	r2, [r3, #24]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020f2:	f040 818b 	bne.w	800240c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4ac1      	ldr	r2, [pc, #772]	; (8002400 <UART_SetConfig+0x37c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d005      	beq.n	800210c <UART_SetConfig+0x88>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4abf      	ldr	r2, [pc, #764]	; (8002404 <UART_SetConfig+0x380>)
 8002106:	4293      	cmp	r3, r2
 8002108:	f040 80bd 	bne.w	8002286 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800210c:	f7ff fc06 	bl	800191c <HAL_RCC_GetPCLK2Freq>
 8002110:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	461d      	mov	r5, r3
 8002116:	f04f 0600 	mov.w	r6, #0
 800211a:	46a8      	mov	r8, r5
 800211c:	46b1      	mov	r9, r6
 800211e:	eb18 0308 	adds.w	r3, r8, r8
 8002122:	eb49 0409 	adc.w	r4, r9, r9
 8002126:	4698      	mov	r8, r3
 8002128:	46a1      	mov	r9, r4
 800212a:	eb18 0805 	adds.w	r8, r8, r5
 800212e:	eb49 0906 	adc.w	r9, r9, r6
 8002132:	f04f 0100 	mov.w	r1, #0
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800213e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002142:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002146:	4688      	mov	r8, r1
 8002148:	4691      	mov	r9, r2
 800214a:	eb18 0005 	adds.w	r0, r8, r5
 800214e:	eb49 0106 	adc.w	r1, r9, r6
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	461d      	mov	r5, r3
 8002158:	f04f 0600 	mov.w	r6, #0
 800215c:	196b      	adds	r3, r5, r5
 800215e:	eb46 0406 	adc.w	r4, r6, r6
 8002162:	461a      	mov	r2, r3
 8002164:	4623      	mov	r3, r4
 8002166:	f7fe f83b 	bl	80001e0 <__aeabi_uldivmod>
 800216a:	4603      	mov	r3, r0
 800216c:	460c      	mov	r4, r1
 800216e:	461a      	mov	r2, r3
 8002170:	4ba5      	ldr	r3, [pc, #660]	; (8002408 <UART_SetConfig+0x384>)
 8002172:	fba3 2302 	umull	r2, r3, r3, r2
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	461d      	mov	r5, r3
 8002180:	f04f 0600 	mov.w	r6, #0
 8002184:	46a9      	mov	r9, r5
 8002186:	46b2      	mov	sl, r6
 8002188:	eb19 0309 	adds.w	r3, r9, r9
 800218c:	eb4a 040a 	adc.w	r4, sl, sl
 8002190:	4699      	mov	r9, r3
 8002192:	46a2      	mov	sl, r4
 8002194:	eb19 0905 	adds.w	r9, r9, r5
 8002198:	eb4a 0a06 	adc.w	sl, sl, r6
 800219c:	f04f 0100 	mov.w	r1, #0
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80021ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80021b0:	4689      	mov	r9, r1
 80021b2:	4692      	mov	sl, r2
 80021b4:	eb19 0005 	adds.w	r0, r9, r5
 80021b8:	eb4a 0106 	adc.w	r1, sl, r6
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	461d      	mov	r5, r3
 80021c2:	f04f 0600 	mov.w	r6, #0
 80021c6:	196b      	adds	r3, r5, r5
 80021c8:	eb46 0406 	adc.w	r4, r6, r6
 80021cc:	461a      	mov	r2, r3
 80021ce:	4623      	mov	r3, r4
 80021d0:	f7fe f806 	bl	80001e0 <__aeabi_uldivmod>
 80021d4:	4603      	mov	r3, r0
 80021d6:	460c      	mov	r4, r1
 80021d8:	461a      	mov	r2, r3
 80021da:	4b8b      	ldr	r3, [pc, #556]	; (8002408 <UART_SetConfig+0x384>)
 80021dc:	fba3 1302 	umull	r1, r3, r3, r2
 80021e0:	095b      	lsrs	r3, r3, #5
 80021e2:	2164      	movs	r1, #100	; 0x64
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	3332      	adds	r3, #50	; 0x32
 80021ee:	4a86      	ldr	r2, [pc, #536]	; (8002408 <UART_SetConfig+0x384>)
 80021f0:	fba2 2303 	umull	r2, r3, r2, r3
 80021f4:	095b      	lsrs	r3, r3, #5
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021fc:	4498      	add	r8, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	461d      	mov	r5, r3
 8002202:	f04f 0600 	mov.w	r6, #0
 8002206:	46a9      	mov	r9, r5
 8002208:	46b2      	mov	sl, r6
 800220a:	eb19 0309 	adds.w	r3, r9, r9
 800220e:	eb4a 040a 	adc.w	r4, sl, sl
 8002212:	4699      	mov	r9, r3
 8002214:	46a2      	mov	sl, r4
 8002216:	eb19 0905 	adds.w	r9, r9, r5
 800221a:	eb4a 0a06 	adc.w	sl, sl, r6
 800221e:	f04f 0100 	mov.w	r1, #0
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800222a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800222e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002232:	4689      	mov	r9, r1
 8002234:	4692      	mov	sl, r2
 8002236:	eb19 0005 	adds.w	r0, r9, r5
 800223a:	eb4a 0106 	adc.w	r1, sl, r6
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	461d      	mov	r5, r3
 8002244:	f04f 0600 	mov.w	r6, #0
 8002248:	196b      	adds	r3, r5, r5
 800224a:	eb46 0406 	adc.w	r4, r6, r6
 800224e:	461a      	mov	r2, r3
 8002250:	4623      	mov	r3, r4
 8002252:	f7fd ffc5 	bl	80001e0 <__aeabi_uldivmod>
 8002256:	4603      	mov	r3, r0
 8002258:	460c      	mov	r4, r1
 800225a:	461a      	mov	r2, r3
 800225c:	4b6a      	ldr	r3, [pc, #424]	; (8002408 <UART_SetConfig+0x384>)
 800225e:	fba3 1302 	umull	r1, r3, r3, r2
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	2164      	movs	r1, #100	; 0x64
 8002266:	fb01 f303 	mul.w	r3, r1, r3
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	3332      	adds	r3, #50	; 0x32
 8002270:	4a65      	ldr	r2, [pc, #404]	; (8002408 <UART_SetConfig+0x384>)
 8002272:	fba2 2303 	umull	r2, r3, r2, r3
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	f003 0207 	and.w	r2, r3, #7
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4442      	add	r2, r8
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	e26f      	b.n	8002766 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002286:	f7ff fb35 	bl	80018f4 <HAL_RCC_GetPCLK1Freq>
 800228a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	461d      	mov	r5, r3
 8002290:	f04f 0600 	mov.w	r6, #0
 8002294:	46a8      	mov	r8, r5
 8002296:	46b1      	mov	r9, r6
 8002298:	eb18 0308 	adds.w	r3, r8, r8
 800229c:	eb49 0409 	adc.w	r4, r9, r9
 80022a0:	4698      	mov	r8, r3
 80022a2:	46a1      	mov	r9, r4
 80022a4:	eb18 0805 	adds.w	r8, r8, r5
 80022a8:	eb49 0906 	adc.w	r9, r9, r6
 80022ac:	f04f 0100 	mov.w	r1, #0
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80022b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80022bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80022c0:	4688      	mov	r8, r1
 80022c2:	4691      	mov	r9, r2
 80022c4:	eb18 0005 	adds.w	r0, r8, r5
 80022c8:	eb49 0106 	adc.w	r1, r9, r6
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	461d      	mov	r5, r3
 80022d2:	f04f 0600 	mov.w	r6, #0
 80022d6:	196b      	adds	r3, r5, r5
 80022d8:	eb46 0406 	adc.w	r4, r6, r6
 80022dc:	461a      	mov	r2, r3
 80022de:	4623      	mov	r3, r4
 80022e0:	f7fd ff7e 	bl	80001e0 <__aeabi_uldivmod>
 80022e4:	4603      	mov	r3, r0
 80022e6:	460c      	mov	r4, r1
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b47      	ldr	r3, [pc, #284]	; (8002408 <UART_SetConfig+0x384>)
 80022ec:	fba3 2302 	umull	r2, r3, r3, r2
 80022f0:	095b      	lsrs	r3, r3, #5
 80022f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	461d      	mov	r5, r3
 80022fa:	f04f 0600 	mov.w	r6, #0
 80022fe:	46a9      	mov	r9, r5
 8002300:	46b2      	mov	sl, r6
 8002302:	eb19 0309 	adds.w	r3, r9, r9
 8002306:	eb4a 040a 	adc.w	r4, sl, sl
 800230a:	4699      	mov	r9, r3
 800230c:	46a2      	mov	sl, r4
 800230e:	eb19 0905 	adds.w	r9, r9, r5
 8002312:	eb4a 0a06 	adc.w	sl, sl, r6
 8002316:	f04f 0100 	mov.w	r1, #0
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002322:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002326:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800232a:	4689      	mov	r9, r1
 800232c:	4692      	mov	sl, r2
 800232e:	eb19 0005 	adds.w	r0, r9, r5
 8002332:	eb4a 0106 	adc.w	r1, sl, r6
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	461d      	mov	r5, r3
 800233c:	f04f 0600 	mov.w	r6, #0
 8002340:	196b      	adds	r3, r5, r5
 8002342:	eb46 0406 	adc.w	r4, r6, r6
 8002346:	461a      	mov	r2, r3
 8002348:	4623      	mov	r3, r4
 800234a:	f7fd ff49 	bl	80001e0 <__aeabi_uldivmod>
 800234e:	4603      	mov	r3, r0
 8002350:	460c      	mov	r4, r1
 8002352:	461a      	mov	r2, r3
 8002354:	4b2c      	ldr	r3, [pc, #176]	; (8002408 <UART_SetConfig+0x384>)
 8002356:	fba3 1302 	umull	r1, r3, r3, r2
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	2164      	movs	r1, #100	; 0x64
 800235e:	fb01 f303 	mul.w	r3, r1, r3
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	3332      	adds	r3, #50	; 0x32
 8002368:	4a27      	ldr	r2, [pc, #156]	; (8002408 <UART_SetConfig+0x384>)
 800236a:	fba2 2303 	umull	r2, r3, r2, r3
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002376:	4498      	add	r8, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	461d      	mov	r5, r3
 800237c:	f04f 0600 	mov.w	r6, #0
 8002380:	46a9      	mov	r9, r5
 8002382:	46b2      	mov	sl, r6
 8002384:	eb19 0309 	adds.w	r3, r9, r9
 8002388:	eb4a 040a 	adc.w	r4, sl, sl
 800238c:	4699      	mov	r9, r3
 800238e:	46a2      	mov	sl, r4
 8002390:	eb19 0905 	adds.w	r9, r9, r5
 8002394:	eb4a 0a06 	adc.w	sl, sl, r6
 8002398:	f04f 0100 	mov.w	r1, #0
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023ac:	4689      	mov	r9, r1
 80023ae:	4692      	mov	sl, r2
 80023b0:	eb19 0005 	adds.w	r0, r9, r5
 80023b4:	eb4a 0106 	adc.w	r1, sl, r6
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	461d      	mov	r5, r3
 80023be:	f04f 0600 	mov.w	r6, #0
 80023c2:	196b      	adds	r3, r5, r5
 80023c4:	eb46 0406 	adc.w	r4, r6, r6
 80023c8:	461a      	mov	r2, r3
 80023ca:	4623      	mov	r3, r4
 80023cc:	f7fd ff08 	bl	80001e0 <__aeabi_uldivmod>
 80023d0:	4603      	mov	r3, r0
 80023d2:	460c      	mov	r4, r1
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <UART_SetConfig+0x384>)
 80023d8:	fba3 1302 	umull	r1, r3, r3, r2
 80023dc:	095b      	lsrs	r3, r3, #5
 80023de:	2164      	movs	r1, #100	; 0x64
 80023e0:	fb01 f303 	mul.w	r3, r1, r3
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	3332      	adds	r3, #50	; 0x32
 80023ea:	4a07      	ldr	r2, [pc, #28]	; (8002408 <UART_SetConfig+0x384>)
 80023ec:	fba2 2303 	umull	r2, r3, r2, r3
 80023f0:	095b      	lsrs	r3, r3, #5
 80023f2:	f003 0207 	and.w	r2, r3, #7
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4442      	add	r2, r8
 80023fc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80023fe:	e1b2      	b.n	8002766 <UART_SetConfig+0x6e2>
 8002400:	40011000 	.word	0x40011000
 8002404:	40011400 	.word	0x40011400
 8002408:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4ad7      	ldr	r2, [pc, #860]	; (8002770 <UART_SetConfig+0x6ec>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d005      	beq.n	8002422 <UART_SetConfig+0x39e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4ad6      	ldr	r2, [pc, #856]	; (8002774 <UART_SetConfig+0x6f0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	f040 80d1 	bne.w	80025c4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002422:	f7ff fa7b 	bl	800191c <HAL_RCC_GetPCLK2Freq>
 8002426:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	469a      	mov	sl, r3
 800242c:	f04f 0b00 	mov.w	fp, #0
 8002430:	46d0      	mov	r8, sl
 8002432:	46d9      	mov	r9, fp
 8002434:	eb18 0308 	adds.w	r3, r8, r8
 8002438:	eb49 0409 	adc.w	r4, r9, r9
 800243c:	4698      	mov	r8, r3
 800243e:	46a1      	mov	r9, r4
 8002440:	eb18 080a 	adds.w	r8, r8, sl
 8002444:	eb49 090b 	adc.w	r9, r9, fp
 8002448:	f04f 0100 	mov.w	r1, #0
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002454:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002458:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800245c:	4688      	mov	r8, r1
 800245e:	4691      	mov	r9, r2
 8002460:	eb1a 0508 	adds.w	r5, sl, r8
 8002464:	eb4b 0609 	adc.w	r6, fp, r9
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4619      	mov	r1, r3
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	f04f 0400 	mov.w	r4, #0
 800247a:	0094      	lsls	r4, r2, #2
 800247c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002480:	008b      	lsls	r3, r1, #2
 8002482:	461a      	mov	r2, r3
 8002484:	4623      	mov	r3, r4
 8002486:	4628      	mov	r0, r5
 8002488:	4631      	mov	r1, r6
 800248a:	f7fd fea9 	bl	80001e0 <__aeabi_uldivmod>
 800248e:	4603      	mov	r3, r0
 8002490:	460c      	mov	r4, r1
 8002492:	461a      	mov	r2, r3
 8002494:	4bb8      	ldr	r3, [pc, #736]	; (8002778 <UART_SetConfig+0x6f4>)
 8002496:	fba3 2302 	umull	r2, r3, r3, r2
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	469b      	mov	fp, r3
 80024a4:	f04f 0c00 	mov.w	ip, #0
 80024a8:	46d9      	mov	r9, fp
 80024aa:	46e2      	mov	sl, ip
 80024ac:	eb19 0309 	adds.w	r3, r9, r9
 80024b0:	eb4a 040a 	adc.w	r4, sl, sl
 80024b4:	4699      	mov	r9, r3
 80024b6:	46a2      	mov	sl, r4
 80024b8:	eb19 090b 	adds.w	r9, r9, fp
 80024bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80024c0:	f04f 0100 	mov.w	r1, #0
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024d4:	4689      	mov	r9, r1
 80024d6:	4692      	mov	sl, r2
 80024d8:	eb1b 0509 	adds.w	r5, fp, r9
 80024dc:	eb4c 060a 	adc.w	r6, ip, sl
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4619      	mov	r1, r3
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	f04f 0400 	mov.w	r4, #0
 80024f2:	0094      	lsls	r4, r2, #2
 80024f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024f8:	008b      	lsls	r3, r1, #2
 80024fa:	461a      	mov	r2, r3
 80024fc:	4623      	mov	r3, r4
 80024fe:	4628      	mov	r0, r5
 8002500:	4631      	mov	r1, r6
 8002502:	f7fd fe6d 	bl	80001e0 <__aeabi_uldivmod>
 8002506:	4603      	mov	r3, r0
 8002508:	460c      	mov	r4, r1
 800250a:	461a      	mov	r2, r3
 800250c:	4b9a      	ldr	r3, [pc, #616]	; (8002778 <UART_SetConfig+0x6f4>)
 800250e:	fba3 1302 	umull	r1, r3, r3, r2
 8002512:	095b      	lsrs	r3, r3, #5
 8002514:	2164      	movs	r1, #100	; 0x64
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	3332      	adds	r3, #50	; 0x32
 8002520:	4a95      	ldr	r2, [pc, #596]	; (8002778 <UART_SetConfig+0x6f4>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800252c:	4498      	add	r8, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	469b      	mov	fp, r3
 8002532:	f04f 0c00 	mov.w	ip, #0
 8002536:	46d9      	mov	r9, fp
 8002538:	46e2      	mov	sl, ip
 800253a:	eb19 0309 	adds.w	r3, r9, r9
 800253e:	eb4a 040a 	adc.w	r4, sl, sl
 8002542:	4699      	mov	r9, r3
 8002544:	46a2      	mov	sl, r4
 8002546:	eb19 090b 	adds.w	r9, r9, fp
 800254a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800254e:	f04f 0100 	mov.w	r1, #0
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800255a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800255e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002562:	4689      	mov	r9, r1
 8002564:	4692      	mov	sl, r2
 8002566:	eb1b 0509 	adds.w	r5, fp, r9
 800256a:	eb4c 060a 	adc.w	r6, ip, sl
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	4619      	mov	r1, r3
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	f04f 0400 	mov.w	r4, #0
 8002580:	0094      	lsls	r4, r2, #2
 8002582:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002586:	008b      	lsls	r3, r1, #2
 8002588:	461a      	mov	r2, r3
 800258a:	4623      	mov	r3, r4
 800258c:	4628      	mov	r0, r5
 800258e:	4631      	mov	r1, r6
 8002590:	f7fd fe26 	bl	80001e0 <__aeabi_uldivmod>
 8002594:	4603      	mov	r3, r0
 8002596:	460c      	mov	r4, r1
 8002598:	461a      	mov	r2, r3
 800259a:	4b77      	ldr	r3, [pc, #476]	; (8002778 <UART_SetConfig+0x6f4>)
 800259c:	fba3 1302 	umull	r1, r3, r3, r2
 80025a0:	095b      	lsrs	r3, r3, #5
 80025a2:	2164      	movs	r1, #100	; 0x64
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	3332      	adds	r3, #50	; 0x32
 80025ae:	4a72      	ldr	r2, [pc, #456]	; (8002778 <UART_SetConfig+0x6f4>)
 80025b0:	fba2 2303 	umull	r2, r3, r2, r3
 80025b4:	095b      	lsrs	r3, r3, #5
 80025b6:	f003 020f 	and.w	r2, r3, #15
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4442      	add	r2, r8
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	e0d0      	b.n	8002766 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80025c4:	f7ff f996 	bl	80018f4 <HAL_RCC_GetPCLK1Freq>
 80025c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	469a      	mov	sl, r3
 80025ce:	f04f 0b00 	mov.w	fp, #0
 80025d2:	46d0      	mov	r8, sl
 80025d4:	46d9      	mov	r9, fp
 80025d6:	eb18 0308 	adds.w	r3, r8, r8
 80025da:	eb49 0409 	adc.w	r4, r9, r9
 80025de:	4698      	mov	r8, r3
 80025e0:	46a1      	mov	r9, r4
 80025e2:	eb18 080a 	adds.w	r8, r8, sl
 80025e6:	eb49 090b 	adc.w	r9, r9, fp
 80025ea:	f04f 0100 	mov.w	r1, #0
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80025f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80025fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80025fe:	4688      	mov	r8, r1
 8002600:	4691      	mov	r9, r2
 8002602:	eb1a 0508 	adds.w	r5, sl, r8
 8002606:	eb4b 0609 	adc.w	r6, fp, r9
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4619      	mov	r1, r3
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	f04f 0400 	mov.w	r4, #0
 800261c:	0094      	lsls	r4, r2, #2
 800261e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002622:	008b      	lsls	r3, r1, #2
 8002624:	461a      	mov	r2, r3
 8002626:	4623      	mov	r3, r4
 8002628:	4628      	mov	r0, r5
 800262a:	4631      	mov	r1, r6
 800262c:	f7fd fdd8 	bl	80001e0 <__aeabi_uldivmod>
 8002630:	4603      	mov	r3, r0
 8002632:	460c      	mov	r4, r1
 8002634:	461a      	mov	r2, r3
 8002636:	4b50      	ldr	r3, [pc, #320]	; (8002778 <UART_SetConfig+0x6f4>)
 8002638:	fba3 2302 	umull	r2, r3, r3, r2
 800263c:	095b      	lsrs	r3, r3, #5
 800263e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	469b      	mov	fp, r3
 8002646:	f04f 0c00 	mov.w	ip, #0
 800264a:	46d9      	mov	r9, fp
 800264c:	46e2      	mov	sl, ip
 800264e:	eb19 0309 	adds.w	r3, r9, r9
 8002652:	eb4a 040a 	adc.w	r4, sl, sl
 8002656:	4699      	mov	r9, r3
 8002658:	46a2      	mov	sl, r4
 800265a:	eb19 090b 	adds.w	r9, r9, fp
 800265e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002662:	f04f 0100 	mov.w	r1, #0
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800266e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002672:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002676:	4689      	mov	r9, r1
 8002678:	4692      	mov	sl, r2
 800267a:	eb1b 0509 	adds.w	r5, fp, r9
 800267e:	eb4c 060a 	adc.w	r6, ip, sl
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4619      	mov	r1, r3
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	f04f 0400 	mov.w	r4, #0
 8002694:	0094      	lsls	r4, r2, #2
 8002696:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800269a:	008b      	lsls	r3, r1, #2
 800269c:	461a      	mov	r2, r3
 800269e:	4623      	mov	r3, r4
 80026a0:	4628      	mov	r0, r5
 80026a2:	4631      	mov	r1, r6
 80026a4:	f7fd fd9c 	bl	80001e0 <__aeabi_uldivmod>
 80026a8:	4603      	mov	r3, r0
 80026aa:	460c      	mov	r4, r1
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b32      	ldr	r3, [pc, #200]	; (8002778 <UART_SetConfig+0x6f4>)
 80026b0:	fba3 1302 	umull	r1, r3, r3, r2
 80026b4:	095b      	lsrs	r3, r3, #5
 80026b6:	2164      	movs	r1, #100	; 0x64
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	3332      	adds	r3, #50	; 0x32
 80026c2:	4a2d      	ldr	r2, [pc, #180]	; (8002778 <UART_SetConfig+0x6f4>)
 80026c4:	fba2 2303 	umull	r2, r3, r2, r3
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ce:	4498      	add	r8, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	469b      	mov	fp, r3
 80026d4:	f04f 0c00 	mov.w	ip, #0
 80026d8:	46d9      	mov	r9, fp
 80026da:	46e2      	mov	sl, ip
 80026dc:	eb19 0309 	adds.w	r3, r9, r9
 80026e0:	eb4a 040a 	adc.w	r4, sl, sl
 80026e4:	4699      	mov	r9, r3
 80026e6:	46a2      	mov	sl, r4
 80026e8:	eb19 090b 	adds.w	r9, r9, fp
 80026ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80026f0:	f04f 0100 	mov.w	r1, #0
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002700:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002704:	4689      	mov	r9, r1
 8002706:	4692      	mov	sl, r2
 8002708:	eb1b 0509 	adds.w	r5, fp, r9
 800270c:	eb4c 060a 	adc.w	r6, ip, sl
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4619      	mov	r1, r3
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	f04f 0400 	mov.w	r4, #0
 8002722:	0094      	lsls	r4, r2, #2
 8002724:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002728:	008b      	lsls	r3, r1, #2
 800272a:	461a      	mov	r2, r3
 800272c:	4623      	mov	r3, r4
 800272e:	4628      	mov	r0, r5
 8002730:	4631      	mov	r1, r6
 8002732:	f7fd fd55 	bl	80001e0 <__aeabi_uldivmod>
 8002736:	4603      	mov	r3, r0
 8002738:	460c      	mov	r4, r1
 800273a:	461a      	mov	r2, r3
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <UART_SetConfig+0x6f4>)
 800273e:	fba3 1302 	umull	r1, r3, r3, r2
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	2164      	movs	r1, #100	; 0x64
 8002746:	fb01 f303 	mul.w	r3, r1, r3
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	3332      	adds	r3, #50	; 0x32
 8002750:	4a09      	ldr	r2, [pc, #36]	; (8002778 <UART_SetConfig+0x6f4>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	f003 020f 	and.w	r2, r3, #15
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4442      	add	r2, r8
 8002762:	609a      	str	r2, [r3, #8]
}
 8002764:	e7ff      	b.n	8002766 <UART_SetConfig+0x6e2>
 8002766:	bf00      	nop
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002770:	40011000 	.word	0x40011000
 8002774:	40011400 	.word	0x40011400
 8002778:	51eb851f 	.word	0x51eb851f

0800277c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800278a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800278e:	2b84      	cmp	r3, #132	; 0x84
 8002790:	d005      	beq.n	800279e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002792:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4413      	add	r3, r2
 800279a:	3303      	adds	r3, #3
 800279c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800279e:	68fb      	ldr	r3, [r7, #12]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027b2:	f3ef 8305 	mrs	r3, IPSR
 80027b6:	607b      	str	r3, [r7, #4]
  return(result);
 80027b8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	bf14      	ite	ne
 80027be:	2301      	movne	r3, #1
 80027c0:	2300      	moveq	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80027d4:	f001 f8e6 	bl	80039a4 <vTaskStartScheduler>
  
  return osOK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	bd80      	pop	{r7, pc}

080027de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80027de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027e0:	b089      	sub	sp, #36	; 0x24
 80027e2:	af04      	add	r7, sp, #16
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d020      	beq.n	8002832 <osThreadCreate+0x54>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01c      	beq.n	8002832 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685c      	ldr	r4, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681d      	ldr	r5, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691e      	ldr	r6, [r3, #16]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff ffb6 	bl	800277c <makeFreeRtosPriority>
 8002810:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800281a:	9202      	str	r2, [sp, #8]
 800281c:	9301      	str	r3, [sp, #4]
 800281e:	9100      	str	r1, [sp, #0]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	4632      	mov	r2, r6
 8002824:	4629      	mov	r1, r5
 8002826:	4620      	mov	r0, r4
 8002828:	f000 ff2d 	bl	8003686 <xTaskCreateStatic>
 800282c:	4603      	mov	r3, r0
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	e01c      	b.n	800286c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685c      	ldr	r4, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800283e:	b29e      	uxth	r6, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff ff98 	bl	800277c <makeFreeRtosPriority>
 800284c:	4602      	mov	r2, r0
 800284e:	f107 030c 	add.w	r3, r7, #12
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	9200      	str	r2, [sp, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	4632      	mov	r2, r6
 800285a:	4629      	mov	r1, r5
 800285c:	4620      	mov	r0, r4
 800285e:	f000 ff6c 	bl	800373a <xTaskCreate>
 8002862:	4603      	mov	r3, r0
 8002864:	2b01      	cmp	r3, #1
 8002866:	d001      	beq.n	800286c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002868:	2300      	movs	r3, #0
 800286a:	e000      	b.n	800286e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800286c:	68fb      	ldr	r3, [r7, #12]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002876 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d007      	beq.n	8002896 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4619      	mov	r1, r3
 800288c:	2001      	movs	r0, #1
 800288e:	f000 faae 	bl	8002dee <xQueueCreateMutexStatic>
 8002892:	4603      	mov	r3, r0
 8002894:	e003      	b.n	800289e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8002896:	2001      	movs	r0, #1
 8002898:	f000 fa91 	bl	8002dbe <xQueueCreateMutex>
 800289c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <osMutexWait+0x18>
    return osErrorParameter;
 80028bc:	2380      	movs	r3, #128	; 0x80
 80028be:	e03a      	b.n	8002936 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ca:	d103      	bne.n	80028d4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80028cc:	f04f 33ff 	mov.w	r3, #4294967295
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	e009      	b.n	80028e8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d006      	beq.n	80028e8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <osMutexWait+0x40>
      ticks = 1;
 80028e4:	2301      	movs	r3, #1
 80028e6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80028e8:	f7ff ff60 	bl	80027ac <inHandlerMode>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d017      	beq.n	8002922 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80028f2:	f107 0308 	add.w	r3, r7, #8
 80028f6:	461a      	mov	r2, r3
 80028f8:	2100      	movs	r1, #0
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fd1e 	bl	800333c <xQueueReceiveFromISR>
 8002900:	4603      	mov	r3, r0
 8002902:	2b01      	cmp	r3, #1
 8002904:	d001      	beq.n	800290a <osMutexWait+0x62>
      return osErrorOS;
 8002906:	23ff      	movs	r3, #255	; 0xff
 8002908:	e015      	b.n	8002936 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d011      	beq.n	8002934 <osMutexWait+0x8c>
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <osMutexWait+0x98>)
 8002912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	e008      	b.n	8002934 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8002922:	68f9      	ldr	r1, [r7, #12]
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 fc01 	bl	800312c <xQueueSemaphoreTake>
 800292a:	4603      	mov	r3, r0
 800292c:	2b01      	cmp	r3, #1
 800292e:	d001      	beq.n	8002934 <osMutexWait+0x8c>
    return osErrorOS;
 8002930:	23ff      	movs	r3, #255	; 0xff
 8002932:	e000      	b.n	8002936 <osMutexWait+0x8e>
  }
  
  return osOK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	e000ed04 	.word	0xe000ed04

08002944 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002950:	2300      	movs	r3, #0
 8002952:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8002954:	f7ff ff2a 	bl	80027ac <inHandlerMode>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d016      	beq.n	800298c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800295e:	f107 0308 	add.w	r3, r7, #8
 8002962:	4619      	mov	r1, r3
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 fb57 	bl	8003018 <xQueueGiveFromISR>
 800296a:	4603      	mov	r3, r0
 800296c:	2b01      	cmp	r3, #1
 800296e:	d001      	beq.n	8002974 <osMutexRelease+0x30>
      return osErrorOS;
 8002970:	23ff      	movs	r3, #255	; 0xff
 8002972:	e017      	b.n	80029a4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d013      	beq.n	80029a2 <osMutexRelease+0x5e>
 800297a:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <osMutexRelease+0x68>)
 800297c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	f3bf 8f4f 	dsb	sy
 8002986:	f3bf 8f6f 	isb	sy
 800298a:	e00a      	b.n	80029a2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800298c:	2300      	movs	r3, #0
 800298e:	2200      	movs	r2, #0
 8002990:	2100      	movs	r1, #0
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fa46 	bl	8002e24 <xQueueGenericSend>
 8002998:	4603      	mov	r3, r0
 800299a:	2b01      	cmp	r3, #1
 800299c:	d001      	beq.n	80029a2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800299e:	23ff      	movs	r3, #255	; 0xff
 80029a0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80029a2:	68fb      	ldr	r3, [r7, #12]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	e000ed04 	.word	0xe000ed04

080029b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f103 0208 	add.w	r2, r3, #8
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f04f 32ff 	mov.w	r2, #4294967295
 80029c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f103 0208 	add.w	r2, r3, #8
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f103 0208 	add.w	r2, r3, #8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b085      	sub	sp, #20
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	601a      	str	r2, [r3, #0]
}
 8002a46:	bf00      	nop
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a52:	b480      	push	{r7}
 8002a54:	b085      	sub	sp, #20
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
 8002a5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d103      	bne.n	8002a72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	e00c      	b.n	8002a8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3308      	adds	r3, #8
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	e002      	b.n	8002a80 <vListInsert+0x2e>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d2f6      	bcs.n	8002a7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	601a      	str	r2, [r3, #0]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6892      	ldr	r2, [r2, #8]
 8002ada:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6852      	ldr	r2, [r2, #4]
 8002ae4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d103      	bne.n	8002af8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	1e5a      	subs	r2, r3, #1
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d109      	bne.n	8002b40 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b30:	f383 8811 	msr	BASEPRI, r3
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	e7fe      	b.n	8002b3e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002b40:	f001 fe7c 	bl	800483c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4c:	68f9      	ldr	r1, [r7, #12]
 8002b4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	441a      	add	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b70:	3b01      	subs	r3, #1
 8002b72:	68f9      	ldr	r1, [r7, #12]
 8002b74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	441a      	add	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	22ff      	movs	r2, #255	; 0xff
 8002b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	22ff      	movs	r2, #255	; 0xff
 8002b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d114      	bne.n	8002bc0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d01a      	beq.n	8002bd4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3310      	adds	r3, #16
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f001 f93c 	bl	8003e20 <xTaskRemoveFromEventList>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d012      	beq.n	8002bd4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <xQueueGenericReset+0xcc>)
 8002bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	f3bf 8f4f 	dsb	sy
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	e009      	b.n	8002bd4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	3310      	adds	r3, #16
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fef3 	bl	80029b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	3324      	adds	r3, #36	; 0x24
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff feee 	bl	80029b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002bd4:	f001 fe60 	bl	8004898 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002bd8:	2301      	movs	r3, #1
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	e000ed04 	.word	0xe000ed04

08002be8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08e      	sub	sp, #56	; 0x38
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d109      	bne.n	8002c10 <xQueueGenericCreateStatic+0x28>
 8002bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c00:	f383 8811 	msr	BASEPRI, r3
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c0e:	e7fe      	b.n	8002c0e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d109      	bne.n	8002c2a <xQueueGenericCreateStatic+0x42>
 8002c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1a:	f383 8811 	msr	BASEPRI, r3
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
 8002c28:	e7fe      	b.n	8002c28 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <xQueueGenericCreateStatic+0x4e>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <xQueueGenericCreateStatic+0x52>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <xQueueGenericCreateStatic+0x54>
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d109      	bne.n	8002c54 <xQueueGenericCreateStatic+0x6c>
 8002c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c44:	f383 8811 	msr	BASEPRI, r3
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	623b      	str	r3, [r7, #32]
 8002c52:	e7fe      	b.n	8002c52 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d102      	bne.n	8002c60 <xQueueGenericCreateStatic+0x78>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <xQueueGenericCreateStatic+0x7c>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <xQueueGenericCreateStatic+0x7e>
 8002c64:	2300      	movs	r3, #0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <xQueueGenericCreateStatic+0x96>
 8002c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6e:	f383 8811 	msr	BASEPRI, r3
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	61fb      	str	r3, [r7, #28]
 8002c7c:	e7fe      	b.n	8002c7c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c7e:	2348      	movs	r3, #72	; 0x48
 8002c80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2b48      	cmp	r3, #72	; 0x48
 8002c86:	d009      	beq.n	8002c9c <xQueueGenericCreateStatic+0xb4>
 8002c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	61bb      	str	r3, [r7, #24]
 8002c9a:	e7fe      	b.n	8002c9a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c9c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00d      	beq.n	8002cc4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cb0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f844 	bl	8002d4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3730      	adds	r7, #48	; 0x30
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b08a      	sub	sp, #40	; 0x28
 8002cd2:	af02      	add	r7, sp, #8
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <xQueueGenericCreate+0x28>
 8002ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce6:	f383 8811 	msr	BASEPRI, r3
 8002cea:	f3bf 8f6f 	isb	sy
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	e7fe      	b.n	8002cf4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d102      	bne.n	8002d02 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61fb      	str	r3, [r7, #28]
 8002d00:	e004      	b.n	8002d0c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	fb02 f303 	mul.w	r3, r2, r3
 8002d0a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	3348      	adds	r3, #72	; 0x48
 8002d10:	4618      	mov	r0, r3
 8002d12:	f001 fead 	bl	8004a70 <pvPortMalloc>
 8002d16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d011      	beq.n	8002d42 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	3348      	adds	r3, #72	; 0x48
 8002d26:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d30:	79fa      	ldrb	r2, [r7, #7]
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	4613      	mov	r3, r2
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f805 	bl	8002d4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d42:	69bb      	ldr	r3, [r7, #24]
	}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3720      	adds	r7, #32
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d103      	bne.n	8002d68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	e002      	b.n	8002d6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	69b8      	ldr	r0, [r7, #24]
 8002d7e:	f7ff fecb 	bl	8002b18 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00e      	beq.n	8002db6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002daa:	2300      	movs	r3, #0
 8002dac:	2200      	movs	r2, #0
 8002dae:	2100      	movs	r1, #0
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f837 	bl	8002e24 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002db6:	bf00      	nop
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b086      	sub	sp, #24
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	6939      	ldr	r1, [r7, #16]
 8002dd6:	6978      	ldr	r0, [r7, #20]
 8002dd8:	f7ff ff79 	bl	8002cce <xQueueGenericCreate>
 8002ddc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f7ff ffd3 	bl	8002d8a <prvInitialiseMutex>

		return xNewQueue;
 8002de4:	68fb      	ldr	r3, [r7, #12]
	}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b088      	sub	sp, #32
 8002df2:	af02      	add	r7, sp, #8
 8002df4:	4603      	mov	r3, r0
 8002df6:	6039      	str	r1, [r7, #0]
 8002df8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	6939      	ldr	r1, [r7, #16]
 8002e0c:	6978      	ldr	r0, [r7, #20]
 8002e0e:	f7ff feeb 	bl	8002be8 <xQueueGenericCreateStatic>
 8002e12:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f7ff ffb8 	bl	8002d8a <prvInitialiseMutex>

		return xNewQueue;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
	}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08e      	sub	sp, #56	; 0x38
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
 8002e30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e32:	2300      	movs	r3, #0
 8002e34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d109      	bne.n	8002e54 <xQueueGenericSend+0x30>
 8002e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e44:	f383 8811 	msr	BASEPRI, r3
 8002e48:	f3bf 8f6f 	isb	sy
 8002e4c:	f3bf 8f4f 	dsb	sy
 8002e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e52:	e7fe      	b.n	8002e52 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d103      	bne.n	8002e62 <xQueueGenericSend+0x3e>
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <xQueueGenericSend+0x42>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <xQueueGenericSend+0x44>
 8002e66:	2300      	movs	r3, #0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d109      	bne.n	8002e80 <xQueueGenericSend+0x5c>
 8002e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e70:	f383 8811 	msr	BASEPRI, r3
 8002e74:	f3bf 8f6f 	isb	sy
 8002e78:	f3bf 8f4f 	dsb	sy
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7e:	e7fe      	b.n	8002e7e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d103      	bne.n	8002e8e <xQueueGenericSend+0x6a>
 8002e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <xQueueGenericSend+0x6e>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <xQueueGenericSend+0x70>
 8002e92:	2300      	movs	r3, #0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d109      	bne.n	8002eac <xQueueGenericSend+0x88>
 8002e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9c:	f383 8811 	msr	BASEPRI, r3
 8002ea0:	f3bf 8f6f 	isb	sy
 8002ea4:	f3bf 8f4f 	dsb	sy
 8002ea8:	623b      	str	r3, [r7, #32]
 8002eaa:	e7fe      	b.n	8002eaa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002eac:	f001 f96e 	bl	800418c <xTaskGetSchedulerState>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d102      	bne.n	8002ebc <xQueueGenericSend+0x98>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <xQueueGenericSend+0x9c>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <xQueueGenericSend+0x9e>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d109      	bne.n	8002eda <xQueueGenericSend+0xb6>
 8002ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eca:	f383 8811 	msr	BASEPRI, r3
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	f3bf 8f4f 	dsb	sy
 8002ed6:	61fb      	str	r3, [r7, #28]
 8002ed8:	e7fe      	b.n	8002ed8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002eda:	f001 fcaf 	bl	800483c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d302      	bcc.n	8002ef0 <xQueueGenericSend+0xcc>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d129      	bne.n	8002f44 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	68b9      	ldr	r1, [r7, #8]
 8002ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ef6:	f000 fab6 	bl	8003466 <prvCopyDataToQueue>
 8002efa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d010      	beq.n	8002f26 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f06:	3324      	adds	r3, #36	; 0x24
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 ff89 	bl	8003e20 <xTaskRemoveFromEventList>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d013      	beq.n	8002f3c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f14:	4b3f      	ldr	r3, [pc, #252]	; (8003014 <xQueueGenericSend+0x1f0>)
 8002f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	e00a      	b.n	8002f3c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f2c:	4b39      	ldr	r3, [pc, #228]	; (8003014 <xQueueGenericSend+0x1f0>)
 8002f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f3c:	f001 fcac 	bl	8004898 <vPortExitCritical>
				return pdPASS;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e063      	b.n	800300c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d103      	bne.n	8002f52 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f4a:	f001 fca5 	bl	8004898 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	e05c      	b.n	800300c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d106      	bne.n	8002f66 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f58:	f107 0314 	add.w	r3, r7, #20
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 ffc1 	bl	8003ee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f62:	2301      	movs	r3, #1
 8002f64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f66:	f001 fc97 	bl	8004898 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f6a:	f000 fd79 	bl	8003a60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f6e:	f001 fc65 	bl	800483c <vPortEnterCritical>
 8002f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f78:	b25b      	sxtb	r3, r3
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7e:	d103      	bne.n	8002f88 <xQueueGenericSend+0x164>
 8002f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f8e:	b25b      	sxtb	r3, r3
 8002f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f94:	d103      	bne.n	8002f9e <xQueueGenericSend+0x17a>
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f9e:	f001 fc7b 	bl	8004898 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fa2:	1d3a      	adds	r2, r7, #4
 8002fa4:	f107 0314 	add.w	r3, r7, #20
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 ffb0 	bl	8003f10 <xTaskCheckForTimeOut>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d124      	bne.n	8003000 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002fb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fb8:	f000 fb4d 	bl	8003656 <prvIsQueueFull>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d018      	beq.n	8002ff4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc4:	3310      	adds	r3, #16
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	4611      	mov	r1, r2
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 ff04 	bl	8003dd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002fd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fd2:	f000 fad8 	bl	8003586 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002fd6:	f000 fd51 	bl	8003a7c <xTaskResumeAll>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f47f af7c 	bne.w	8002eda <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002fe2:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <xQueueGenericSend+0x1f0>)
 8002fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	f3bf 8f4f 	dsb	sy
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	e772      	b.n	8002eda <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ff6:	f000 fac6 	bl	8003586 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ffa:	f000 fd3f 	bl	8003a7c <xTaskResumeAll>
 8002ffe:	e76c      	b.n	8002eda <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003002:	f000 fac0 	bl	8003586 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003006:	f000 fd39 	bl	8003a7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800300a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800300c:	4618      	mov	r0, r3
 800300e:	3738      	adds	r7, #56	; 0x38
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	e000ed04 	.word	0xe000ed04

08003018 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08e      	sub	sp, #56	; 0x38
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	2b00      	cmp	r3, #0
 800302a:	d109      	bne.n	8003040 <xQueueGiveFromISR+0x28>
 800302c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003030:	f383 8811 	msr	BASEPRI, r3
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	623b      	str	r3, [r7, #32]
 800303e:	e7fe      	b.n	800303e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	2b00      	cmp	r3, #0
 8003046:	d009      	beq.n	800305c <xQueueGiveFromISR+0x44>
 8003048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304c:	f383 8811 	msr	BASEPRI, r3
 8003050:	f3bf 8f6f 	isb	sy
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	e7fe      	b.n	800305a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d103      	bne.n	800306c <xQueueGiveFromISR+0x54>
 8003064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <xQueueGiveFromISR+0x58>
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <xQueueGiveFromISR+0x5a>
 8003070:	2300      	movs	r3, #0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <xQueueGiveFromISR+0x72>
 8003076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307a:	f383 8811 	msr	BASEPRI, r3
 800307e:	f3bf 8f6f 	isb	sy
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	61bb      	str	r3, [r7, #24]
 8003088:	e7fe      	b.n	8003088 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800308a:	f001 fcb3 	bl	80049f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800308e:	f3ef 8211 	mrs	r2, BASEPRI
 8003092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	617a      	str	r2, [r7, #20]
 80030a4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80030a6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80030b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d22b      	bcs.n	8003112 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80030cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d4:	d112      	bne.n	80030fc <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d016      	beq.n	800310c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e0:	3324      	adds	r3, #36	; 0x24
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fe9c 	bl	8003e20 <xTaskRemoveFromEventList>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00e      	beq.n	800310c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00b      	beq.n	800310c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	2201      	movs	r2, #1
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	e007      	b.n	800310c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80030fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003100:	3301      	adds	r3, #1
 8003102:	b2db      	uxtb	r3, r3
 8003104:	b25a      	sxtb	r2, r3
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800310c:	2301      	movs	r3, #1
 800310e:	637b      	str	r3, [r7, #52]	; 0x34
 8003110:	e001      	b.n	8003116 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003112:	2300      	movs	r3, #0
 8003114:	637b      	str	r3, [r7, #52]	; 0x34
 8003116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003118:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003122:	4618      	mov	r0, r3
 8003124:	3738      	adds	r7, #56	; 0x38
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08e      	sub	sp, #56	; 0x38
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003136:	2300      	movs	r3, #0
 8003138:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800313e:	2300      	movs	r3, #0
 8003140:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003144:	2b00      	cmp	r3, #0
 8003146:	d109      	bne.n	800315c <xQueueSemaphoreTake+0x30>
	__asm volatile
 8003148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	623b      	str	r3, [r7, #32]
 800315a:	e7fe      	b.n	800315a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800315c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d009      	beq.n	8003178 <xQueueSemaphoreTake+0x4c>
 8003164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003168:	f383 8811 	msr	BASEPRI, r3
 800316c:	f3bf 8f6f 	isb	sy
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	e7fe      	b.n	8003176 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003178:	f001 f808 	bl	800418c <xTaskGetSchedulerState>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d102      	bne.n	8003188 <xQueueSemaphoreTake+0x5c>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <xQueueSemaphoreTake+0x60>
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <xQueueSemaphoreTake+0x62>
 800318c:	2300      	movs	r3, #0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <xQueueSemaphoreTake+0x7a>
 8003192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	61bb      	str	r3, [r7, #24]
 80031a4:	e7fe      	b.n	80031a4 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031a6:	f001 fb49 	bl	800483c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80031aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80031b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d024      	beq.n	8003200 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	1e5a      	subs	r2, r3, #1
 80031ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031bc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d104      	bne.n	80031d0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80031c6:	f001 f99b 	bl	8004500 <pvTaskIncrementMutexHeldCount>
 80031ca:	4602      	mov	r2, r0
 80031cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ce:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00f      	beq.n	80031f8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031da:	3310      	adds	r3, #16
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fe1f 	bl	8003e20 <xTaskRemoveFromEventList>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d007      	beq.n	80031f8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031e8:	4b53      	ldr	r3, [pc, #332]	; (8003338 <xQueueSemaphoreTake+0x20c>)
 80031ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	f3bf 8f4f 	dsb	sy
 80031f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031f8:	f001 fb4e 	bl	8004898 <vPortExitCritical>
				return pdPASS;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e096      	b.n	800332e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d110      	bne.n	8003228 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	2b00      	cmp	r3, #0
 800320a:	d009      	beq.n	8003220 <xQueueSemaphoreTake+0xf4>
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	e7fe      	b.n	800321e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003220:	f001 fb3a 	bl	8004898 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003224:	2300      	movs	r3, #0
 8003226:	e082      	b.n	800332e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800322e:	f107 030c 	add.w	r3, r7, #12
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fe56 	bl	8003ee4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003238:	2301      	movs	r3, #1
 800323a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800323c:	f001 fb2c 	bl	8004898 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003240:	f000 fc0e 	bl	8003a60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003244:	f001 fafa 	bl	800483c <vPortEnterCritical>
 8003248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800324e:	b25b      	sxtb	r3, r3
 8003250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003254:	d103      	bne.n	800325e <xQueueSemaphoreTake+0x132>
 8003256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003264:	b25b      	sxtb	r3, r3
 8003266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326a:	d103      	bne.n	8003274 <xQueueSemaphoreTake+0x148>
 800326c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003274:	f001 fb10 	bl	8004898 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003278:	463a      	mov	r2, r7
 800327a:	f107 030c 	add.w	r3, r7, #12
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f000 fe45 	bl	8003f10 <xTaskCheckForTimeOut>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d132      	bne.n	80032f2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800328c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800328e:	f000 f9cc 	bl	800362a <prvIsQueueEmpty>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d026      	beq.n	80032e6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d109      	bne.n	80032b4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80032a0:	f001 facc 	bl	800483c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 ff8d 	bl	80041c8 <xTaskPriorityInherit>
 80032ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80032b0:	f001 faf2 	bl	8004898 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b6:	3324      	adds	r3, #36	; 0x24
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 fd8b 	bl	8003dd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032c4:	f000 f95f 	bl	8003586 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032c8:	f000 fbd8 	bl	8003a7c <xTaskResumeAll>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f47f af69 	bne.w	80031a6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80032d4:	4b18      	ldr	r3, [pc, #96]	; (8003338 <xQueueSemaphoreTake+0x20c>)
 80032d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	e75f      	b.n	80031a6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80032e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032e8:	f000 f94d 	bl	8003586 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032ec:	f000 fbc6 	bl	8003a7c <xTaskResumeAll>
 80032f0:	e759      	b.n	80031a6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80032f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032f4:	f000 f947 	bl	8003586 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032f8:	f000 fbc0 	bl	8003a7c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032fe:	f000 f994 	bl	800362a <prvIsQueueEmpty>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	f43f af4e 	beq.w	80031a6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800330a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00d      	beq.n	800332c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8003310:	f001 fa94 	bl	800483c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003314:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003316:	f000 f88e 	bl	8003436 <prvGetDisinheritPriorityAfterTimeout>
 800331a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800331c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003322:	4618      	mov	r0, r3
 8003324:	f001 f854 	bl	80043d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003328:	f001 fab6 	bl	8004898 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800332c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800332e:	4618      	mov	r0, r3
 8003330:	3738      	adds	r7, #56	; 0x38
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	e000ed04 	.word	0xe000ed04

0800333c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08e      	sub	sp, #56	; 0x38
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800334c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <xQueueReceiveFromISR+0x2a>
 8003352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003356:	f383 8811 	msr	BASEPRI, r3
 800335a:	f3bf 8f6f 	isb	sy
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	623b      	str	r3, [r7, #32]
 8003364:	e7fe      	b.n	8003364 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d103      	bne.n	8003374 <xQueueReceiveFromISR+0x38>
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <xQueueReceiveFromISR+0x3c>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <xQueueReceiveFromISR+0x3e>
 8003378:	2300      	movs	r3, #0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <xQueueReceiveFromISR+0x56>
 800337e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003382:	f383 8811 	msr	BASEPRI, r3
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	61fb      	str	r3, [r7, #28]
 8003390:	e7fe      	b.n	8003390 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003392:	f001 fb2f 	bl	80049f4 <vPortValidateInterruptPriority>
	__asm volatile
 8003396:	f3ef 8211 	mrs	r2, BASEPRI
 800339a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339e:	f383 8811 	msr	BASEPRI, r3
 80033a2:	f3bf 8f6f 	isb	sy
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	61ba      	str	r2, [r7, #24]
 80033ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80033ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80033b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d02f      	beq.n	800341e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80033be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033c8:	68b9      	ldr	r1, [r7, #8]
 80033ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033cc:	f000 f8b5 	bl	800353a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	1e5a      	subs	r2, r3, #1
 80033d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80033d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80033dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e0:	d112      	bne.n	8003408 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d016      	beq.n	8003418 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ec:	3310      	adds	r3, #16
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fd16 	bl	8003e20 <xTaskRemoveFromEventList>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00e      	beq.n	8003418 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00b      	beq.n	8003418 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	e007      	b.n	8003418 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800340c:	3301      	adds	r3, #1
 800340e:	b2db      	uxtb	r3, r3
 8003410:	b25a      	sxtb	r2, r3
 8003412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003418:	2301      	movs	r3, #1
 800341a:	637b      	str	r3, [r7, #52]	; 0x34
 800341c:	e001      	b.n	8003422 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800341e:	2300      	movs	r3, #0
 8003420:	637b      	str	r3, [r7, #52]	; 0x34
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800342c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800342e:	4618      	mov	r0, r3
 8003430:	3738      	adds	r7, #56	; 0x38
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003436:	b480      	push	{r7}
 8003438:	b085      	sub	sp, #20
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	2b00      	cmp	r3, #0
 8003444:	d006      	beq.n	8003454 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f1c3 0307 	rsb	r3, r3, #7
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	e001      	b.n	8003458 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003458:	68fb      	ldr	r3, [r7, #12]
	}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b086      	sub	sp, #24
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10d      	bne.n	80034a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d14d      	bne.n	8003528 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	4618      	mov	r0, r3
 8003492:	f000 ff19 	bl	80042c8 <xTaskPriorityDisinherit>
 8003496:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
 800349e:	e043      	b.n	8003528 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d119      	bne.n	80034da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6858      	ldr	r0, [r3, #4]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	461a      	mov	r2, r3
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	f001 fcd7 	bl	8004e64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	441a      	add	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d32b      	bcc.n	8003528 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	e026      	b.n	8003528 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	68d8      	ldr	r0, [r3, #12]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	461a      	mov	r2, r3
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	f001 fcbd 	bl	8004e64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	425b      	negs	r3, r3
 80034f4:	441a      	add	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d207      	bcs.n	8003516 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	425b      	negs	r3, r3
 8003510:	441a      	add	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d105      	bne.n	8003528 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	3b01      	subs	r3, #1
 8003526:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003530:	697b      	ldr	r3, [r7, #20]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d018      	beq.n	800357e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	441a      	add	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	429a      	cmp	r2, r3
 8003564:	d303      	bcc.n	800356e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68d9      	ldr	r1, [r3, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	461a      	mov	r2, r3
 8003578:	6838      	ldr	r0, [r7, #0]
 800357a:	f001 fc73 	bl	8004e64 <memcpy>
	}
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800358e:	f001 f955 	bl	800483c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003598:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800359a:	e011      	b.n	80035c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d012      	beq.n	80035ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3324      	adds	r3, #36	; 0x24
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fc39 	bl	8003e20 <xTaskRemoveFromEventList>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80035b4:	f000 fd0c 	bl	8003fd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	dce9      	bgt.n	800359c <prvUnlockQueue+0x16>
 80035c8:	e000      	b.n	80035cc <prvUnlockQueue+0x46>
					break;
 80035ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	22ff      	movs	r2, #255	; 0xff
 80035d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80035d4:	f001 f960 	bl	8004898 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80035d8:	f001 f930 	bl	800483c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035e4:	e011      	b.n	800360a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d012      	beq.n	8003614 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3310      	adds	r3, #16
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fc14 	bl	8003e20 <xTaskRemoveFromEventList>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80035fe:	f000 fce7 	bl	8003fd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003602:	7bbb      	ldrb	r3, [r7, #14]
 8003604:	3b01      	subs	r3, #1
 8003606:	b2db      	uxtb	r3, r3
 8003608:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800360a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800360e:	2b00      	cmp	r3, #0
 8003610:	dce9      	bgt.n	80035e6 <prvUnlockQueue+0x60>
 8003612:	e000      	b.n	8003616 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003614:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	22ff      	movs	r2, #255	; 0xff
 800361a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800361e:	f001 f93b 	bl	8004898 <vPortExitCritical>
}
 8003622:	bf00      	nop
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003632:	f001 f903 	bl	800483c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363a:	2b00      	cmp	r3, #0
 800363c:	d102      	bne.n	8003644 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800363e:	2301      	movs	r3, #1
 8003640:	60fb      	str	r3, [r7, #12]
 8003642:	e001      	b.n	8003648 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003644:	2300      	movs	r3, #0
 8003646:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003648:	f001 f926 	bl	8004898 <vPortExitCritical>

	return xReturn;
 800364c:	68fb      	ldr	r3, [r7, #12]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800365e:	f001 f8ed 	bl	800483c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366a:	429a      	cmp	r2, r3
 800366c:	d102      	bne.n	8003674 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800366e:	2301      	movs	r3, #1
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	e001      	b.n	8003678 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003678:	f001 f90e 	bl	8004898 <vPortExitCritical>

	return xReturn;
 800367c:	68fb      	ldr	r3, [r7, #12]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003686:	b580      	push	{r7, lr}
 8003688:	b08e      	sub	sp, #56	; 0x38
 800368a:	af04      	add	r7, sp, #16
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <xTaskCreateStatic+0x28>
	__asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	623b      	str	r3, [r7, #32]
 80036ac:	e7fe      	b.n	80036ac <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80036ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d109      	bne.n	80036c8 <xTaskCreateStatic+0x42>
 80036b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	61fb      	str	r3, [r7, #28]
 80036c6:	e7fe      	b.n	80036c6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036c8:	2354      	movs	r3, #84	; 0x54
 80036ca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	2b54      	cmp	r3, #84	; 0x54
 80036d0:	d009      	beq.n	80036e6 <xTaskCreateStatic+0x60>
 80036d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	61bb      	str	r3, [r7, #24]
 80036e4:	e7fe      	b.n	80036e4 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d01e      	beq.n	800372c <xTaskCreateStatic+0xa6>
 80036ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01b      	beq.n	800372c <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	2202      	movs	r2, #2
 8003702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003706:	2300      	movs	r3, #0
 8003708:	9303      	str	r3, [sp, #12]
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	9302      	str	r3, [sp, #8]
 800370e:	f107 0314 	add.w	r3, r7, #20
 8003712:	9301      	str	r3, [sp, #4]
 8003714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f850 	bl	80037c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003724:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003726:	f000 f8d3 	bl	80038d0 <prvAddNewTaskToReadyList>
 800372a:	e001      	b.n	8003730 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003730:	697b      	ldr	r3, [r7, #20]
	}
 8003732:	4618      	mov	r0, r3
 8003734:	3728      	adds	r7, #40	; 0x28
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800373a:	b580      	push	{r7, lr}
 800373c:	b08c      	sub	sp, #48	; 0x30
 800373e:	af04      	add	r7, sp, #16
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	4613      	mov	r3, r2
 8003748:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800374a:	88fb      	ldrh	r3, [r7, #6]
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4618      	mov	r0, r3
 8003750:	f001 f98e 	bl	8004a70 <pvPortMalloc>
 8003754:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00e      	beq.n	800377a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800375c:	2054      	movs	r0, #84	; 0x54
 800375e:	f001 f987 	bl	8004a70 <pvPortMalloc>
 8003762:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	631a      	str	r2, [r3, #48]	; 0x30
 8003770:	e005      	b.n	800377e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003772:	6978      	ldr	r0, [r7, #20]
 8003774:	f001 fa3e 	bl	8004bf4 <vPortFree>
 8003778:	e001      	b.n	800377e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d017      	beq.n	80037b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800378c:	88fa      	ldrh	r2, [r7, #6]
 800378e:	2300      	movs	r3, #0
 8003790:	9303      	str	r3, [sp, #12]
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	9302      	str	r3, [sp, #8]
 8003796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003798:	9301      	str	r3, [sp, #4]
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f80e 	bl	80037c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037a8:	69f8      	ldr	r0, [r7, #28]
 80037aa:	f000 f891 	bl	80038d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037ae:	2301      	movs	r3, #1
 80037b0:	61bb      	str	r3, [r7, #24]
 80037b2:	e002      	b.n	80037ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037b4:	f04f 33ff 	mov.w	r3, #4294967295
 80037b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037ba:	69bb      	ldr	r3, [r7, #24]
	}
 80037bc:	4618      	mov	r0, r3
 80037be:	3720      	adds	r7, #32
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80037dc:	3b01      	subs	r3, #1
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	f023 0307 	bic.w	r3, r3, #7
 80037ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <prvInitialiseNewTask+0x46>
 80037f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	e7fe      	b.n	8003808 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d01f      	beq.n	8003850 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003810:	2300      	movs	r3, #0
 8003812:	61fb      	str	r3, [r7, #28]
 8003814:	e012      	b.n	800383c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	4413      	add	r3, r2
 800381c:	7819      	ldrb	r1, [r3, #0]
 800381e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	4413      	add	r3, r2
 8003824:	3334      	adds	r3, #52	; 0x34
 8003826:	460a      	mov	r2, r1
 8003828:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	4413      	add	r3, r2
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d006      	beq.n	8003844 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3301      	adds	r3, #1
 800383a:	61fb      	str	r3, [r7, #28]
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	2b0f      	cmp	r3, #15
 8003840:	d9e9      	bls.n	8003816 <prvInitialiseNewTask+0x52>
 8003842:	e000      	b.n	8003846 <prvInitialiseNewTask+0x82>
			{
				break;
 8003844:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800384e:	e003      	b.n	8003858 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385a:	2b06      	cmp	r3, #6
 800385c:	d901      	bls.n	8003862 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800385e:	2306      	movs	r3, #6
 8003860:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003866:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800386c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003870:	2200      	movs	r2, #0
 8003872:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	3304      	adds	r3, #4
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff f8b9 	bl	80029f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003880:	3318      	adds	r3, #24
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff f8b4 	bl	80029f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800388c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800388e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003890:	f1c3 0207 	rsb	r2, r3, #7
 8003894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003896:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800389c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	2200      	movs	r2, #0
 80038a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	68f9      	ldr	r1, [r7, #12]
 80038b0:	69b8      	ldr	r0, [r7, #24]
 80038b2:	f000 fe9f 	bl	80045f4 <pxPortInitialiseStack>
 80038b6:	4602      	mov	r2, r0
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80038bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038c8:	bf00      	nop
 80038ca:	3720      	adds	r7, #32
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038d8:	f000 ffb0 	bl	800483c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038dc:	4b2a      	ldr	r3, [pc, #168]	; (8003988 <prvAddNewTaskToReadyList+0xb8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3301      	adds	r3, #1
 80038e2:	4a29      	ldr	r2, [pc, #164]	; (8003988 <prvAddNewTaskToReadyList+0xb8>)
 80038e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038e6:	4b29      	ldr	r3, [pc, #164]	; (800398c <prvAddNewTaskToReadyList+0xbc>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d109      	bne.n	8003902 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038ee:	4a27      	ldr	r2, [pc, #156]	; (800398c <prvAddNewTaskToReadyList+0xbc>)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038f4:	4b24      	ldr	r3, [pc, #144]	; (8003988 <prvAddNewTaskToReadyList+0xb8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d110      	bne.n	800391e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038fc:	f000 fb8c 	bl	8004018 <prvInitialiseTaskLists>
 8003900:	e00d      	b.n	800391e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003902:	4b23      	ldr	r3, [pc, #140]	; (8003990 <prvAddNewTaskToReadyList+0xc0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d109      	bne.n	800391e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800390a:	4b20      	ldr	r3, [pc, #128]	; (800398c <prvAddNewTaskToReadyList+0xbc>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	429a      	cmp	r2, r3
 8003916:	d802      	bhi.n	800391e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003918:	4a1c      	ldr	r2, [pc, #112]	; (800398c <prvAddNewTaskToReadyList+0xbc>)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800391e:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <prvAddNewTaskToReadyList+0xc4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3301      	adds	r3, #1
 8003924:	4a1b      	ldr	r2, [pc, #108]	; (8003994 <prvAddNewTaskToReadyList+0xc4>)
 8003926:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	2201      	movs	r2, #1
 800392e:	409a      	lsls	r2, r3
 8003930:	4b19      	ldr	r3, [pc, #100]	; (8003998 <prvAddNewTaskToReadyList+0xc8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4313      	orrs	r3, r2
 8003936:	4a18      	ldr	r2, [pc, #96]	; (8003998 <prvAddNewTaskToReadyList+0xc8>)
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393e:	4613      	mov	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4a15      	ldr	r2, [pc, #84]	; (800399c <prvAddNewTaskToReadyList+0xcc>)
 8003948:	441a      	add	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3304      	adds	r3, #4
 800394e:	4619      	mov	r1, r3
 8003950:	4610      	mov	r0, r2
 8003952:	f7ff f85a 	bl	8002a0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003956:	f000 ff9f 	bl	8004898 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800395a:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <prvAddNewTaskToReadyList+0xc0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00e      	beq.n	8003980 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003962:	4b0a      	ldr	r3, [pc, #40]	; (800398c <prvAddNewTaskToReadyList+0xbc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	429a      	cmp	r2, r3
 800396e:	d207      	bcs.n	8003980 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003970:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <prvAddNewTaskToReadyList+0xd0>)
 8003972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003980:	bf00      	nop
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	20000380 	.word	0x20000380
 800398c:	20000280 	.word	0x20000280
 8003990:	2000038c 	.word	0x2000038c
 8003994:	2000039c 	.word	0x2000039c
 8003998:	20000388 	.word	0x20000388
 800399c:	20000284 	.word	0x20000284
 80039a0:	e000ed04 	.word	0xe000ed04

080039a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08a      	sub	sp, #40	; 0x28
 80039a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039b2:	463a      	mov	r2, r7
 80039b4:	1d39      	adds	r1, r7, #4
 80039b6:	f107 0308 	add.w	r3, r7, #8
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fc fd90 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039c0:	6839      	ldr	r1, [r7, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68ba      	ldr	r2, [r7, #8]
 80039c6:	9202      	str	r2, [sp, #8]
 80039c8:	9301      	str	r3, [sp, #4]
 80039ca:	2300      	movs	r3, #0
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	2300      	movs	r3, #0
 80039d0:	460a      	mov	r2, r1
 80039d2:	491d      	ldr	r1, [pc, #116]	; (8003a48 <vTaskStartScheduler+0xa4>)
 80039d4:	481d      	ldr	r0, [pc, #116]	; (8003a4c <vTaskStartScheduler+0xa8>)
 80039d6:	f7ff fe56 	bl	8003686 <xTaskCreateStatic>
 80039da:	4602      	mov	r2, r0
 80039dc:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <vTaskStartScheduler+0xac>)
 80039de:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039e0:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <vTaskStartScheduler+0xac>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039e8:	2301      	movs	r3, #1
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	e001      	b.n	80039f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d115      	bne.n	8003a24 <vTaskStartScheduler+0x80>
 80039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a0a:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <vTaskStartScheduler+0xb0>)
 8003a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a12:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <vTaskStartScheduler+0xb4>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a18:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <vTaskStartScheduler+0xb8>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a1e:	f000 fe6f 	bl	8004700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a22:	e00d      	b.n	8003a40 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2a:	d109      	bne.n	8003a40 <vTaskStartScheduler+0x9c>
 8003a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	e7fe      	b.n	8003a3e <vTaskStartScheduler+0x9a>
}
 8003a40:	bf00      	nop
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	08004f14 	.word	0x08004f14
 8003a4c:	08003fe9 	.word	0x08003fe9
 8003a50:	200003a4 	.word	0x200003a4
 8003a54:	200003a0 	.word	0x200003a0
 8003a58:	2000038c 	.word	0x2000038c
 8003a5c:	20000384 	.word	0x20000384

08003a60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003a64:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <vTaskSuspendAll+0x18>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	4a03      	ldr	r2, [pc, #12]	; (8003a78 <vTaskSuspendAll+0x18>)
 8003a6c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003a6e:	bf00      	nop
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	200003a8 	.word	0x200003a8

08003a7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a86:	2300      	movs	r3, #0
 8003a88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a8a:	4b41      	ldr	r3, [pc, #260]	; (8003b90 <xTaskResumeAll+0x114>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <xTaskResumeAll+0x2a>
 8003a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	e7fe      	b.n	8003aa4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003aa6:	f000 fec9 	bl	800483c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003aaa:	4b39      	ldr	r3, [pc, #228]	; (8003b90 <xTaskResumeAll+0x114>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	4a37      	ldr	r2, [pc, #220]	; (8003b90 <xTaskResumeAll+0x114>)
 8003ab2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ab4:	4b36      	ldr	r3, [pc, #216]	; (8003b90 <xTaskResumeAll+0x114>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d161      	bne.n	8003b80 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003abc:	4b35      	ldr	r3, [pc, #212]	; (8003b94 <xTaskResumeAll+0x118>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d05d      	beq.n	8003b80 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ac4:	e02e      	b.n	8003b24 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ac6:	4b34      	ldr	r3, [pc, #208]	; (8003b98 <xTaskResumeAll+0x11c>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	3318      	adds	r3, #24
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fe fff6 	bl	8002ac4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	3304      	adds	r3, #4
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fe fff1 	bl	8002ac4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	409a      	lsls	r2, r3
 8003aea:	4b2c      	ldr	r3, [pc, #176]	; (8003b9c <xTaskResumeAll+0x120>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	4a2a      	ldr	r2, [pc, #168]	; (8003b9c <xTaskResumeAll+0x120>)
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4a27      	ldr	r2, [pc, #156]	; (8003ba0 <xTaskResumeAll+0x124>)
 8003b02:	441a      	add	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	3304      	adds	r3, #4
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	f7fe ff7d 	bl	8002a0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b14:	4b23      	ldr	r3, [pc, #140]	; (8003ba4 <xTaskResumeAll+0x128>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d302      	bcc.n	8003b24 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003b1e:	4b22      	ldr	r3, [pc, #136]	; (8003ba8 <xTaskResumeAll+0x12c>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b24:	4b1c      	ldr	r3, [pc, #112]	; (8003b98 <xTaskResumeAll+0x11c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1cc      	bne.n	8003ac6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b32:	f000 fb0b 	bl	800414c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003b36:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <xTaskResumeAll+0x130>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d010      	beq.n	8003b64 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b42:	f000 f837 	bl	8003bb4 <xTaskIncrementTick>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003b4c:	4b16      	ldr	r3, [pc, #88]	; (8003ba8 <xTaskResumeAll+0x12c>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f1      	bne.n	8003b42 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003b5e:	4b13      	ldr	r3, [pc, #76]	; (8003bac <xTaskResumeAll+0x130>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b64:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <xTaskResumeAll+0x12c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d009      	beq.n	8003b80 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b70:	4b0f      	ldr	r3, [pc, #60]	; (8003bb0 <xTaskResumeAll+0x134>)
 8003b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b80:	f000 fe8a 	bl	8004898 <vPortExitCritical>

	return xAlreadyYielded;
 8003b84:	68bb      	ldr	r3, [r7, #8]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	200003a8 	.word	0x200003a8
 8003b94:	20000380 	.word	0x20000380
 8003b98:	20000340 	.word	0x20000340
 8003b9c:	20000388 	.word	0x20000388
 8003ba0:	20000284 	.word	0x20000284
 8003ba4:	20000280 	.word	0x20000280
 8003ba8:	20000394 	.word	0x20000394
 8003bac:	20000390 	.word	0x20000390
 8003bb0:	e000ed04 	.word	0xe000ed04

08003bb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bbe:	4b4e      	ldr	r3, [pc, #312]	; (8003cf8 <xTaskIncrementTick+0x144>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f040 8087 	bne.w	8003cd6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bc8:	4b4c      	ldr	r3, [pc, #304]	; (8003cfc <xTaskIncrementTick+0x148>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003bd0:	4a4a      	ldr	r2, [pc, #296]	; (8003cfc <xTaskIncrementTick+0x148>)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d11f      	bne.n	8003c1c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bdc:	4b48      	ldr	r3, [pc, #288]	; (8003d00 <xTaskIncrementTick+0x14c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d009      	beq.n	8003bfa <xTaskIncrementTick+0x46>
 8003be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bea:	f383 8811 	msr	BASEPRI, r3
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	e7fe      	b.n	8003bf8 <xTaskIncrementTick+0x44>
 8003bfa:	4b41      	ldr	r3, [pc, #260]	; (8003d00 <xTaskIncrementTick+0x14c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	4b40      	ldr	r3, [pc, #256]	; (8003d04 <xTaskIncrementTick+0x150>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a3e      	ldr	r2, [pc, #248]	; (8003d00 <xTaskIncrementTick+0x14c>)
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	4a3e      	ldr	r2, [pc, #248]	; (8003d04 <xTaskIncrementTick+0x150>)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	4b3e      	ldr	r3, [pc, #248]	; (8003d08 <xTaskIncrementTick+0x154>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3301      	adds	r3, #1
 8003c14:	4a3c      	ldr	r2, [pc, #240]	; (8003d08 <xTaskIncrementTick+0x154>)
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	f000 fa98 	bl	800414c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c1c:	4b3b      	ldr	r3, [pc, #236]	; (8003d0c <xTaskIncrementTick+0x158>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d348      	bcc.n	8003cb8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c26:	4b36      	ldr	r3, [pc, #216]	; (8003d00 <xTaskIncrementTick+0x14c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d104      	bne.n	8003c3a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c30:	4b36      	ldr	r3, [pc, #216]	; (8003d0c <xTaskIncrementTick+0x158>)
 8003c32:	f04f 32ff 	mov.w	r2, #4294967295
 8003c36:	601a      	str	r2, [r3, #0]
					break;
 8003c38:	e03e      	b.n	8003cb8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c3a:	4b31      	ldr	r3, [pc, #196]	; (8003d00 <xTaskIncrementTick+0x14c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d203      	bcs.n	8003c5a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c52:	4a2e      	ldr	r2, [pc, #184]	; (8003d0c <xTaskIncrementTick+0x158>)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c58:	e02e      	b.n	8003cb8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fe ff30 	bl	8002ac4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d004      	beq.n	8003c76 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	3318      	adds	r3, #24
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fe ff27 	bl	8002ac4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	409a      	lsls	r2, r3
 8003c7e:	4b24      	ldr	r3, [pc, #144]	; (8003d10 <xTaskIncrementTick+0x15c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	4a22      	ldr	r2, [pc, #136]	; (8003d10 <xTaskIncrementTick+0x15c>)
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4a1f      	ldr	r2, [pc, #124]	; (8003d14 <xTaskIncrementTick+0x160>)
 8003c96:	441a      	add	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	f7fe feb3 	bl	8002a0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca8:	4b1b      	ldr	r3, [pc, #108]	; (8003d18 <xTaskIncrementTick+0x164>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d3b9      	bcc.n	8003c26 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cb6:	e7b6      	b.n	8003c26 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cb8:	4b17      	ldr	r3, [pc, #92]	; (8003d18 <xTaskIncrementTick+0x164>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cbe:	4915      	ldr	r1, [pc, #84]	; (8003d14 <xTaskIncrementTick+0x160>)
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d907      	bls.n	8003ce0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	e004      	b.n	8003ce0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003cd6:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <xTaskIncrementTick+0x168>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	4a0f      	ldr	r2, [pc, #60]	; (8003d1c <xTaskIncrementTick+0x168>)
 8003cde:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <xTaskIncrementTick+0x16c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003cec:	697b      	ldr	r3, [r7, #20]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	200003a8 	.word	0x200003a8
 8003cfc:	20000384 	.word	0x20000384
 8003d00:	20000338 	.word	0x20000338
 8003d04:	2000033c 	.word	0x2000033c
 8003d08:	20000398 	.word	0x20000398
 8003d0c:	200003a0 	.word	0x200003a0
 8003d10:	20000388 	.word	0x20000388
 8003d14:	20000284 	.word	0x20000284
 8003d18:	20000280 	.word	0x20000280
 8003d1c:	20000390 	.word	0x20000390
 8003d20:	20000394 	.word	0x20000394

08003d24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d2a:	4b26      	ldr	r3, [pc, #152]	; (8003dc4 <vTaskSwitchContext+0xa0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d32:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <vTaskSwitchContext+0xa4>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d38:	e03e      	b.n	8003db8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003d3a:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <vTaskSwitchContext+0xa4>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d40:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <vTaskSwitchContext+0xa8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	fab3 f383 	clz	r3, r3
 8003d4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003d4e:	7afb      	ldrb	r3, [r7, #11]
 8003d50:	f1c3 031f 	rsb	r3, r3, #31
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	491e      	ldr	r1, [pc, #120]	; (8003dd0 <vTaskSwitchContext+0xac>)
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d109      	bne.n	8003d7e <vTaskSwitchContext+0x5a>
	__asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	607b      	str	r3, [r7, #4]
 8003d7c:	e7fe      	b.n	8003d7c <vTaskSwitchContext+0x58>
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4a11      	ldr	r2, [pc, #68]	; (8003dd0 <vTaskSwitchContext+0xac>)
 8003d8a:	4413      	add	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	605a      	str	r2, [r3, #4]
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	3308      	adds	r3, #8
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d104      	bne.n	8003dae <vTaskSwitchContext+0x8a>
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4a07      	ldr	r2, [pc, #28]	; (8003dd4 <vTaskSwitchContext+0xb0>)
 8003db6:	6013      	str	r3, [r2, #0]
}
 8003db8:	bf00      	nop
 8003dba:	371c      	adds	r7, #28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	200003a8 	.word	0x200003a8
 8003dc8:	20000394 	.word	0x20000394
 8003dcc:	20000388 	.word	0x20000388
 8003dd0:	20000284 	.word	0x20000284
 8003dd4:	20000280 	.word	0x20000280

08003dd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d109      	bne.n	8003dfc <vTaskPlaceOnEventList+0x24>
 8003de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	e7fe      	b.n	8003dfa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003dfc:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <vTaskPlaceOnEventList+0x44>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3318      	adds	r3, #24
 8003e02:	4619      	mov	r1, r3
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7fe fe24 	bl	8002a52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	6838      	ldr	r0, [r7, #0]
 8003e0e:	f000 fb8b 	bl	8004528 <prvAddCurrentTaskToDelayedList>
}
 8003e12:	bf00      	nop
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	20000280 	.word	0x20000280

08003e20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <xTaskRemoveFromEventList+0x2a>
 8003e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3a:	f383 8811 	msr	BASEPRI, r3
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	e7fe      	b.n	8003e48 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	3318      	adds	r3, #24
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fe fe38 	bl	8002ac4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e54:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <xTaskRemoveFromEventList+0xac>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d11c      	bne.n	8003e96 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fe fe2f 	bl	8002ac4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <xTaskRemoveFromEventList+0xb0>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	4a16      	ldr	r2, [pc, #88]	; (8003ed0 <xTaskRemoveFromEventList+0xb0>)
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4a13      	ldr	r2, [pc, #76]	; (8003ed4 <xTaskRemoveFromEventList+0xb4>)
 8003e86:	441a      	add	r2, r3
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4610      	mov	r0, r2
 8003e90:	f7fe fdbb 	bl	8002a0a <vListInsertEnd>
 8003e94:	e005      	b.n	8003ea2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	3318      	adds	r3, #24
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	480e      	ldr	r0, [pc, #56]	; (8003ed8 <xTaskRemoveFromEventList+0xb8>)
 8003e9e:	f7fe fdb4 	bl	8002a0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <xTaskRemoveFromEventList+0xbc>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d905      	bls.n	8003ebc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003eb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <xTaskRemoveFromEventList+0xc0>)
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	e001      	b.n	8003ec0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003ec0:	697b      	ldr	r3, [r7, #20]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	200003a8 	.word	0x200003a8
 8003ed0:	20000388 	.word	0x20000388
 8003ed4:	20000284 	.word	0x20000284
 8003ed8:	20000340 	.word	0x20000340
 8003edc:	20000280 	.word	0x20000280
 8003ee0:	20000394 	.word	0x20000394

08003ee4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003eec:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <vTaskInternalSetTimeOutState+0x24>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <vTaskInternalSetTimeOutState+0x28>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	605a      	str	r2, [r3, #4]
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	20000398 	.word	0x20000398
 8003f0c:	20000384 	.word	0x20000384

08003f10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b088      	sub	sp, #32
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d109      	bne.n	8003f34 <xTaskCheckForTimeOut+0x24>
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	e7fe      	b.n	8003f32 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d109      	bne.n	8003f4e <xTaskCheckForTimeOut+0x3e>
 8003f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	e7fe      	b.n	8003f4c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003f4e:	f000 fc75 	bl	800483c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f52:	4b1d      	ldr	r3, [pc, #116]	; (8003fc8 <xTaskCheckForTimeOut+0xb8>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6a:	d102      	bne.n	8003f72 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61fb      	str	r3, [r7, #28]
 8003f70:	e023      	b.n	8003fba <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <xTaskCheckForTimeOut+0xbc>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d007      	beq.n	8003f8e <xTaskCheckForTimeOut+0x7e>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d302      	bcc.n	8003f8e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	61fb      	str	r3, [r7, #28]
 8003f8c:	e015      	b.n	8003fba <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d20b      	bcs.n	8003fb0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	1ad2      	subs	r2, r2, r3
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff ff9d 	bl	8003ee4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
 8003fae:	e004      	b.n	8003fba <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003fba:	f000 fc6d 	bl	8004898 <vPortExitCritical>

	return xReturn;
 8003fbe:	69fb      	ldr	r3, [r7, #28]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3720      	adds	r7, #32
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	20000384 	.word	0x20000384
 8003fcc:	20000398 	.word	0x20000398

08003fd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003fd4:	4b03      	ldr	r3, [pc, #12]	; (8003fe4 <vTaskMissedYield+0x14>)
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	601a      	str	r2, [r3, #0]
}
 8003fda:	bf00      	nop
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	20000394 	.word	0x20000394

08003fe8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ff0:	f000 f852 	bl	8004098 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ff4:	4b06      	ldr	r3, [pc, #24]	; (8004010 <prvIdleTask+0x28>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d9f9      	bls.n	8003ff0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <prvIdleTask+0x2c>)
 8003ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800400c:	e7f0      	b.n	8003ff0 <prvIdleTask+0x8>
 800400e:	bf00      	nop
 8004010:	20000284 	.word	0x20000284
 8004014:	e000ed04 	.word	0xe000ed04

08004018 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800401e:	2300      	movs	r3, #0
 8004020:	607b      	str	r3, [r7, #4]
 8004022:	e00c      	b.n	800403e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4a12      	ldr	r2, [pc, #72]	; (8004078 <prvInitialiseTaskLists+0x60>)
 8004030:	4413      	add	r3, r2
 8004032:	4618      	mov	r0, r3
 8004034:	f7fe fcbc 	bl	80029b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3301      	adds	r3, #1
 800403c:	607b      	str	r3, [r7, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b06      	cmp	r3, #6
 8004042:	d9ef      	bls.n	8004024 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004044:	480d      	ldr	r0, [pc, #52]	; (800407c <prvInitialiseTaskLists+0x64>)
 8004046:	f7fe fcb3 	bl	80029b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800404a:	480d      	ldr	r0, [pc, #52]	; (8004080 <prvInitialiseTaskLists+0x68>)
 800404c:	f7fe fcb0 	bl	80029b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004050:	480c      	ldr	r0, [pc, #48]	; (8004084 <prvInitialiseTaskLists+0x6c>)
 8004052:	f7fe fcad 	bl	80029b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004056:	480c      	ldr	r0, [pc, #48]	; (8004088 <prvInitialiseTaskLists+0x70>)
 8004058:	f7fe fcaa 	bl	80029b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800405c:	480b      	ldr	r0, [pc, #44]	; (800408c <prvInitialiseTaskLists+0x74>)
 800405e:	f7fe fca7 	bl	80029b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004062:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <prvInitialiseTaskLists+0x78>)
 8004064:	4a05      	ldr	r2, [pc, #20]	; (800407c <prvInitialiseTaskLists+0x64>)
 8004066:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004068:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <prvInitialiseTaskLists+0x7c>)
 800406a:	4a05      	ldr	r2, [pc, #20]	; (8004080 <prvInitialiseTaskLists+0x68>)
 800406c:	601a      	str	r2, [r3, #0]
}
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	20000284 	.word	0x20000284
 800407c:	20000310 	.word	0x20000310
 8004080:	20000324 	.word	0x20000324
 8004084:	20000340 	.word	0x20000340
 8004088:	20000354 	.word	0x20000354
 800408c:	2000036c 	.word	0x2000036c
 8004090:	20000338 	.word	0x20000338
 8004094:	2000033c 	.word	0x2000033c

08004098 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800409e:	e019      	b.n	80040d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040a0:	f000 fbcc 	bl	800483c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040a4:	4b0f      	ldr	r3, [pc, #60]	; (80040e4 <prvCheckTasksWaitingTermination+0x4c>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3304      	adds	r3, #4
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fe fd07 	bl	8002ac4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040b6:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <prvCheckTasksWaitingTermination+0x50>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	4a0a      	ldr	r2, [pc, #40]	; (80040e8 <prvCheckTasksWaitingTermination+0x50>)
 80040be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040c0:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <prvCheckTasksWaitingTermination+0x54>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3b01      	subs	r3, #1
 80040c6:	4a09      	ldr	r2, [pc, #36]	; (80040ec <prvCheckTasksWaitingTermination+0x54>)
 80040c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040ca:	f000 fbe5 	bl	8004898 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f80e 	bl	80040f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040d4:	4b05      	ldr	r3, [pc, #20]	; (80040ec <prvCheckTasksWaitingTermination+0x54>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e1      	bne.n	80040a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040dc:	bf00      	nop
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	20000354 	.word	0x20000354
 80040e8:	20000380 	.word	0x20000380
 80040ec:	20000368 	.word	0x20000368

080040f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d108      	bne.n	8004114 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fd74 	bl	8004bf4 <vPortFree>
				vPortFree( pxTCB );
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fd71 	bl	8004bf4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004112:	e017      	b.n	8004144 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800411a:	2b01      	cmp	r3, #1
 800411c:	d103      	bne.n	8004126 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fd68 	bl	8004bf4 <vPortFree>
	}
 8004124:	e00e      	b.n	8004144 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800412c:	2b02      	cmp	r3, #2
 800412e:	d009      	beq.n	8004144 <prvDeleteTCB+0x54>
 8004130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	e7fe      	b.n	8004142 <prvDeleteTCB+0x52>
	}
 8004144:	bf00      	nop
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004152:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <prvResetNextTaskUnblockTime+0x38>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d104      	bne.n	8004166 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800415c:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <prvResetNextTaskUnblockTime+0x3c>)
 800415e:	f04f 32ff 	mov.w	r2, #4294967295
 8004162:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004164:	e008      	b.n	8004178 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004166:	4b07      	ldr	r3, [pc, #28]	; (8004184 <prvResetNextTaskUnblockTime+0x38>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	4a04      	ldr	r2, [pc, #16]	; (8004188 <prvResetNextTaskUnblockTime+0x3c>)
 8004176:	6013      	str	r3, [r2, #0]
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	20000338 	.word	0x20000338
 8004188:	200003a0 	.word	0x200003a0

0800418c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004192:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <xTaskGetSchedulerState+0x34>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d102      	bne.n	80041a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800419a:	2301      	movs	r3, #1
 800419c:	607b      	str	r3, [r7, #4]
 800419e:	e008      	b.n	80041b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041a0:	4b08      	ldr	r3, [pc, #32]	; (80041c4 <xTaskGetSchedulerState+0x38>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d102      	bne.n	80041ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041a8:	2302      	movs	r3, #2
 80041aa:	607b      	str	r3, [r7, #4]
 80041ac:	e001      	b.n	80041b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041ae:	2300      	movs	r3, #0
 80041b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041b2:	687b      	ldr	r3, [r7, #4]
	}
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	2000038c 	.word	0x2000038c
 80041c4:	200003a8 	.word	0x200003a8

080041c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80041d4:	2300      	movs	r3, #0
 80041d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d069      	beq.n	80042b2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e2:	4b36      	ldr	r3, [pc, #216]	; (80042bc <xTaskPriorityInherit+0xf4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d259      	bcs.n	80042a0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	db06      	blt.n	8004202 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041f4:	4b31      	ldr	r3, [pc, #196]	; (80042bc <xTaskPriorityInherit+0xf4>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fa:	f1c3 0207 	rsb	r2, r3, #7
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	6959      	ldr	r1, [r3, #20]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800420a:	4613      	mov	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4a2b      	ldr	r2, [pc, #172]	; (80042c0 <xTaskPriorityInherit+0xf8>)
 8004214:	4413      	add	r3, r2
 8004216:	4299      	cmp	r1, r3
 8004218:	d13a      	bne.n	8004290 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	3304      	adds	r3, #4
 800421e:	4618      	mov	r0, r3
 8004220:	f7fe fc50 	bl	8002ac4 <uxListRemove>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d115      	bne.n	8004256 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422e:	4924      	ldr	r1, [pc, #144]	; (80042c0 <xTaskPriorityInherit+0xf8>)
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10a      	bne.n	8004256 <xTaskPriorityInherit+0x8e>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	2201      	movs	r2, #1
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	43da      	mvns	r2, r3
 800424c:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <xTaskPriorityInherit+0xfc>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4013      	ands	r3, r2
 8004252:	4a1c      	ldr	r2, [pc, #112]	; (80042c4 <xTaskPriorityInherit+0xfc>)
 8004254:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004256:	4b19      	ldr	r3, [pc, #100]	; (80042bc <xTaskPriorityInherit+0xf4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	2201      	movs	r2, #1
 8004266:	409a      	lsls	r2, r3
 8004268:	4b16      	ldr	r3, [pc, #88]	; (80042c4 <xTaskPriorityInherit+0xfc>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4313      	orrs	r3, r2
 800426e:	4a15      	ldr	r2, [pc, #84]	; (80042c4 <xTaskPriorityInherit+0xfc>)
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004276:	4613      	mov	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4a10      	ldr	r2, [pc, #64]	; (80042c0 <xTaskPriorityInherit+0xf8>)
 8004280:	441a      	add	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	3304      	adds	r3, #4
 8004286:	4619      	mov	r1, r3
 8004288:	4610      	mov	r0, r2
 800428a:	f7fe fbbe 	bl	8002a0a <vListInsertEnd>
 800428e:	e004      	b.n	800429a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004290:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <xTaskPriorityInherit+0xf4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800429a:	2301      	movs	r3, #1
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	e008      	b.n	80042b2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042a4:	4b05      	ldr	r3, [pc, #20]	; (80042bc <xTaskPriorityInherit+0xf4>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d201      	bcs.n	80042b2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80042ae:	2301      	movs	r3, #1
 80042b0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042b2:	68fb      	ldr	r3, [r7, #12]
	}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20000280 	.word	0x20000280
 80042c0:	20000284 	.word	0x20000284
 80042c4:	20000388 	.word	0x20000388

080042c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d06c      	beq.n	80043b8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80042de:	4b39      	ldr	r3, [pc, #228]	; (80043c4 <xTaskPriorityDisinherit+0xfc>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d009      	beq.n	80042fc <xTaskPriorityDisinherit+0x34>
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	e7fe      	b.n	80042fa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004300:	2b00      	cmp	r3, #0
 8004302:	d109      	bne.n	8004318 <xTaskPriorityDisinherit+0x50>
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	e7fe      	b.n	8004316 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800431c:	1e5a      	subs	r2, r3, #1
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432a:	429a      	cmp	r2, r3
 800432c:	d044      	beq.n	80043b8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004332:	2b00      	cmp	r3, #0
 8004334:	d140      	bne.n	80043b8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	3304      	adds	r3, #4
 800433a:	4618      	mov	r0, r3
 800433c:	f7fe fbc2 	bl	8002ac4 <uxListRemove>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d115      	bne.n	8004372 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434a:	491f      	ldr	r1, [pc, #124]	; (80043c8 <xTaskPriorityDisinherit+0x100>)
 800434c:	4613      	mov	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10a      	bne.n	8004372 <xTaskPriorityDisinherit+0xaa>
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004360:	2201      	movs	r2, #1
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43da      	mvns	r2, r3
 8004368:	4b18      	ldr	r3, [pc, #96]	; (80043cc <xTaskPriorityDisinherit+0x104>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4013      	ands	r3, r2
 800436e:	4a17      	ldr	r2, [pc, #92]	; (80043cc <xTaskPriorityDisinherit+0x104>)
 8004370:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437e:	f1c3 0207 	rsb	r2, r3, #7
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438a:	2201      	movs	r2, #1
 800438c:	409a      	lsls	r2, r3
 800438e:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <xTaskPriorityDisinherit+0x104>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4313      	orrs	r3, r2
 8004394:	4a0d      	ldr	r2, [pc, #52]	; (80043cc <xTaskPriorityDisinherit+0x104>)
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4a08      	ldr	r2, [pc, #32]	; (80043c8 <xTaskPriorityDisinherit+0x100>)
 80043a6:	441a      	add	r2, r3
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	3304      	adds	r3, #4
 80043ac:	4619      	mov	r1, r3
 80043ae:	4610      	mov	r0, r2
 80043b0:	f7fe fb2b 	bl	8002a0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80043b4:	2301      	movs	r3, #1
 80043b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043b8:	697b      	ldr	r3, [r7, #20]
	}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20000280 	.word	0x20000280
 80043c8:	20000284 	.word	0x20000284
 80043cc:	20000388 	.word	0x20000388

080043d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80043de:	2301      	movs	r3, #1
 80043e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8081 	beq.w	80044ec <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <vTaskPriorityDisinheritAfterTimeout+0x36>
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	e7fe      	b.n	8004404 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d902      	bls.n	8004416 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	61fb      	str	r3, [r7, #28]
 8004414:	e002      	b.n	800441c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004420:	69fa      	ldr	r2, [r7, #28]
 8004422:	429a      	cmp	r2, r3
 8004424:	d062      	beq.n	80044ec <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	429a      	cmp	r2, r3
 800442e:	d15d      	bne.n	80044ec <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004430:	4b30      	ldr	r3, [pc, #192]	; (80044f4 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	429a      	cmp	r2, r3
 8004438:	d109      	bne.n	800444e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800443a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	60bb      	str	r3, [r7, #8]
 800444c:	e7fe      	b.n	800444c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	69fa      	ldr	r2, [r7, #28]
 8004458:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	2b00      	cmp	r3, #0
 8004460:	db04      	blt.n	800446c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	f1c3 0207 	rsb	r2, r3, #7
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	6959      	ldr	r1, [r3, #20]
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4a1f      	ldr	r2, [pc, #124]	; (80044f8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800447c:	4413      	add	r3, r2
 800447e:	4299      	cmp	r1, r3
 8004480:	d134      	bne.n	80044ec <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	3304      	adds	r3, #4
 8004486:	4618      	mov	r0, r3
 8004488:	f7fe fb1c 	bl	8002ac4 <uxListRemove>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d115      	bne.n	80044be <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004496:	4918      	ldr	r1, [pc, #96]	; (80044f8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10a      	bne.n	80044be <vTaskPriorityDisinheritAfterTimeout+0xee>
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	2201      	movs	r2, #1
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	43da      	mvns	r2, r3
 80044b4:	4b11      	ldr	r3, [pc, #68]	; (80044fc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4013      	ands	r3, r2
 80044ba:	4a10      	ldr	r2, [pc, #64]	; (80044fc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80044bc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c2:	2201      	movs	r2, #1
 80044c4:	409a      	lsls	r2, r3
 80044c6:	4b0d      	ldr	r3, [pc, #52]	; (80044fc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	4a0b      	ldr	r2, [pc, #44]	; (80044fc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d4:	4613      	mov	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4a06      	ldr	r2, [pc, #24]	; (80044f8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80044de:	441a      	add	r2, r3
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	3304      	adds	r3, #4
 80044e4:	4619      	mov	r1, r3
 80044e6:	4610      	mov	r0, r2
 80044e8:	f7fe fa8f 	bl	8002a0a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044ec:	bf00      	nop
 80044ee:	3720      	adds	r7, #32
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	20000280 	.word	0x20000280
 80044f8:	20000284 	.word	0x20000284
 80044fc:	20000388 	.word	0x20000388

08004500 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004504:	4b07      	ldr	r3, [pc, #28]	; (8004524 <pvTaskIncrementMutexHeldCount+0x24>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d004      	beq.n	8004516 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800450c:	4b05      	ldr	r3, [pc, #20]	; (8004524 <pvTaskIncrementMutexHeldCount+0x24>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004512:	3201      	adds	r2, #1
 8004514:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004516:	4b03      	ldr	r3, [pc, #12]	; (8004524 <pvTaskIncrementMutexHeldCount+0x24>)
 8004518:	681b      	ldr	r3, [r3, #0]
	}
 800451a:	4618      	mov	r0, r3
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	20000280 	.word	0x20000280

08004528 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004532:	4b29      	ldr	r3, [pc, #164]	; (80045d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004538:	4b28      	ldr	r3, [pc, #160]	; (80045dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3304      	adds	r3, #4
 800453e:	4618      	mov	r0, r3
 8004540:	f7fe fac0 	bl	8002ac4 <uxListRemove>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10b      	bne.n	8004562 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800454a:	4b24      	ldr	r3, [pc, #144]	; (80045dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	2201      	movs	r2, #1
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	43da      	mvns	r2, r3
 8004558:	4b21      	ldr	r3, [pc, #132]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4013      	ands	r3, r2
 800455e:	4a20      	ldr	r2, [pc, #128]	; (80045e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004560:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004568:	d10a      	bne.n	8004580 <prvAddCurrentTaskToDelayedList+0x58>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d007      	beq.n	8004580 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004570:	4b1a      	ldr	r3, [pc, #104]	; (80045dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3304      	adds	r3, #4
 8004576:	4619      	mov	r1, r3
 8004578:	481a      	ldr	r0, [pc, #104]	; (80045e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800457a:	f7fe fa46 	bl	8002a0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800457e:	e026      	b.n	80045ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4413      	add	r3, r2
 8004586:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004588:	4b14      	ldr	r3, [pc, #80]	; (80045dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	429a      	cmp	r2, r3
 8004596:	d209      	bcs.n	80045ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004598:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3304      	adds	r3, #4
 80045a2:	4619      	mov	r1, r3
 80045a4:	4610      	mov	r0, r2
 80045a6:	f7fe fa54 	bl	8002a52 <vListInsert>
}
 80045aa:	e010      	b.n	80045ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045ac:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3304      	adds	r3, #4
 80045b6:	4619      	mov	r1, r3
 80045b8:	4610      	mov	r0, r2
 80045ba:	f7fe fa4a 	bl	8002a52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045be:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d202      	bcs.n	80045ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80045c8:	4a09      	ldr	r2, [pc, #36]	; (80045f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	6013      	str	r3, [r2, #0]
}
 80045ce:	bf00      	nop
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	20000384 	.word	0x20000384
 80045dc:	20000280 	.word	0x20000280
 80045e0:	20000388 	.word	0x20000388
 80045e4:	2000036c 	.word	0x2000036c
 80045e8:	2000033c 	.word	0x2000033c
 80045ec:	20000338 	.word	0x20000338
 80045f0:	200003a0 	.word	0x200003a0

080045f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	3b04      	subs	r3, #4
 8004604:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800460c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3b04      	subs	r3, #4
 8004612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f023 0201 	bic.w	r2, r3, #1
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3b04      	subs	r3, #4
 8004622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004624:	4a0c      	ldr	r2, [pc, #48]	; (8004658 <pxPortInitialiseStack+0x64>)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3b14      	subs	r3, #20
 800462e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	3b04      	subs	r3, #4
 800463a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f06f 0202 	mvn.w	r2, #2
 8004642:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3b20      	subs	r3, #32
 8004648:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800464a:	68fb      	ldr	r3, [r7, #12]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	0800465d 	.word	0x0800465d

0800465c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004662:	2300      	movs	r3, #0
 8004664:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004666:	4b11      	ldr	r3, [pc, #68]	; (80046ac <prvTaskExitError+0x50>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466e:	d009      	beq.n	8004684 <prvTaskExitError+0x28>
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	e7fe      	b.n	8004682 <prvTaskExitError+0x26>
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004696:	bf00      	nop
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0fc      	beq.n	8004698 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800469e:	bf00      	nop
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	2000000c 	.word	0x2000000c

080046b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046b0:	4b07      	ldr	r3, [pc, #28]	; (80046d0 <pxCurrentTCBConst2>)
 80046b2:	6819      	ldr	r1, [r3, #0]
 80046b4:	6808      	ldr	r0, [r1, #0]
 80046b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ba:	f380 8809 	msr	PSP, r0
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f04f 0000 	mov.w	r0, #0
 80046c6:	f380 8811 	msr	BASEPRI, r0
 80046ca:	4770      	bx	lr
 80046cc:	f3af 8000 	nop.w

080046d0 <pxCurrentTCBConst2>:
 80046d0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80046d4:	bf00      	nop
 80046d6:	bf00      	nop

080046d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80046d8:	4808      	ldr	r0, [pc, #32]	; (80046fc <prvPortStartFirstTask+0x24>)
 80046da:	6800      	ldr	r0, [r0, #0]
 80046dc:	6800      	ldr	r0, [r0, #0]
 80046de:	f380 8808 	msr	MSP, r0
 80046e2:	f04f 0000 	mov.w	r0, #0
 80046e6:	f380 8814 	msr	CONTROL, r0
 80046ea:	b662      	cpsie	i
 80046ec:	b661      	cpsie	f
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	df00      	svc	0
 80046f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046fa:	bf00      	nop
 80046fc:	e000ed08 	.word	0xe000ed08

08004700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004706:	4b44      	ldr	r3, [pc, #272]	; (8004818 <xPortStartScheduler+0x118>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a44      	ldr	r2, [pc, #272]	; (800481c <xPortStartScheduler+0x11c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d109      	bne.n	8004724 <xPortStartScheduler+0x24>
 8004710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004714:	f383 8811 	msr	BASEPRI, r3
 8004718:	f3bf 8f6f 	isb	sy
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	e7fe      	b.n	8004722 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004724:	4b3c      	ldr	r3, [pc, #240]	; (8004818 <xPortStartScheduler+0x118>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a3d      	ldr	r2, [pc, #244]	; (8004820 <xPortStartScheduler+0x120>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d109      	bne.n	8004742 <xPortStartScheduler+0x42>
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	e7fe      	b.n	8004740 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004742:	4b38      	ldr	r3, [pc, #224]	; (8004824 <xPortStartScheduler+0x124>)
 8004744:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	22ff      	movs	r2, #255	; 0xff
 8004752:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	b2db      	uxtb	r3, r3
 800475a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800475c:	78fb      	ldrb	r3, [r7, #3]
 800475e:	b2db      	uxtb	r3, r3
 8004760:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004764:	b2da      	uxtb	r2, r3
 8004766:	4b30      	ldr	r3, [pc, #192]	; (8004828 <xPortStartScheduler+0x128>)
 8004768:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800476a:	4b30      	ldr	r3, [pc, #192]	; (800482c <xPortStartScheduler+0x12c>)
 800476c:	2207      	movs	r2, #7
 800476e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004770:	e009      	b.n	8004786 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004772:	4b2e      	ldr	r3, [pc, #184]	; (800482c <xPortStartScheduler+0x12c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3b01      	subs	r3, #1
 8004778:	4a2c      	ldr	r2, [pc, #176]	; (800482c <xPortStartScheduler+0x12c>)
 800477a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	b2db      	uxtb	r3, r3
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	b2db      	uxtb	r3, r3
 8004784:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004786:	78fb      	ldrb	r3, [r7, #3]
 8004788:	b2db      	uxtb	r3, r3
 800478a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478e:	2b80      	cmp	r3, #128	; 0x80
 8004790:	d0ef      	beq.n	8004772 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004792:	4b26      	ldr	r3, [pc, #152]	; (800482c <xPortStartScheduler+0x12c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f1c3 0307 	rsb	r3, r3, #7
 800479a:	2b04      	cmp	r3, #4
 800479c:	d009      	beq.n	80047b2 <xPortStartScheduler+0xb2>
 800479e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	60bb      	str	r3, [r7, #8]
 80047b0:	e7fe      	b.n	80047b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047b2:	4b1e      	ldr	r3, [pc, #120]	; (800482c <xPortStartScheduler+0x12c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	4a1c      	ldr	r2, [pc, #112]	; (800482c <xPortStartScheduler+0x12c>)
 80047ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047bc:	4b1b      	ldr	r3, [pc, #108]	; (800482c <xPortStartScheduler+0x12c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047c4:	4a19      	ldr	r2, [pc, #100]	; (800482c <xPortStartScheduler+0x12c>)
 80047c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80047d0:	4b17      	ldr	r3, [pc, #92]	; (8004830 <xPortStartScheduler+0x130>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a16      	ldr	r2, [pc, #88]	; (8004830 <xPortStartScheduler+0x130>)
 80047d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047dc:	4b14      	ldr	r3, [pc, #80]	; (8004830 <xPortStartScheduler+0x130>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a13      	ldr	r2, [pc, #76]	; (8004830 <xPortStartScheduler+0x130>)
 80047e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047e8:	f000 f8d6 	bl	8004998 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047ec:	4b11      	ldr	r3, [pc, #68]	; (8004834 <xPortStartScheduler+0x134>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80047f2:	f000 f8f5 	bl	80049e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047f6:	4b10      	ldr	r3, [pc, #64]	; (8004838 <xPortStartScheduler+0x138>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a0f      	ldr	r2, [pc, #60]	; (8004838 <xPortStartScheduler+0x138>)
 80047fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004800:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004802:	f7ff ff69 	bl	80046d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004806:	f7ff fa8d 	bl	8003d24 <vTaskSwitchContext>
	prvTaskExitError();
 800480a:	f7ff ff27 	bl	800465c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	e000ed00 	.word	0xe000ed00
 800481c:	410fc271 	.word	0x410fc271
 8004820:	410fc270 	.word	0x410fc270
 8004824:	e000e400 	.word	0xe000e400
 8004828:	200003ac 	.word	0x200003ac
 800482c:	200003b0 	.word	0x200003b0
 8004830:	e000ed20 	.word	0xe000ed20
 8004834:	2000000c 	.word	0x2000000c
 8004838:	e000ef34 	.word	0xe000ef34

0800483c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004854:	4b0e      	ldr	r3, [pc, #56]	; (8004890 <vPortEnterCritical+0x54>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3301      	adds	r3, #1
 800485a:	4a0d      	ldr	r2, [pc, #52]	; (8004890 <vPortEnterCritical+0x54>)
 800485c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800485e:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <vPortEnterCritical+0x54>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d10e      	bne.n	8004884 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <vPortEnterCritical+0x58>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d009      	beq.n	8004884 <vPortEnterCritical+0x48>
 8004870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	603b      	str	r3, [r7, #0]
 8004882:	e7fe      	b.n	8004882 <vPortEnterCritical+0x46>
	}
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	2000000c 	.word	0x2000000c
 8004894:	e000ed04 	.word	0xe000ed04

08004898 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800489e:	4b11      	ldr	r3, [pc, #68]	; (80048e4 <vPortExitCritical+0x4c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d109      	bne.n	80048ba <vPortExitCritical+0x22>
 80048a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	607b      	str	r3, [r7, #4]
 80048b8:	e7fe      	b.n	80048b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80048ba:	4b0a      	ldr	r3, [pc, #40]	; (80048e4 <vPortExitCritical+0x4c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	3b01      	subs	r3, #1
 80048c0:	4a08      	ldr	r2, [pc, #32]	; (80048e4 <vPortExitCritical+0x4c>)
 80048c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80048c4:	4b07      	ldr	r3, [pc, #28]	; (80048e4 <vPortExitCritical+0x4c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d104      	bne.n	80048d6 <vPortExitCritical+0x3e>
 80048cc:	2300      	movs	r3, #0
 80048ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	2000000c 	.word	0x2000000c
	...

080048f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048f0:	f3ef 8009 	mrs	r0, PSP
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	4b15      	ldr	r3, [pc, #84]	; (8004950 <pxCurrentTCBConst>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	f01e 0f10 	tst.w	lr, #16
 8004900:	bf08      	it	eq
 8004902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800490a:	6010      	str	r0, [r2, #0]
 800490c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004910:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004914:	f380 8811 	msr	BASEPRI, r0
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f7ff fa00 	bl	8003d24 <vTaskSwitchContext>
 8004924:	f04f 0000 	mov.w	r0, #0
 8004928:	f380 8811 	msr	BASEPRI, r0
 800492c:	bc09      	pop	{r0, r3}
 800492e:	6819      	ldr	r1, [r3, #0]
 8004930:	6808      	ldr	r0, [r1, #0]
 8004932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004936:	f01e 0f10 	tst.w	lr, #16
 800493a:	bf08      	it	eq
 800493c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004940:	f380 8809 	msr	PSP, r0
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	f3af 8000 	nop.w

08004950 <pxCurrentTCBConst>:
 8004950:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop

08004958 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
	__asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004970:	f7ff f920 	bl	8003bb4 <xTaskIncrementTick>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800497a:	4b06      	ldr	r3, [pc, #24]	; (8004994 <SysTick_Handler+0x3c>)
 800497c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	2300      	movs	r3, #0
 8004984:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800498c:	bf00      	nop
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	e000ed04 	.word	0xe000ed04

08004998 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800499c:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <vPortSetupTimerInterrupt+0x34>)
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049a2:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <vPortSetupTimerInterrupt+0x38>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049a8:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <vPortSetupTimerInterrupt+0x3c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a0a      	ldr	r2, [pc, #40]	; (80049d8 <vPortSetupTimerInterrupt+0x40>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	099b      	lsrs	r3, r3, #6
 80049b4:	4a09      	ldr	r2, [pc, #36]	; (80049dc <vPortSetupTimerInterrupt+0x44>)
 80049b6:	3b01      	subs	r3, #1
 80049b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049ba:	4b04      	ldr	r3, [pc, #16]	; (80049cc <vPortSetupTimerInterrupt+0x34>)
 80049bc:	2207      	movs	r2, #7
 80049be:	601a      	str	r2, [r3, #0]
}
 80049c0:	bf00      	nop
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	e000e010 	.word	0xe000e010
 80049d0:	e000e018 	.word	0xe000e018
 80049d4:	20000000 	.word	0x20000000
 80049d8:	10624dd3 	.word	0x10624dd3
 80049dc:	e000e014 	.word	0xe000e014

080049e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80049e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80049f0 <vPortEnableVFP+0x10>
 80049e4:	6801      	ldr	r1, [r0, #0]
 80049e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80049ea:	6001      	str	r1, [r0, #0]
 80049ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80049ee:	bf00      	nop
 80049f0:	e000ed88 	.word	0xe000ed88

080049f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80049fa:	f3ef 8305 	mrs	r3, IPSR
 80049fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b0f      	cmp	r3, #15
 8004a04:	d913      	bls.n	8004a2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a06:	4a16      	ldr	r2, [pc, #88]	; (8004a60 <vPortValidateInterruptPriority+0x6c>)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a10:	4b14      	ldr	r3, [pc, #80]	; (8004a64 <vPortValidateInterruptPriority+0x70>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	7afa      	ldrb	r2, [r7, #11]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d209      	bcs.n	8004a2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	607b      	str	r3, [r7, #4]
 8004a2c:	e7fe      	b.n	8004a2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a2e:	4b0e      	ldr	r3, [pc, #56]	; (8004a68 <vPortValidateInterruptPriority+0x74>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a36:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <vPortValidateInterruptPriority+0x78>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d909      	bls.n	8004a52 <vPortValidateInterruptPriority+0x5e>
 8004a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	603b      	str	r3, [r7, #0]
 8004a50:	e7fe      	b.n	8004a50 <vPortValidateInterruptPriority+0x5c>
	}
 8004a52:	bf00      	nop
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	e000e3f0 	.word	0xe000e3f0
 8004a64:	200003ac 	.word	0x200003ac
 8004a68:	e000ed0c 	.word	0xe000ed0c
 8004a6c:	200003b0 	.word	0x200003b0

08004a70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08a      	sub	sp, #40	; 0x28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a7c:	f7fe fff0 	bl	8003a60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a80:	4b57      	ldr	r3, [pc, #348]	; (8004be0 <pvPortMalloc+0x170>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a88:	f000 f90c 	bl	8004ca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a8c:	4b55      	ldr	r3, [pc, #340]	; (8004be4 <pvPortMalloc+0x174>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4013      	ands	r3, r2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f040 808c 	bne.w	8004bb2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d01c      	beq.n	8004ada <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004aa0:	2208      	movs	r2, #8
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d013      	beq.n	8004ada <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f023 0307 	bic.w	r3, r3, #7
 8004ab8:	3308      	adds	r3, #8
 8004aba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d009      	beq.n	8004ada <pvPortMalloc+0x6a>
 8004ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	e7fe      	b.n	8004ad8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d068      	beq.n	8004bb2 <pvPortMalloc+0x142>
 8004ae0:	4b41      	ldr	r3, [pc, #260]	; (8004be8 <pvPortMalloc+0x178>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d863      	bhi.n	8004bb2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004aea:	4b40      	ldr	r3, [pc, #256]	; (8004bec <pvPortMalloc+0x17c>)
 8004aec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004aee:	4b3f      	ldr	r3, [pc, #252]	; (8004bec <pvPortMalloc+0x17c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004af4:	e004      	b.n	8004b00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d903      	bls.n	8004b12 <pvPortMalloc+0xa2>
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1f1      	bne.n	8004af6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b12:	4b33      	ldr	r3, [pc, #204]	; (8004be0 <pvPortMalloc+0x170>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d04a      	beq.n	8004bb2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2208      	movs	r2, #8
 8004b22:	4413      	add	r3, r2
 8004b24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	1ad2      	subs	r2, r2, r3
 8004b36:	2308      	movs	r3, #8
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d91e      	bls.n	8004b7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4413      	add	r3, r2
 8004b44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d009      	beq.n	8004b64 <pvPortMalloc+0xf4>
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	e7fe      	b.n	8004b62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	1ad2      	subs	r2, r2, r3
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b76:	69b8      	ldr	r0, [r7, #24]
 8004b78:	f000 f8f6 	bl	8004d68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b7c:	4b1a      	ldr	r3, [pc, #104]	; (8004be8 <pvPortMalloc+0x178>)
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	4a18      	ldr	r2, [pc, #96]	; (8004be8 <pvPortMalloc+0x178>)
 8004b88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b8a:	4b17      	ldr	r3, [pc, #92]	; (8004be8 <pvPortMalloc+0x178>)
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	4b18      	ldr	r3, [pc, #96]	; (8004bf0 <pvPortMalloc+0x180>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d203      	bcs.n	8004b9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b96:	4b14      	ldr	r3, [pc, #80]	; (8004be8 <pvPortMalloc+0x178>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a15      	ldr	r2, [pc, #84]	; (8004bf0 <pvPortMalloc+0x180>)
 8004b9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	4b10      	ldr	r3, [pc, #64]	; (8004be4 <pvPortMalloc+0x174>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004bb2:	f7fe ff63 	bl	8003a7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d009      	beq.n	8004bd4 <pvPortMalloc+0x164>
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	e7fe      	b.n	8004bd2 <pvPortMalloc+0x162>
	return pvReturn;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3728      	adds	r7, #40	; 0x28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20003fbc 	.word	0x20003fbc
 8004be4:	20003fc8 	.word	0x20003fc8
 8004be8:	20003fc0 	.word	0x20003fc0
 8004bec:	20003fb4 	.word	0x20003fb4
 8004bf0:	20003fc4 	.word	0x20003fc4

08004bf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d046      	beq.n	8004c94 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c06:	2308      	movs	r3, #8
 8004c08:	425b      	negs	r3, r3
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	4b20      	ldr	r3, [pc, #128]	; (8004c9c <vPortFree+0xa8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d109      	bne.n	8004c36 <vPortFree+0x42>
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	e7fe      	b.n	8004c34 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d009      	beq.n	8004c52 <vPortFree+0x5e>
 8004c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	60bb      	str	r3, [r7, #8]
 8004c50:	e7fe      	b.n	8004c50 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	4b11      	ldr	r3, [pc, #68]	; (8004c9c <vPortFree+0xa8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d019      	beq.n	8004c94 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d115      	bne.n	8004c94 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <vPortFree+0xa8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	43db      	mvns	r3, r3
 8004c72:	401a      	ands	r2, r3
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c78:	f7fe fef2 	bl	8003a60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <vPortFree+0xac>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4413      	add	r3, r2
 8004c86:	4a06      	ldr	r2, [pc, #24]	; (8004ca0 <vPortFree+0xac>)
 8004c88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c8a:	6938      	ldr	r0, [r7, #16]
 8004c8c:	f000 f86c 	bl	8004d68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004c90:	f7fe fef4 	bl	8003a7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c94:	bf00      	nop
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	20003fc8 	.word	0x20003fc8
 8004ca0:	20003fc0 	.word	0x20003fc0

08004ca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004caa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004cae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cb0:	4b27      	ldr	r3, [pc, #156]	; (8004d50 <prvHeapInit+0xac>)
 8004cb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00c      	beq.n	8004cd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	3307      	adds	r3, #7
 8004cc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0307 	bic.w	r3, r3, #7
 8004cca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	4a1f      	ldr	r2, [pc, #124]	; (8004d50 <prvHeapInit+0xac>)
 8004cd4:	4413      	add	r3, r2
 8004cd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cdc:	4a1d      	ldr	r2, [pc, #116]	; (8004d54 <prvHeapInit+0xb0>)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ce2:	4b1c      	ldr	r3, [pc, #112]	; (8004d54 <prvHeapInit+0xb0>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	4413      	add	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1a9b      	subs	r3, r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0307 	bic.w	r3, r3, #7
 8004cfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4a15      	ldr	r2, [pc, #84]	; (8004d58 <prvHeapInit+0xb4>)
 8004d04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d06:	4b14      	ldr	r3, [pc, #80]	; (8004d58 <prvHeapInit+0xb4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d0e:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <prvHeapInit+0xb4>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	1ad2      	subs	r2, r2, r3
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d24:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <prvHeapInit+0xb4>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	4a0a      	ldr	r2, [pc, #40]	; (8004d5c <prvHeapInit+0xb8>)
 8004d32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	4a09      	ldr	r2, [pc, #36]	; (8004d60 <prvHeapInit+0xbc>)
 8004d3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d3c:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <prvHeapInit+0xc0>)
 8004d3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d42:	601a      	str	r2, [r3, #0]
}
 8004d44:	bf00      	nop
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	200003b4 	.word	0x200003b4
 8004d54:	20003fb4 	.word	0x20003fb4
 8004d58:	20003fbc 	.word	0x20003fbc
 8004d5c:	20003fc4 	.word	0x20003fc4
 8004d60:	20003fc0 	.word	0x20003fc0
 8004d64:	20003fc8 	.word	0x20003fc8

08004d68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d70:	4b28      	ldr	r3, [pc, #160]	; (8004e14 <prvInsertBlockIntoFreeList+0xac>)
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	e002      	b.n	8004d7c <prvInsertBlockIntoFreeList+0x14>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d8f7      	bhi.n	8004d76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	4413      	add	r3, r2
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d108      	bne.n	8004daa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	441a      	add	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	441a      	add	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d118      	bne.n	8004df0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	4b15      	ldr	r3, [pc, #84]	; (8004e18 <prvInsertBlockIntoFreeList+0xb0>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d00d      	beq.n	8004de6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	441a      	add	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	e008      	b.n	8004df8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004de6:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <prvInsertBlockIntoFreeList+0xb0>)
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	e003      	b.n	8004df8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d002      	beq.n	8004e06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e06:	bf00      	nop
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20003fb4 	.word	0x20003fb4
 8004e18:	20003fbc 	.word	0x20003fbc

08004e1c <__libc_init_array>:
 8004e1c:	b570      	push	{r4, r5, r6, lr}
 8004e1e:	4e0d      	ldr	r6, [pc, #52]	; (8004e54 <__libc_init_array+0x38>)
 8004e20:	4c0d      	ldr	r4, [pc, #52]	; (8004e58 <__libc_init_array+0x3c>)
 8004e22:	1ba4      	subs	r4, r4, r6
 8004e24:	10a4      	asrs	r4, r4, #2
 8004e26:	2500      	movs	r5, #0
 8004e28:	42a5      	cmp	r5, r4
 8004e2a:	d109      	bne.n	8004e40 <__libc_init_array+0x24>
 8004e2c:	4e0b      	ldr	r6, [pc, #44]	; (8004e5c <__libc_init_array+0x40>)
 8004e2e:	4c0c      	ldr	r4, [pc, #48]	; (8004e60 <__libc_init_array+0x44>)
 8004e30:	f000 f82c 	bl	8004e8c <_init>
 8004e34:	1ba4      	subs	r4, r4, r6
 8004e36:	10a4      	asrs	r4, r4, #2
 8004e38:	2500      	movs	r5, #0
 8004e3a:	42a5      	cmp	r5, r4
 8004e3c:	d105      	bne.n	8004e4a <__libc_init_array+0x2e>
 8004e3e:	bd70      	pop	{r4, r5, r6, pc}
 8004e40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e44:	4798      	blx	r3
 8004e46:	3501      	adds	r5, #1
 8004e48:	e7ee      	b.n	8004e28 <__libc_init_array+0xc>
 8004e4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e4e:	4798      	blx	r3
 8004e50:	3501      	adds	r5, #1
 8004e52:	e7f2      	b.n	8004e3a <__libc_init_array+0x1e>
 8004e54:	08004f3c 	.word	0x08004f3c
 8004e58:	08004f3c 	.word	0x08004f3c
 8004e5c:	08004f3c 	.word	0x08004f3c
 8004e60:	08004f40 	.word	0x08004f40

08004e64 <memcpy>:
 8004e64:	b510      	push	{r4, lr}
 8004e66:	1e43      	subs	r3, r0, #1
 8004e68:	440a      	add	r2, r1
 8004e6a:	4291      	cmp	r1, r2
 8004e6c:	d100      	bne.n	8004e70 <memcpy+0xc>
 8004e6e:	bd10      	pop	{r4, pc}
 8004e70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e78:	e7f7      	b.n	8004e6a <memcpy+0x6>

08004e7a <memset>:
 8004e7a:	4402      	add	r2, r0
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d100      	bne.n	8004e84 <memset+0xa>
 8004e82:	4770      	bx	lr
 8004e84:	f803 1b01 	strb.w	r1, [r3], #1
 8004e88:	e7f9      	b.n	8004e7e <memset+0x4>
	...

08004e8c <_init>:
 8004e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8e:	bf00      	nop
 8004e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e92:	bc08      	pop	{r3}
 8004e94:	469e      	mov	lr, r3
 8004e96:	4770      	bx	lr

08004e98 <_fini>:
 8004e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9a:	bf00      	nop
 8004e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9e:	bc08      	pop	{r3}
 8004ea0:	469e      	mov	lr, r3
 8004ea2:	4770      	bx	lr
