
FreeRTOS_5_Mutexes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005964  08005964  00015964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a24  08005a24  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005a24  08005a24  00015a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a2c  08005a2c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a2c  08005a2c  00015a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a30  08005a30  00015a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000405c  20000074  08005aa8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040d0  08005aa8  000240d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001475c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d11  00000000  00000000  00034800  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001180  00000000  00000000  00037518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001028  00000000  00000000  00038698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022dfe  00000000  00000000  000396c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000da2a  00000000  00000000  0005c4be  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2d5a  00000000  00000000  00069ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013cc42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba0  00000000  00000000  0013ccc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800594c 	.word	0x0800594c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800594c 	.word	0x0800594c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000090 	.word	0x20000090
 80005b0:	200000e4 	.word	0x200000e4

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b08c      	sub	sp, #48	; 0x30
 80005b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fb3d 	bl	8000c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f841 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f8d3 	bl	800076c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c6:	f000 f8a7 	bl	8000718 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of CMSIS_Mutex */
  osMutexDef(CMSIS_Mutex);
 80005ca:	2300      	movs	r3, #0
 80005cc:	623b      	str	r3, [r7, #32]
 80005ce:	2300      	movs	r3, #0
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  CMSIS_MutexHandle = osMutexCreate(osMutex(CMSIS_Mutex));
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 fc51 	bl	8002e7e <osMutexCreate>
 80005dc:	4602      	mov	r2, r0
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <main+0x78>)
 80005e0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_MUTEX */

  FreeRTOS_Mutex = xSemaphoreCreateMutex();
 80005e2:	2001      	movs	r0, #1
 80005e4:	f002 fe6b 	bl	80032be <xQueueCreateMutex>
 80005e8:	4602      	mov	r2, r0
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <main+0x7c>)
 80005ec:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of PeriodicTask */
  osThreadDef(PeriodicTask, PeriodicTaskFnc, osPriorityNormal, 0, 128);
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <main+0x80>)
 80005f0:	1d3c      	adds	r4, r7, #4
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PeriodicTaskHandle = osThreadCreate(osThread(PeriodicTask), NULL);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f002 fbee 	bl	8002de6 <osThreadCreate>
 800060a:	4602      	mov	r2, r0
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <main+0x84>)
 800060e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */

   xTaskCreate(FreeRTOS_TaskHandle, "FreeRTOS_Task" , 128, NULL, 0, NULL);
 8000610:	2300      	movs	r3, #0
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	2300      	movs	r3, #0
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2300      	movs	r3, #0
 800061a:	2280      	movs	r2, #128	; 0x80
 800061c:	4907      	ldr	r1, [pc, #28]	; (800063c <main+0x88>)
 800061e:	4808      	ldr	r0, [pc, #32]	; (8000640 <main+0x8c>)
 8000620:	f003 f9de 	bl	80039e0 <xTaskCreate>

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000624:	f002 fbd8 	bl	8002dd8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000628:	e7fe      	b.n	8000628 <main+0x74>
 800062a:	bf00      	nop
 800062c:	2000403c 	.word	0x2000403c
 8000630:	20004040 	.word	0x20004040
 8000634:	08005984 	.word	0x08005984
 8000638:	20004044 	.word	0x20004044
 800063c:	08005964 	.word	0x08005964
 8000640:	08000841 	.word	0x08000841

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f004 fd61 	bl	800511a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b28      	ldr	r3, [pc, #160]	; (8000710 <SystemClock_Config+0xcc>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a27      	ldr	r2, [pc, #156]	; (8000710 <SystemClock_Config+0xcc>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xd0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <SystemClock_Config+0xd0>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b8:	23a8      	movs	r3, #168	; 0xa8
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fdaf 	bl	800122c <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d4:	f000 f932 	bl	800093c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2105      	movs	r1, #5
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 f808 	bl	800170c <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000702:	f000 f91b 	bl	800093c <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800071e:	4a12      	ldr	r2, [pc, #72]	; (8000768 <MX_USART2_UART_Init+0x50>)
 8000720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000750:	f001 fc3e 	bl	8001fd0 <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800075a:	f000 f8ef 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20004048 	.word	0x20004048
 8000768:	40004400 	.word	0x40004400

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <MX_GPIO_Init+0xc4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a29      	ldr	r2, [pc, #164]	; (8000830 <MX_GPIO_Init+0xc4>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b27      	ldr	r3, [pc, #156]	; (8000830 <MX_GPIO_Init+0xc4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b23      	ldr	r3, [pc, #140]	; (8000830 <MX_GPIO_Init+0xc4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a22      	ldr	r2, [pc, #136]	; (8000830 <MX_GPIO_Init+0xc4>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b20      	ldr	r3, [pc, #128]	; (8000830 <MX_GPIO_Init+0xc4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_GPIO_Init+0xc4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a1b      	ldr	r2, [pc, #108]	; (8000830 <MX_GPIO_Init+0xc4>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <MX_GPIO_Init+0xc4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USER_LED_G_Pin|USER_LED_O_Pin|USER_LED_R_Pin|USER_LED_B_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007dc:	4815      	ldr	r0, [pc, #84]	; (8000834 <MX_GPIO_Init+0xc8>)
 80007de:	f000 fd0b 	bl	80011f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 80007e2:	2301      	movs	r3, #1
 80007e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_GPIO_Init+0xcc>)
 80007e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	4619      	mov	r1, r3
 80007f4:	4811      	ldr	r0, [pc, #68]	; (800083c <MX_GPIO_Init+0xd0>)
 80007f6:	f000 fb65 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_G_Pin USER_LED_O_Pin USER_LED_R_Pin USER_LED_B_Pin */
  GPIO_InitStruct.Pin = USER_LED_G_Pin|USER_LED_O_Pin|USER_LED_R_Pin|USER_LED_B_Pin;
 80007fa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	4619      	mov	r1, r3
 8000812:	4808      	ldr	r0, [pc, #32]	; (8000834 <MX_GPIO_Init+0xc8>)
 8000814:	f000 fb56 	bl	8000ec4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	2106      	movs	r1, #6
 800081c:	2006      	movs	r0, #6
 800081e:	f000 fb05 	bl	8000e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000822:	2006      	movs	r0, #6
 8000824:	f000 fb1e 	bl	8000e64 <HAL_NVIC_EnableIRQ>

}
 8000828:	bf00      	nop
 800082a:	3720      	adds	r7, #32
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40020c00 	.word	0x40020c00
 8000838:	10110000 	.word	0x10110000
 800083c:	40020000 	.word	0x40020000

08000840 <FreeRTOS_TaskHandle>:

/* USER CODE BEGIN 4 */

void FreeRTOS_TaskHandle(void* argument)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b090      	sub	sp, #64	; 0x40
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	char message[50];
	int i=0;
 8000848:	2300      	movs	r3, #0
 800084a:	63fb      	str	r3, [r7, #60]	; 0x3c

	for(;;)
	{

		snprintf(message,sizeof(message),"Task2 is running: %d\r\n",i);
 800084c:	f107 0008 	add.w	r0, r7, #8
 8000850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000852:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <FreeRTOS_TaskHandle+0x50>)
 8000854:	2132      	movs	r1, #50	; 0x32
 8000856:	f004 fc69 	bl	800512c <sniprintf>
//		osMutexWait(FreeRTOS_Mutex, osWaitForever); // CMSIS RTOS fonksiyonu.
		xSemaphoreTake(FreeRTOS_Mutex,portMAX_DELAY);
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <FreeRTOS_TaskHandle+0x54>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f04f 31ff 	mov.w	r1, #4294967295
 8000862:	4618      	mov	r0, r3
 8000864:	f002 fe58 	bl	8003518 <xQueueSemaphoreTake>
		UartPrint(message);
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	4618      	mov	r0, r3
 800086e:	f000 f813 	bl	8000898 <UartPrint>
		xSemaphoreGive(FreeRTOS_Mutex);
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <FreeRTOS_TaskHandle+0x54>)
 8000874:	6818      	ldr	r0, [r3, #0]
 8000876:	2300      	movs	r3, #0
 8000878:	2200      	movs	r2, #0
 800087a:	2100      	movs	r1, #0
 800087c:	f002 fd52 	bl	8003324 <xQueueGenericSend>
//		osMutexRelease(CMSIS_MutexHandle); // CMSIS RTOS fonksiyonu.
		i++;
 8000880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000882:	3301      	adds	r3, #1
 8000884:	63fb      	str	r3, [r7, #60]	; 0x3c
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000886:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800088a:	f003 f9df 	bl	8003c4c <vTaskDelay>
		snprintf(message,sizeof(message),"Task2 is running: %d\r\n",i);
 800088e:	e7dd      	b.n	800084c <FreeRTOS_TaskHandle+0xc>
 8000890:	080059a0 	.word	0x080059a0
 8000894:	20004040 	.word	0x20004040

08000898 <UartPrint>:

}


void UartPrint(char* message)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 20);
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff fc95 	bl	80001d0 <strlen>
 80008a6:	4603      	mov	r3, r0
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	2314      	movs	r3, #20
 80008ac:	6879      	ldr	r1, [r7, #4]
 80008ae:	4803      	ldr	r0, [pc, #12]	; (80008bc <UartPrint+0x24>)
 80008b0:	f001 fbdb 	bl	800206a <HAL_UART_Transmit>
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20004048 	.word	0x20004048

080008c0 <PeriodicTaskFnc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PeriodicTaskFnc */
void PeriodicTaskFnc(void const * argument)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b090      	sub	sp, #64	; 0x40
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	char message[50];
	int i=0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	63fb      	str	r3, [r7, #60]	; 0x3c

	for(;;)
	{

		snprintf(message,sizeof(message),"Task1 is running: %d\r\n",i);
 80008cc:	f107 0008 	add.w	r0, r7, #8
 80008d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008d2:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <PeriodicTaskFnc+0x50>)
 80008d4:	2132      	movs	r1, #50	; 0x32
 80008d6:	f004 fc29 	bl	800512c <sniprintf>
		xSemaphoreTake(FreeRTOS_Mutex,portMAX_DELAY);
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <PeriodicTaskFnc+0x54>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f04f 31ff 	mov.w	r1, #4294967295
 80008e2:	4618      	mov	r0, r3
 80008e4:	f002 fe18 	bl	8003518 <xQueueSemaphoreTake>
		UartPrint(message);
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ffd3 	bl	8000898 <UartPrint>
		xSemaphoreGive(FreeRTOS_Mutex);
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <PeriodicTaskFnc+0x54>)
 80008f4:	6818      	ldr	r0, [r3, #0]
 80008f6:	2300      	movs	r3, #0
 80008f8:	2200      	movs	r2, #0
 80008fa:	2100      	movs	r1, #0
 80008fc:	f002 fd12 	bl	8003324 <xQueueGenericSend>
		i++;
 8000900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000902:	3301      	adds	r3, #1
 8000904:	63fb      	str	r3, [r7, #60]	; 0x3c
		vTaskDelay(pdMS_TO_TICKS(1000));
 8000906:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800090a:	f003 f99f 	bl	8003c4c <vTaskDelay>
		snprintf(message,sizeof(message),"Task1 is running: %d\r\n",i);
 800090e:	e7dd      	b.n	80008cc <PeriodicTaskFnc+0xc>
 8000910:	080059b8 	.word	0x080059b8
 8000914:	20004040 	.word	0x20004040

08000918 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d101      	bne.n	800092e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092a:	f000 f9a7 	bl	8000c7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40010000 	.word	0x40010000

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a0f      	ldr	r2, [pc, #60]	; (8000998 <HAL_MspInit+0x4c>)
 800095c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_MspInit+0x4c>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a1d      	ldr	r2, [pc, #116]	; (8000a30 <HAL_UART_MspInit+0x94>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d133      	bne.n	8000a26 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <HAL_UART_MspInit+0x98>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	4a1b      	ldr	r2, [pc, #108]	; (8000a34 <HAL_UART_MspInit+0x98>)
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009cc:	6413      	str	r3, [r2, #64]	; 0x40
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <HAL_UART_MspInit+0x98>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <HAL_UART_MspInit+0x98>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a14      	ldr	r2, [pc, #80]	; (8000a34 <HAL_UART_MspInit+0x98>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_UART_MspInit+0x98>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009f6:	230c      	movs	r3, #12
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a06:	2307      	movs	r3, #7
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4809      	ldr	r0, [pc, #36]	; (8000a38 <HAL_UART_MspInit+0x9c>)
 8000a12:	f000 fa57 	bl	8000ec4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2105      	movs	r1, #5
 8000a1a:	2026      	movs	r0, #38	; 0x26
 8000a1c:	f000 fa06 	bl	8000e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a20:	2026      	movs	r0, #38	; 0x26
 8000a22:	f000 fa1f 	bl	8000e64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a26:	bf00      	nop
 8000a28:	3728      	adds	r7, #40	; 0x28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40004400 	.word	0x40004400
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020000 	.word	0x40020000

08000a3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	; 0x30
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	2019      	movs	r0, #25
 8000a52:	f000 f9eb 	bl	8000e2c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a56:	2019      	movs	r0, #25
 8000a58:	f000 fa04 	bl	8000e64 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <HAL_InitTick+0xa4>)
 8000a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a64:	4a1e      	ldr	r2, [pc, #120]	; (8000ae0 <HAL_InitTick+0xa4>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <HAL_InitTick+0xa4>)
 8000a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a78:	f107 0210 	add.w	r2, r7, #16
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4611      	mov	r1, r2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 f834 	bl	8001af0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a88:	f001 f81e 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a94:	4a13      	ldr	r2, [pc, #76]	; (8000ae4 <HAL_InitTick+0xa8>)
 8000a96:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9a:	0c9b      	lsrs	r3, r3, #18
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <HAL_InitTick+0xac>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <HAL_InitTick+0xb0>)
 8000aa4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <HAL_InitTick+0xac>)
 8000aa8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000aae:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <HAL_InitTick+0xac>)
 8000ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <HAL_InitTick+0xac>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <HAL_InitTick+0xac>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ac0:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <HAL_InitTick+0xac>)
 8000ac2:	f001 f847 	bl	8001b54 <HAL_TIM_Base_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d104      	bne.n	8000ad6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000acc:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <HAL_InitTick+0xac>)
 8000ace:	f001 f876 	bl	8001bbe <HAL_TIM_Base_Start_IT>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	e000      	b.n	8000ad8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3730      	adds	r7, #48	; 0x30
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	431bde83 	.word	0x431bde83
 8000ae8:	20004088 	.word	0x20004088
 8000aec:	40010000 	.word	0x40010000

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b2a:	f001 f86c 	bl	8001c06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20004088 	.word	0x20004088

08000b38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <USART2_IRQHandler+0x10>)
 8000b3e:	f001 fb2d 	bl	800219c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20004048 	.word	0x20004048

08000b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b54:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <_sbrk+0x5c>)
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <_sbrk+0x60>)
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <_sbrk+0x64>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <_sbrk+0x64>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <_sbrk+0x68>)
 8000b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <_sbrk+0x64>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d207      	bcs.n	8000b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b7c:	f004 fa98 	bl	80050b0 <__errno>
 8000b80:	4602      	mov	r2, r0
 8000b82:	230c      	movs	r3, #12
 8000b84:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b86:	f04f 33ff 	mov.w	r3, #4294967295
 8000b8a:	e009      	b.n	8000ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	4a05      	ldr	r2, [pc, #20]	; (8000bb0 <_sbrk+0x64>)
 8000b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20020000 	.word	0x20020000
 8000bac:	00000400 	.word	0x00000400
 8000bb0:	200002e4 	.word	0x200002e4
 8000bb4:	200040d0 	.word	0x200040d0

08000bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <SystemInit+0x28>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc2:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <SystemInit+0x28>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <SystemInit+0x28>)
 8000bce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bd2:	609a      	str	r2, [r3, #8]
#endif
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000be8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bea:	e003      	b.n	8000bf4 <LoopCopyDataInit>

08000bec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bf0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bf2:	3104      	adds	r1, #4

08000bf4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bf4:	480b      	ldr	r0, [pc, #44]	; (8000c24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bf8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bfa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bfc:	d3f6      	bcc.n	8000bec <CopyDataInit>
  ldr  r2, =_sbss
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c00:	e002      	b.n	8000c08 <LoopFillZerobss>

08000c02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c04:	f842 3b04 	str.w	r3, [r2], #4

08000c08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c0c:	d3f9      	bcc.n	8000c02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c0e:	f7ff ffd3 	bl	8000bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c12:	f004 fa53 	bl	80050bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c16:	f7ff fccd 	bl	80005b4 <main>
  bx  lr    
 8000c1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c1c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c20:	08005a34 	.word	0x08005a34
  ldr  r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c28:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000c2c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000c30:	200040d0 	.word	0x200040d0

08000c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC_IRQHandler>
	...

08000c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <HAL_Init+0x40>)
 8000c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <HAL_Init+0x40>)
 8000c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <HAL_Init+0x40>)
 8000c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 f8d8 	bl	8000e16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff fee8 	bl	8000a3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c6c:	f7ff fe6e 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023c00 	.word	0x40023c00

08000c7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_IncTick+0x20>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_IncTick+0x24>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <HAL_IncTick+0x24>)
 8000c8e:	6013      	str	r3, [r2, #0]
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	200040c8 	.word	0x200040c8

08000ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <HAL_GetTick+0x14>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	200040c8 	.word	0x200040c8

08000cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <__NVIC_GetPriorityGrouping+0x18>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	f003 0307 	and.w	r3, r3, #7
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	db0b      	blt.n	8000d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	f003 021f 	and.w	r2, r3, #31
 8000d38:	4907      	ldr	r1, [pc, #28]	; (8000d58 <__NVIC_EnableIRQ+0x38>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	095b      	lsrs	r3, r3, #5
 8000d40:	2001      	movs	r0, #1
 8000d42:	fa00 f202 	lsl.w	r2, r0, r2
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000e100 	.word	0xe000e100

08000d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	db0a      	blt.n	8000d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	490c      	ldr	r1, [pc, #48]	; (8000da8 <__NVIC_SetPriority+0x4c>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	0112      	lsls	r2, r2, #4
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	440b      	add	r3, r1
 8000d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d84:	e00a      	b.n	8000d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4908      	ldr	r1, [pc, #32]	; (8000dac <__NVIC_SetPriority+0x50>)
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	f003 030f 	and.w	r3, r3, #15
 8000d92:	3b04      	subs	r3, #4
 8000d94:	0112      	lsls	r2, r2, #4
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	440b      	add	r3, r1
 8000d9a:	761a      	strb	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f1c3 0307 	rsb	r3, r3, #7
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	bf28      	it	cs
 8000dce:	2304      	movcs	r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d902      	bls.n	8000de0 <NVIC_EncodePriority+0x30>
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3b03      	subs	r3, #3
 8000dde:	e000      	b.n	8000de2 <NVIC_EncodePriority+0x32>
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43da      	mvns	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	401a      	ands	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	4313      	orrs	r3, r2
         );
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3724      	adds	r7, #36	; 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ff4c 	bl	8000cbc <__NVIC_SetPriorityGrouping>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
 8000e38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3e:	f7ff ff61 	bl	8000d04 <__NVIC_GetPriorityGrouping>
 8000e42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	68b9      	ldr	r1, [r7, #8]
 8000e48:	6978      	ldr	r0, [r7, #20]
 8000e4a:	f7ff ffb1 	bl	8000db0 <NVIC_EncodePriority>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e54:	4611      	mov	r1, r2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ff80 	bl	8000d5c <__NVIC_SetPriority>
}
 8000e5c:	bf00      	nop
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff54 	bl	8000d20 <__NVIC_EnableIRQ>
}
 8000e78:	bf00      	nop
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d004      	beq.n	8000e9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2280      	movs	r2, #128	; 0x80
 8000e98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00c      	b.n	8000eb8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2205      	movs	r2, #5
 8000ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 0201 	bic.w	r2, r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
 8000ede:	e16b      	b.n	80011b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	f040 815a 	bne.w	80011b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d00b      	beq.n	8000f1e <HAL_GPIO_Init+0x5a>
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d007      	beq.n	8000f1e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f12:	2b11      	cmp	r3, #17
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2b12      	cmp	r3, #18
 8000f1c:	d130      	bne.n	8000f80 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f54:	2201      	movs	r2, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	091b      	lsrs	r3, r3, #4
 8000f6a:	f003 0201 	and.w	r2, r3, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0xfc>
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b12      	cmp	r3, #18
 8000fbe:	d123      	bne.n	8001008 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	f003 0307 	and.w	r3, r3, #7
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	691a      	ldr	r2, [r3, #16]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	08da      	lsrs	r2, r3, #3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3208      	adds	r2, #8
 8001002:	69b9      	ldr	r1, [r7, #24]
 8001004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0203 	and.w	r2, r3, #3
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001044:	2b00      	cmp	r3, #0
 8001046:	f000 80b4 	beq.w	80011b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b5f      	ldr	r3, [pc, #380]	; (80011cc <HAL_GPIO_Init+0x308>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a5e      	ldr	r2, [pc, #376]	; (80011cc <HAL_GPIO_Init+0x308>)
 8001054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b5c      	ldr	r3, [pc, #368]	; (80011cc <HAL_GPIO_Init+0x308>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001066:	4a5a      	ldr	r2, [pc, #360]	; (80011d0 <HAL_GPIO_Init+0x30c>)
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a51      	ldr	r2, [pc, #324]	; (80011d4 <HAL_GPIO_Init+0x310>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d02b      	beq.n	80010ea <HAL_GPIO_Init+0x226>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a50      	ldr	r2, [pc, #320]	; (80011d8 <HAL_GPIO_Init+0x314>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d025      	beq.n	80010e6 <HAL_GPIO_Init+0x222>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4f      	ldr	r2, [pc, #316]	; (80011dc <HAL_GPIO_Init+0x318>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d01f      	beq.n	80010e2 <HAL_GPIO_Init+0x21e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4e      	ldr	r2, [pc, #312]	; (80011e0 <HAL_GPIO_Init+0x31c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d019      	beq.n	80010de <HAL_GPIO_Init+0x21a>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4d      	ldr	r2, [pc, #308]	; (80011e4 <HAL_GPIO_Init+0x320>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d013      	beq.n	80010da <HAL_GPIO_Init+0x216>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4c      	ldr	r2, [pc, #304]	; (80011e8 <HAL_GPIO_Init+0x324>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d00d      	beq.n	80010d6 <HAL_GPIO_Init+0x212>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4b      	ldr	r2, [pc, #300]	; (80011ec <HAL_GPIO_Init+0x328>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d007      	beq.n	80010d2 <HAL_GPIO_Init+0x20e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4a      	ldr	r2, [pc, #296]	; (80011f0 <HAL_GPIO_Init+0x32c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d101      	bne.n	80010ce <HAL_GPIO_Init+0x20a>
 80010ca:	2307      	movs	r3, #7
 80010cc:	e00e      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010ce:	2308      	movs	r3, #8
 80010d0:	e00c      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010d2:	2306      	movs	r3, #6
 80010d4:	e00a      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010d6:	2305      	movs	r3, #5
 80010d8:	e008      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010da:	2304      	movs	r3, #4
 80010dc:	e006      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010de:	2303      	movs	r3, #3
 80010e0:	e004      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e002      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <HAL_GPIO_Init+0x228>
 80010ea:	2300      	movs	r3, #0
 80010ec:	69fa      	ldr	r2, [r7, #28]
 80010ee:	f002 0203 	and.w	r2, r2, #3
 80010f2:	0092      	lsls	r2, r2, #2
 80010f4:	4093      	lsls	r3, r2
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010fc:	4934      	ldr	r1, [pc, #208]	; (80011d0 <HAL_GPIO_Init+0x30c>)
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	3302      	adds	r3, #2
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800110a:	4b3a      	ldr	r3, [pc, #232]	; (80011f4 <HAL_GPIO_Init+0x330>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800112e:	4a31      	ldr	r2, [pc, #196]	; (80011f4 <HAL_GPIO_Init+0x330>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001134:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <HAL_GPIO_Init+0x330>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001158:	4a26      	ldr	r2, [pc, #152]	; (80011f4 <HAL_GPIO_Init+0x330>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115e:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <HAL_GPIO_Init+0x330>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001182:	4a1c      	ldr	r2, [pc, #112]	; (80011f4 <HAL_GPIO_Init+0x330>)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <HAL_GPIO_Init+0x330>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011ac:	4a11      	ldr	r2, [pc, #68]	; (80011f4 <HAL_GPIO_Init+0x330>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3301      	adds	r3, #1
 80011b6:	61fb      	str	r3, [r7, #28]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	f67f ae90 	bls.w	8000ee0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c0:	bf00      	nop
 80011c2:	3724      	adds	r7, #36	; 0x24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40013800 	.word	0x40013800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40020800 	.word	0x40020800
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40021400 	.word	0x40021400
 80011ec:	40021800 	.word	0x40021800
 80011f0:	40021c00 	.word	0x40021c00
 80011f4:	40013c00 	.word	0x40013c00

080011f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	807b      	strh	r3, [r7, #2]
 8001204:	4613      	mov	r3, r2
 8001206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001208:	787b      	ldrb	r3, [r7, #1]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001214:	e003      	b.n	800121e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	041a      	lsls	r2, r3, #16
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	619a      	str	r2, [r3, #24]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e25b      	b.n	80016f6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d075      	beq.n	8001336 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800124a:	4ba3      	ldr	r3, [pc, #652]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 030c 	and.w	r3, r3, #12
 8001252:	2b04      	cmp	r3, #4
 8001254:	d00c      	beq.n	8001270 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001256:	4ba0      	ldr	r3, [pc, #640]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800125e:	2b08      	cmp	r3, #8
 8001260:	d112      	bne.n	8001288 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001262:	4b9d      	ldr	r3, [pc, #628]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800126e:	d10b      	bne.n	8001288 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001270:	4b99      	ldr	r3, [pc, #612]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d05b      	beq.n	8001334 <HAL_RCC_OscConfig+0x108>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d157      	bne.n	8001334 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e236      	b.n	80016f6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001290:	d106      	bne.n	80012a0 <HAL_RCC_OscConfig+0x74>
 8001292:	4b91      	ldr	r3, [pc, #580]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a90      	ldr	r2, [pc, #576]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e01d      	b.n	80012dc <HAL_RCC_OscConfig+0xb0>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012a8:	d10c      	bne.n	80012c4 <HAL_RCC_OscConfig+0x98>
 80012aa:	4b8b      	ldr	r3, [pc, #556]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a8a      	ldr	r2, [pc, #552]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	4b88      	ldr	r3, [pc, #544]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a87      	ldr	r2, [pc, #540]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e00b      	b.n	80012dc <HAL_RCC_OscConfig+0xb0>
 80012c4:	4b84      	ldr	r3, [pc, #528]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a83      	ldr	r2, [pc, #524]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 80012ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4b81      	ldr	r3, [pc, #516]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a80      	ldr	r2, [pc, #512]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 80012d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d013      	beq.n	800130c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e4:	f7ff fcde 	bl	8000ca4 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fcda 	bl	8000ca4 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	; 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e1fb      	b.n	80016f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fe:	4b76      	ldr	r3, [pc, #472]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0xc0>
 800130a:	e014      	b.n	8001336 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff fcca 	bl	8000ca4 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff fcc6 	bl	8000ca4 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	; 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e1e7      	b.n	80016f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001326:	4b6c      	ldr	r3, [pc, #432]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0xe8>
 8001332:	e000      	b.n	8001336 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d063      	beq.n	800140a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001342:	4b65      	ldr	r3, [pc, #404]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00b      	beq.n	8001366 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800134e:	4b62      	ldr	r3, [pc, #392]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001356:	2b08      	cmp	r3, #8
 8001358:	d11c      	bne.n	8001394 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135a:	4b5f      	ldr	r3, [pc, #380]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d116      	bne.n	8001394 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001366:	4b5c      	ldr	r3, [pc, #368]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d005      	beq.n	800137e <HAL_RCC_OscConfig+0x152>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d001      	beq.n	800137e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e1bb      	b.n	80016f6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137e:	4b56      	ldr	r3, [pc, #344]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	4952      	ldr	r1, [pc, #328]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 800138e:	4313      	orrs	r3, r2
 8001390:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001392:	e03a      	b.n	800140a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d020      	beq.n	80013de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800139c:	4b4f      	ldr	r3, [pc, #316]	; (80014dc <HAL_RCC_OscConfig+0x2b0>)
 800139e:	2201      	movs	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a2:	f7ff fc7f 	bl	8000ca4 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013aa:	f7ff fc7b 	bl	8000ca4 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e19c      	b.n	80016f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013bc:	4b46      	ldr	r3, [pc, #280]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f0      	beq.n	80013aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c8:	4b43      	ldr	r3, [pc, #268]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	4940      	ldr	r1, [pc, #256]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	600b      	str	r3, [r1, #0]
 80013dc:	e015      	b.n	800140a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013de:	4b3f      	ldr	r3, [pc, #252]	; (80014dc <HAL_RCC_OscConfig+0x2b0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e4:	f7ff fc5e 	bl	8000ca4 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ec:	f7ff fc5a 	bl	8000ca4 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e17b      	b.n	80016f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fe:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	2b00      	cmp	r3, #0
 8001414:	d030      	beq.n	8001478 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d016      	beq.n	800144c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800141e:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <HAL_RCC_OscConfig+0x2b4>)
 8001420:	2201      	movs	r2, #1
 8001422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001424:	f7ff fc3e 	bl	8000ca4 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142c:	f7ff fc3a 	bl	8000ca4 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e15b      	b.n	80016f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143e:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x200>
 800144a:	e015      	b.n	8001478 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800144c:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <HAL_RCC_OscConfig+0x2b4>)
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001452:	f7ff fc27 	bl	8000ca4 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145a:	f7ff fc23 	bl	8000ca4 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e144      	b.n	80016f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 800146e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f0      	bne.n	800145a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	f000 80a0 	beq.w	80015c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800148a:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10f      	bne.n	80014b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014b2:	2301      	movs	r3, #1
 80014b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_RCC_OscConfig+0x2b8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d121      	bne.n	8001506 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_RCC_OscConfig+0x2b8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <HAL_RCC_OscConfig+0x2b8>)
 80014c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fbe9 	bl	8000ca4 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d4:	e011      	b.n	80014fa <HAL_RCC_OscConfig+0x2ce>
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800
 80014dc:	42470000 	.word	0x42470000
 80014e0:	42470e80 	.word	0x42470e80
 80014e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e8:	f7ff fbdc 	bl	8000ca4 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e0fd      	b.n	80016f6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fa:	4b81      	ldr	r3, [pc, #516]	; (8001700 <HAL_RCC_OscConfig+0x4d4>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d106      	bne.n	800151c <HAL_RCC_OscConfig+0x2f0>
 800150e:	4b7d      	ldr	r3, [pc, #500]	; (8001704 <HAL_RCC_OscConfig+0x4d8>)
 8001510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001512:	4a7c      	ldr	r2, [pc, #496]	; (8001704 <HAL_RCC_OscConfig+0x4d8>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6713      	str	r3, [r2, #112]	; 0x70
 800151a:	e01c      	b.n	8001556 <HAL_RCC_OscConfig+0x32a>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2b05      	cmp	r3, #5
 8001522:	d10c      	bne.n	800153e <HAL_RCC_OscConfig+0x312>
 8001524:	4b77      	ldr	r3, [pc, #476]	; (8001704 <HAL_RCC_OscConfig+0x4d8>)
 8001526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001528:	4a76      	ldr	r2, [pc, #472]	; (8001704 <HAL_RCC_OscConfig+0x4d8>)
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	6713      	str	r3, [r2, #112]	; 0x70
 8001530:	4b74      	ldr	r3, [pc, #464]	; (8001704 <HAL_RCC_OscConfig+0x4d8>)
 8001532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001534:	4a73      	ldr	r2, [pc, #460]	; (8001704 <HAL_RCC_OscConfig+0x4d8>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6713      	str	r3, [r2, #112]	; 0x70
 800153c:	e00b      	b.n	8001556 <HAL_RCC_OscConfig+0x32a>
 800153e:	4b71      	ldr	r3, [pc, #452]	; (8001704 <HAL_RCC_OscConfig+0x4d8>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001542:	4a70      	ldr	r2, [pc, #448]	; (8001704 <HAL_RCC_OscConfig+0x4d8>)
 8001544:	f023 0301 	bic.w	r3, r3, #1
 8001548:	6713      	str	r3, [r2, #112]	; 0x70
 800154a:	4b6e      	ldr	r3, [pc, #440]	; (8001704 <HAL_RCC_OscConfig+0x4d8>)
 800154c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154e:	4a6d      	ldr	r2, [pc, #436]	; (8001704 <HAL_RCC_OscConfig+0x4d8>)
 8001550:	f023 0304 	bic.w	r3, r3, #4
 8001554:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d015      	beq.n	800158a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155e:	f7ff fba1 	bl	8000ca4 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001564:	e00a      	b.n	800157c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001566:	f7ff fb9d 	bl	8000ca4 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	f241 3288 	movw	r2, #5000	; 0x1388
 8001574:	4293      	cmp	r3, r2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e0bc      	b.n	80016f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157c:	4b61      	ldr	r3, [pc, #388]	; (8001704 <HAL_RCC_OscConfig+0x4d8>)
 800157e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0ee      	beq.n	8001566 <HAL_RCC_OscConfig+0x33a>
 8001588:	e014      	b.n	80015b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158a:	f7ff fb8b 	bl	8000ca4 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001590:	e00a      	b.n	80015a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001592:	f7ff fb87 	bl	8000ca4 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e0a6      	b.n	80016f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a8:	4b56      	ldr	r3, [pc, #344]	; (8001704 <HAL_RCC_OscConfig+0x4d8>)
 80015aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1ee      	bne.n	8001592 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015b4:	7dfb      	ldrb	r3, [r7, #23]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d105      	bne.n	80015c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ba:	4b52      	ldr	r3, [pc, #328]	; (8001704 <HAL_RCC_OscConfig+0x4d8>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4a51      	ldr	r2, [pc, #324]	; (8001704 <HAL_RCC_OscConfig+0x4d8>)
 80015c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 8092 	beq.w	80016f4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015d0:	4b4c      	ldr	r3, [pc, #304]	; (8001704 <HAL_RCC_OscConfig+0x4d8>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 030c 	and.w	r3, r3, #12
 80015d8:	2b08      	cmp	r3, #8
 80015da:	d05c      	beq.n	8001696 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d141      	bne.n	8001668 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e4:	4b48      	ldr	r3, [pc, #288]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ea:	f7ff fb5b 	bl	8000ca4 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f2:	f7ff fb57 	bl	8000ca4 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e078      	b.n	80016f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001604:	4b3f      	ldr	r3, [pc, #252]	; (8001704 <HAL_RCC_OscConfig+0x4d8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1f0      	bne.n	80015f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69da      	ldr	r2, [r3, #28]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	019b      	lsls	r3, r3, #6
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	3b01      	subs	r3, #1
 800162a:	041b      	lsls	r3, r3, #16
 800162c:	431a      	orrs	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001632:	061b      	lsls	r3, r3, #24
 8001634:	4933      	ldr	r1, [pc, #204]	; (8001704 <HAL_RCC_OscConfig+0x4d8>)
 8001636:	4313      	orrs	r3, r2
 8001638:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800163a:	4b33      	ldr	r3, [pc, #204]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 800163c:	2201      	movs	r2, #1
 800163e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fb30 	bl	8000ca4 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff fb2c 	bl	8000ca4 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e04d      	b.n	80016f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165a:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <HAL_RCC_OscConfig+0x4d8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x41c>
 8001666:	e045      	b.n	80016f4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001668:	4b27      	ldr	r3, [pc, #156]	; (8001708 <HAL_RCC_OscConfig+0x4dc>)
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff fb19 	bl	8000ca4 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001676:	f7ff fb15 	bl	8000ca4 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e036      	b.n	80016f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001688:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <HAL_RCC_OscConfig+0x4d8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1f0      	bne.n	8001676 <HAL_RCC_OscConfig+0x44a>
 8001694:	e02e      	b.n	80016f4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d101      	bne.n	80016a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e029      	b.n	80016f6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016a2:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_RCC_OscConfig+0x4d8>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d11c      	bne.n	80016f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d115      	bne.n	80016f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016ca:	4013      	ands	r3, r2
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d10d      	bne.n	80016f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016de:	429a      	cmp	r2, r3
 80016e0:	d106      	bne.n	80016f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d001      	beq.n	80016f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e000      	b.n	80016f6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40007000 	.word	0x40007000
 8001704:	40023800 	.word	0x40023800
 8001708:	42470060 	.word	0x42470060

0800170c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0cc      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001720:	4b68      	ldr	r3, [pc, #416]	; (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 030f 	and.w	r3, r3, #15
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d90c      	bls.n	8001748 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172e:	4b65      	ldr	r3, [pc, #404]	; (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001736:	4b63      	ldr	r3, [pc, #396]	; (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	d001      	beq.n	8001748 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0b8      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d020      	beq.n	8001796 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001760:	4b59      	ldr	r3, [pc, #356]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	4a58      	ldr	r2, [pc, #352]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800176a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001778:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4a52      	ldr	r2, [pc, #328]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001782:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001784:	4b50      	ldr	r3, [pc, #320]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	494d      	ldr	r1, [pc, #308]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	4313      	orrs	r3, r2
 8001794:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d044      	beq.n	800182c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d107      	bne.n	80017ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017aa:	4b47      	ldr	r3, [pc, #284]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d119      	bne.n	80017ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e07f      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d003      	beq.n	80017ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ca:	4b3f      	ldr	r3, [pc, #252]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d109      	bne.n	80017ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e06f      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017da:	4b3b      	ldr	r3, [pc, #236]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e067      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ea:	4b37      	ldr	r3, [pc, #220]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f023 0203 	bic.w	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4934      	ldr	r1, [pc, #208]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017fc:	f7ff fa52 	bl	8000ca4 <HAL_GetTick>
 8001800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001802:	e00a      	b.n	800181a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001804:	f7ff fa4e 	bl	8000ca4 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e04f      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181a:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 020c 	and.w	r2, r3, #12
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	429a      	cmp	r2, r3
 800182a:	d1eb      	bne.n	8001804 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800182c:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 030f 	and.w	r3, r3, #15
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d20c      	bcs.n	8001854 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183a:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001842:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <HAL_RCC_ClockConfig+0x1b8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d001      	beq.n	8001854 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e032      	b.n	80018ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d008      	beq.n	8001872 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001860:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	4916      	ldr	r1, [pc, #88]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	2b00      	cmp	r3, #0
 800187c:	d009      	beq.n	8001892 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	490e      	ldr	r1, [pc, #56]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001892:	f000 f821 	bl	80018d8 <HAL_RCC_GetSysClockFreq>
 8001896:	4601      	mov	r1, r0
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <HAL_RCC_ClockConfig+0x1c0>)
 80018a4:	5cd3      	ldrb	r3, [r2, r3]
 80018a6:	fa21 f303 	lsr.w	r3, r1, r3
 80018aa:	4a09      	ldr	r2, [pc, #36]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff f8c2 	bl	8000a3c <HAL_InitTick>

  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023c00 	.word	0x40023c00
 80018c8:	40023800 	.word	0x40023800
 80018cc:	080059d8 	.word	0x080059d8
 80018d0:	20000000 	.word	0x20000000
 80018d4:	20000004 	.word	0x20000004

080018d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	2300      	movs	r3, #0
 80018e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018ee:	4b63      	ldr	r3, [pc, #396]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	d007      	beq.n	800190a <HAL_RCC_GetSysClockFreq+0x32>
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d008      	beq.n	8001910 <HAL_RCC_GetSysClockFreq+0x38>
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 80b4 	bne.w	8001a6c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001904:	4b5e      	ldr	r3, [pc, #376]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001906:	60bb      	str	r3, [r7, #8]
       break;
 8001908:	e0b3      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800190a:	4b5e      	ldr	r3, [pc, #376]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800190c:	60bb      	str	r3, [r7, #8]
      break;
 800190e:	e0b0      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001910:	4b5a      	ldr	r3, [pc, #360]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001918:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800191a:	4b58      	ldr	r3, [pc, #352]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d04a      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001926:	4b55      	ldr	r3, [pc, #340]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	099b      	lsrs	r3, r3, #6
 800192c:	f04f 0400 	mov.w	r4, #0
 8001930:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	ea03 0501 	and.w	r5, r3, r1
 800193c:	ea04 0602 	and.w	r6, r4, r2
 8001940:	4629      	mov	r1, r5
 8001942:	4632      	mov	r2, r6
 8001944:	f04f 0300 	mov.w	r3, #0
 8001948:	f04f 0400 	mov.w	r4, #0
 800194c:	0154      	lsls	r4, r2, #5
 800194e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001952:	014b      	lsls	r3, r1, #5
 8001954:	4619      	mov	r1, r3
 8001956:	4622      	mov	r2, r4
 8001958:	1b49      	subs	r1, r1, r5
 800195a:	eb62 0206 	sbc.w	r2, r2, r6
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	f04f 0400 	mov.w	r4, #0
 8001966:	0194      	lsls	r4, r2, #6
 8001968:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800196c:	018b      	lsls	r3, r1, #6
 800196e:	1a5b      	subs	r3, r3, r1
 8001970:	eb64 0402 	sbc.w	r4, r4, r2
 8001974:	f04f 0100 	mov.w	r1, #0
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	00e2      	lsls	r2, r4, #3
 800197e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001982:	00d9      	lsls	r1, r3, #3
 8001984:	460b      	mov	r3, r1
 8001986:	4614      	mov	r4, r2
 8001988:	195b      	adds	r3, r3, r5
 800198a:	eb44 0406 	adc.w	r4, r4, r6
 800198e:	f04f 0100 	mov.w	r1, #0
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	0262      	lsls	r2, r4, #9
 8001998:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800199c:	0259      	lsls	r1, r3, #9
 800199e:	460b      	mov	r3, r1
 80019a0:	4614      	mov	r4, r2
 80019a2:	4618      	mov	r0, r3
 80019a4:	4621      	mov	r1, r4
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f04f 0400 	mov.w	r4, #0
 80019ac:	461a      	mov	r2, r3
 80019ae:	4623      	mov	r3, r4
 80019b0:	f7fe fc66 	bl	8000280 <__aeabi_uldivmod>
 80019b4:	4603      	mov	r3, r0
 80019b6:	460c      	mov	r4, r1
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	e049      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019bc:	4b2f      	ldr	r3, [pc, #188]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	099b      	lsrs	r3, r3, #6
 80019c2:	f04f 0400 	mov.w	r4, #0
 80019c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	ea03 0501 	and.w	r5, r3, r1
 80019d2:	ea04 0602 	and.w	r6, r4, r2
 80019d6:	4629      	mov	r1, r5
 80019d8:	4632      	mov	r2, r6
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	f04f 0400 	mov.w	r4, #0
 80019e2:	0154      	lsls	r4, r2, #5
 80019e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019e8:	014b      	lsls	r3, r1, #5
 80019ea:	4619      	mov	r1, r3
 80019ec:	4622      	mov	r2, r4
 80019ee:	1b49      	subs	r1, r1, r5
 80019f0:	eb62 0206 	sbc.w	r2, r2, r6
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	f04f 0400 	mov.w	r4, #0
 80019fc:	0194      	lsls	r4, r2, #6
 80019fe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a02:	018b      	lsls	r3, r1, #6
 8001a04:	1a5b      	subs	r3, r3, r1
 8001a06:	eb64 0402 	sbc.w	r4, r4, r2
 8001a0a:	f04f 0100 	mov.w	r1, #0
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	00e2      	lsls	r2, r4, #3
 8001a14:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a18:	00d9      	lsls	r1, r3, #3
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4614      	mov	r4, r2
 8001a1e:	195b      	adds	r3, r3, r5
 8001a20:	eb44 0406 	adc.w	r4, r4, r6
 8001a24:	f04f 0100 	mov.w	r1, #0
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	02a2      	lsls	r2, r4, #10
 8001a2e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a32:	0299      	lsls	r1, r3, #10
 8001a34:	460b      	mov	r3, r1
 8001a36:	4614      	mov	r4, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f04f 0400 	mov.w	r4, #0
 8001a42:	461a      	mov	r2, r3
 8001a44:	4623      	mov	r3, r4
 8001a46:	f7fe fc1b 	bl	8000280 <__aeabi_uldivmod>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	460c      	mov	r4, r1
 8001a4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	0c1b      	lsrs	r3, r3, #16
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a68:	60bb      	str	r3, [r7, #8]
      break;
 8001a6a:	e002      	b.n	8001a72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a6e:	60bb      	str	r3, [r7, #8]
      break;
 8001a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a72:	68bb      	ldr	r3, [r7, #8]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	00f42400 	.word	0x00f42400
 8001a84:	007a1200 	.word	0x007a1200

08001a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000000 	.word	0x20000000

08001aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001aa4:	f7ff fff0 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001aa8:	4601      	mov	r1, r0
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	0a9b      	lsrs	r3, r3, #10
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	4a03      	ldr	r2, [pc, #12]	; (8001ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ab6:	5cd3      	ldrb	r3, [r2, r3]
 8001ab8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	080059e8 	.word	0x080059e8

08001ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001acc:	f7ff ffdc 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001ad0:	4601      	mov	r1, r0
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	0b5b      	lsrs	r3, r3, #13
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	4a03      	ldr	r2, [pc, #12]	; (8001aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ade:	5cd3      	ldrb	r3, [r2, r3]
 8001ae0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	080059e8 	.word	0x080059e8

08001af0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	220f      	movs	r2, #15
 8001afe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 0203 	and.w	r2, r3, #3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_RCC_GetClockConfig+0x5c>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	08db      	lsrs	r3, r3, #3
 8001b2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <HAL_RCC_GetClockConfig+0x60>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 020f 	and.w	r2, r3, #15
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	601a      	str	r2, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40023c00 	.word	0x40023c00

08001b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e01d      	b.n	8001ba2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d106      	bne.n	8001b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f815 	bl	8001baa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3304      	adds	r3, #4
 8001b90:	4619      	mov	r1, r3
 8001b92:	4610      	mov	r0, r2
 8001b94:	f000 f968 	bl	8001e68 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b085      	sub	sp, #20
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0201 	orr.w	r2, r2, #1
 8001bd4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2b06      	cmp	r3, #6
 8001be6:	d007      	beq.n	8001bf8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d122      	bne.n	8001c62 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d11b      	bne.n	8001c62 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f06f 0202 	mvn.w	r2, #2
 8001c32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f8ee 	bl	8001e2a <HAL_TIM_IC_CaptureCallback>
 8001c4e:	e005      	b.n	8001c5c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f8e0 	bl	8001e16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f8f1 	bl	8001e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d122      	bne.n	8001cb6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d11b      	bne.n	8001cb6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f06f 0204 	mvn.w	r2, #4
 8001c86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f8c4 	bl	8001e2a <HAL_TIM_IC_CaptureCallback>
 8001ca2:	e005      	b.n	8001cb0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f8b6 	bl	8001e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f8c7 	bl	8001e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d122      	bne.n	8001d0a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d11b      	bne.n	8001d0a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f06f 0208 	mvn.w	r2, #8
 8001cda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2204      	movs	r2, #4
 8001ce0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f89a 	bl	8001e2a <HAL_TIM_IC_CaptureCallback>
 8001cf6:	e005      	b.n	8001d04 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f88c 	bl	8001e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f89d 	bl	8001e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	f003 0310 	and.w	r3, r3, #16
 8001d14:	2b10      	cmp	r3, #16
 8001d16:	d122      	bne.n	8001d5e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	2b10      	cmp	r3, #16
 8001d24:	d11b      	bne.n	8001d5e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f06f 0210 	mvn.w	r2, #16
 8001d2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2208      	movs	r2, #8
 8001d34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f870 	bl	8001e2a <HAL_TIM_IC_CaptureCallback>
 8001d4a:	e005      	b.n	8001d58 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f862 	bl	8001e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f873 	bl	8001e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d10e      	bne.n	8001d8a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d107      	bne.n	8001d8a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f06f 0201 	mvn.w	r2, #1
 8001d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7fe fdc7 	bl	8000918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d94:	2b80      	cmp	r3, #128	; 0x80
 8001d96:	d10e      	bne.n	8001db6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da2:	2b80      	cmp	r3, #128	; 0x80
 8001da4:	d107      	bne.n	8001db6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f903 	bl	8001fbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc0:	2b40      	cmp	r3, #64	; 0x40
 8001dc2:	d10e      	bne.n	8001de2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dce:	2b40      	cmp	r3, #64	; 0x40
 8001dd0:	d107      	bne.n	8001de2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f838 	bl	8001e52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	f003 0320 	and.w	r3, r3, #32
 8001dec:	2b20      	cmp	r3, #32
 8001dee:	d10e      	bne.n	8001e0e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	f003 0320 	and.w	r3, r3, #32
 8001dfa:	2b20      	cmp	r3, #32
 8001dfc:	d107      	bne.n	8001e0e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f06f 0220 	mvn.w	r2, #32
 8001e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f8cd 	bl	8001fa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a40      	ldr	r2, [pc, #256]	; (8001f7c <TIM_Base_SetConfig+0x114>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d013      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e86:	d00f      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a3d      	ldr	r2, [pc, #244]	; (8001f80 <TIM_Base_SetConfig+0x118>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d00b      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a3c      	ldr	r2, [pc, #240]	; (8001f84 <TIM_Base_SetConfig+0x11c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d007      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a3b      	ldr	r2, [pc, #236]	; (8001f88 <TIM_Base_SetConfig+0x120>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d003      	beq.n	8001ea8 <TIM_Base_SetConfig+0x40>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a3a      	ldr	r2, [pc, #232]	; (8001f8c <TIM_Base_SetConfig+0x124>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d108      	bne.n	8001eba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a2f      	ldr	r2, [pc, #188]	; (8001f7c <TIM_Base_SetConfig+0x114>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d02b      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ec8:	d027      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a2c      	ldr	r2, [pc, #176]	; (8001f80 <TIM_Base_SetConfig+0x118>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d023      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a2b      	ldr	r2, [pc, #172]	; (8001f84 <TIM_Base_SetConfig+0x11c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01f      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a2a      	ldr	r2, [pc, #168]	; (8001f88 <TIM_Base_SetConfig+0x120>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d01b      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a29      	ldr	r2, [pc, #164]	; (8001f8c <TIM_Base_SetConfig+0x124>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d017      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a28      	ldr	r2, [pc, #160]	; (8001f90 <TIM_Base_SetConfig+0x128>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d013      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a27      	ldr	r2, [pc, #156]	; (8001f94 <TIM_Base_SetConfig+0x12c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00f      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a26      	ldr	r2, [pc, #152]	; (8001f98 <TIM_Base_SetConfig+0x130>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d00b      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a25      	ldr	r2, [pc, #148]	; (8001f9c <TIM_Base_SetConfig+0x134>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d007      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a24      	ldr	r2, [pc, #144]	; (8001fa0 <TIM_Base_SetConfig+0x138>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d003      	beq.n	8001f1a <TIM_Base_SetConfig+0xb2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a23      	ldr	r2, [pc, #140]	; (8001fa4 <TIM_Base_SetConfig+0x13c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d108      	bne.n	8001f2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <TIM_Base_SetConfig+0x114>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d003      	beq.n	8001f60 <TIM_Base_SetConfig+0xf8>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <TIM_Base_SetConfig+0x124>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d103      	bne.n	8001f68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	615a      	str	r2, [r3, #20]
}
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40010000 	.word	0x40010000
 8001f80:	40000400 	.word	0x40000400
 8001f84:	40000800 	.word	0x40000800
 8001f88:	40000c00 	.word	0x40000c00
 8001f8c:	40010400 	.word	0x40010400
 8001f90:	40014000 	.word	0x40014000
 8001f94:	40014400 	.word	0x40014400
 8001f98:	40014800 	.word	0x40014800
 8001f9c:	40001800 	.word	0x40001800
 8001fa0:	40001c00 	.word	0x40001c00
 8001fa4:	40002000 	.word	0x40002000

08001fa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e03f      	b.n	8002062 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d106      	bne.n	8001ffc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7fe fcd0 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2224      	movs	r2, #36	; 0x24
 8002000:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002012:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 fb4b 	bl	80026b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	691a      	ldr	r2, [r3, #16]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002028:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	695a      	ldr	r2, [r3, #20]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002038:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002048:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2220      	movs	r2, #32
 8002054:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b088      	sub	sp, #32
 800206e:	af02      	add	r7, sp, #8
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	603b      	str	r3, [r7, #0]
 8002076:	4613      	mov	r3, r2
 8002078:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b20      	cmp	r3, #32
 8002088:	f040 8083 	bne.w	8002192 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <HAL_UART_Transmit+0x2e>
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e07b      	b.n	8002194 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_UART_Transmit+0x40>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e074      	b.n	8002194 <HAL_UART_Transmit+0x12a>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2221      	movs	r2, #33	; 0x21
 80020bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80020c0:	f7fe fdf0 	bl	8000ca4 <HAL_GetTick>
 80020c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	88fa      	ldrh	r2, [r7, #6]
 80020ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	88fa      	ldrh	r2, [r7, #6]
 80020d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80020da:	e042      	b.n	8002162 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020f2:	d122      	bne.n	800213a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	2200      	movs	r2, #0
 80020fc:	2180      	movs	r1, #128	; 0x80
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 f96a 	bl	80023d8 <UART_WaitOnFlagUntilTimeout>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e042      	b.n	8002194 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002120:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	3302      	adds	r3, #2
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	e017      	b.n	8002162 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	3301      	adds	r3, #1
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	e013      	b.n	8002162 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2200      	movs	r2, #0
 8002142:	2180      	movs	r1, #128	; 0x80
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 f947 	bl	80023d8 <UART_WaitOnFlagUntilTimeout>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e01f      	b.n	8002194 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	60ba      	str	r2, [r7, #8]
 800215a:	781a      	ldrb	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002166:	b29b      	uxth	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1b7      	bne.n	80020dc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	2200      	movs	r2, #0
 8002174:	2140      	movs	r1, #64	; 0x40
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 f92e 	bl	80023d8 <UART_WaitOnFlagUntilTimeout>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e006      	b.n	8002194 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2220      	movs	r2, #32
 800218a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	e000      	b.n	8002194 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002192:	2302      	movs	r3, #2
  }
}
 8002194:	4618      	mov	r0, r3
 8002196:	3718      	adds	r7, #24
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b088      	sub	sp, #32
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80021bc:	2300      	movs	r3, #0
 80021be:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10d      	bne.n	80021ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f003 0320 	and.w	r3, r3, #32
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d008      	beq.n	80021ee <HAL_UART_IRQHandler+0x52>
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	f003 0320 	and.w	r3, r3, #32
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f9e0 	bl	80025ac <UART_Receive_IT>
      return;
 80021ec:	e0d1      	b.n	8002392 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80b0 	beq.w	8002356 <HAL_UART_IRQHandler+0x1ba>
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d105      	bne.n	800220c <HAL_UART_IRQHandler+0x70>
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 80a5 	beq.w	8002356 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <HAL_UART_IRQHandler+0x90>
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002224:	f043 0201 	orr.w	r2, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_UART_IRQHandler+0xb0>
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002244:	f043 0202 	orr.w	r2, r3, #2
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <HAL_UART_IRQHandler+0xd0>
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002264:	f043 0204 	orr.w	r2, r3, #4
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00f      	beq.n	8002296 <HAL_UART_IRQHandler+0xfa>
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	f003 0320 	and.w	r3, r3, #32
 800227c:	2b00      	cmp	r3, #0
 800227e:	d104      	bne.n	800228a <HAL_UART_IRQHandler+0xee>
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228e:	f043 0208 	orr.w	r2, r3, #8
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229a:	2b00      	cmp	r3, #0
 800229c:	d078      	beq.n	8002390 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	f003 0320 	and.w	r3, r3, #32
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d007      	beq.n	80022b8 <HAL_UART_IRQHandler+0x11c>
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	f003 0320 	and.w	r3, r3, #32
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f97a 	bl	80025ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c2:	2b40      	cmp	r3, #64	; 0x40
 80022c4:	bf0c      	ite	eq
 80022c6:	2301      	moveq	r3, #1
 80022c8:	2300      	movne	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d102      	bne.n	80022e0 <HAL_UART_IRQHandler+0x144>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d031      	beq.n	8002344 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f8c3 	bl	800246c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f0:	2b40      	cmp	r3, #64	; 0x40
 80022f2:	d123      	bne.n	800233c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002302:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002308:	2b00      	cmp	r3, #0
 800230a:	d013      	beq.n	8002334 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002310:	4a21      	ldr	r2, [pc, #132]	; (8002398 <HAL_UART_IRQHandler+0x1fc>)
 8002312:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe fdb1 	bl	8000e80 <HAL_DMA_Abort_IT>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d016      	beq.n	8002352 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800232e:	4610      	mov	r0, r2
 8002330:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002332:	e00e      	b.n	8002352 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f845 	bl	80023c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800233a:	e00a      	b.n	8002352 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f841 	bl	80023c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002342:	e006      	b.n	8002352 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f83d 	bl	80023c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002350:	e01e      	b.n	8002390 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002352:	bf00      	nop
    return;
 8002354:	e01c      	b.n	8002390 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_UART_IRQHandler+0x1d6>
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f8b0 	bl	80024d0 <UART_Transmit_IT>
    return;
 8002370:	e00f      	b.n	8002392 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <HAL_UART_IRQHandler+0x1f6>
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002382:	2b00      	cmp	r3, #0
 8002384:	d005      	beq.n	8002392 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f8f8 	bl	800257c <UART_EndTransmit_IT>
    return;
 800238c:	bf00      	nop
 800238e:	e000      	b.n	8002392 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002390:	bf00      	nop
  }
}
 8002392:	3720      	adds	r7, #32
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	080024a9 	.word	0x080024a9

0800239c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	603b      	str	r3, [r7, #0]
 80023e4:	4613      	mov	r3, r2
 80023e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023e8:	e02c      	b.n	8002444 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f0:	d028      	beq.n	8002444 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d007      	beq.n	8002408 <UART_WaitOnFlagUntilTimeout+0x30>
 80023f8:	f7fe fc54 	bl	8000ca4 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	429a      	cmp	r2, r3
 8002406:	d21d      	bcs.n	8002444 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002416:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	695a      	ldr	r2, [r3, #20]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0201 	bic.w	r2, r2, #1
 8002426:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e00f      	b.n	8002464 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	4013      	ands	r3, r2
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	429a      	cmp	r2, r3
 8002452:	bf0c      	ite	eq
 8002454:	2301      	moveq	r3, #1
 8002456:	2300      	movne	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	429a      	cmp	r2, r3
 8002460:	d0c3      	beq.n	80023ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002482:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0201 	bic.w	r2, r2, #1
 8002492:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f7ff ff7e 	bl	80023c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024c8:	bf00      	nop
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b21      	cmp	r3, #33	; 0x21
 80024e2:	d144      	bne.n	800256e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ec:	d11a      	bne.n	8002524 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002502:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d105      	bne.n	8002518 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	1c9a      	adds	r2, r3, #2
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	621a      	str	r2, [r3, #32]
 8002516:	e00e      	b.n	8002536 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	621a      	str	r2, [r3, #32]
 8002522:	e008      	b.n	8002536 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	1c59      	adds	r1, r3, #1
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6211      	str	r1, [r2, #32]
 800252e:	781a      	ldrb	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800253a:	b29b      	uxth	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b29b      	uxth	r3, r3
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	4619      	mov	r1, r3
 8002544:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10f      	bne.n	800256a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002558:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002568:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	e000      	b.n	8002570 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800256e:	2302      	movs	r3, #2
  }
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002592:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff fefd 	bl	800239c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b22      	cmp	r3, #34	; 0x22
 80025be:	d171      	bne.n	80026a4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c8:	d123      	bne.n	8002612 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ce:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10e      	bne.n	80025f6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ee:	1c9a      	adds	r2, r3, #2
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	629a      	str	r2, [r3, #40]	; 0x28
 80025f4:	e029      	b.n	800264a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	629a      	str	r2, [r3, #40]	; 0x28
 8002610:	e01b      	b.n	800264a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10a      	bne.n	8002630 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6858      	ldr	r0, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	1c59      	adds	r1, r3, #1
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6291      	str	r1, [r2, #40]	; 0x28
 800262a:	b2c2      	uxtb	r2, r0
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	e00c      	b.n	800264a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	1c58      	adds	r0, r3, #1
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	6288      	str	r0, [r1, #40]	; 0x28
 8002642:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29b      	uxth	r3, r3
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	4619      	mov	r1, r3
 8002658:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800265a:	2b00      	cmp	r3, #0
 800265c:	d120      	bne.n	80026a0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0220 	bic.w	r2, r2, #32
 800266c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800267c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0201 	bic.w	r2, r2, #1
 800268c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff fe8a 	bl	80023b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	e002      	b.n	80026a6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	e000      	b.n	80026a6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80026a4:	2302      	movs	r3, #2
  }
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b4:	b085      	sub	sp, #20
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80026f2:	f023 030c 	bic.w	r3, r3, #12
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	68f9      	ldr	r1, [r7, #12]
 80026fc:	430b      	orrs	r3, r1
 80026fe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800271e:	f040 818b 	bne.w	8002a38 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4ac1      	ldr	r2, [pc, #772]	; (8002a2c <UART_SetConfig+0x37c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d005      	beq.n	8002738 <UART_SetConfig+0x88>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4abf      	ldr	r2, [pc, #764]	; (8002a30 <UART_SetConfig+0x380>)
 8002732:	4293      	cmp	r3, r2
 8002734:	f040 80bd 	bne.w	80028b2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002738:	f7ff f9c6 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 800273c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	461d      	mov	r5, r3
 8002742:	f04f 0600 	mov.w	r6, #0
 8002746:	46a8      	mov	r8, r5
 8002748:	46b1      	mov	r9, r6
 800274a:	eb18 0308 	adds.w	r3, r8, r8
 800274e:	eb49 0409 	adc.w	r4, r9, r9
 8002752:	4698      	mov	r8, r3
 8002754:	46a1      	mov	r9, r4
 8002756:	eb18 0805 	adds.w	r8, r8, r5
 800275a:	eb49 0906 	adc.w	r9, r9, r6
 800275e:	f04f 0100 	mov.w	r1, #0
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800276a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800276e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002772:	4688      	mov	r8, r1
 8002774:	4691      	mov	r9, r2
 8002776:	eb18 0005 	adds.w	r0, r8, r5
 800277a:	eb49 0106 	adc.w	r1, r9, r6
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	461d      	mov	r5, r3
 8002784:	f04f 0600 	mov.w	r6, #0
 8002788:	196b      	adds	r3, r5, r5
 800278a:	eb46 0406 	adc.w	r4, r6, r6
 800278e:	461a      	mov	r2, r3
 8002790:	4623      	mov	r3, r4
 8002792:	f7fd fd75 	bl	8000280 <__aeabi_uldivmod>
 8002796:	4603      	mov	r3, r0
 8002798:	460c      	mov	r4, r1
 800279a:	461a      	mov	r2, r3
 800279c:	4ba5      	ldr	r3, [pc, #660]	; (8002a34 <UART_SetConfig+0x384>)
 800279e:	fba3 2302 	umull	r2, r3, r3, r2
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	461d      	mov	r5, r3
 80027ac:	f04f 0600 	mov.w	r6, #0
 80027b0:	46a9      	mov	r9, r5
 80027b2:	46b2      	mov	sl, r6
 80027b4:	eb19 0309 	adds.w	r3, r9, r9
 80027b8:	eb4a 040a 	adc.w	r4, sl, sl
 80027bc:	4699      	mov	r9, r3
 80027be:	46a2      	mov	sl, r4
 80027c0:	eb19 0905 	adds.w	r9, r9, r5
 80027c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80027c8:	f04f 0100 	mov.w	r1, #0
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027dc:	4689      	mov	r9, r1
 80027de:	4692      	mov	sl, r2
 80027e0:	eb19 0005 	adds.w	r0, r9, r5
 80027e4:	eb4a 0106 	adc.w	r1, sl, r6
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	461d      	mov	r5, r3
 80027ee:	f04f 0600 	mov.w	r6, #0
 80027f2:	196b      	adds	r3, r5, r5
 80027f4:	eb46 0406 	adc.w	r4, r6, r6
 80027f8:	461a      	mov	r2, r3
 80027fa:	4623      	mov	r3, r4
 80027fc:	f7fd fd40 	bl	8000280 <__aeabi_uldivmod>
 8002800:	4603      	mov	r3, r0
 8002802:	460c      	mov	r4, r1
 8002804:	461a      	mov	r2, r3
 8002806:	4b8b      	ldr	r3, [pc, #556]	; (8002a34 <UART_SetConfig+0x384>)
 8002808:	fba3 1302 	umull	r1, r3, r3, r2
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	2164      	movs	r1, #100	; 0x64
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	3332      	adds	r3, #50	; 0x32
 800281a:	4a86      	ldr	r2, [pc, #536]	; (8002a34 <UART_SetConfig+0x384>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002828:	4498      	add	r8, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	461d      	mov	r5, r3
 800282e:	f04f 0600 	mov.w	r6, #0
 8002832:	46a9      	mov	r9, r5
 8002834:	46b2      	mov	sl, r6
 8002836:	eb19 0309 	adds.w	r3, r9, r9
 800283a:	eb4a 040a 	adc.w	r4, sl, sl
 800283e:	4699      	mov	r9, r3
 8002840:	46a2      	mov	sl, r4
 8002842:	eb19 0905 	adds.w	r9, r9, r5
 8002846:	eb4a 0a06 	adc.w	sl, sl, r6
 800284a:	f04f 0100 	mov.w	r1, #0
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002856:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800285a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800285e:	4689      	mov	r9, r1
 8002860:	4692      	mov	sl, r2
 8002862:	eb19 0005 	adds.w	r0, r9, r5
 8002866:	eb4a 0106 	adc.w	r1, sl, r6
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	461d      	mov	r5, r3
 8002870:	f04f 0600 	mov.w	r6, #0
 8002874:	196b      	adds	r3, r5, r5
 8002876:	eb46 0406 	adc.w	r4, r6, r6
 800287a:	461a      	mov	r2, r3
 800287c:	4623      	mov	r3, r4
 800287e:	f7fd fcff 	bl	8000280 <__aeabi_uldivmod>
 8002882:	4603      	mov	r3, r0
 8002884:	460c      	mov	r4, r1
 8002886:	461a      	mov	r2, r3
 8002888:	4b6a      	ldr	r3, [pc, #424]	; (8002a34 <UART_SetConfig+0x384>)
 800288a:	fba3 1302 	umull	r1, r3, r3, r2
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	2164      	movs	r1, #100	; 0x64
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	3332      	adds	r3, #50	; 0x32
 800289c:	4a65      	ldr	r2, [pc, #404]	; (8002a34 <UART_SetConfig+0x384>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	f003 0207 	and.w	r2, r3, #7
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4442      	add	r2, r8
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	e26f      	b.n	8002d92 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028b2:	f7ff f8f5 	bl	8001aa0 <HAL_RCC_GetPCLK1Freq>
 80028b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	461d      	mov	r5, r3
 80028bc:	f04f 0600 	mov.w	r6, #0
 80028c0:	46a8      	mov	r8, r5
 80028c2:	46b1      	mov	r9, r6
 80028c4:	eb18 0308 	adds.w	r3, r8, r8
 80028c8:	eb49 0409 	adc.w	r4, r9, r9
 80028cc:	4698      	mov	r8, r3
 80028ce:	46a1      	mov	r9, r4
 80028d0:	eb18 0805 	adds.w	r8, r8, r5
 80028d4:	eb49 0906 	adc.w	r9, r9, r6
 80028d8:	f04f 0100 	mov.w	r1, #0
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80028e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80028e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80028ec:	4688      	mov	r8, r1
 80028ee:	4691      	mov	r9, r2
 80028f0:	eb18 0005 	adds.w	r0, r8, r5
 80028f4:	eb49 0106 	adc.w	r1, r9, r6
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	461d      	mov	r5, r3
 80028fe:	f04f 0600 	mov.w	r6, #0
 8002902:	196b      	adds	r3, r5, r5
 8002904:	eb46 0406 	adc.w	r4, r6, r6
 8002908:	461a      	mov	r2, r3
 800290a:	4623      	mov	r3, r4
 800290c:	f7fd fcb8 	bl	8000280 <__aeabi_uldivmod>
 8002910:	4603      	mov	r3, r0
 8002912:	460c      	mov	r4, r1
 8002914:	461a      	mov	r2, r3
 8002916:	4b47      	ldr	r3, [pc, #284]	; (8002a34 <UART_SetConfig+0x384>)
 8002918:	fba3 2302 	umull	r2, r3, r3, r2
 800291c:	095b      	lsrs	r3, r3, #5
 800291e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	461d      	mov	r5, r3
 8002926:	f04f 0600 	mov.w	r6, #0
 800292a:	46a9      	mov	r9, r5
 800292c:	46b2      	mov	sl, r6
 800292e:	eb19 0309 	adds.w	r3, r9, r9
 8002932:	eb4a 040a 	adc.w	r4, sl, sl
 8002936:	4699      	mov	r9, r3
 8002938:	46a2      	mov	sl, r4
 800293a:	eb19 0905 	adds.w	r9, r9, r5
 800293e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002942:	f04f 0100 	mov.w	r1, #0
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800294e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002952:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002956:	4689      	mov	r9, r1
 8002958:	4692      	mov	sl, r2
 800295a:	eb19 0005 	adds.w	r0, r9, r5
 800295e:	eb4a 0106 	adc.w	r1, sl, r6
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	461d      	mov	r5, r3
 8002968:	f04f 0600 	mov.w	r6, #0
 800296c:	196b      	adds	r3, r5, r5
 800296e:	eb46 0406 	adc.w	r4, r6, r6
 8002972:	461a      	mov	r2, r3
 8002974:	4623      	mov	r3, r4
 8002976:	f7fd fc83 	bl	8000280 <__aeabi_uldivmod>
 800297a:	4603      	mov	r3, r0
 800297c:	460c      	mov	r4, r1
 800297e:	461a      	mov	r2, r3
 8002980:	4b2c      	ldr	r3, [pc, #176]	; (8002a34 <UART_SetConfig+0x384>)
 8002982:	fba3 1302 	umull	r1, r3, r3, r2
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	2164      	movs	r1, #100	; 0x64
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	3332      	adds	r3, #50	; 0x32
 8002994:	4a27      	ldr	r2, [pc, #156]	; (8002a34 <UART_SetConfig+0x384>)
 8002996:	fba2 2303 	umull	r2, r3, r2, r3
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029a2:	4498      	add	r8, r3
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	461d      	mov	r5, r3
 80029a8:	f04f 0600 	mov.w	r6, #0
 80029ac:	46a9      	mov	r9, r5
 80029ae:	46b2      	mov	sl, r6
 80029b0:	eb19 0309 	adds.w	r3, r9, r9
 80029b4:	eb4a 040a 	adc.w	r4, sl, sl
 80029b8:	4699      	mov	r9, r3
 80029ba:	46a2      	mov	sl, r4
 80029bc:	eb19 0905 	adds.w	r9, r9, r5
 80029c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80029c4:	f04f 0100 	mov.w	r1, #0
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029d8:	4689      	mov	r9, r1
 80029da:	4692      	mov	sl, r2
 80029dc:	eb19 0005 	adds.w	r0, r9, r5
 80029e0:	eb4a 0106 	adc.w	r1, sl, r6
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	461d      	mov	r5, r3
 80029ea:	f04f 0600 	mov.w	r6, #0
 80029ee:	196b      	adds	r3, r5, r5
 80029f0:	eb46 0406 	adc.w	r4, r6, r6
 80029f4:	461a      	mov	r2, r3
 80029f6:	4623      	mov	r3, r4
 80029f8:	f7fd fc42 	bl	8000280 <__aeabi_uldivmod>
 80029fc:	4603      	mov	r3, r0
 80029fe:	460c      	mov	r4, r1
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <UART_SetConfig+0x384>)
 8002a04:	fba3 1302 	umull	r1, r3, r3, r2
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	2164      	movs	r1, #100	; 0x64
 8002a0c:	fb01 f303 	mul.w	r3, r1, r3
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	3332      	adds	r3, #50	; 0x32
 8002a16:	4a07      	ldr	r2, [pc, #28]	; (8002a34 <UART_SetConfig+0x384>)
 8002a18:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	f003 0207 	and.w	r2, r3, #7
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4442      	add	r2, r8
 8002a28:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002a2a:	e1b2      	b.n	8002d92 <UART_SetConfig+0x6e2>
 8002a2c:	40011000 	.word	0x40011000
 8002a30:	40011400 	.word	0x40011400
 8002a34:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4ad7      	ldr	r2, [pc, #860]	; (8002d9c <UART_SetConfig+0x6ec>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d005      	beq.n	8002a4e <UART_SetConfig+0x39e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4ad6      	ldr	r2, [pc, #856]	; (8002da0 <UART_SetConfig+0x6f0>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	f040 80d1 	bne.w	8002bf0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a4e:	f7ff f83b 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 8002a52:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	469a      	mov	sl, r3
 8002a58:	f04f 0b00 	mov.w	fp, #0
 8002a5c:	46d0      	mov	r8, sl
 8002a5e:	46d9      	mov	r9, fp
 8002a60:	eb18 0308 	adds.w	r3, r8, r8
 8002a64:	eb49 0409 	adc.w	r4, r9, r9
 8002a68:	4698      	mov	r8, r3
 8002a6a:	46a1      	mov	r9, r4
 8002a6c:	eb18 080a 	adds.w	r8, r8, sl
 8002a70:	eb49 090b 	adc.w	r9, r9, fp
 8002a74:	f04f 0100 	mov.w	r1, #0
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a80:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a84:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a88:	4688      	mov	r8, r1
 8002a8a:	4691      	mov	r9, r2
 8002a8c:	eb1a 0508 	adds.w	r5, sl, r8
 8002a90:	eb4b 0609 	adc.w	r6, fp, r9
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	f04f 0400 	mov.w	r4, #0
 8002aa6:	0094      	lsls	r4, r2, #2
 8002aa8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002aac:	008b      	lsls	r3, r1, #2
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4623      	mov	r3, r4
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	4631      	mov	r1, r6
 8002ab6:	f7fd fbe3 	bl	8000280 <__aeabi_uldivmod>
 8002aba:	4603      	mov	r3, r0
 8002abc:	460c      	mov	r4, r1
 8002abe:	461a      	mov	r2, r3
 8002ac0:	4bb8      	ldr	r3, [pc, #736]	; (8002da4 <UART_SetConfig+0x6f4>)
 8002ac2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	469b      	mov	fp, r3
 8002ad0:	f04f 0c00 	mov.w	ip, #0
 8002ad4:	46d9      	mov	r9, fp
 8002ad6:	46e2      	mov	sl, ip
 8002ad8:	eb19 0309 	adds.w	r3, r9, r9
 8002adc:	eb4a 040a 	adc.w	r4, sl, sl
 8002ae0:	4699      	mov	r9, r3
 8002ae2:	46a2      	mov	sl, r4
 8002ae4:	eb19 090b 	adds.w	r9, r9, fp
 8002ae8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002aec:	f04f 0100 	mov.w	r1, #0
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002af8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002afc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b00:	4689      	mov	r9, r1
 8002b02:	4692      	mov	sl, r2
 8002b04:	eb1b 0509 	adds.w	r5, fp, r9
 8002b08:	eb4c 060a 	adc.w	r6, ip, sl
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	4619      	mov	r1, r3
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	f04f 0400 	mov.w	r4, #0
 8002b1e:	0094      	lsls	r4, r2, #2
 8002b20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b24:	008b      	lsls	r3, r1, #2
 8002b26:	461a      	mov	r2, r3
 8002b28:	4623      	mov	r3, r4
 8002b2a:	4628      	mov	r0, r5
 8002b2c:	4631      	mov	r1, r6
 8002b2e:	f7fd fba7 	bl	8000280 <__aeabi_uldivmod>
 8002b32:	4603      	mov	r3, r0
 8002b34:	460c      	mov	r4, r1
 8002b36:	461a      	mov	r2, r3
 8002b38:	4b9a      	ldr	r3, [pc, #616]	; (8002da4 <UART_SetConfig+0x6f4>)
 8002b3a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	2164      	movs	r1, #100	; 0x64
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	3332      	adds	r3, #50	; 0x32
 8002b4c:	4a95      	ldr	r2, [pc, #596]	; (8002da4 <UART_SetConfig+0x6f4>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b58:	4498      	add	r8, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	469b      	mov	fp, r3
 8002b5e:	f04f 0c00 	mov.w	ip, #0
 8002b62:	46d9      	mov	r9, fp
 8002b64:	46e2      	mov	sl, ip
 8002b66:	eb19 0309 	adds.w	r3, r9, r9
 8002b6a:	eb4a 040a 	adc.w	r4, sl, sl
 8002b6e:	4699      	mov	r9, r3
 8002b70:	46a2      	mov	sl, r4
 8002b72:	eb19 090b 	adds.w	r9, r9, fp
 8002b76:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b7a:	f04f 0100 	mov.w	r1, #0
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b8e:	4689      	mov	r9, r1
 8002b90:	4692      	mov	sl, r2
 8002b92:	eb1b 0509 	adds.w	r5, fp, r9
 8002b96:	eb4c 060a 	adc.w	r6, ip, sl
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	f04f 0400 	mov.w	r4, #0
 8002bac:	0094      	lsls	r4, r2, #2
 8002bae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bb2:	008b      	lsls	r3, r1, #2
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4623      	mov	r3, r4
 8002bb8:	4628      	mov	r0, r5
 8002bba:	4631      	mov	r1, r6
 8002bbc:	f7fd fb60 	bl	8000280 <__aeabi_uldivmod>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	460c      	mov	r4, r1
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b77      	ldr	r3, [pc, #476]	; (8002da4 <UART_SetConfig+0x6f4>)
 8002bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bcc:	095b      	lsrs	r3, r3, #5
 8002bce:	2164      	movs	r1, #100	; 0x64
 8002bd0:	fb01 f303 	mul.w	r3, r1, r3
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	3332      	adds	r3, #50	; 0x32
 8002bda:	4a72      	ldr	r2, [pc, #456]	; (8002da4 <UART_SetConfig+0x6f4>)
 8002bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002be0:	095b      	lsrs	r3, r3, #5
 8002be2:	f003 020f 	and.w	r2, r3, #15
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4442      	add	r2, r8
 8002bec:	609a      	str	r2, [r3, #8]
 8002bee:	e0d0      	b.n	8002d92 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bf0:	f7fe ff56 	bl	8001aa0 <HAL_RCC_GetPCLK1Freq>
 8002bf4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	469a      	mov	sl, r3
 8002bfa:	f04f 0b00 	mov.w	fp, #0
 8002bfe:	46d0      	mov	r8, sl
 8002c00:	46d9      	mov	r9, fp
 8002c02:	eb18 0308 	adds.w	r3, r8, r8
 8002c06:	eb49 0409 	adc.w	r4, r9, r9
 8002c0a:	4698      	mov	r8, r3
 8002c0c:	46a1      	mov	r9, r4
 8002c0e:	eb18 080a 	adds.w	r8, r8, sl
 8002c12:	eb49 090b 	adc.w	r9, r9, fp
 8002c16:	f04f 0100 	mov.w	r1, #0
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c22:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c26:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c2a:	4688      	mov	r8, r1
 8002c2c:	4691      	mov	r9, r2
 8002c2e:	eb1a 0508 	adds.w	r5, sl, r8
 8002c32:	eb4b 0609 	adc.w	r6, fp, r9
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	f04f 0400 	mov.w	r4, #0
 8002c48:	0094      	lsls	r4, r2, #2
 8002c4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c4e:	008b      	lsls	r3, r1, #2
 8002c50:	461a      	mov	r2, r3
 8002c52:	4623      	mov	r3, r4
 8002c54:	4628      	mov	r0, r5
 8002c56:	4631      	mov	r1, r6
 8002c58:	f7fd fb12 	bl	8000280 <__aeabi_uldivmod>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	460c      	mov	r4, r1
 8002c60:	461a      	mov	r2, r3
 8002c62:	4b50      	ldr	r3, [pc, #320]	; (8002da4 <UART_SetConfig+0x6f4>)
 8002c64:	fba3 2302 	umull	r2, r3, r3, r2
 8002c68:	095b      	lsrs	r3, r3, #5
 8002c6a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	469b      	mov	fp, r3
 8002c72:	f04f 0c00 	mov.w	ip, #0
 8002c76:	46d9      	mov	r9, fp
 8002c78:	46e2      	mov	sl, ip
 8002c7a:	eb19 0309 	adds.w	r3, r9, r9
 8002c7e:	eb4a 040a 	adc.w	r4, sl, sl
 8002c82:	4699      	mov	r9, r3
 8002c84:	46a2      	mov	sl, r4
 8002c86:	eb19 090b 	adds.w	r9, r9, fp
 8002c8a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c8e:	f04f 0100 	mov.w	r1, #0
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ca2:	4689      	mov	r9, r1
 8002ca4:	4692      	mov	sl, r2
 8002ca6:	eb1b 0509 	adds.w	r5, fp, r9
 8002caa:	eb4c 060a 	adc.w	r6, ip, sl
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	f04f 0400 	mov.w	r4, #0
 8002cc0:	0094      	lsls	r4, r2, #2
 8002cc2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cc6:	008b      	lsls	r3, r1, #2
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4623      	mov	r3, r4
 8002ccc:	4628      	mov	r0, r5
 8002cce:	4631      	mov	r1, r6
 8002cd0:	f7fd fad6 	bl	8000280 <__aeabi_uldivmod>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	460c      	mov	r4, r1
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b32      	ldr	r3, [pc, #200]	; (8002da4 <UART_SetConfig+0x6f4>)
 8002cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ce0:	095b      	lsrs	r3, r3, #5
 8002ce2:	2164      	movs	r1, #100	; 0x64
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	3332      	adds	r3, #50	; 0x32
 8002cee:	4a2d      	ldr	r2, [pc, #180]	; (8002da4 <UART_SetConfig+0x6f4>)
 8002cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cfa:	4498      	add	r8, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	469b      	mov	fp, r3
 8002d00:	f04f 0c00 	mov.w	ip, #0
 8002d04:	46d9      	mov	r9, fp
 8002d06:	46e2      	mov	sl, ip
 8002d08:	eb19 0309 	adds.w	r3, r9, r9
 8002d0c:	eb4a 040a 	adc.w	r4, sl, sl
 8002d10:	4699      	mov	r9, r3
 8002d12:	46a2      	mov	sl, r4
 8002d14:	eb19 090b 	adds.w	r9, r9, fp
 8002d18:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d1c:	f04f 0100 	mov.w	r1, #0
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d30:	4689      	mov	r9, r1
 8002d32:	4692      	mov	sl, r2
 8002d34:	eb1b 0509 	adds.w	r5, fp, r9
 8002d38:	eb4c 060a 	adc.w	r6, ip, sl
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	4619      	mov	r1, r3
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	f04f 0400 	mov.w	r4, #0
 8002d4e:	0094      	lsls	r4, r2, #2
 8002d50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d54:	008b      	lsls	r3, r1, #2
 8002d56:	461a      	mov	r2, r3
 8002d58:	4623      	mov	r3, r4
 8002d5a:	4628      	mov	r0, r5
 8002d5c:	4631      	mov	r1, r6
 8002d5e:	f7fd fa8f 	bl	8000280 <__aeabi_uldivmod>
 8002d62:	4603      	mov	r3, r0
 8002d64:	460c      	mov	r4, r1
 8002d66:	461a      	mov	r2, r3
 8002d68:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <UART_SetConfig+0x6f4>)
 8002d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	2164      	movs	r1, #100	; 0x64
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	3332      	adds	r3, #50	; 0x32
 8002d7c:	4a09      	ldr	r2, [pc, #36]	; (8002da4 <UART_SetConfig+0x6f4>)
 8002d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	f003 020f 	and.w	r2, r3, #15
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4442      	add	r2, r8
 8002d8e:	609a      	str	r2, [r3, #8]
}
 8002d90:	e7ff      	b.n	8002d92 <UART_SetConfig+0x6e2>
 8002d92:	bf00      	nop
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d9c:	40011000 	.word	0x40011000
 8002da0:	40011400 	.word	0x40011400
 8002da4:	51eb851f 	.word	0x51eb851f

08002da8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dba:	2b84      	cmp	r3, #132	; 0x84
 8002dbc:	d005      	beq.n	8002dca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002dbe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3303      	adds	r3, #3
 8002dc8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002dca:	68fb      	ldr	r3, [r7, #12]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002ddc:	f000 ff6a 	bl	8003cb4 <vTaskStartScheduler>
  
  return osOK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002de6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002de8:	b089      	sub	sp, #36	; 0x24
 8002dea:	af04      	add	r7, sp, #16
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d020      	beq.n	8002e3a <osThreadCreate+0x54>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01c      	beq.n	8002e3a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685c      	ldr	r4, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681d      	ldr	r5, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691e      	ldr	r6, [r3, #16]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff ffc8 	bl	8002da8 <makeFreeRtosPriority>
 8002e18:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e22:	9202      	str	r2, [sp, #8]
 8002e24:	9301      	str	r3, [sp, #4]
 8002e26:	9100      	str	r1, [sp, #0]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	4632      	mov	r2, r6
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	4620      	mov	r0, r4
 8002e30:	f000 fd7c 	bl	800392c <xTaskCreateStatic>
 8002e34:	4603      	mov	r3, r0
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	e01c      	b.n	8002e74 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685c      	ldr	r4, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e46:	b29e      	uxth	r6, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff ffaa 	bl	8002da8 <makeFreeRtosPriority>
 8002e54:	4602      	mov	r2, r0
 8002e56:	f107 030c 	add.w	r3, r7, #12
 8002e5a:	9301      	str	r3, [sp, #4]
 8002e5c:	9200      	str	r2, [sp, #0]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	4632      	mov	r2, r6
 8002e62:	4629      	mov	r1, r5
 8002e64:	4620      	mov	r0, r4
 8002e66:	f000 fdbb 	bl	80039e0 <xTaskCreate>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d001      	beq.n	8002e74 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e000      	b.n	8002e76 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002e74:	68fb      	ldr	r3, [r7, #12]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e7e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d007      	beq.n	8002e9e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4619      	mov	r1, r3
 8002e94:	2001      	movs	r0, #1
 8002e96:	f000 fa2a 	bl	80032ee <xQueueCreateMutexStatic>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	e003      	b.n	8002ea6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	f000 fa0d 	bl	80032be <xQueueCreateMutex>
 8002ea4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f103 0208 	add.w	r2, r3, #8
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f103 0208 	add.w	r2, r3, #8
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f103 0208 	add.w	r2, r3, #8
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	601a      	str	r2, [r3, #0]
}
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f66:	d103      	bne.n	8002f70 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	e00c      	b.n	8002f8a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3308      	adds	r3, #8
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	e002      	b.n	8002f7e <vListInsert+0x2e>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d2f6      	bcs.n	8002f78 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	601a      	str	r2, [r3, #0]
}
 8002fb6:	bf00      	nop
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b085      	sub	sp, #20
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6892      	ldr	r2, [r2, #8]
 8002fd8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6852      	ldr	r2, [r2, #4]
 8002fe2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d103      	bne.n	8002ff6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	1e5a      	subs	r2, r3, #1
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
	...

08003018 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d109      	bne.n	8003040 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800302c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003030:	f383 8811 	msr	BASEPRI, r3
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	e7fe      	b.n	800303e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003040:	f001 fd84 	bl	8004b4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304c:	68f9      	ldr	r1, [r7, #12]
 800304e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	441a      	add	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003070:	3b01      	subs	r3, #1
 8003072:	68f9      	ldr	r1, [r7, #12]
 8003074:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003076:	fb01 f303 	mul.w	r3, r1, r3
 800307a:	441a      	add	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	22ff      	movs	r2, #255	; 0xff
 8003084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	22ff      	movs	r2, #255	; 0xff
 800308c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d114      	bne.n	80030c0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d01a      	beq.n	80030d4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	3310      	adds	r3, #16
 80030a2:	4618      	mov	r0, r3
 80030a4:	f001 f844 	bl	8004130 <xTaskRemoveFromEventList>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d012      	beq.n	80030d4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80030ae:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <xQueueGenericReset+0xcc>)
 80030b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	f3bf 8f6f 	isb	sy
 80030be:	e009      	b.n	80030d4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	3310      	adds	r3, #16
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fef2 	bl	8002eae <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3324      	adds	r3, #36	; 0x24
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff feed 	bl	8002eae <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80030d4:	f001 fd68 	bl	8004ba8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80030d8:	2301      	movs	r3, #1
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	e000ed04 	.word	0xe000ed04

080030e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08e      	sub	sp, #56	; 0x38
 80030ec:	af02      	add	r7, sp, #8
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d109      	bne.n	8003110 <xQueueGenericCreateStatic+0x28>
 80030fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	62bb      	str	r3, [r7, #40]	; 0x28
 800310e:	e7fe      	b.n	800310e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <xQueueGenericCreateStatic+0x42>
 8003116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
 8003128:	e7fe      	b.n	8003128 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <xQueueGenericCreateStatic+0x4e>
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <xQueueGenericCreateStatic+0x52>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <xQueueGenericCreateStatic+0x54>
 800313a:	2300      	movs	r3, #0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d109      	bne.n	8003154 <xQueueGenericCreateStatic+0x6c>
 8003140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	623b      	str	r3, [r7, #32]
 8003152:	e7fe      	b.n	8003152 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d102      	bne.n	8003160 <xQueueGenericCreateStatic+0x78>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <xQueueGenericCreateStatic+0x7c>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <xQueueGenericCreateStatic+0x7e>
 8003164:	2300      	movs	r3, #0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <xQueueGenericCreateStatic+0x96>
 800316a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	61fb      	str	r3, [r7, #28]
 800317c:	e7fe      	b.n	800317c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800317e:	2348      	movs	r3, #72	; 0x48
 8003180:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b48      	cmp	r3, #72	; 0x48
 8003186:	d009      	beq.n	800319c <xQueueGenericCreateStatic+0xb4>
 8003188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	61bb      	str	r3, [r7, #24]
 800319a:	e7fe      	b.n	800319a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800319c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80031a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00d      	beq.n	80031c4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80031a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031b0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80031b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	4613      	mov	r3, r2
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68b9      	ldr	r1, [r7, #8]
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f844 	bl	800324c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80031c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3730      	adds	r7, #48	; 0x30
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b08a      	sub	sp, #40	; 0x28
 80031d2:	af02      	add	r7, sp, #8
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	4613      	mov	r3, r2
 80031da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <xQueueGenericCreate+0x28>
 80031e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e6:	f383 8811 	msr	BASEPRI, r3
 80031ea:	f3bf 8f6f 	isb	sy
 80031ee:	f3bf 8f4f 	dsb	sy
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	e7fe      	b.n	80031f4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d102      	bne.n	8003202 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61fb      	str	r3, [r7, #28]
 8003200:	e004      	b.n	800320c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	3348      	adds	r3, #72	; 0x48
 8003210:	4618      	mov	r0, r3
 8003212:	f001 fd77 	bl	8004d04 <pvPortMalloc>
 8003216:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d011      	beq.n	8003242 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	3348      	adds	r3, #72	; 0x48
 8003226:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003230:	79fa      	ldrb	r2, [r7, #7]
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	4613      	mov	r3, r2
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	68b9      	ldr	r1, [r7, #8]
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f805 	bl	800324c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003242:	69bb      	ldr	r3, [r7, #24]
	}
 8003244:	4618      	mov	r0, r3
 8003246:	3720      	adds	r7, #32
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d103      	bne.n	8003268 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	e002      	b.n	800326e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800327a:	2101      	movs	r1, #1
 800327c:	69b8      	ldr	r0, [r7, #24]
 800327e:	f7ff fecb 	bl	8003018 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003282:	bf00      	nop
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800328a:	b580      	push	{r7, lr}
 800328c:	b082      	sub	sp, #8
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00e      	beq.n	80032b6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80032aa:	2300      	movs	r3, #0
 80032ac:	2200      	movs	r2, #0
 80032ae:	2100      	movs	r1, #0
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f837 	bl	8003324 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	4603      	mov	r3, r0
 80032c6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80032c8:	2301      	movs	r3, #1
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	2300      	movs	r3, #0
 80032ce:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	461a      	mov	r2, r3
 80032d4:	6939      	ldr	r1, [r7, #16]
 80032d6:	6978      	ldr	r0, [r7, #20]
 80032d8:	f7ff ff79 	bl	80031ce <xQueueGenericCreate>
 80032dc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f7ff ffd3 	bl	800328a <prvInitialiseMutex>

		return xNewQueue;
 80032e4:	68fb      	ldr	r3, [r7, #12]
	}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b088      	sub	sp, #32
 80032f2:	af02      	add	r7, sp, #8
 80032f4:	4603      	mov	r3, r0
 80032f6:	6039      	str	r1, [r7, #0]
 80032f8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80032fa:	2301      	movs	r3, #1
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	2300      	movs	r3, #0
 8003300:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003302:	79fb      	ldrb	r3, [r7, #7]
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2200      	movs	r2, #0
 800330a:	6939      	ldr	r1, [r7, #16]
 800330c:	6978      	ldr	r0, [r7, #20]
 800330e:	f7ff feeb 	bl	80030e8 <xQueueGenericCreateStatic>
 8003312:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f7ff ffb8 	bl	800328a <prvInitialiseMutex>

		return xNewQueue;
 800331a:	68fb      	ldr	r3, [r7, #12]
	}
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08e      	sub	sp, #56	; 0x38
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
 8003330:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003332:	2300      	movs	r3, #0
 8003334:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800333a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333c:	2b00      	cmp	r3, #0
 800333e:	d109      	bne.n	8003354 <xQueueGenericSend+0x30>
 8003340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003344:	f383 8811 	msr	BASEPRI, r3
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
 8003352:	e7fe      	b.n	8003352 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <xQueueGenericSend+0x3e>
 800335a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <xQueueGenericSend+0x42>
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <xQueueGenericSend+0x44>
 8003366:	2300      	movs	r3, #0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d109      	bne.n	8003380 <xQueueGenericSend+0x5c>
 800336c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
 800337e:	e7fe      	b.n	800337e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d103      	bne.n	800338e <xQueueGenericSend+0x6a>
 8003386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <xQueueGenericSend+0x6e>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <xQueueGenericSend+0x70>
 8003392:	2300      	movs	r3, #0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d109      	bne.n	80033ac <xQueueGenericSend+0x88>
 8003398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339c:	f383 8811 	msr	BASEPRI, r3
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	623b      	str	r3, [r7, #32]
 80033aa:	e7fe      	b.n	80033aa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033ac:	f001 f876 	bl	800449c <xTaskGetSchedulerState>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d102      	bne.n	80033bc <xQueueGenericSend+0x98>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <xQueueGenericSend+0x9c>
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <xQueueGenericSend+0x9e>
 80033c0:	2300      	movs	r3, #0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d109      	bne.n	80033da <xQueueGenericSend+0xb6>
 80033c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ca:	f383 8811 	msr	BASEPRI, r3
 80033ce:	f3bf 8f6f 	isb	sy
 80033d2:	f3bf 8f4f 	dsb	sy
 80033d6:	61fb      	str	r3, [r7, #28]
 80033d8:	e7fe      	b.n	80033d8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033da:	f001 fbb7 	bl	8004b4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d302      	bcc.n	80033f0 <xQueueGenericSend+0xcc>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d129      	bne.n	8003444 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033f6:	f000 f9af 	bl	8003758 <prvCopyDataToQueue>
 80033fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	2b00      	cmp	r3, #0
 8003402:	d010      	beq.n	8003426 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003406:	3324      	adds	r3, #36	; 0x24
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fe91 	bl	8004130 <xTaskRemoveFromEventList>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d013      	beq.n	800343c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003414:	4b3f      	ldr	r3, [pc, #252]	; (8003514 <xQueueGenericSend+0x1f0>)
 8003416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	e00a      	b.n	800343c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003428:	2b00      	cmp	r3, #0
 800342a:	d007      	beq.n	800343c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800342c:	4b39      	ldr	r3, [pc, #228]	; (8003514 <xQueueGenericSend+0x1f0>)
 800342e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800343c:	f001 fbb4 	bl	8004ba8 <vPortExitCritical>
				return pdPASS;
 8003440:	2301      	movs	r3, #1
 8003442:	e063      	b.n	800350c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d103      	bne.n	8003452 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800344a:	f001 fbad 	bl	8004ba8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800344e:	2300      	movs	r3, #0
 8003450:	e05c      	b.n	800350c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003454:	2b00      	cmp	r3, #0
 8003456:	d106      	bne.n	8003466 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003458:	f107 0314 	add.w	r3, r7, #20
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fec9 	bl	80041f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003462:	2301      	movs	r3, #1
 8003464:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003466:	f001 fb9f 	bl	8004ba8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800346a:	f000 fc81 	bl	8003d70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800346e:	f001 fb6d 	bl	8004b4c <vPortEnterCritical>
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003474:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003478:	b25b      	sxtb	r3, r3
 800347a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347e:	d103      	bne.n	8003488 <xQueueGenericSend+0x164>
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800348e:	b25b      	sxtb	r3, r3
 8003490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003494:	d103      	bne.n	800349e <xQueueGenericSend+0x17a>
 8003496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800349e:	f001 fb83 	bl	8004ba8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034a2:	1d3a      	adds	r2, r7, #4
 80034a4:	f107 0314 	add.w	r3, r7, #20
 80034a8:	4611      	mov	r1, r2
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 feb8 	bl	8004220 <xTaskCheckForTimeOut>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d124      	bne.n	8003500 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034b8:	f000 fa20 	bl	80038fc <prvIsQueueFull>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d018      	beq.n	80034f4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c4:	3310      	adds	r3, #16
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	4611      	mov	r1, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fe0c 	bl	80040e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80034d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034d2:	f000 f9ab 	bl	800382c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80034d6:	f000 fc59 	bl	8003d8c <xTaskResumeAll>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f47f af7c 	bne.w	80033da <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80034e2:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <xQueueGenericSend+0x1f0>)
 80034e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	e772      	b.n	80033da <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80034f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034f6:	f000 f999 	bl	800382c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034fa:	f000 fc47 	bl	8003d8c <xTaskResumeAll>
 80034fe:	e76c      	b.n	80033da <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003502:	f000 f993 	bl	800382c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003506:	f000 fc41 	bl	8003d8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800350a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800350c:	4618      	mov	r0, r3
 800350e:	3738      	adds	r7, #56	; 0x38
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	e000ed04 	.word	0xe000ed04

08003518 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08e      	sub	sp, #56	; 0x38
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003522:	2300      	movs	r3, #0
 8003524:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800352a:	2300      	movs	r3, #0
 800352c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800352e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003530:	2b00      	cmp	r3, #0
 8003532:	d109      	bne.n	8003548 <xQueueSemaphoreTake+0x30>
 8003534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	623b      	str	r3, [r7, #32]
 8003546:	e7fe      	b.n	8003546 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	2b00      	cmp	r3, #0
 800354e:	d009      	beq.n	8003564 <xQueueSemaphoreTake+0x4c>
 8003550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	61fb      	str	r3, [r7, #28]
 8003562:	e7fe      	b.n	8003562 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003564:	f000 ff9a 	bl	800449c <xTaskGetSchedulerState>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d102      	bne.n	8003574 <xQueueSemaphoreTake+0x5c>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <xQueueSemaphoreTake+0x60>
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <xQueueSemaphoreTake+0x62>
 8003578:	2300      	movs	r3, #0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d109      	bne.n	8003592 <xQueueSemaphoreTake+0x7a>
 800357e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	61bb      	str	r3, [r7, #24]
 8003590:	e7fe      	b.n	8003590 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003592:	f001 fadb 	bl	8004b4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d024      	beq.n	80035ec <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80035a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a4:	1e5a      	subs	r2, r3, #1
 80035a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d104      	bne.n	80035bc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80035b2:	f001 f92d 	bl	8004810 <pvTaskIncrementMutexHeldCount>
 80035b6:	4602      	mov	r2, r0
 80035b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00f      	beq.n	80035e4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c6:	3310      	adds	r3, #16
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fdb1 	bl	8004130 <xTaskRemoveFromEventList>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d007      	beq.n	80035e4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80035d4:	4b53      	ldr	r3, [pc, #332]	; (8003724 <xQueueSemaphoreTake+0x20c>)
 80035d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80035e4:	f001 fae0 	bl	8004ba8 <vPortExitCritical>
				return pdPASS;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e096      	b.n	800371a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d110      	bne.n	8003614 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80035f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d009      	beq.n	800360c <xQueueSemaphoreTake+0xf4>
 80035f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	e7fe      	b.n	800360a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800360c:	f001 facc 	bl	8004ba8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003610:	2300      	movs	r3, #0
 8003612:	e082      	b.n	800371a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800361a:	f107 030c 	add.w	r3, r7, #12
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fde8 	bl	80041f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003624:	2301      	movs	r3, #1
 8003626:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003628:	f001 fabe 	bl	8004ba8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800362c:	f000 fba0 	bl	8003d70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003630:	f001 fa8c 	bl	8004b4c <vPortEnterCritical>
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003636:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800363a:	b25b      	sxtb	r3, r3
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003640:	d103      	bne.n	800364a <xQueueSemaphoreTake+0x132>
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800364a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003650:	b25b      	sxtb	r3, r3
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003656:	d103      	bne.n	8003660 <xQueueSemaphoreTake+0x148>
 8003658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003660:	f001 faa2 	bl	8004ba8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003664:	463a      	mov	r2, r7
 8003666:	f107 030c 	add.w	r3, r7, #12
 800366a:	4611      	mov	r1, r2
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fdd7 	bl	8004220 <xTaskCheckForTimeOut>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d132      	bne.n	80036de <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003678:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800367a:	f000 f929 	bl	80038d0 <prvIsQueueEmpty>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d026      	beq.n	80036d2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d109      	bne.n	80036a0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800368c:	f001 fa5e 	bl	8004b4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	4618      	mov	r0, r3
 8003696:	f000 ff1f 	bl	80044d8 <xTaskPriorityInherit>
 800369a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800369c:	f001 fa84 	bl	8004ba8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a2:	3324      	adds	r3, #36	; 0x24
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	4611      	mov	r1, r2
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fd1d 	bl	80040e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80036ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036b0:	f000 f8bc 	bl	800382c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80036b4:	f000 fb6a 	bl	8003d8c <xTaskResumeAll>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f47f af69 	bne.w	8003592 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80036c0:	4b18      	ldr	r3, [pc, #96]	; (8003724 <xQueueSemaphoreTake+0x20c>)
 80036c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	e75f      	b.n	8003592 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80036d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036d4:	f000 f8aa 	bl	800382c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036d8:	f000 fb58 	bl	8003d8c <xTaskResumeAll>
 80036dc:	e759      	b.n	8003592 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80036de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036e0:	f000 f8a4 	bl	800382c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036e4:	f000 fb52 	bl	8003d8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036ea:	f000 f8f1 	bl	80038d0 <prvIsQueueEmpty>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f43f af4e 	beq.w	8003592 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80036f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00d      	beq.n	8003718 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80036fc:	f001 fa26 	bl	8004b4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003700:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003702:	f000 f811 	bl	8003728 <prvGetDisinheritPriorityAfterTimeout>
 8003706:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800370e:	4618      	mov	r0, r3
 8003710:	f000 ffe6 	bl	80046e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003714:	f001 fa48 	bl	8004ba8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003718:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800371a:	4618      	mov	r0, r3
 800371c:	3738      	adds	r7, #56	; 0x38
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	e000ed04 	.word	0xe000ed04

08003728 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	2b00      	cmp	r3, #0
 8003736:	d006      	beq.n	8003746 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f1c3 0307 	rsb	r3, r3, #7
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	e001      	b.n	800374a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800374a:	68fb      	ldr	r3, [r7, #12]
	}
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10d      	bne.n	8003792 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d14d      	bne.n	800381a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	4618      	mov	r0, r3
 8003784:	f000 ff28 	bl	80045d8 <xTaskPriorityDisinherit>
 8003788:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	e043      	b.n	800381a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d119      	bne.n	80037cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6858      	ldr	r0, [r3, #4]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	461a      	mov	r2, r3
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	f001 fcae 	bl	8005104 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	441a      	add	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d32b      	bcc.n	800381a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	e026      	b.n	800381a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	68d8      	ldr	r0, [r3, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	461a      	mov	r2, r3
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	f001 fc94 	bl	8005104 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	425b      	negs	r3, r3
 80037e6:	441a      	add	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d207      	bcs.n	8003808 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	425b      	negs	r3, r3
 8003802:	441a      	add	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d105      	bne.n	800381a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	3b01      	subs	r3, #1
 8003818:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003822:	697b      	ldr	r3, [r7, #20]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003834:	f001 f98a 	bl	8004b4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800383e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003840:	e011      	b.n	8003866 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	2b00      	cmp	r3, #0
 8003848:	d012      	beq.n	8003870 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3324      	adds	r3, #36	; 0x24
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fc6e 	bl	8004130 <xTaskRemoveFromEventList>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800385a:	f000 fd41 	bl	80042e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	3b01      	subs	r3, #1
 8003862:	b2db      	uxtb	r3, r3
 8003864:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386a:	2b00      	cmp	r3, #0
 800386c:	dce9      	bgt.n	8003842 <prvUnlockQueue+0x16>
 800386e:	e000      	b.n	8003872 <prvUnlockQueue+0x46>
					break;
 8003870:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	22ff      	movs	r2, #255	; 0xff
 8003876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800387a:	f001 f995 	bl	8004ba8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800387e:	f001 f965 	bl	8004b4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003888:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800388a:	e011      	b.n	80038b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d012      	beq.n	80038ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3310      	adds	r3, #16
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fc49 	bl	8004130 <xTaskRemoveFromEventList>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80038a4:	f000 fd1c 	bl	80042e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80038a8:	7bbb      	ldrb	r3, [r7, #14]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	dce9      	bgt.n	800388c <prvUnlockQueue+0x60>
 80038b8:	e000      	b.n	80038bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80038ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	22ff      	movs	r2, #255	; 0xff
 80038c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80038c4:	f001 f970 	bl	8004ba8 <vPortExitCritical>
}
 80038c8:	bf00      	nop
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038d8:	f001 f938 	bl	8004b4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d102      	bne.n	80038ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038e4:	2301      	movs	r3, #1
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	e001      	b.n	80038ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038ee:	f001 f95b 	bl	8004ba8 <vPortExitCritical>

	return xReturn;
 80038f2:	68fb      	ldr	r3, [r7, #12]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003904:	f001 f922 	bl	8004b4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003910:	429a      	cmp	r2, r3
 8003912:	d102      	bne.n	800391a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003914:	2301      	movs	r3, #1
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	e001      	b.n	800391e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800391e:	f001 f943 	bl	8004ba8 <vPortExitCritical>

	return xReturn;
 8003922:	68fb      	ldr	r3, [r7, #12]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08e      	sub	sp, #56	; 0x38
 8003930:	af04      	add	r7, sp, #16
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800393a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393c:	2b00      	cmp	r3, #0
 800393e:	d109      	bne.n	8003954 <xTaskCreateStatic+0x28>
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	623b      	str	r3, [r7, #32]
 8003952:	e7fe      	b.n	8003952 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <xTaskCreateStatic+0x42>
 800395a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	61fb      	str	r3, [r7, #28]
 800396c:	e7fe      	b.n	800396c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800396e:	2354      	movs	r3, #84	; 0x54
 8003970:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	2b54      	cmp	r3, #84	; 0x54
 8003976:	d009      	beq.n	800398c <xTaskCreateStatic+0x60>
 8003978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	e7fe      	b.n	800398a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800398c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800398e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003990:	2b00      	cmp	r3, #0
 8003992:	d01e      	beq.n	80039d2 <xTaskCreateStatic+0xa6>
 8003994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003996:	2b00      	cmp	r3, #0
 8003998:	d01b      	beq.n	80039d2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039ac:	2300      	movs	r3, #0
 80039ae:	9303      	str	r3, [sp, #12]
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	9302      	str	r3, [sp, #8]
 80039b4:	f107 0314 	add.w	r3, r7, #20
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f850 	bl	8003a6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039cc:	f000 f8d4 	bl	8003b78 <prvAddNewTaskToReadyList>
 80039d0:	e001      	b.n	80039d6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039d6:	697b      	ldr	r3, [r7, #20]
	}
 80039d8:	4618      	mov	r0, r3
 80039da:	3728      	adds	r7, #40	; 0x28
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08c      	sub	sp, #48	; 0x30
 80039e4:	af04      	add	r7, sp, #16
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039f0:	88fb      	ldrh	r3, [r7, #6]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4618      	mov	r0, r3
 80039f6:	f001 f985 	bl	8004d04 <pvPortMalloc>
 80039fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00e      	beq.n	8003a20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a02:	2054      	movs	r0, #84	; 0x54
 8003a04:	f001 f97e 	bl	8004d04 <pvPortMalloc>
 8003a08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	631a      	str	r2, [r3, #48]	; 0x30
 8003a16:	e005      	b.n	8003a24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a18:	6978      	ldr	r0, [r7, #20]
 8003a1a:	f001 fa35 	bl	8004e88 <vPortFree>
 8003a1e:	e001      	b.n	8003a24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d017      	beq.n	8003a5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a32:	88fa      	ldrh	r2, [r7, #6]
 8003a34:	2300      	movs	r3, #0
 8003a36:	9303      	str	r3, [sp, #12]
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	9302      	str	r3, [sp, #8]
 8003a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3e:	9301      	str	r3, [sp, #4]
 8003a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	68b9      	ldr	r1, [r7, #8]
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f80e 	bl	8003a6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a4e:	69f8      	ldr	r0, [r7, #28]
 8003a50:	f000 f892 	bl	8003b78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a54:	2301      	movs	r3, #1
 8003a56:	61bb      	str	r3, [r7, #24]
 8003a58:	e002      	b.n	8003a60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a60:	69bb      	ldr	r3, [r7, #24]
	}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b088      	sub	sp, #32
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	607a      	str	r2, [r7, #4]
 8003a76:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a82:	3b01      	subs	r3, #1
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	f023 0307 	bic.w	r3, r3, #7
 8003a90:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d009      	beq.n	8003ab0 <prvInitialiseNewTask+0x46>
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	e7fe      	b.n	8003aae <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d01f      	beq.n	8003af6 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61fb      	str	r3, [r7, #28]
 8003aba:	e012      	b.n	8003ae2 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	7819      	ldrb	r1, [r3, #0]
 8003ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	4413      	add	r3, r2
 8003aca:	3334      	adds	r3, #52	; 0x34
 8003acc:	460a      	mov	r2, r1
 8003ace:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d006      	beq.n	8003aea <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	61fb      	str	r3, [r7, #28]
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	2b0f      	cmp	r3, #15
 8003ae6:	d9e9      	bls.n	8003abc <prvInitialiseNewTask+0x52>
 8003ae8:	e000      	b.n	8003aec <prvInitialiseNewTask+0x82>
			{
				break;
 8003aea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003af4:	e003      	b.n	8003afe <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b00:	2b06      	cmp	r3, #6
 8003b02:	d901      	bls.n	8003b08 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b04:	2306      	movs	r3, #6
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b12:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b16:	2200      	movs	r2, #0
 8003b18:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff f9e5 	bl	8002eee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	3318      	adds	r3, #24
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff f9e0 	bl	8002eee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	f1c3 0207 	rsb	r2, r3, #7
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b46:	2200      	movs	r2, #0
 8003b48:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	68f9      	ldr	r1, [r7, #12]
 8003b56:	69b8      	ldr	r0, [r7, #24]
 8003b58:	f000 fed4 	bl	8004904 <pxPortInitialiseStack>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b6e:	bf00      	nop
 8003b70:	3720      	adds	r7, #32
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b80:	f000 ffe4 	bl	8004b4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b84:	4b2a      	ldr	r3, [pc, #168]	; (8003c30 <prvAddNewTaskToReadyList+0xb8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	4a29      	ldr	r2, [pc, #164]	; (8003c30 <prvAddNewTaskToReadyList+0xb8>)
 8003b8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b8e:	4b29      	ldr	r3, [pc, #164]	; (8003c34 <prvAddNewTaskToReadyList+0xbc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d109      	bne.n	8003baa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b96:	4a27      	ldr	r2, [pc, #156]	; (8003c34 <prvAddNewTaskToReadyList+0xbc>)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b9c:	4b24      	ldr	r3, [pc, #144]	; (8003c30 <prvAddNewTaskToReadyList+0xb8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d110      	bne.n	8003bc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ba4:	f000 fbc0 	bl	8004328 <prvInitialiseTaskLists>
 8003ba8:	e00d      	b.n	8003bc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003baa:	4b23      	ldr	r3, [pc, #140]	; (8003c38 <prvAddNewTaskToReadyList+0xc0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d109      	bne.n	8003bc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bb2:	4b20      	ldr	r3, [pc, #128]	; (8003c34 <prvAddNewTaskToReadyList+0xbc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d802      	bhi.n	8003bc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bc0:	4a1c      	ldr	r2, [pc, #112]	; (8003c34 <prvAddNewTaskToReadyList+0xbc>)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bc6:	4b1d      	ldr	r3, [pc, #116]	; (8003c3c <prvAddNewTaskToReadyList+0xc4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	4a1b      	ldr	r2, [pc, #108]	; (8003c3c <prvAddNewTaskToReadyList+0xc4>)
 8003bce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	409a      	lsls	r2, r3
 8003bd8:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <prvAddNewTaskToReadyList+0xc8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	4a18      	ldr	r2, [pc, #96]	; (8003c40 <prvAddNewTaskToReadyList+0xc8>)
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4a15      	ldr	r2, [pc, #84]	; (8003c44 <prvAddNewTaskToReadyList+0xcc>)
 8003bf0:	441a      	add	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	f7ff f985 	bl	8002f08 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003bfe:	f000 ffd3 	bl	8004ba8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c02:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <prvAddNewTaskToReadyList+0xc0>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00e      	beq.n	8003c28 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c0a:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <prvAddNewTaskToReadyList+0xbc>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d207      	bcs.n	8003c28 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c18:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <prvAddNewTaskToReadyList+0xd0>)
 8003c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c28:	bf00      	nop
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	200003e8 	.word	0x200003e8
 8003c34:	200002e8 	.word	0x200002e8
 8003c38:	200003f4 	.word	0x200003f4
 8003c3c:	20000404 	.word	0x20000404
 8003c40:	200003f0 	.word	0x200003f0
 8003c44:	200002ec 	.word	0x200002ec
 8003c48:	e000ed04 	.word	0xe000ed04

08003c4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c54:	2300      	movs	r3, #0
 8003c56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d016      	beq.n	8003c8c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c5e:	4b13      	ldr	r3, [pc, #76]	; (8003cac <vTaskDelay+0x60>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <vTaskDelay+0x2e>
 8003c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6a:	f383 8811 	msr	BASEPRI, r3
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	60bb      	str	r3, [r7, #8]
 8003c78:	e7fe      	b.n	8003c78 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003c7a:	f000 f879 	bl	8003d70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c7e:	2100      	movs	r1, #0
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 fdd9 	bl	8004838 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c86:	f000 f881 	bl	8003d8c <xTaskResumeAll>
 8003c8a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d107      	bne.n	8003ca2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003c92:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <vTaskDelay+0x64>)
 8003c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ca2:	bf00      	nop
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000410 	.word	0x20000410
 8003cb0:	e000ed04 	.word	0xe000ed04

08003cb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08a      	sub	sp, #40	; 0x28
 8003cb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cc2:	463a      	mov	r2, r7
 8003cc4:	1d39      	adds	r1, r7, #4
 8003cc6:	f107 0308 	add.w	r3, r7, #8
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fc fc58 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cd0:	6839      	ldr	r1, [r7, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	9202      	str	r2, [sp, #8]
 8003cd8:	9301      	str	r3, [sp, #4]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	460a      	mov	r2, r1
 8003ce2:	491d      	ldr	r1, [pc, #116]	; (8003d58 <vTaskStartScheduler+0xa4>)
 8003ce4:	481d      	ldr	r0, [pc, #116]	; (8003d5c <vTaskStartScheduler+0xa8>)
 8003ce6:	f7ff fe21 	bl	800392c <xTaskCreateStatic>
 8003cea:	4602      	mov	r2, r0
 8003cec:	4b1c      	ldr	r3, [pc, #112]	; (8003d60 <vTaskStartScheduler+0xac>)
 8003cee:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003cf0:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <vTaskStartScheduler+0xac>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	e001      	b.n	8003d02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d115      	bne.n	8003d34 <vTaskStartScheduler+0x80>
 8003d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0c:	f383 8811 	msr	BASEPRI, r3
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d1a:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <vTaskStartScheduler+0xb0>)
 8003d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d22:	4b11      	ldr	r3, [pc, #68]	; (8003d68 <vTaskStartScheduler+0xb4>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d28:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <vTaskStartScheduler+0xb8>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d2e:	f000 fe6f 	bl	8004a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d32:	e00d      	b.n	8003d50 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3a:	d109      	bne.n	8003d50 <vTaskStartScheduler+0x9c>
 8003d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	e7fe      	b.n	8003d4e <vTaskStartScheduler+0x9a>
}
 8003d50:	bf00      	nop
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	080059d0 	.word	0x080059d0
 8003d5c:	080042f9 	.word	0x080042f9
 8003d60:	2000040c 	.word	0x2000040c
 8003d64:	20000408 	.word	0x20000408
 8003d68:	200003f4 	.word	0x200003f4
 8003d6c:	200003ec 	.word	0x200003ec

08003d70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d74:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <vTaskSuspendAll+0x18>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	4a03      	ldr	r2, [pc, #12]	; (8003d88 <vTaskSuspendAll+0x18>)
 8003d7c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003d7e:	bf00      	nop
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	20000410 	.word	0x20000410

08003d8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d9a:	4b41      	ldr	r3, [pc, #260]	; (8003ea0 <xTaskResumeAll+0x114>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <xTaskResumeAll+0x2a>
 8003da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	e7fe      	b.n	8003db4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003db6:	f000 fec9 	bl	8004b4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003dba:	4b39      	ldr	r3, [pc, #228]	; (8003ea0 <xTaskResumeAll+0x114>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	4a37      	ldr	r2, [pc, #220]	; (8003ea0 <xTaskResumeAll+0x114>)
 8003dc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dc4:	4b36      	ldr	r3, [pc, #216]	; (8003ea0 <xTaskResumeAll+0x114>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d161      	bne.n	8003e90 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003dcc:	4b35      	ldr	r3, [pc, #212]	; (8003ea4 <xTaskResumeAll+0x118>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d05d      	beq.n	8003e90 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dd4:	e02e      	b.n	8003e34 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dd6:	4b34      	ldr	r3, [pc, #208]	; (8003ea8 <xTaskResumeAll+0x11c>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	3318      	adds	r3, #24
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff f8ed 	bl	8002fc2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	3304      	adds	r3, #4
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff f8e8 	bl	8002fc2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	2201      	movs	r2, #1
 8003df8:	409a      	lsls	r2, r3
 8003dfa:	4b2c      	ldr	r3, [pc, #176]	; (8003eac <xTaskResumeAll+0x120>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	4a2a      	ldr	r2, [pc, #168]	; (8003eac <xTaskResumeAll+0x120>)
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e08:	4613      	mov	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4a27      	ldr	r2, [pc, #156]	; (8003eb0 <xTaskResumeAll+0x124>)
 8003e12:	441a      	add	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3304      	adds	r3, #4
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	f7ff f874 	bl	8002f08 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e24:	4b23      	ldr	r3, [pc, #140]	; (8003eb4 <xTaskResumeAll+0x128>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d302      	bcc.n	8003e34 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003e2e:	4b22      	ldr	r3, [pc, #136]	; (8003eb8 <xTaskResumeAll+0x12c>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e34:	4b1c      	ldr	r3, [pc, #112]	; (8003ea8 <xTaskResumeAll+0x11c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1cc      	bne.n	8003dd6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e42:	f000 fb0b 	bl	800445c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e46:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <xTaskResumeAll+0x130>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d010      	beq.n	8003e74 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e52:	f000 f837 	bl	8003ec4 <xTaskIncrementTick>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003e5c:	4b16      	ldr	r3, [pc, #88]	; (8003eb8 <xTaskResumeAll+0x12c>)
 8003e5e:	2201      	movs	r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3b01      	subs	r3, #1
 8003e66:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f1      	bne.n	8003e52 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003e6e:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <xTaskResumeAll+0x130>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e74:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <xTaskResumeAll+0x12c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d009      	beq.n	8003e90 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e80:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <xTaskResumeAll+0x134>)
 8003e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e90:	f000 fe8a 	bl	8004ba8 <vPortExitCritical>

	return xAlreadyYielded;
 8003e94:	68bb      	ldr	r3, [r7, #8]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000410 	.word	0x20000410
 8003ea4:	200003e8 	.word	0x200003e8
 8003ea8:	200003a8 	.word	0x200003a8
 8003eac:	200003f0 	.word	0x200003f0
 8003eb0:	200002ec 	.word	0x200002ec
 8003eb4:	200002e8 	.word	0x200002e8
 8003eb8:	200003fc 	.word	0x200003fc
 8003ebc:	200003f8 	.word	0x200003f8
 8003ec0:	e000ed04 	.word	0xe000ed04

08003ec4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ece:	4b4e      	ldr	r3, [pc, #312]	; (8004008 <xTaskIncrementTick+0x144>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f040 8087 	bne.w	8003fe6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ed8:	4b4c      	ldr	r3, [pc, #304]	; (800400c <xTaskIncrementTick+0x148>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3301      	adds	r3, #1
 8003ede:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ee0:	4a4a      	ldr	r2, [pc, #296]	; (800400c <xTaskIncrementTick+0x148>)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d11f      	bne.n	8003f2c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003eec:	4b48      	ldr	r3, [pc, #288]	; (8004010 <xTaskIncrementTick+0x14c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <xTaskIncrementTick+0x46>
 8003ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efa:	f383 8811 	msr	BASEPRI, r3
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	e7fe      	b.n	8003f08 <xTaskIncrementTick+0x44>
 8003f0a:	4b41      	ldr	r3, [pc, #260]	; (8004010 <xTaskIncrementTick+0x14c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	4b40      	ldr	r3, [pc, #256]	; (8004014 <xTaskIncrementTick+0x150>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a3e      	ldr	r2, [pc, #248]	; (8004010 <xTaskIncrementTick+0x14c>)
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	4a3e      	ldr	r2, [pc, #248]	; (8004014 <xTaskIncrementTick+0x150>)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	4b3e      	ldr	r3, [pc, #248]	; (8004018 <xTaskIncrementTick+0x154>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3301      	adds	r3, #1
 8003f24:	4a3c      	ldr	r2, [pc, #240]	; (8004018 <xTaskIncrementTick+0x154>)
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	f000 fa98 	bl	800445c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f2c:	4b3b      	ldr	r3, [pc, #236]	; (800401c <xTaskIncrementTick+0x158>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d348      	bcc.n	8003fc8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f36:	4b36      	ldr	r3, [pc, #216]	; (8004010 <xTaskIncrementTick+0x14c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d104      	bne.n	8003f4a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f40:	4b36      	ldr	r3, [pc, #216]	; (800401c <xTaskIncrementTick+0x158>)
 8003f42:	f04f 32ff 	mov.w	r2, #4294967295
 8003f46:	601a      	str	r2, [r3, #0]
					break;
 8003f48:	e03e      	b.n	8003fc8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f4a:	4b31      	ldr	r3, [pc, #196]	; (8004010 <xTaskIncrementTick+0x14c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d203      	bcs.n	8003f6a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f62:	4a2e      	ldr	r2, [pc, #184]	; (800401c <xTaskIncrementTick+0x158>)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f68:	e02e      	b.n	8003fc8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff f827 	bl	8002fc2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d004      	beq.n	8003f86 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	3318      	adds	r3, #24
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff f81e 	bl	8002fc2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	4b24      	ldr	r3, [pc, #144]	; (8004020 <xTaskIncrementTick+0x15c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	4a22      	ldr	r2, [pc, #136]	; (8004020 <xTaskIncrementTick+0x15c>)
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4a1f      	ldr	r2, [pc, #124]	; (8004024 <xTaskIncrementTick+0x160>)
 8003fa6:	441a      	add	r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	3304      	adds	r3, #4
 8003fac:	4619      	mov	r1, r3
 8003fae:	4610      	mov	r0, r2
 8003fb0:	f7fe ffaa 	bl	8002f08 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb8:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <xTaskIncrementTick+0x164>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d3b9      	bcc.n	8003f36 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fc6:	e7b6      	b.n	8003f36 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fc8:	4b17      	ldr	r3, [pc, #92]	; (8004028 <xTaskIncrementTick+0x164>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fce:	4915      	ldr	r1, [pc, #84]	; (8004024 <xTaskIncrementTick+0x160>)
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d907      	bls.n	8003ff0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	e004      	b.n	8003ff0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003fe6:	4b11      	ldr	r3, [pc, #68]	; (800402c <xTaskIncrementTick+0x168>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3301      	adds	r3, #1
 8003fec:	4a0f      	ldr	r2, [pc, #60]	; (800402c <xTaskIncrementTick+0x168>)
 8003fee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003ff0:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <xTaskIncrementTick+0x16c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003ffc:	697b      	ldr	r3, [r7, #20]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20000410 	.word	0x20000410
 800400c:	200003ec 	.word	0x200003ec
 8004010:	200003a0 	.word	0x200003a0
 8004014:	200003a4 	.word	0x200003a4
 8004018:	20000400 	.word	0x20000400
 800401c:	20000408 	.word	0x20000408
 8004020:	200003f0 	.word	0x200003f0
 8004024:	200002ec 	.word	0x200002ec
 8004028:	200002e8 	.word	0x200002e8
 800402c:	200003f8 	.word	0x200003f8
 8004030:	200003fc 	.word	0x200003fc

08004034 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800403a:	4b26      	ldr	r3, [pc, #152]	; (80040d4 <vTaskSwitchContext+0xa0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004042:	4b25      	ldr	r3, [pc, #148]	; (80040d8 <vTaskSwitchContext+0xa4>)
 8004044:	2201      	movs	r2, #1
 8004046:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004048:	e03e      	b.n	80040c8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800404a:	4b23      	ldr	r3, [pc, #140]	; (80040d8 <vTaskSwitchContext+0xa4>)
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004050:	4b22      	ldr	r3, [pc, #136]	; (80040dc <vTaskSwitchContext+0xa8>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	fab3 f383 	clz	r3, r3
 800405c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800405e:	7afb      	ldrb	r3, [r7, #11]
 8004060:	f1c3 031f 	rsb	r3, r3, #31
 8004064:	617b      	str	r3, [r7, #20]
 8004066:	491e      	ldr	r1, [pc, #120]	; (80040e0 <vTaskSwitchContext+0xac>)
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d109      	bne.n	800408e <vTaskSwitchContext+0x5a>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	607b      	str	r3, [r7, #4]
 800408c:	e7fe      	b.n	800408c <vTaskSwitchContext+0x58>
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	4613      	mov	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4a11      	ldr	r2, [pc, #68]	; (80040e0 <vTaskSwitchContext+0xac>)
 800409a:	4413      	add	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	605a      	str	r2, [r3, #4]
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	3308      	adds	r3, #8
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d104      	bne.n	80040be <vTaskSwitchContext+0x8a>
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	4a07      	ldr	r2, [pc, #28]	; (80040e4 <vTaskSwitchContext+0xb0>)
 80040c6:	6013      	str	r3, [r2, #0]
}
 80040c8:	bf00      	nop
 80040ca:	371c      	adds	r7, #28
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	20000410 	.word	0x20000410
 80040d8:	200003fc 	.word	0x200003fc
 80040dc:	200003f0 	.word	0x200003f0
 80040e0:	200002ec 	.word	0x200002ec
 80040e4:	200002e8 	.word	0x200002e8

080040e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d109      	bne.n	800410c <vTaskPlaceOnEventList+0x24>
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	e7fe      	b.n	800410a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800410c:	4b07      	ldr	r3, [pc, #28]	; (800412c <vTaskPlaceOnEventList+0x44>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	3318      	adds	r3, #24
 8004112:	4619      	mov	r1, r3
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7fe ff1b 	bl	8002f50 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800411a:	2101      	movs	r1, #1
 800411c:	6838      	ldr	r0, [r7, #0]
 800411e:	f000 fb8b 	bl	8004838 <prvAddCurrentTaskToDelayedList>
}
 8004122:	bf00      	nop
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	200002e8 	.word	0x200002e8

08004130 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d109      	bne.n	800415a <xTaskRemoveFromEventList+0x2a>
 8004146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	e7fe      	b.n	8004158 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	3318      	adds	r3, #24
 800415e:	4618      	mov	r0, r3
 8004160:	f7fe ff2f 	bl	8002fc2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004164:	4b1d      	ldr	r3, [pc, #116]	; (80041dc <xTaskRemoveFromEventList+0xac>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d11c      	bne.n	80041a6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	3304      	adds	r3, #4
 8004170:	4618      	mov	r0, r3
 8004172:	f7fe ff26 	bl	8002fc2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	2201      	movs	r2, #1
 800417c:	409a      	lsls	r2, r3
 800417e:	4b18      	ldr	r3, [pc, #96]	; (80041e0 <xTaskRemoveFromEventList+0xb0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4313      	orrs	r3, r2
 8004184:	4a16      	ldr	r2, [pc, #88]	; (80041e0 <xTaskRemoveFromEventList+0xb0>)
 8004186:	6013      	str	r3, [r2, #0]
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4a13      	ldr	r2, [pc, #76]	; (80041e4 <xTaskRemoveFromEventList+0xb4>)
 8004196:	441a      	add	r2, r3
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	3304      	adds	r3, #4
 800419c:	4619      	mov	r1, r3
 800419e:	4610      	mov	r0, r2
 80041a0:	f7fe feb2 	bl	8002f08 <vListInsertEnd>
 80041a4:	e005      	b.n	80041b2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	3318      	adds	r3, #24
 80041aa:	4619      	mov	r1, r3
 80041ac:	480e      	ldr	r0, [pc, #56]	; (80041e8 <xTaskRemoveFromEventList+0xb8>)
 80041ae:	f7fe feab 	bl	8002f08 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b6:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <xTaskRemoveFromEventList+0xbc>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	429a      	cmp	r2, r3
 80041be:	d905      	bls.n	80041cc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80041c0:	2301      	movs	r3, #1
 80041c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80041c4:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <xTaskRemoveFromEventList+0xc0>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	e001      	b.n	80041d0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80041d0:	697b      	ldr	r3, [r7, #20]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000410 	.word	0x20000410
 80041e0:	200003f0 	.word	0x200003f0
 80041e4:	200002ec 	.word	0x200002ec
 80041e8:	200003a8 	.word	0x200003a8
 80041ec:	200002e8 	.word	0x200002e8
 80041f0:	200003fc 	.word	0x200003fc

080041f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041fc:	4b06      	ldr	r3, [pc, #24]	; (8004218 <vTaskInternalSetTimeOutState+0x24>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004204:	4b05      	ldr	r3, [pc, #20]	; (800421c <vTaskInternalSetTimeOutState+0x28>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	605a      	str	r2, [r3, #4]
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	20000400 	.word	0x20000400
 800421c:	200003ec 	.word	0x200003ec

08004220 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d109      	bne.n	8004244 <xTaskCheckForTimeOut+0x24>
 8004230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	e7fe      	b.n	8004242 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <xTaskCheckForTimeOut+0x3e>
 800424a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	e7fe      	b.n	800425c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800425e:	f000 fc75 	bl	8004b4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004262:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <xTaskCheckForTimeOut+0xb8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427a:	d102      	bne.n	8004282 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800427c:	2300      	movs	r3, #0
 800427e:	61fb      	str	r3, [r7, #28]
 8004280:	e023      	b.n	80042ca <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	4b15      	ldr	r3, [pc, #84]	; (80042dc <xTaskCheckForTimeOut+0xbc>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d007      	beq.n	800429e <xTaskCheckForTimeOut+0x7e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	429a      	cmp	r2, r3
 8004296:	d302      	bcc.n	800429e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004298:	2301      	movs	r3, #1
 800429a:	61fb      	str	r3, [r7, #28]
 800429c:	e015      	b.n	80042ca <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d20b      	bcs.n	80042c0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	1ad2      	subs	r2, r2, r3
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7ff ff9d 	bl	80041f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61fb      	str	r3, [r7, #28]
 80042be:	e004      	b.n	80042ca <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80042c6:	2301      	movs	r3, #1
 80042c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80042ca:	f000 fc6d 	bl	8004ba8 <vPortExitCritical>

	return xReturn;
 80042ce:	69fb      	ldr	r3, [r7, #28]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3720      	adds	r7, #32
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	200003ec 	.word	0x200003ec
 80042dc:	20000400 	.word	0x20000400

080042e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042e4:	4b03      	ldr	r3, [pc, #12]	; (80042f4 <vTaskMissedYield+0x14>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	601a      	str	r2, [r3, #0]
}
 80042ea:	bf00      	nop
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	200003fc 	.word	0x200003fc

080042f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004300:	f000 f852 	bl	80043a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004304:	4b06      	ldr	r3, [pc, #24]	; (8004320 <prvIdleTask+0x28>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d9f9      	bls.n	8004300 <prvIdleTask+0x8>
			{
				taskYIELD();
 800430c:	4b05      	ldr	r3, [pc, #20]	; (8004324 <prvIdleTask+0x2c>)
 800430e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800431c:	e7f0      	b.n	8004300 <prvIdleTask+0x8>
 800431e:	bf00      	nop
 8004320:	200002ec 	.word	0x200002ec
 8004324:	e000ed04 	.word	0xe000ed04

08004328 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800432e:	2300      	movs	r3, #0
 8004330:	607b      	str	r3, [r7, #4]
 8004332:	e00c      	b.n	800434e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4a12      	ldr	r2, [pc, #72]	; (8004388 <prvInitialiseTaskLists+0x60>)
 8004340:	4413      	add	r3, r2
 8004342:	4618      	mov	r0, r3
 8004344:	f7fe fdb3 	bl	8002eae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3301      	adds	r3, #1
 800434c:	607b      	str	r3, [r7, #4]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b06      	cmp	r3, #6
 8004352:	d9ef      	bls.n	8004334 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004354:	480d      	ldr	r0, [pc, #52]	; (800438c <prvInitialiseTaskLists+0x64>)
 8004356:	f7fe fdaa 	bl	8002eae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800435a:	480d      	ldr	r0, [pc, #52]	; (8004390 <prvInitialiseTaskLists+0x68>)
 800435c:	f7fe fda7 	bl	8002eae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004360:	480c      	ldr	r0, [pc, #48]	; (8004394 <prvInitialiseTaskLists+0x6c>)
 8004362:	f7fe fda4 	bl	8002eae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004366:	480c      	ldr	r0, [pc, #48]	; (8004398 <prvInitialiseTaskLists+0x70>)
 8004368:	f7fe fda1 	bl	8002eae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800436c:	480b      	ldr	r0, [pc, #44]	; (800439c <prvInitialiseTaskLists+0x74>)
 800436e:	f7fe fd9e 	bl	8002eae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004372:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <prvInitialiseTaskLists+0x78>)
 8004374:	4a05      	ldr	r2, [pc, #20]	; (800438c <prvInitialiseTaskLists+0x64>)
 8004376:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004378:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <prvInitialiseTaskLists+0x7c>)
 800437a:	4a05      	ldr	r2, [pc, #20]	; (8004390 <prvInitialiseTaskLists+0x68>)
 800437c:	601a      	str	r2, [r3, #0]
}
 800437e:	bf00      	nop
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	200002ec 	.word	0x200002ec
 800438c:	20000378 	.word	0x20000378
 8004390:	2000038c 	.word	0x2000038c
 8004394:	200003a8 	.word	0x200003a8
 8004398:	200003bc 	.word	0x200003bc
 800439c:	200003d4 	.word	0x200003d4
 80043a0:	200003a0 	.word	0x200003a0
 80043a4:	200003a4 	.word	0x200003a4

080043a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043ae:	e019      	b.n	80043e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043b0:	f000 fbcc 	bl	8004b4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043b4:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <prvCheckTasksWaitingTermination+0x4c>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3304      	adds	r3, #4
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fe fdfe 	bl	8002fc2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043c6:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <prvCheckTasksWaitingTermination+0x50>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	4a0a      	ldr	r2, [pc, #40]	; (80043f8 <prvCheckTasksWaitingTermination+0x50>)
 80043ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043d0:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <prvCheckTasksWaitingTermination+0x54>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3b01      	subs	r3, #1
 80043d6:	4a09      	ldr	r2, [pc, #36]	; (80043fc <prvCheckTasksWaitingTermination+0x54>)
 80043d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043da:	f000 fbe5 	bl	8004ba8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f80e 	bl	8004400 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043e4:	4b05      	ldr	r3, [pc, #20]	; (80043fc <prvCheckTasksWaitingTermination+0x54>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e1      	bne.n	80043b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043ec:	bf00      	nop
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	200003bc 	.word	0x200003bc
 80043f8:	200003e8 	.word	0x200003e8
 80043fc:	200003d0 	.word	0x200003d0

08004400 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800440e:	2b00      	cmp	r3, #0
 8004410:	d108      	bne.n	8004424 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fd36 	bl	8004e88 <vPortFree>
				vPortFree( pxTCB );
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fd33 	bl	8004e88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004422:	e017      	b.n	8004454 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800442a:	2b01      	cmp	r3, #1
 800442c:	d103      	bne.n	8004436 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fd2a 	bl	8004e88 <vPortFree>
	}
 8004434:	e00e      	b.n	8004454 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800443c:	2b02      	cmp	r3, #2
 800443e:	d009      	beq.n	8004454 <prvDeleteTCB+0x54>
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	e7fe      	b.n	8004452 <prvDeleteTCB+0x52>
	}
 8004454:	bf00      	nop
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004462:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <prvResetNextTaskUnblockTime+0x38>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d104      	bne.n	8004476 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800446c:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <prvResetNextTaskUnblockTime+0x3c>)
 800446e:	f04f 32ff 	mov.w	r2, #4294967295
 8004472:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004474:	e008      	b.n	8004488 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004476:	4b07      	ldr	r3, [pc, #28]	; (8004494 <prvResetNextTaskUnblockTime+0x38>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	4a04      	ldr	r2, [pc, #16]	; (8004498 <prvResetNextTaskUnblockTime+0x3c>)
 8004486:	6013      	str	r3, [r2, #0]
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	200003a0 	.word	0x200003a0
 8004498:	20000408 	.word	0x20000408

0800449c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044a2:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <xTaskGetSchedulerState+0x34>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d102      	bne.n	80044b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044aa:	2301      	movs	r3, #1
 80044ac:	607b      	str	r3, [r7, #4]
 80044ae:	e008      	b.n	80044c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044b0:	4b08      	ldr	r3, [pc, #32]	; (80044d4 <xTaskGetSchedulerState+0x38>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d102      	bne.n	80044be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044b8:	2302      	movs	r3, #2
 80044ba:	607b      	str	r3, [r7, #4]
 80044bc:	e001      	b.n	80044c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044be:	2300      	movs	r3, #0
 80044c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044c2:	687b      	ldr	r3, [r7, #4]
	}
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	200003f4 	.word	0x200003f4
 80044d4:	20000410 	.word	0x20000410

080044d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80044e4:	2300      	movs	r3, #0
 80044e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d069      	beq.n	80045c2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f2:	4b36      	ldr	r3, [pc, #216]	; (80045cc <xTaskPriorityInherit+0xf4>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d259      	bcs.n	80045b0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	2b00      	cmp	r3, #0
 8004502:	db06      	blt.n	8004512 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004504:	4b31      	ldr	r3, [pc, #196]	; (80045cc <xTaskPriorityInherit+0xf4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450a:	f1c3 0207 	rsb	r2, r3, #7
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	6959      	ldr	r1, [r3, #20]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451a:	4613      	mov	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4a2b      	ldr	r2, [pc, #172]	; (80045d0 <xTaskPriorityInherit+0xf8>)
 8004524:	4413      	add	r3, r2
 8004526:	4299      	cmp	r1, r3
 8004528:	d13a      	bne.n	80045a0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	3304      	adds	r3, #4
 800452e:	4618      	mov	r0, r3
 8004530:	f7fe fd47 	bl	8002fc2 <uxListRemove>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d115      	bne.n	8004566 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453e:	4924      	ldr	r1, [pc, #144]	; (80045d0 <xTaskPriorityInherit+0xf8>)
 8004540:	4613      	mov	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10a      	bne.n	8004566 <xTaskPriorityInherit+0x8e>
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	2201      	movs	r2, #1
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	43da      	mvns	r2, r3
 800455c:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <xTaskPriorityInherit+0xfc>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4013      	ands	r3, r2
 8004562:	4a1c      	ldr	r2, [pc, #112]	; (80045d4 <xTaskPriorityInherit+0xfc>)
 8004564:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004566:	4b19      	ldr	r3, [pc, #100]	; (80045cc <xTaskPriorityInherit+0xf4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004574:	2201      	movs	r2, #1
 8004576:	409a      	lsls	r2, r3
 8004578:	4b16      	ldr	r3, [pc, #88]	; (80045d4 <xTaskPriorityInherit+0xfc>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4313      	orrs	r3, r2
 800457e:	4a15      	ldr	r2, [pc, #84]	; (80045d4 <xTaskPriorityInherit+0xfc>)
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004586:	4613      	mov	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4a10      	ldr	r2, [pc, #64]	; (80045d0 <xTaskPriorityInherit+0xf8>)
 8004590:	441a      	add	r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	3304      	adds	r3, #4
 8004596:	4619      	mov	r1, r3
 8004598:	4610      	mov	r0, r2
 800459a:	f7fe fcb5 	bl	8002f08 <vListInsertEnd>
 800459e:	e004      	b.n	80045aa <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80045a0:	4b0a      	ldr	r3, [pc, #40]	; (80045cc <xTaskPriorityInherit+0xf4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80045aa:	2301      	movs	r3, #1
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	e008      	b.n	80045c2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <xTaskPriorityInherit+0xf4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d201      	bcs.n	80045c2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80045be:	2301      	movs	r3, #1
 80045c0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045c2:	68fb      	ldr	r3, [r7, #12]
	}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	200002e8 	.word	0x200002e8
 80045d0:	200002ec 	.word	0x200002ec
 80045d4:	200003f0 	.word	0x200003f0

080045d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045e4:	2300      	movs	r3, #0
 80045e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d06c      	beq.n	80046c8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045ee:	4b39      	ldr	r3, [pc, #228]	; (80046d4 <xTaskPriorityDisinherit+0xfc>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d009      	beq.n	800460c <xTaskPriorityDisinherit+0x34>
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	e7fe      	b.n	800460a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <xTaskPriorityDisinherit+0x50>
 8004614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	60bb      	str	r3, [r7, #8]
 8004626:	e7fe      	b.n	8004626 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462c:	1e5a      	subs	r2, r3, #1
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463a:	429a      	cmp	r2, r3
 800463c:	d044      	beq.n	80046c8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004642:	2b00      	cmp	r3, #0
 8004644:	d140      	bne.n	80046c8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	3304      	adds	r3, #4
 800464a:	4618      	mov	r0, r3
 800464c:	f7fe fcb9 	bl	8002fc2 <uxListRemove>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d115      	bne.n	8004682 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465a:	491f      	ldr	r1, [pc, #124]	; (80046d8 <xTaskPriorityDisinherit+0x100>)
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10a      	bne.n	8004682 <xTaskPriorityDisinherit+0xaa>
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	2201      	movs	r2, #1
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	43da      	mvns	r2, r3
 8004678:	4b18      	ldr	r3, [pc, #96]	; (80046dc <xTaskPriorityDisinherit+0x104>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4013      	ands	r3, r2
 800467e:	4a17      	ldr	r2, [pc, #92]	; (80046dc <xTaskPriorityDisinherit+0x104>)
 8004680:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	f1c3 0207 	rsb	r2, r3, #7
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	2201      	movs	r2, #1
 800469c:	409a      	lsls	r2, r3
 800469e:	4b0f      	ldr	r3, [pc, #60]	; (80046dc <xTaskPriorityDisinherit+0x104>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	4a0d      	ldr	r2, [pc, #52]	; (80046dc <xTaskPriorityDisinherit+0x104>)
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ac:	4613      	mov	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4a08      	ldr	r2, [pc, #32]	; (80046d8 <xTaskPriorityDisinherit+0x100>)
 80046b6:	441a      	add	r2, r3
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4619      	mov	r1, r3
 80046be:	4610      	mov	r0, r2
 80046c0:	f7fe fc22 	bl	8002f08 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046c4:	2301      	movs	r3, #1
 80046c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046c8:	697b      	ldr	r3, [r7, #20]
	}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	200002e8 	.word	0x200002e8
 80046d8:	200002ec 	.word	0x200002ec
 80046dc:	200003f0 	.word	0x200003f0

080046e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80046ee:	2301      	movs	r3, #1
 80046f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 8081 	beq.w	80047fc <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8004702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	e7fe      	b.n	8004714 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	429a      	cmp	r2, r3
 800471e:	d902      	bls.n	8004726 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	61fb      	str	r3, [r7, #28]
 8004724:	e002      	b.n	800472c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	69fa      	ldr	r2, [r7, #28]
 8004732:	429a      	cmp	r2, r3
 8004734:	d062      	beq.n	80047fc <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	429a      	cmp	r2, r3
 800473e:	d15d      	bne.n	80047fc <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004740:	4b30      	ldr	r3, [pc, #192]	; (8004804 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	429a      	cmp	r2, r3
 8004748:	d109      	bne.n	800475e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	60bb      	str	r3, [r7, #8]
 800475c:	e7fe      	b.n	800475c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004762:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	2b00      	cmp	r3, #0
 8004770:	db04      	blt.n	800477c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	f1c3 0207 	rsb	r2, r3, #7
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	6959      	ldr	r1, [r3, #20]
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4a1f      	ldr	r2, [pc, #124]	; (8004808 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800478c:	4413      	add	r3, r2
 800478e:	4299      	cmp	r1, r3
 8004790:	d134      	bne.n	80047fc <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	3304      	adds	r3, #4
 8004796:	4618      	mov	r0, r3
 8004798:	f7fe fc13 	bl	8002fc2 <uxListRemove>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d115      	bne.n	80047ce <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a6:	4918      	ldr	r1, [pc, #96]	; (8004808 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10a      	bne.n	80047ce <vTaskPriorityDisinheritAfterTimeout+0xee>
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	2201      	movs	r2, #1
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	43da      	mvns	r2, r3
 80047c4:	4b11      	ldr	r3, [pc, #68]	; (800480c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4013      	ands	r3, r2
 80047ca:	4a10      	ldr	r2, [pc, #64]	; (800480c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80047cc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d2:	2201      	movs	r2, #1
 80047d4:	409a      	lsls	r2, r3
 80047d6:	4b0d      	ldr	r3, [pc, #52]	; (800480c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4313      	orrs	r3, r2
 80047dc:	4a0b      	ldr	r2, [pc, #44]	; (800480c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4a06      	ldr	r2, [pc, #24]	; (8004808 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80047ee:	441a      	add	r2, r3
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	3304      	adds	r3, #4
 80047f4:	4619      	mov	r1, r3
 80047f6:	4610      	mov	r0, r2
 80047f8:	f7fe fb86 	bl	8002f08 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047fc:	bf00      	nop
 80047fe:	3720      	adds	r7, #32
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	200002e8 	.word	0x200002e8
 8004808:	200002ec 	.word	0x200002ec
 800480c:	200003f0 	.word	0x200003f0

08004810 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004814:	4b07      	ldr	r3, [pc, #28]	; (8004834 <pvTaskIncrementMutexHeldCount+0x24>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d004      	beq.n	8004826 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800481c:	4b05      	ldr	r3, [pc, #20]	; (8004834 <pvTaskIncrementMutexHeldCount+0x24>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004822:	3201      	adds	r2, #1
 8004824:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004826:	4b03      	ldr	r3, [pc, #12]	; (8004834 <pvTaskIncrementMutexHeldCount+0x24>)
 8004828:	681b      	ldr	r3, [r3, #0]
	}
 800482a:	4618      	mov	r0, r3
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	200002e8 	.word	0x200002e8

08004838 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004842:	4b29      	ldr	r3, [pc, #164]	; (80048e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004848:	4b28      	ldr	r3, [pc, #160]	; (80048ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3304      	adds	r3, #4
 800484e:	4618      	mov	r0, r3
 8004850:	f7fe fbb7 	bl	8002fc2 <uxListRemove>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10b      	bne.n	8004872 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800485a:	4b24      	ldr	r3, [pc, #144]	; (80048ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	2201      	movs	r2, #1
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43da      	mvns	r2, r3
 8004868:	4b21      	ldr	r3, [pc, #132]	; (80048f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4013      	ands	r3, r2
 800486e:	4a20      	ldr	r2, [pc, #128]	; (80048f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004870:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004878:	d10a      	bne.n	8004890 <prvAddCurrentTaskToDelayedList+0x58>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d007      	beq.n	8004890 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004880:	4b1a      	ldr	r3, [pc, #104]	; (80048ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3304      	adds	r3, #4
 8004886:	4619      	mov	r1, r3
 8004888:	481a      	ldr	r0, [pc, #104]	; (80048f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800488a:	f7fe fb3d 	bl	8002f08 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800488e:	e026      	b.n	80048de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4413      	add	r3, r2
 8004896:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004898:	4b14      	ldr	r3, [pc, #80]	; (80048ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d209      	bcs.n	80048bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048a8:	4b13      	ldr	r3, [pc, #76]	; (80048f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3304      	adds	r3, #4
 80048b2:	4619      	mov	r1, r3
 80048b4:	4610      	mov	r0, r2
 80048b6:	f7fe fb4b 	bl	8002f50 <vListInsert>
}
 80048ba:	e010      	b.n	80048de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048bc:	4b0f      	ldr	r3, [pc, #60]	; (80048fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4b0a      	ldr	r3, [pc, #40]	; (80048ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3304      	adds	r3, #4
 80048c6:	4619      	mov	r1, r3
 80048c8:	4610      	mov	r0, r2
 80048ca:	f7fe fb41 	bl	8002f50 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80048ce:	4b0c      	ldr	r3, [pc, #48]	; (8004900 <prvAddCurrentTaskToDelayedList+0xc8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d202      	bcs.n	80048de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80048d8:	4a09      	ldr	r2, [pc, #36]	; (8004900 <prvAddCurrentTaskToDelayedList+0xc8>)
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	6013      	str	r3, [r2, #0]
}
 80048de:	bf00      	nop
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	200003ec 	.word	0x200003ec
 80048ec:	200002e8 	.word	0x200002e8
 80048f0:	200003f0 	.word	0x200003f0
 80048f4:	200003d4 	.word	0x200003d4
 80048f8:	200003a4 	.word	0x200003a4
 80048fc:	200003a0 	.word	0x200003a0
 8004900:	20000408 	.word	0x20000408

08004904 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3b04      	subs	r3, #4
 8004914:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800491c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3b04      	subs	r3, #4
 8004922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f023 0201 	bic.w	r2, r3, #1
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3b04      	subs	r3, #4
 8004932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004934:	4a0c      	ldr	r2, [pc, #48]	; (8004968 <pxPortInitialiseStack+0x64>)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	3b14      	subs	r3, #20
 800493e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	3b04      	subs	r3, #4
 800494a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f06f 0202 	mvn.w	r2, #2
 8004952:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3b20      	subs	r3, #32
 8004958:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800495a:	68fb      	ldr	r3, [r7, #12]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	0800496d 	.word	0x0800496d

0800496c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004972:	2300      	movs	r3, #0
 8004974:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004976:	4b11      	ldr	r3, [pc, #68]	; (80049bc <prvTaskExitError+0x50>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497e:	d009      	beq.n	8004994 <prvTaskExitError+0x28>
 8004980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004984:	f383 8811 	msr	BASEPRI, r3
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	e7fe      	b.n	8004992 <prvTaskExitError+0x26>
 8004994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80049a6:	bf00      	nop
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0fc      	beq.n	80049a8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80049ae:	bf00      	nop
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	2000000c 	.word	0x2000000c

080049c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80049c0:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <pxCurrentTCBConst2>)
 80049c2:	6819      	ldr	r1, [r3, #0]
 80049c4:	6808      	ldr	r0, [r1, #0]
 80049c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ca:	f380 8809 	msr	PSP, r0
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f04f 0000 	mov.w	r0, #0
 80049d6:	f380 8811 	msr	BASEPRI, r0
 80049da:	4770      	bx	lr
 80049dc:	f3af 8000 	nop.w

080049e0 <pxCurrentTCBConst2>:
 80049e0:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop

080049e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80049e8:	4808      	ldr	r0, [pc, #32]	; (8004a0c <prvPortStartFirstTask+0x24>)
 80049ea:	6800      	ldr	r0, [r0, #0]
 80049ec:	6800      	ldr	r0, [r0, #0]
 80049ee:	f380 8808 	msr	MSP, r0
 80049f2:	f04f 0000 	mov.w	r0, #0
 80049f6:	f380 8814 	msr	CONTROL, r0
 80049fa:	b662      	cpsie	i
 80049fc:	b661      	cpsie	f
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	df00      	svc	0
 8004a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a0a:	bf00      	nop
 8004a0c:	e000ed08 	.word	0xe000ed08

08004a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a16:	4b44      	ldr	r3, [pc, #272]	; (8004b28 <xPortStartScheduler+0x118>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a44      	ldr	r2, [pc, #272]	; (8004b2c <xPortStartScheduler+0x11c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d109      	bne.n	8004a34 <xPortStartScheduler+0x24>
 8004a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	613b      	str	r3, [r7, #16]
 8004a32:	e7fe      	b.n	8004a32 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a34:	4b3c      	ldr	r3, [pc, #240]	; (8004b28 <xPortStartScheduler+0x118>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a3d      	ldr	r2, [pc, #244]	; (8004b30 <xPortStartScheduler+0x120>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d109      	bne.n	8004a52 <xPortStartScheduler+0x42>
 8004a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	e7fe      	b.n	8004a50 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a52:	4b38      	ldr	r3, [pc, #224]	; (8004b34 <xPortStartScheduler+0x124>)
 8004a54:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	22ff      	movs	r2, #255	; 0xff
 8004a62:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a6c:	78fb      	ldrb	r3, [r7, #3]
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	4b30      	ldr	r3, [pc, #192]	; (8004b38 <xPortStartScheduler+0x128>)
 8004a78:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a7a:	4b30      	ldr	r3, [pc, #192]	; (8004b3c <xPortStartScheduler+0x12c>)
 8004a7c:	2207      	movs	r2, #7
 8004a7e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a80:	e009      	b.n	8004a96 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004a82:	4b2e      	ldr	r3, [pc, #184]	; (8004b3c <xPortStartScheduler+0x12c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	4a2c      	ldr	r2, [pc, #176]	; (8004b3c <xPortStartScheduler+0x12c>)
 8004a8a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a8c:	78fb      	ldrb	r3, [r7, #3]
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a96:	78fb      	ldrb	r3, [r7, #3]
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9e:	2b80      	cmp	r3, #128	; 0x80
 8004aa0:	d0ef      	beq.n	8004a82 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004aa2:	4b26      	ldr	r3, [pc, #152]	; (8004b3c <xPortStartScheduler+0x12c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f1c3 0307 	rsb	r3, r3, #7
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d009      	beq.n	8004ac2 <xPortStartScheduler+0xb2>
 8004aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab2:	f383 8811 	msr	BASEPRI, r3
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	60bb      	str	r3, [r7, #8]
 8004ac0:	e7fe      	b.n	8004ac0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ac2:	4b1e      	ldr	r3, [pc, #120]	; (8004b3c <xPortStartScheduler+0x12c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	4a1c      	ldr	r2, [pc, #112]	; (8004b3c <xPortStartScheduler+0x12c>)
 8004aca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004acc:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <xPortStartScheduler+0x12c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ad4:	4a19      	ldr	r2, [pc, #100]	; (8004b3c <xPortStartScheduler+0x12c>)
 8004ad6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ae0:	4b17      	ldr	r3, [pc, #92]	; (8004b40 <xPortStartScheduler+0x130>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a16      	ldr	r2, [pc, #88]	; (8004b40 <xPortStartScheduler+0x130>)
 8004ae6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004aea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004aec:	4b14      	ldr	r3, [pc, #80]	; (8004b40 <xPortStartScheduler+0x130>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a13      	ldr	r2, [pc, #76]	; (8004b40 <xPortStartScheduler+0x130>)
 8004af2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004af6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004af8:	f000 f8d6 	bl	8004ca8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004afc:	4b11      	ldr	r3, [pc, #68]	; (8004b44 <xPortStartScheduler+0x134>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b02:	f000 f8f5 	bl	8004cf0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b06:	4b10      	ldr	r3, [pc, #64]	; (8004b48 <xPortStartScheduler+0x138>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a0f      	ldr	r2, [pc, #60]	; (8004b48 <xPortStartScheduler+0x138>)
 8004b0c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b12:	f7ff ff69 	bl	80049e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b16:	f7ff fa8d 	bl	8004034 <vTaskSwitchContext>
	prvTaskExitError();
 8004b1a:	f7ff ff27 	bl	800496c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	e000ed00 	.word	0xe000ed00
 8004b2c:	410fc271 	.word	0x410fc271
 8004b30:	410fc270 	.word	0x410fc270
 8004b34:	e000e400 	.word	0xe000e400
 8004b38:	20000414 	.word	0x20000414
 8004b3c:	20000418 	.word	0x20000418
 8004b40:	e000ed20 	.word	0xe000ed20
 8004b44:	2000000c 	.word	0x2000000c
 8004b48:	e000ef34 	.word	0xe000ef34

08004b4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b64:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <vPortEnterCritical+0x54>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	4a0d      	ldr	r2, [pc, #52]	; (8004ba0 <vPortEnterCritical+0x54>)
 8004b6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <vPortEnterCritical+0x54>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d10e      	bne.n	8004b94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b76:	4b0b      	ldr	r3, [pc, #44]	; (8004ba4 <vPortEnterCritical+0x58>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d009      	beq.n	8004b94 <vPortEnterCritical+0x48>
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	603b      	str	r3, [r7, #0]
 8004b92:	e7fe      	b.n	8004b92 <vPortEnterCritical+0x46>
	}
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	2000000c 	.word	0x2000000c
 8004ba4:	e000ed04 	.word	0xe000ed04

08004ba8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004bae:	4b11      	ldr	r3, [pc, #68]	; (8004bf4 <vPortExitCritical+0x4c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d109      	bne.n	8004bca <vPortExitCritical+0x22>
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	607b      	str	r3, [r7, #4]
 8004bc8:	e7fe      	b.n	8004bc8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004bca:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <vPortExitCritical+0x4c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	4a08      	ldr	r2, [pc, #32]	; (8004bf4 <vPortExitCritical+0x4c>)
 8004bd2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004bd4:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <vPortExitCritical+0x4c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d104      	bne.n	8004be6 <vPortExitCritical+0x3e>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	2000000c 	.word	0x2000000c
	...

08004c00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c00:	f3ef 8009 	mrs	r0, PSP
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	4b15      	ldr	r3, [pc, #84]	; (8004c60 <pxCurrentTCBConst>)
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	f01e 0f10 	tst.w	lr, #16
 8004c10:	bf08      	it	eq
 8004c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c1a:	6010      	str	r0, [r2, #0]
 8004c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c24:	f380 8811 	msr	BASEPRI, r0
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f7ff fa00 	bl	8004034 <vTaskSwitchContext>
 8004c34:	f04f 0000 	mov.w	r0, #0
 8004c38:	f380 8811 	msr	BASEPRI, r0
 8004c3c:	bc09      	pop	{r0, r3}
 8004c3e:	6819      	ldr	r1, [r3, #0]
 8004c40:	6808      	ldr	r0, [r1, #0]
 8004c42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c46:	f01e 0f10 	tst.w	lr, #16
 8004c4a:	bf08      	it	eq
 8004c4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c50:	f380 8809 	msr	PSP, r0
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	f3af 8000 	nop.w

08004c60 <pxCurrentTCBConst>:
 8004c60:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop

08004c68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c80:	f7ff f920 	bl	8003ec4 <xTaskIncrementTick>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c8a:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <SysTick_Handler+0x3c>)
 8004c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	2300      	movs	r3, #0
 8004c94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c9c:	bf00      	nop
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	e000ed04 	.word	0xe000ed04

08004ca8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004cac:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <vPortSetupTimerInterrupt+0x34>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cb2:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <vPortSetupTimerInterrupt+0x38>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ce4 <vPortSetupTimerInterrupt+0x3c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a0a      	ldr	r2, [pc, #40]	; (8004ce8 <vPortSetupTimerInterrupt+0x40>)
 8004cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc2:	099b      	lsrs	r3, r3, #6
 8004cc4:	4a09      	ldr	r2, [pc, #36]	; (8004cec <vPortSetupTimerInterrupt+0x44>)
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cca:	4b04      	ldr	r3, [pc, #16]	; (8004cdc <vPortSetupTimerInterrupt+0x34>)
 8004ccc:	2207      	movs	r2, #7
 8004cce:	601a      	str	r2, [r3, #0]
}
 8004cd0:	bf00      	nop
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	e000e010 	.word	0xe000e010
 8004ce0:	e000e018 	.word	0xe000e018
 8004ce4:	20000000 	.word	0x20000000
 8004ce8:	10624dd3 	.word	0x10624dd3
 8004cec:	e000e014 	.word	0xe000e014

08004cf0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004cf0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d00 <vPortEnableVFP+0x10>
 8004cf4:	6801      	ldr	r1, [r0, #0]
 8004cf6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004cfa:	6001      	str	r1, [r0, #0]
 8004cfc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004cfe:	bf00      	nop
 8004d00:	e000ed88 	.word	0xe000ed88

08004d04 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08a      	sub	sp, #40	; 0x28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d10:	f7ff f82e 	bl	8003d70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d14:	4b57      	ldr	r3, [pc, #348]	; (8004e74 <pvPortMalloc+0x170>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d1c:	f000 f90c 	bl	8004f38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d20:	4b55      	ldr	r3, [pc, #340]	; (8004e78 <pvPortMalloc+0x174>)
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4013      	ands	r3, r2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f040 808c 	bne.w	8004e46 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d01c      	beq.n	8004d6e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004d34:	2208      	movs	r2, #8
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4413      	add	r3, r2
 8004d3a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d013      	beq.n	8004d6e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f023 0307 	bic.w	r3, r3, #7
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d009      	beq.n	8004d6e <pvPortMalloc+0x6a>
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	617b      	str	r3, [r7, #20]
 8004d6c:	e7fe      	b.n	8004d6c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d068      	beq.n	8004e46 <pvPortMalloc+0x142>
 8004d74:	4b41      	ldr	r3, [pc, #260]	; (8004e7c <pvPortMalloc+0x178>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d863      	bhi.n	8004e46 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d7e:	4b40      	ldr	r3, [pc, #256]	; (8004e80 <pvPortMalloc+0x17c>)
 8004d80:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d82:	4b3f      	ldr	r3, [pc, #252]	; (8004e80 <pvPortMalloc+0x17c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d88:	e004      	b.n	8004d94 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d903      	bls.n	8004da6 <pvPortMalloc+0xa2>
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f1      	bne.n	8004d8a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004da6:	4b33      	ldr	r3, [pc, #204]	; (8004e74 <pvPortMalloc+0x170>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d04a      	beq.n	8004e46 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2208      	movs	r2, #8
 8004db6:	4413      	add	r3, r2
 8004db8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	1ad2      	subs	r2, r2, r3
 8004dca:	2308      	movs	r3, #8
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d91e      	bls.n	8004e10 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d009      	beq.n	8004df8 <pvPortMalloc+0xf4>
 8004de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	613b      	str	r3, [r7, #16]
 8004df6:	e7fe      	b.n	8004df6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	1ad2      	subs	r2, r2, r3
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e0a:	69b8      	ldr	r0, [r7, #24]
 8004e0c:	f000 f8f6 	bl	8004ffc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e10:	4b1a      	ldr	r3, [pc, #104]	; (8004e7c <pvPortMalloc+0x178>)
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	4a18      	ldr	r2, [pc, #96]	; (8004e7c <pvPortMalloc+0x178>)
 8004e1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e1e:	4b17      	ldr	r3, [pc, #92]	; (8004e7c <pvPortMalloc+0x178>)
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	4b18      	ldr	r3, [pc, #96]	; (8004e84 <pvPortMalloc+0x180>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d203      	bcs.n	8004e32 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e2a:	4b14      	ldr	r3, [pc, #80]	; (8004e7c <pvPortMalloc+0x178>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a15      	ldr	r2, [pc, #84]	; (8004e84 <pvPortMalloc+0x180>)
 8004e30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <pvPortMalloc+0x174>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e46:	f7fe ffa1 	bl	8003d8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d009      	beq.n	8004e68 <pvPortMalloc+0x164>
 8004e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	e7fe      	b.n	8004e66 <pvPortMalloc+0x162>
	return pvReturn;
 8004e68:	69fb      	ldr	r3, [r7, #28]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3728      	adds	r7, #40	; 0x28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20004024 	.word	0x20004024
 8004e78:	20004030 	.word	0x20004030
 8004e7c:	20004028 	.word	0x20004028
 8004e80:	2000401c 	.word	0x2000401c
 8004e84:	2000402c 	.word	0x2000402c

08004e88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d046      	beq.n	8004f28 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e9a:	2308      	movs	r3, #8
 8004e9c:	425b      	negs	r3, r3
 8004e9e:	697a      	ldr	r2, [r7, #20]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <vPortFree+0xa8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d109      	bne.n	8004eca <vPortFree+0x42>
 8004eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	e7fe      	b.n	8004ec8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d009      	beq.n	8004ee6 <vPortFree+0x5e>
 8004ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed6:	f383 8811 	msr	BASEPRI, r3
 8004eda:	f3bf 8f6f 	isb	sy
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	60bb      	str	r3, [r7, #8]
 8004ee4:	e7fe      	b.n	8004ee4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	4b11      	ldr	r3, [pc, #68]	; (8004f30 <vPortFree+0xa8>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d019      	beq.n	8004f28 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d115      	bne.n	8004f28 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	4b0b      	ldr	r3, [pc, #44]	; (8004f30 <vPortFree+0xa8>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	43db      	mvns	r3, r3
 8004f06:	401a      	ands	r2, r3
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f0c:	f7fe ff30 	bl	8003d70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	4b07      	ldr	r3, [pc, #28]	; (8004f34 <vPortFree+0xac>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4413      	add	r3, r2
 8004f1a:	4a06      	ldr	r2, [pc, #24]	; (8004f34 <vPortFree+0xac>)
 8004f1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f1e:	6938      	ldr	r0, [r7, #16]
 8004f20:	f000 f86c 	bl	8004ffc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004f24:	f7fe ff32 	bl	8003d8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f28:	bf00      	nop
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	20004030 	.word	0x20004030
 8004f34:	20004028 	.word	0x20004028

08004f38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f3e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004f42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f44:	4b27      	ldr	r3, [pc, #156]	; (8004fe4 <prvHeapInit+0xac>)
 8004f46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00c      	beq.n	8004f6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3307      	adds	r3, #7
 8004f56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0307 	bic.w	r3, r3, #7
 8004f5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	4a1f      	ldr	r2, [pc, #124]	; (8004fe4 <prvHeapInit+0xac>)
 8004f68:	4413      	add	r3, r2
 8004f6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f70:	4a1d      	ldr	r2, [pc, #116]	; (8004fe8 <prvHeapInit+0xb0>)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f76:	4b1c      	ldr	r3, [pc, #112]	; (8004fe8 <prvHeapInit+0xb0>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	4413      	add	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f84:	2208      	movs	r2, #8
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	1a9b      	subs	r3, r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0307 	bic.w	r3, r3, #7
 8004f92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4a15      	ldr	r2, [pc, #84]	; (8004fec <prvHeapInit+0xb4>)
 8004f98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f9a:	4b14      	ldr	r3, [pc, #80]	; (8004fec <prvHeapInit+0xb4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004fa2:	4b12      	ldr	r3, [pc, #72]	; (8004fec <prvHeapInit+0xb4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	1ad2      	subs	r2, r2, r3
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004fb8:	4b0c      	ldr	r3, [pc, #48]	; (8004fec <prvHeapInit+0xb4>)
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	4a0a      	ldr	r2, [pc, #40]	; (8004ff0 <prvHeapInit+0xb8>)
 8004fc6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	4a09      	ldr	r2, [pc, #36]	; (8004ff4 <prvHeapInit+0xbc>)
 8004fce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004fd0:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <prvHeapInit+0xc0>)
 8004fd2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004fd6:	601a      	str	r2, [r3, #0]
}
 8004fd8:	bf00      	nop
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	2000041c 	.word	0x2000041c
 8004fe8:	2000401c 	.word	0x2000401c
 8004fec:	20004024 	.word	0x20004024
 8004ff0:	2000402c 	.word	0x2000402c
 8004ff4:	20004028 	.word	0x20004028
 8004ff8:	20004030 	.word	0x20004030

08004ffc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005004:	4b28      	ldr	r3, [pc, #160]	; (80050a8 <prvInsertBlockIntoFreeList+0xac>)
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	e002      	b.n	8005010 <prvInsertBlockIntoFreeList+0x14>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	429a      	cmp	r2, r3
 8005018:	d8f7      	bhi.n	800500a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	4413      	add	r3, r2
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	429a      	cmp	r2, r3
 800502a:	d108      	bne.n	800503e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	441a      	add	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	441a      	add	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d118      	bne.n	8005084 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	4b15      	ldr	r3, [pc, #84]	; (80050ac <prvInsertBlockIntoFreeList+0xb0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d00d      	beq.n	800507a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	441a      	add	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	e008      	b.n	800508c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800507a:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <prvInsertBlockIntoFreeList+0xb0>)
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	e003      	b.n	800508c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	429a      	cmp	r2, r3
 8005092:	d002      	beq.n	800509a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	2000401c 	.word	0x2000401c
 80050ac:	20004024 	.word	0x20004024

080050b0 <__errno>:
 80050b0:	4b01      	ldr	r3, [pc, #4]	; (80050b8 <__errno+0x8>)
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	20000010 	.word	0x20000010

080050bc <__libc_init_array>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	4e0d      	ldr	r6, [pc, #52]	; (80050f4 <__libc_init_array+0x38>)
 80050c0:	4c0d      	ldr	r4, [pc, #52]	; (80050f8 <__libc_init_array+0x3c>)
 80050c2:	1ba4      	subs	r4, r4, r6
 80050c4:	10a4      	asrs	r4, r4, #2
 80050c6:	2500      	movs	r5, #0
 80050c8:	42a5      	cmp	r5, r4
 80050ca:	d109      	bne.n	80050e0 <__libc_init_array+0x24>
 80050cc:	4e0b      	ldr	r6, [pc, #44]	; (80050fc <__libc_init_array+0x40>)
 80050ce:	4c0c      	ldr	r4, [pc, #48]	; (8005100 <__libc_init_array+0x44>)
 80050d0:	f000 fc3c 	bl	800594c <_init>
 80050d4:	1ba4      	subs	r4, r4, r6
 80050d6:	10a4      	asrs	r4, r4, #2
 80050d8:	2500      	movs	r5, #0
 80050da:	42a5      	cmp	r5, r4
 80050dc:	d105      	bne.n	80050ea <__libc_init_array+0x2e>
 80050de:	bd70      	pop	{r4, r5, r6, pc}
 80050e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050e4:	4798      	blx	r3
 80050e6:	3501      	adds	r5, #1
 80050e8:	e7ee      	b.n	80050c8 <__libc_init_array+0xc>
 80050ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050ee:	4798      	blx	r3
 80050f0:	3501      	adds	r5, #1
 80050f2:	e7f2      	b.n	80050da <__libc_init_array+0x1e>
 80050f4:	08005a2c 	.word	0x08005a2c
 80050f8:	08005a2c 	.word	0x08005a2c
 80050fc:	08005a2c 	.word	0x08005a2c
 8005100:	08005a30 	.word	0x08005a30

08005104 <memcpy>:
 8005104:	b510      	push	{r4, lr}
 8005106:	1e43      	subs	r3, r0, #1
 8005108:	440a      	add	r2, r1
 800510a:	4291      	cmp	r1, r2
 800510c:	d100      	bne.n	8005110 <memcpy+0xc>
 800510e:	bd10      	pop	{r4, pc}
 8005110:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005114:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005118:	e7f7      	b.n	800510a <memcpy+0x6>

0800511a <memset>:
 800511a:	4402      	add	r2, r0
 800511c:	4603      	mov	r3, r0
 800511e:	4293      	cmp	r3, r2
 8005120:	d100      	bne.n	8005124 <memset+0xa>
 8005122:	4770      	bx	lr
 8005124:	f803 1b01 	strb.w	r1, [r3], #1
 8005128:	e7f9      	b.n	800511e <memset+0x4>
	...

0800512c <sniprintf>:
 800512c:	b40c      	push	{r2, r3}
 800512e:	b530      	push	{r4, r5, lr}
 8005130:	4b17      	ldr	r3, [pc, #92]	; (8005190 <sniprintf+0x64>)
 8005132:	1e0c      	subs	r4, r1, #0
 8005134:	b09d      	sub	sp, #116	; 0x74
 8005136:	681d      	ldr	r5, [r3, #0]
 8005138:	da08      	bge.n	800514c <sniprintf+0x20>
 800513a:	238b      	movs	r3, #139	; 0x8b
 800513c:	602b      	str	r3, [r5, #0]
 800513e:	f04f 30ff 	mov.w	r0, #4294967295
 8005142:	b01d      	add	sp, #116	; 0x74
 8005144:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005148:	b002      	add	sp, #8
 800514a:	4770      	bx	lr
 800514c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005150:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005154:	bf14      	ite	ne
 8005156:	f104 33ff 	addne.w	r3, r4, #4294967295
 800515a:	4623      	moveq	r3, r4
 800515c:	9304      	str	r3, [sp, #16]
 800515e:	9307      	str	r3, [sp, #28]
 8005160:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005164:	9002      	str	r0, [sp, #8]
 8005166:	9006      	str	r0, [sp, #24]
 8005168:	f8ad 3016 	strh.w	r3, [sp, #22]
 800516c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800516e:	ab21      	add	r3, sp, #132	; 0x84
 8005170:	a902      	add	r1, sp, #8
 8005172:	4628      	mov	r0, r5
 8005174:	9301      	str	r3, [sp, #4]
 8005176:	f000 f867 	bl	8005248 <_svfiprintf_r>
 800517a:	1c43      	adds	r3, r0, #1
 800517c:	bfbc      	itt	lt
 800517e:	238b      	movlt	r3, #139	; 0x8b
 8005180:	602b      	strlt	r3, [r5, #0]
 8005182:	2c00      	cmp	r4, #0
 8005184:	d0dd      	beq.n	8005142 <sniprintf+0x16>
 8005186:	9b02      	ldr	r3, [sp, #8]
 8005188:	2200      	movs	r2, #0
 800518a:	701a      	strb	r2, [r3, #0]
 800518c:	e7d9      	b.n	8005142 <sniprintf+0x16>
 800518e:	bf00      	nop
 8005190:	20000010 	.word	0x20000010

08005194 <__ssputs_r>:
 8005194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005198:	688e      	ldr	r6, [r1, #8]
 800519a:	429e      	cmp	r6, r3
 800519c:	4682      	mov	sl, r0
 800519e:	460c      	mov	r4, r1
 80051a0:	4690      	mov	r8, r2
 80051a2:	4699      	mov	r9, r3
 80051a4:	d837      	bhi.n	8005216 <__ssputs_r+0x82>
 80051a6:	898a      	ldrh	r2, [r1, #12]
 80051a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051ac:	d031      	beq.n	8005212 <__ssputs_r+0x7e>
 80051ae:	6825      	ldr	r5, [r4, #0]
 80051b0:	6909      	ldr	r1, [r1, #16]
 80051b2:	1a6f      	subs	r7, r5, r1
 80051b4:	6965      	ldr	r5, [r4, #20]
 80051b6:	2302      	movs	r3, #2
 80051b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051bc:	fb95 f5f3 	sdiv	r5, r5, r3
 80051c0:	f109 0301 	add.w	r3, r9, #1
 80051c4:	443b      	add	r3, r7
 80051c6:	429d      	cmp	r5, r3
 80051c8:	bf38      	it	cc
 80051ca:	461d      	movcc	r5, r3
 80051cc:	0553      	lsls	r3, r2, #21
 80051ce:	d530      	bpl.n	8005232 <__ssputs_r+0x9e>
 80051d0:	4629      	mov	r1, r5
 80051d2:	f000 fb21 	bl	8005818 <_malloc_r>
 80051d6:	4606      	mov	r6, r0
 80051d8:	b950      	cbnz	r0, 80051f0 <__ssputs_r+0x5c>
 80051da:	230c      	movs	r3, #12
 80051dc:	f8ca 3000 	str.w	r3, [sl]
 80051e0:	89a3      	ldrh	r3, [r4, #12]
 80051e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051e6:	81a3      	strh	r3, [r4, #12]
 80051e8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051f0:	463a      	mov	r2, r7
 80051f2:	6921      	ldr	r1, [r4, #16]
 80051f4:	f7ff ff86 	bl	8005104 <memcpy>
 80051f8:	89a3      	ldrh	r3, [r4, #12]
 80051fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005202:	81a3      	strh	r3, [r4, #12]
 8005204:	6126      	str	r6, [r4, #16]
 8005206:	6165      	str	r5, [r4, #20]
 8005208:	443e      	add	r6, r7
 800520a:	1bed      	subs	r5, r5, r7
 800520c:	6026      	str	r6, [r4, #0]
 800520e:	60a5      	str	r5, [r4, #8]
 8005210:	464e      	mov	r6, r9
 8005212:	454e      	cmp	r6, r9
 8005214:	d900      	bls.n	8005218 <__ssputs_r+0x84>
 8005216:	464e      	mov	r6, r9
 8005218:	4632      	mov	r2, r6
 800521a:	4641      	mov	r1, r8
 800521c:	6820      	ldr	r0, [r4, #0]
 800521e:	f000 fa93 	bl	8005748 <memmove>
 8005222:	68a3      	ldr	r3, [r4, #8]
 8005224:	1b9b      	subs	r3, r3, r6
 8005226:	60a3      	str	r3, [r4, #8]
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	441e      	add	r6, r3
 800522c:	6026      	str	r6, [r4, #0]
 800522e:	2000      	movs	r0, #0
 8005230:	e7dc      	b.n	80051ec <__ssputs_r+0x58>
 8005232:	462a      	mov	r2, r5
 8005234:	f000 fb4a 	bl	80058cc <_realloc_r>
 8005238:	4606      	mov	r6, r0
 800523a:	2800      	cmp	r0, #0
 800523c:	d1e2      	bne.n	8005204 <__ssputs_r+0x70>
 800523e:	6921      	ldr	r1, [r4, #16]
 8005240:	4650      	mov	r0, sl
 8005242:	f000 fa9b 	bl	800577c <_free_r>
 8005246:	e7c8      	b.n	80051da <__ssputs_r+0x46>

08005248 <_svfiprintf_r>:
 8005248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800524c:	461d      	mov	r5, r3
 800524e:	898b      	ldrh	r3, [r1, #12]
 8005250:	061f      	lsls	r7, r3, #24
 8005252:	b09d      	sub	sp, #116	; 0x74
 8005254:	4680      	mov	r8, r0
 8005256:	460c      	mov	r4, r1
 8005258:	4616      	mov	r6, r2
 800525a:	d50f      	bpl.n	800527c <_svfiprintf_r+0x34>
 800525c:	690b      	ldr	r3, [r1, #16]
 800525e:	b96b      	cbnz	r3, 800527c <_svfiprintf_r+0x34>
 8005260:	2140      	movs	r1, #64	; 0x40
 8005262:	f000 fad9 	bl	8005818 <_malloc_r>
 8005266:	6020      	str	r0, [r4, #0]
 8005268:	6120      	str	r0, [r4, #16]
 800526a:	b928      	cbnz	r0, 8005278 <_svfiprintf_r+0x30>
 800526c:	230c      	movs	r3, #12
 800526e:	f8c8 3000 	str.w	r3, [r8]
 8005272:	f04f 30ff 	mov.w	r0, #4294967295
 8005276:	e0c8      	b.n	800540a <_svfiprintf_r+0x1c2>
 8005278:	2340      	movs	r3, #64	; 0x40
 800527a:	6163      	str	r3, [r4, #20]
 800527c:	2300      	movs	r3, #0
 800527e:	9309      	str	r3, [sp, #36]	; 0x24
 8005280:	2320      	movs	r3, #32
 8005282:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005286:	2330      	movs	r3, #48	; 0x30
 8005288:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800528c:	9503      	str	r5, [sp, #12]
 800528e:	f04f 0b01 	mov.w	fp, #1
 8005292:	4637      	mov	r7, r6
 8005294:	463d      	mov	r5, r7
 8005296:	f815 3b01 	ldrb.w	r3, [r5], #1
 800529a:	b10b      	cbz	r3, 80052a0 <_svfiprintf_r+0x58>
 800529c:	2b25      	cmp	r3, #37	; 0x25
 800529e:	d13e      	bne.n	800531e <_svfiprintf_r+0xd6>
 80052a0:	ebb7 0a06 	subs.w	sl, r7, r6
 80052a4:	d00b      	beq.n	80052be <_svfiprintf_r+0x76>
 80052a6:	4653      	mov	r3, sl
 80052a8:	4632      	mov	r2, r6
 80052aa:	4621      	mov	r1, r4
 80052ac:	4640      	mov	r0, r8
 80052ae:	f7ff ff71 	bl	8005194 <__ssputs_r>
 80052b2:	3001      	adds	r0, #1
 80052b4:	f000 80a4 	beq.w	8005400 <_svfiprintf_r+0x1b8>
 80052b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ba:	4453      	add	r3, sl
 80052bc:	9309      	str	r3, [sp, #36]	; 0x24
 80052be:	783b      	ldrb	r3, [r7, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f000 809d 	beq.w	8005400 <_svfiprintf_r+0x1b8>
 80052c6:	2300      	movs	r3, #0
 80052c8:	f04f 32ff 	mov.w	r2, #4294967295
 80052cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052d0:	9304      	str	r3, [sp, #16]
 80052d2:	9307      	str	r3, [sp, #28]
 80052d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052d8:	931a      	str	r3, [sp, #104]	; 0x68
 80052da:	462f      	mov	r7, r5
 80052dc:	2205      	movs	r2, #5
 80052de:	f817 1b01 	ldrb.w	r1, [r7], #1
 80052e2:	4850      	ldr	r0, [pc, #320]	; (8005424 <_svfiprintf_r+0x1dc>)
 80052e4:	f7fa ff7c 	bl	80001e0 <memchr>
 80052e8:	9b04      	ldr	r3, [sp, #16]
 80052ea:	b9d0      	cbnz	r0, 8005322 <_svfiprintf_r+0xda>
 80052ec:	06d9      	lsls	r1, r3, #27
 80052ee:	bf44      	itt	mi
 80052f0:	2220      	movmi	r2, #32
 80052f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80052f6:	071a      	lsls	r2, r3, #28
 80052f8:	bf44      	itt	mi
 80052fa:	222b      	movmi	r2, #43	; 0x2b
 80052fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005300:	782a      	ldrb	r2, [r5, #0]
 8005302:	2a2a      	cmp	r2, #42	; 0x2a
 8005304:	d015      	beq.n	8005332 <_svfiprintf_r+0xea>
 8005306:	9a07      	ldr	r2, [sp, #28]
 8005308:	462f      	mov	r7, r5
 800530a:	2000      	movs	r0, #0
 800530c:	250a      	movs	r5, #10
 800530e:	4639      	mov	r1, r7
 8005310:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005314:	3b30      	subs	r3, #48	; 0x30
 8005316:	2b09      	cmp	r3, #9
 8005318:	d94d      	bls.n	80053b6 <_svfiprintf_r+0x16e>
 800531a:	b1b8      	cbz	r0, 800534c <_svfiprintf_r+0x104>
 800531c:	e00f      	b.n	800533e <_svfiprintf_r+0xf6>
 800531e:	462f      	mov	r7, r5
 8005320:	e7b8      	b.n	8005294 <_svfiprintf_r+0x4c>
 8005322:	4a40      	ldr	r2, [pc, #256]	; (8005424 <_svfiprintf_r+0x1dc>)
 8005324:	1a80      	subs	r0, r0, r2
 8005326:	fa0b f000 	lsl.w	r0, fp, r0
 800532a:	4318      	orrs	r0, r3
 800532c:	9004      	str	r0, [sp, #16]
 800532e:	463d      	mov	r5, r7
 8005330:	e7d3      	b.n	80052da <_svfiprintf_r+0x92>
 8005332:	9a03      	ldr	r2, [sp, #12]
 8005334:	1d11      	adds	r1, r2, #4
 8005336:	6812      	ldr	r2, [r2, #0]
 8005338:	9103      	str	r1, [sp, #12]
 800533a:	2a00      	cmp	r2, #0
 800533c:	db01      	blt.n	8005342 <_svfiprintf_r+0xfa>
 800533e:	9207      	str	r2, [sp, #28]
 8005340:	e004      	b.n	800534c <_svfiprintf_r+0x104>
 8005342:	4252      	negs	r2, r2
 8005344:	f043 0302 	orr.w	r3, r3, #2
 8005348:	9207      	str	r2, [sp, #28]
 800534a:	9304      	str	r3, [sp, #16]
 800534c:	783b      	ldrb	r3, [r7, #0]
 800534e:	2b2e      	cmp	r3, #46	; 0x2e
 8005350:	d10c      	bne.n	800536c <_svfiprintf_r+0x124>
 8005352:	787b      	ldrb	r3, [r7, #1]
 8005354:	2b2a      	cmp	r3, #42	; 0x2a
 8005356:	d133      	bne.n	80053c0 <_svfiprintf_r+0x178>
 8005358:	9b03      	ldr	r3, [sp, #12]
 800535a:	1d1a      	adds	r2, r3, #4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	9203      	str	r2, [sp, #12]
 8005360:	2b00      	cmp	r3, #0
 8005362:	bfb8      	it	lt
 8005364:	f04f 33ff 	movlt.w	r3, #4294967295
 8005368:	3702      	adds	r7, #2
 800536a:	9305      	str	r3, [sp, #20]
 800536c:	4d2e      	ldr	r5, [pc, #184]	; (8005428 <_svfiprintf_r+0x1e0>)
 800536e:	7839      	ldrb	r1, [r7, #0]
 8005370:	2203      	movs	r2, #3
 8005372:	4628      	mov	r0, r5
 8005374:	f7fa ff34 	bl	80001e0 <memchr>
 8005378:	b138      	cbz	r0, 800538a <_svfiprintf_r+0x142>
 800537a:	2340      	movs	r3, #64	; 0x40
 800537c:	1b40      	subs	r0, r0, r5
 800537e:	fa03 f000 	lsl.w	r0, r3, r0
 8005382:	9b04      	ldr	r3, [sp, #16]
 8005384:	4303      	orrs	r3, r0
 8005386:	3701      	adds	r7, #1
 8005388:	9304      	str	r3, [sp, #16]
 800538a:	7839      	ldrb	r1, [r7, #0]
 800538c:	4827      	ldr	r0, [pc, #156]	; (800542c <_svfiprintf_r+0x1e4>)
 800538e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005392:	2206      	movs	r2, #6
 8005394:	1c7e      	adds	r6, r7, #1
 8005396:	f7fa ff23 	bl	80001e0 <memchr>
 800539a:	2800      	cmp	r0, #0
 800539c:	d038      	beq.n	8005410 <_svfiprintf_r+0x1c8>
 800539e:	4b24      	ldr	r3, [pc, #144]	; (8005430 <_svfiprintf_r+0x1e8>)
 80053a0:	bb13      	cbnz	r3, 80053e8 <_svfiprintf_r+0x1a0>
 80053a2:	9b03      	ldr	r3, [sp, #12]
 80053a4:	3307      	adds	r3, #7
 80053a6:	f023 0307 	bic.w	r3, r3, #7
 80053aa:	3308      	adds	r3, #8
 80053ac:	9303      	str	r3, [sp, #12]
 80053ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b0:	444b      	add	r3, r9
 80053b2:	9309      	str	r3, [sp, #36]	; 0x24
 80053b4:	e76d      	b.n	8005292 <_svfiprintf_r+0x4a>
 80053b6:	fb05 3202 	mla	r2, r5, r2, r3
 80053ba:	2001      	movs	r0, #1
 80053bc:	460f      	mov	r7, r1
 80053be:	e7a6      	b.n	800530e <_svfiprintf_r+0xc6>
 80053c0:	2300      	movs	r3, #0
 80053c2:	3701      	adds	r7, #1
 80053c4:	9305      	str	r3, [sp, #20]
 80053c6:	4619      	mov	r1, r3
 80053c8:	250a      	movs	r5, #10
 80053ca:	4638      	mov	r0, r7
 80053cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053d0:	3a30      	subs	r2, #48	; 0x30
 80053d2:	2a09      	cmp	r2, #9
 80053d4:	d903      	bls.n	80053de <_svfiprintf_r+0x196>
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0c8      	beq.n	800536c <_svfiprintf_r+0x124>
 80053da:	9105      	str	r1, [sp, #20]
 80053dc:	e7c6      	b.n	800536c <_svfiprintf_r+0x124>
 80053de:	fb05 2101 	mla	r1, r5, r1, r2
 80053e2:	2301      	movs	r3, #1
 80053e4:	4607      	mov	r7, r0
 80053e6:	e7f0      	b.n	80053ca <_svfiprintf_r+0x182>
 80053e8:	ab03      	add	r3, sp, #12
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	4622      	mov	r2, r4
 80053ee:	4b11      	ldr	r3, [pc, #68]	; (8005434 <_svfiprintf_r+0x1ec>)
 80053f0:	a904      	add	r1, sp, #16
 80053f2:	4640      	mov	r0, r8
 80053f4:	f3af 8000 	nop.w
 80053f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80053fc:	4681      	mov	r9, r0
 80053fe:	d1d6      	bne.n	80053ae <_svfiprintf_r+0x166>
 8005400:	89a3      	ldrh	r3, [r4, #12]
 8005402:	065b      	lsls	r3, r3, #25
 8005404:	f53f af35 	bmi.w	8005272 <_svfiprintf_r+0x2a>
 8005408:	9809      	ldr	r0, [sp, #36]	; 0x24
 800540a:	b01d      	add	sp, #116	; 0x74
 800540c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005410:	ab03      	add	r3, sp, #12
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	4622      	mov	r2, r4
 8005416:	4b07      	ldr	r3, [pc, #28]	; (8005434 <_svfiprintf_r+0x1ec>)
 8005418:	a904      	add	r1, sp, #16
 800541a:	4640      	mov	r0, r8
 800541c:	f000 f882 	bl	8005524 <_printf_i>
 8005420:	e7ea      	b.n	80053f8 <_svfiprintf_r+0x1b0>
 8005422:	bf00      	nop
 8005424:	080059f0 	.word	0x080059f0
 8005428:	080059f6 	.word	0x080059f6
 800542c:	080059fa 	.word	0x080059fa
 8005430:	00000000 	.word	0x00000000
 8005434:	08005195 	.word	0x08005195

08005438 <_printf_common>:
 8005438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800543c:	4691      	mov	r9, r2
 800543e:	461f      	mov	r7, r3
 8005440:	688a      	ldr	r2, [r1, #8]
 8005442:	690b      	ldr	r3, [r1, #16]
 8005444:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005448:	4293      	cmp	r3, r2
 800544a:	bfb8      	it	lt
 800544c:	4613      	movlt	r3, r2
 800544e:	f8c9 3000 	str.w	r3, [r9]
 8005452:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005456:	4606      	mov	r6, r0
 8005458:	460c      	mov	r4, r1
 800545a:	b112      	cbz	r2, 8005462 <_printf_common+0x2a>
 800545c:	3301      	adds	r3, #1
 800545e:	f8c9 3000 	str.w	r3, [r9]
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	0699      	lsls	r1, r3, #26
 8005466:	bf42      	ittt	mi
 8005468:	f8d9 3000 	ldrmi.w	r3, [r9]
 800546c:	3302      	addmi	r3, #2
 800546e:	f8c9 3000 	strmi.w	r3, [r9]
 8005472:	6825      	ldr	r5, [r4, #0]
 8005474:	f015 0506 	ands.w	r5, r5, #6
 8005478:	d107      	bne.n	800548a <_printf_common+0x52>
 800547a:	f104 0a19 	add.w	sl, r4, #25
 800547e:	68e3      	ldr	r3, [r4, #12]
 8005480:	f8d9 2000 	ldr.w	r2, [r9]
 8005484:	1a9b      	subs	r3, r3, r2
 8005486:	42ab      	cmp	r3, r5
 8005488:	dc28      	bgt.n	80054dc <_printf_common+0xa4>
 800548a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800548e:	6822      	ldr	r2, [r4, #0]
 8005490:	3300      	adds	r3, #0
 8005492:	bf18      	it	ne
 8005494:	2301      	movne	r3, #1
 8005496:	0692      	lsls	r2, r2, #26
 8005498:	d42d      	bmi.n	80054f6 <_printf_common+0xbe>
 800549a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800549e:	4639      	mov	r1, r7
 80054a0:	4630      	mov	r0, r6
 80054a2:	47c0      	blx	r8
 80054a4:	3001      	adds	r0, #1
 80054a6:	d020      	beq.n	80054ea <_printf_common+0xb2>
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	68e5      	ldr	r5, [r4, #12]
 80054ac:	f8d9 2000 	ldr.w	r2, [r9]
 80054b0:	f003 0306 	and.w	r3, r3, #6
 80054b4:	2b04      	cmp	r3, #4
 80054b6:	bf08      	it	eq
 80054b8:	1aad      	subeq	r5, r5, r2
 80054ba:	68a3      	ldr	r3, [r4, #8]
 80054bc:	6922      	ldr	r2, [r4, #16]
 80054be:	bf0c      	ite	eq
 80054c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054c4:	2500      	movne	r5, #0
 80054c6:	4293      	cmp	r3, r2
 80054c8:	bfc4      	itt	gt
 80054ca:	1a9b      	subgt	r3, r3, r2
 80054cc:	18ed      	addgt	r5, r5, r3
 80054ce:	f04f 0900 	mov.w	r9, #0
 80054d2:	341a      	adds	r4, #26
 80054d4:	454d      	cmp	r5, r9
 80054d6:	d11a      	bne.n	800550e <_printf_common+0xd6>
 80054d8:	2000      	movs	r0, #0
 80054da:	e008      	b.n	80054ee <_printf_common+0xb6>
 80054dc:	2301      	movs	r3, #1
 80054de:	4652      	mov	r2, sl
 80054e0:	4639      	mov	r1, r7
 80054e2:	4630      	mov	r0, r6
 80054e4:	47c0      	blx	r8
 80054e6:	3001      	adds	r0, #1
 80054e8:	d103      	bne.n	80054f2 <_printf_common+0xba>
 80054ea:	f04f 30ff 	mov.w	r0, #4294967295
 80054ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f2:	3501      	adds	r5, #1
 80054f4:	e7c3      	b.n	800547e <_printf_common+0x46>
 80054f6:	18e1      	adds	r1, r4, r3
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	2030      	movs	r0, #48	; 0x30
 80054fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005500:	4422      	add	r2, r4
 8005502:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005506:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800550a:	3302      	adds	r3, #2
 800550c:	e7c5      	b.n	800549a <_printf_common+0x62>
 800550e:	2301      	movs	r3, #1
 8005510:	4622      	mov	r2, r4
 8005512:	4639      	mov	r1, r7
 8005514:	4630      	mov	r0, r6
 8005516:	47c0      	blx	r8
 8005518:	3001      	adds	r0, #1
 800551a:	d0e6      	beq.n	80054ea <_printf_common+0xb2>
 800551c:	f109 0901 	add.w	r9, r9, #1
 8005520:	e7d8      	b.n	80054d4 <_printf_common+0x9c>
	...

08005524 <_printf_i>:
 8005524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005528:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800552c:	460c      	mov	r4, r1
 800552e:	7e09      	ldrb	r1, [r1, #24]
 8005530:	b085      	sub	sp, #20
 8005532:	296e      	cmp	r1, #110	; 0x6e
 8005534:	4617      	mov	r7, r2
 8005536:	4606      	mov	r6, r0
 8005538:	4698      	mov	r8, r3
 800553a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800553c:	f000 80b3 	beq.w	80056a6 <_printf_i+0x182>
 8005540:	d822      	bhi.n	8005588 <_printf_i+0x64>
 8005542:	2963      	cmp	r1, #99	; 0x63
 8005544:	d036      	beq.n	80055b4 <_printf_i+0x90>
 8005546:	d80a      	bhi.n	800555e <_printf_i+0x3a>
 8005548:	2900      	cmp	r1, #0
 800554a:	f000 80b9 	beq.w	80056c0 <_printf_i+0x19c>
 800554e:	2958      	cmp	r1, #88	; 0x58
 8005550:	f000 8083 	beq.w	800565a <_printf_i+0x136>
 8005554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005558:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800555c:	e032      	b.n	80055c4 <_printf_i+0xa0>
 800555e:	2964      	cmp	r1, #100	; 0x64
 8005560:	d001      	beq.n	8005566 <_printf_i+0x42>
 8005562:	2969      	cmp	r1, #105	; 0x69
 8005564:	d1f6      	bne.n	8005554 <_printf_i+0x30>
 8005566:	6820      	ldr	r0, [r4, #0]
 8005568:	6813      	ldr	r3, [r2, #0]
 800556a:	0605      	lsls	r5, r0, #24
 800556c:	f103 0104 	add.w	r1, r3, #4
 8005570:	d52a      	bpl.n	80055c8 <_printf_i+0xa4>
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6011      	str	r1, [r2, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	da03      	bge.n	8005582 <_printf_i+0x5e>
 800557a:	222d      	movs	r2, #45	; 0x2d
 800557c:	425b      	negs	r3, r3
 800557e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005582:	486f      	ldr	r0, [pc, #444]	; (8005740 <_printf_i+0x21c>)
 8005584:	220a      	movs	r2, #10
 8005586:	e039      	b.n	80055fc <_printf_i+0xd8>
 8005588:	2973      	cmp	r1, #115	; 0x73
 800558a:	f000 809d 	beq.w	80056c8 <_printf_i+0x1a4>
 800558e:	d808      	bhi.n	80055a2 <_printf_i+0x7e>
 8005590:	296f      	cmp	r1, #111	; 0x6f
 8005592:	d020      	beq.n	80055d6 <_printf_i+0xb2>
 8005594:	2970      	cmp	r1, #112	; 0x70
 8005596:	d1dd      	bne.n	8005554 <_printf_i+0x30>
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	f043 0320 	orr.w	r3, r3, #32
 800559e:	6023      	str	r3, [r4, #0]
 80055a0:	e003      	b.n	80055aa <_printf_i+0x86>
 80055a2:	2975      	cmp	r1, #117	; 0x75
 80055a4:	d017      	beq.n	80055d6 <_printf_i+0xb2>
 80055a6:	2978      	cmp	r1, #120	; 0x78
 80055a8:	d1d4      	bne.n	8005554 <_printf_i+0x30>
 80055aa:	2378      	movs	r3, #120	; 0x78
 80055ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055b0:	4864      	ldr	r0, [pc, #400]	; (8005744 <_printf_i+0x220>)
 80055b2:	e055      	b.n	8005660 <_printf_i+0x13c>
 80055b4:	6813      	ldr	r3, [r2, #0]
 80055b6:	1d19      	adds	r1, r3, #4
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6011      	str	r1, [r2, #0]
 80055bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055c4:	2301      	movs	r3, #1
 80055c6:	e08c      	b.n	80056e2 <_printf_i+0x1be>
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6011      	str	r1, [r2, #0]
 80055cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055d0:	bf18      	it	ne
 80055d2:	b21b      	sxthne	r3, r3
 80055d4:	e7cf      	b.n	8005576 <_printf_i+0x52>
 80055d6:	6813      	ldr	r3, [r2, #0]
 80055d8:	6825      	ldr	r5, [r4, #0]
 80055da:	1d18      	adds	r0, r3, #4
 80055dc:	6010      	str	r0, [r2, #0]
 80055de:	0628      	lsls	r0, r5, #24
 80055e0:	d501      	bpl.n	80055e6 <_printf_i+0xc2>
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	e002      	b.n	80055ec <_printf_i+0xc8>
 80055e6:	0668      	lsls	r0, r5, #25
 80055e8:	d5fb      	bpl.n	80055e2 <_printf_i+0xbe>
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	4854      	ldr	r0, [pc, #336]	; (8005740 <_printf_i+0x21c>)
 80055ee:	296f      	cmp	r1, #111	; 0x6f
 80055f0:	bf14      	ite	ne
 80055f2:	220a      	movne	r2, #10
 80055f4:	2208      	moveq	r2, #8
 80055f6:	2100      	movs	r1, #0
 80055f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055fc:	6865      	ldr	r5, [r4, #4]
 80055fe:	60a5      	str	r5, [r4, #8]
 8005600:	2d00      	cmp	r5, #0
 8005602:	f2c0 8095 	blt.w	8005730 <_printf_i+0x20c>
 8005606:	6821      	ldr	r1, [r4, #0]
 8005608:	f021 0104 	bic.w	r1, r1, #4
 800560c:	6021      	str	r1, [r4, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d13d      	bne.n	800568e <_printf_i+0x16a>
 8005612:	2d00      	cmp	r5, #0
 8005614:	f040 808e 	bne.w	8005734 <_printf_i+0x210>
 8005618:	4665      	mov	r5, ip
 800561a:	2a08      	cmp	r2, #8
 800561c:	d10b      	bne.n	8005636 <_printf_i+0x112>
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	07db      	lsls	r3, r3, #31
 8005622:	d508      	bpl.n	8005636 <_printf_i+0x112>
 8005624:	6923      	ldr	r3, [r4, #16]
 8005626:	6862      	ldr	r2, [r4, #4]
 8005628:	429a      	cmp	r2, r3
 800562a:	bfde      	ittt	le
 800562c:	2330      	movle	r3, #48	; 0x30
 800562e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005632:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005636:	ebac 0305 	sub.w	r3, ip, r5
 800563a:	6123      	str	r3, [r4, #16]
 800563c:	f8cd 8000 	str.w	r8, [sp]
 8005640:	463b      	mov	r3, r7
 8005642:	aa03      	add	r2, sp, #12
 8005644:	4621      	mov	r1, r4
 8005646:	4630      	mov	r0, r6
 8005648:	f7ff fef6 	bl	8005438 <_printf_common>
 800564c:	3001      	adds	r0, #1
 800564e:	d14d      	bne.n	80056ec <_printf_i+0x1c8>
 8005650:	f04f 30ff 	mov.w	r0, #4294967295
 8005654:	b005      	add	sp, #20
 8005656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800565a:	4839      	ldr	r0, [pc, #228]	; (8005740 <_printf_i+0x21c>)
 800565c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005660:	6813      	ldr	r3, [r2, #0]
 8005662:	6821      	ldr	r1, [r4, #0]
 8005664:	1d1d      	adds	r5, r3, #4
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6015      	str	r5, [r2, #0]
 800566a:	060a      	lsls	r2, r1, #24
 800566c:	d50b      	bpl.n	8005686 <_printf_i+0x162>
 800566e:	07ca      	lsls	r2, r1, #31
 8005670:	bf44      	itt	mi
 8005672:	f041 0120 	orrmi.w	r1, r1, #32
 8005676:	6021      	strmi	r1, [r4, #0]
 8005678:	b91b      	cbnz	r3, 8005682 <_printf_i+0x15e>
 800567a:	6822      	ldr	r2, [r4, #0]
 800567c:	f022 0220 	bic.w	r2, r2, #32
 8005680:	6022      	str	r2, [r4, #0]
 8005682:	2210      	movs	r2, #16
 8005684:	e7b7      	b.n	80055f6 <_printf_i+0xd2>
 8005686:	064d      	lsls	r5, r1, #25
 8005688:	bf48      	it	mi
 800568a:	b29b      	uxthmi	r3, r3
 800568c:	e7ef      	b.n	800566e <_printf_i+0x14a>
 800568e:	4665      	mov	r5, ip
 8005690:	fbb3 f1f2 	udiv	r1, r3, r2
 8005694:	fb02 3311 	mls	r3, r2, r1, r3
 8005698:	5cc3      	ldrb	r3, [r0, r3]
 800569a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800569e:	460b      	mov	r3, r1
 80056a0:	2900      	cmp	r1, #0
 80056a2:	d1f5      	bne.n	8005690 <_printf_i+0x16c>
 80056a4:	e7b9      	b.n	800561a <_printf_i+0xf6>
 80056a6:	6813      	ldr	r3, [r2, #0]
 80056a8:	6825      	ldr	r5, [r4, #0]
 80056aa:	6961      	ldr	r1, [r4, #20]
 80056ac:	1d18      	adds	r0, r3, #4
 80056ae:	6010      	str	r0, [r2, #0]
 80056b0:	0628      	lsls	r0, r5, #24
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	d501      	bpl.n	80056ba <_printf_i+0x196>
 80056b6:	6019      	str	r1, [r3, #0]
 80056b8:	e002      	b.n	80056c0 <_printf_i+0x19c>
 80056ba:	066a      	lsls	r2, r5, #25
 80056bc:	d5fb      	bpl.n	80056b6 <_printf_i+0x192>
 80056be:	8019      	strh	r1, [r3, #0]
 80056c0:	2300      	movs	r3, #0
 80056c2:	6123      	str	r3, [r4, #16]
 80056c4:	4665      	mov	r5, ip
 80056c6:	e7b9      	b.n	800563c <_printf_i+0x118>
 80056c8:	6813      	ldr	r3, [r2, #0]
 80056ca:	1d19      	adds	r1, r3, #4
 80056cc:	6011      	str	r1, [r2, #0]
 80056ce:	681d      	ldr	r5, [r3, #0]
 80056d0:	6862      	ldr	r2, [r4, #4]
 80056d2:	2100      	movs	r1, #0
 80056d4:	4628      	mov	r0, r5
 80056d6:	f7fa fd83 	bl	80001e0 <memchr>
 80056da:	b108      	cbz	r0, 80056e0 <_printf_i+0x1bc>
 80056dc:	1b40      	subs	r0, r0, r5
 80056de:	6060      	str	r0, [r4, #4]
 80056e0:	6863      	ldr	r3, [r4, #4]
 80056e2:	6123      	str	r3, [r4, #16]
 80056e4:	2300      	movs	r3, #0
 80056e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056ea:	e7a7      	b.n	800563c <_printf_i+0x118>
 80056ec:	6923      	ldr	r3, [r4, #16]
 80056ee:	462a      	mov	r2, r5
 80056f0:	4639      	mov	r1, r7
 80056f2:	4630      	mov	r0, r6
 80056f4:	47c0      	blx	r8
 80056f6:	3001      	adds	r0, #1
 80056f8:	d0aa      	beq.n	8005650 <_printf_i+0x12c>
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	079b      	lsls	r3, r3, #30
 80056fe:	d413      	bmi.n	8005728 <_printf_i+0x204>
 8005700:	68e0      	ldr	r0, [r4, #12]
 8005702:	9b03      	ldr	r3, [sp, #12]
 8005704:	4298      	cmp	r0, r3
 8005706:	bfb8      	it	lt
 8005708:	4618      	movlt	r0, r3
 800570a:	e7a3      	b.n	8005654 <_printf_i+0x130>
 800570c:	2301      	movs	r3, #1
 800570e:	464a      	mov	r2, r9
 8005710:	4639      	mov	r1, r7
 8005712:	4630      	mov	r0, r6
 8005714:	47c0      	blx	r8
 8005716:	3001      	adds	r0, #1
 8005718:	d09a      	beq.n	8005650 <_printf_i+0x12c>
 800571a:	3501      	adds	r5, #1
 800571c:	68e3      	ldr	r3, [r4, #12]
 800571e:	9a03      	ldr	r2, [sp, #12]
 8005720:	1a9b      	subs	r3, r3, r2
 8005722:	42ab      	cmp	r3, r5
 8005724:	dcf2      	bgt.n	800570c <_printf_i+0x1e8>
 8005726:	e7eb      	b.n	8005700 <_printf_i+0x1dc>
 8005728:	2500      	movs	r5, #0
 800572a:	f104 0919 	add.w	r9, r4, #25
 800572e:	e7f5      	b.n	800571c <_printf_i+0x1f8>
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1ac      	bne.n	800568e <_printf_i+0x16a>
 8005734:	7803      	ldrb	r3, [r0, #0]
 8005736:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800573a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800573e:	e76c      	b.n	800561a <_printf_i+0xf6>
 8005740:	08005a01 	.word	0x08005a01
 8005744:	08005a12 	.word	0x08005a12

08005748 <memmove>:
 8005748:	4288      	cmp	r0, r1
 800574a:	b510      	push	{r4, lr}
 800574c:	eb01 0302 	add.w	r3, r1, r2
 8005750:	d807      	bhi.n	8005762 <memmove+0x1a>
 8005752:	1e42      	subs	r2, r0, #1
 8005754:	4299      	cmp	r1, r3
 8005756:	d00a      	beq.n	800576e <memmove+0x26>
 8005758:	f811 4b01 	ldrb.w	r4, [r1], #1
 800575c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005760:	e7f8      	b.n	8005754 <memmove+0xc>
 8005762:	4283      	cmp	r3, r0
 8005764:	d9f5      	bls.n	8005752 <memmove+0xa>
 8005766:	1881      	adds	r1, r0, r2
 8005768:	1ad2      	subs	r2, r2, r3
 800576a:	42d3      	cmn	r3, r2
 800576c:	d100      	bne.n	8005770 <memmove+0x28>
 800576e:	bd10      	pop	{r4, pc}
 8005770:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005774:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005778:	e7f7      	b.n	800576a <memmove+0x22>
	...

0800577c <_free_r>:
 800577c:	b538      	push	{r3, r4, r5, lr}
 800577e:	4605      	mov	r5, r0
 8005780:	2900      	cmp	r1, #0
 8005782:	d045      	beq.n	8005810 <_free_r+0x94>
 8005784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005788:	1f0c      	subs	r4, r1, #4
 800578a:	2b00      	cmp	r3, #0
 800578c:	bfb8      	it	lt
 800578e:	18e4      	addlt	r4, r4, r3
 8005790:	f000 f8d2 	bl	8005938 <__malloc_lock>
 8005794:	4a1f      	ldr	r2, [pc, #124]	; (8005814 <_free_r+0x98>)
 8005796:	6813      	ldr	r3, [r2, #0]
 8005798:	4610      	mov	r0, r2
 800579a:	b933      	cbnz	r3, 80057aa <_free_r+0x2e>
 800579c:	6063      	str	r3, [r4, #4]
 800579e:	6014      	str	r4, [r2, #0]
 80057a0:	4628      	mov	r0, r5
 80057a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057a6:	f000 b8c8 	b.w	800593a <__malloc_unlock>
 80057aa:	42a3      	cmp	r3, r4
 80057ac:	d90c      	bls.n	80057c8 <_free_r+0x4c>
 80057ae:	6821      	ldr	r1, [r4, #0]
 80057b0:	1862      	adds	r2, r4, r1
 80057b2:	4293      	cmp	r3, r2
 80057b4:	bf04      	itt	eq
 80057b6:	681a      	ldreq	r2, [r3, #0]
 80057b8:	685b      	ldreq	r3, [r3, #4]
 80057ba:	6063      	str	r3, [r4, #4]
 80057bc:	bf04      	itt	eq
 80057be:	1852      	addeq	r2, r2, r1
 80057c0:	6022      	streq	r2, [r4, #0]
 80057c2:	6004      	str	r4, [r0, #0]
 80057c4:	e7ec      	b.n	80057a0 <_free_r+0x24>
 80057c6:	4613      	mov	r3, r2
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	b10a      	cbz	r2, 80057d0 <_free_r+0x54>
 80057cc:	42a2      	cmp	r2, r4
 80057ce:	d9fa      	bls.n	80057c6 <_free_r+0x4a>
 80057d0:	6819      	ldr	r1, [r3, #0]
 80057d2:	1858      	adds	r0, r3, r1
 80057d4:	42a0      	cmp	r0, r4
 80057d6:	d10b      	bne.n	80057f0 <_free_r+0x74>
 80057d8:	6820      	ldr	r0, [r4, #0]
 80057da:	4401      	add	r1, r0
 80057dc:	1858      	adds	r0, r3, r1
 80057de:	4282      	cmp	r2, r0
 80057e0:	6019      	str	r1, [r3, #0]
 80057e2:	d1dd      	bne.n	80057a0 <_free_r+0x24>
 80057e4:	6810      	ldr	r0, [r2, #0]
 80057e6:	6852      	ldr	r2, [r2, #4]
 80057e8:	605a      	str	r2, [r3, #4]
 80057ea:	4401      	add	r1, r0
 80057ec:	6019      	str	r1, [r3, #0]
 80057ee:	e7d7      	b.n	80057a0 <_free_r+0x24>
 80057f0:	d902      	bls.n	80057f8 <_free_r+0x7c>
 80057f2:	230c      	movs	r3, #12
 80057f4:	602b      	str	r3, [r5, #0]
 80057f6:	e7d3      	b.n	80057a0 <_free_r+0x24>
 80057f8:	6820      	ldr	r0, [r4, #0]
 80057fa:	1821      	adds	r1, r4, r0
 80057fc:	428a      	cmp	r2, r1
 80057fe:	bf04      	itt	eq
 8005800:	6811      	ldreq	r1, [r2, #0]
 8005802:	6852      	ldreq	r2, [r2, #4]
 8005804:	6062      	str	r2, [r4, #4]
 8005806:	bf04      	itt	eq
 8005808:	1809      	addeq	r1, r1, r0
 800580a:	6021      	streq	r1, [r4, #0]
 800580c:	605c      	str	r4, [r3, #4]
 800580e:	e7c7      	b.n	80057a0 <_free_r+0x24>
 8005810:	bd38      	pop	{r3, r4, r5, pc}
 8005812:	bf00      	nop
 8005814:	20004034 	.word	0x20004034

08005818 <_malloc_r>:
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	1ccd      	adds	r5, r1, #3
 800581c:	f025 0503 	bic.w	r5, r5, #3
 8005820:	3508      	adds	r5, #8
 8005822:	2d0c      	cmp	r5, #12
 8005824:	bf38      	it	cc
 8005826:	250c      	movcc	r5, #12
 8005828:	2d00      	cmp	r5, #0
 800582a:	4606      	mov	r6, r0
 800582c:	db01      	blt.n	8005832 <_malloc_r+0x1a>
 800582e:	42a9      	cmp	r1, r5
 8005830:	d903      	bls.n	800583a <_malloc_r+0x22>
 8005832:	230c      	movs	r3, #12
 8005834:	6033      	str	r3, [r6, #0]
 8005836:	2000      	movs	r0, #0
 8005838:	bd70      	pop	{r4, r5, r6, pc}
 800583a:	f000 f87d 	bl	8005938 <__malloc_lock>
 800583e:	4a21      	ldr	r2, [pc, #132]	; (80058c4 <_malloc_r+0xac>)
 8005840:	6814      	ldr	r4, [r2, #0]
 8005842:	4621      	mov	r1, r4
 8005844:	b991      	cbnz	r1, 800586c <_malloc_r+0x54>
 8005846:	4c20      	ldr	r4, [pc, #128]	; (80058c8 <_malloc_r+0xb0>)
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	b91b      	cbnz	r3, 8005854 <_malloc_r+0x3c>
 800584c:	4630      	mov	r0, r6
 800584e:	f000 f863 	bl	8005918 <_sbrk_r>
 8005852:	6020      	str	r0, [r4, #0]
 8005854:	4629      	mov	r1, r5
 8005856:	4630      	mov	r0, r6
 8005858:	f000 f85e 	bl	8005918 <_sbrk_r>
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	d124      	bne.n	80058aa <_malloc_r+0x92>
 8005860:	230c      	movs	r3, #12
 8005862:	6033      	str	r3, [r6, #0]
 8005864:	4630      	mov	r0, r6
 8005866:	f000 f868 	bl	800593a <__malloc_unlock>
 800586a:	e7e4      	b.n	8005836 <_malloc_r+0x1e>
 800586c:	680b      	ldr	r3, [r1, #0]
 800586e:	1b5b      	subs	r3, r3, r5
 8005870:	d418      	bmi.n	80058a4 <_malloc_r+0x8c>
 8005872:	2b0b      	cmp	r3, #11
 8005874:	d90f      	bls.n	8005896 <_malloc_r+0x7e>
 8005876:	600b      	str	r3, [r1, #0]
 8005878:	50cd      	str	r5, [r1, r3]
 800587a:	18cc      	adds	r4, r1, r3
 800587c:	4630      	mov	r0, r6
 800587e:	f000 f85c 	bl	800593a <__malloc_unlock>
 8005882:	f104 000b 	add.w	r0, r4, #11
 8005886:	1d23      	adds	r3, r4, #4
 8005888:	f020 0007 	bic.w	r0, r0, #7
 800588c:	1ac3      	subs	r3, r0, r3
 800588e:	d0d3      	beq.n	8005838 <_malloc_r+0x20>
 8005890:	425a      	negs	r2, r3
 8005892:	50e2      	str	r2, [r4, r3]
 8005894:	e7d0      	b.n	8005838 <_malloc_r+0x20>
 8005896:	428c      	cmp	r4, r1
 8005898:	684b      	ldr	r3, [r1, #4]
 800589a:	bf16      	itet	ne
 800589c:	6063      	strne	r3, [r4, #4]
 800589e:	6013      	streq	r3, [r2, #0]
 80058a0:	460c      	movne	r4, r1
 80058a2:	e7eb      	b.n	800587c <_malloc_r+0x64>
 80058a4:	460c      	mov	r4, r1
 80058a6:	6849      	ldr	r1, [r1, #4]
 80058a8:	e7cc      	b.n	8005844 <_malloc_r+0x2c>
 80058aa:	1cc4      	adds	r4, r0, #3
 80058ac:	f024 0403 	bic.w	r4, r4, #3
 80058b0:	42a0      	cmp	r0, r4
 80058b2:	d005      	beq.n	80058c0 <_malloc_r+0xa8>
 80058b4:	1a21      	subs	r1, r4, r0
 80058b6:	4630      	mov	r0, r6
 80058b8:	f000 f82e 	bl	8005918 <_sbrk_r>
 80058bc:	3001      	adds	r0, #1
 80058be:	d0cf      	beq.n	8005860 <_malloc_r+0x48>
 80058c0:	6025      	str	r5, [r4, #0]
 80058c2:	e7db      	b.n	800587c <_malloc_r+0x64>
 80058c4:	20004034 	.word	0x20004034
 80058c8:	20004038 	.word	0x20004038

080058cc <_realloc_r>:
 80058cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ce:	4607      	mov	r7, r0
 80058d0:	4614      	mov	r4, r2
 80058d2:	460e      	mov	r6, r1
 80058d4:	b921      	cbnz	r1, 80058e0 <_realloc_r+0x14>
 80058d6:	4611      	mov	r1, r2
 80058d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80058dc:	f7ff bf9c 	b.w	8005818 <_malloc_r>
 80058e0:	b922      	cbnz	r2, 80058ec <_realloc_r+0x20>
 80058e2:	f7ff ff4b 	bl	800577c <_free_r>
 80058e6:	4625      	mov	r5, r4
 80058e8:	4628      	mov	r0, r5
 80058ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058ec:	f000 f826 	bl	800593c <_malloc_usable_size_r>
 80058f0:	42a0      	cmp	r0, r4
 80058f2:	d20f      	bcs.n	8005914 <_realloc_r+0x48>
 80058f4:	4621      	mov	r1, r4
 80058f6:	4638      	mov	r0, r7
 80058f8:	f7ff ff8e 	bl	8005818 <_malloc_r>
 80058fc:	4605      	mov	r5, r0
 80058fe:	2800      	cmp	r0, #0
 8005900:	d0f2      	beq.n	80058e8 <_realloc_r+0x1c>
 8005902:	4631      	mov	r1, r6
 8005904:	4622      	mov	r2, r4
 8005906:	f7ff fbfd 	bl	8005104 <memcpy>
 800590a:	4631      	mov	r1, r6
 800590c:	4638      	mov	r0, r7
 800590e:	f7ff ff35 	bl	800577c <_free_r>
 8005912:	e7e9      	b.n	80058e8 <_realloc_r+0x1c>
 8005914:	4635      	mov	r5, r6
 8005916:	e7e7      	b.n	80058e8 <_realloc_r+0x1c>

08005918 <_sbrk_r>:
 8005918:	b538      	push	{r3, r4, r5, lr}
 800591a:	4c06      	ldr	r4, [pc, #24]	; (8005934 <_sbrk_r+0x1c>)
 800591c:	2300      	movs	r3, #0
 800591e:	4605      	mov	r5, r0
 8005920:	4608      	mov	r0, r1
 8005922:	6023      	str	r3, [r4, #0]
 8005924:	f7fb f912 	bl	8000b4c <_sbrk>
 8005928:	1c43      	adds	r3, r0, #1
 800592a:	d102      	bne.n	8005932 <_sbrk_r+0x1a>
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	b103      	cbz	r3, 8005932 <_sbrk_r+0x1a>
 8005930:	602b      	str	r3, [r5, #0]
 8005932:	bd38      	pop	{r3, r4, r5, pc}
 8005934:	200040cc 	.word	0x200040cc

08005938 <__malloc_lock>:
 8005938:	4770      	bx	lr

0800593a <__malloc_unlock>:
 800593a:	4770      	bx	lr

0800593c <_malloc_usable_size_r>:
 800593c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005940:	1f18      	subs	r0, r3, #4
 8005942:	2b00      	cmp	r3, #0
 8005944:	bfbc      	itt	lt
 8005946:	580b      	ldrlt	r3, [r1, r0]
 8005948:	18c0      	addlt	r0, r0, r3
 800594a:	4770      	bx	lr

0800594c <_init>:
 800594c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594e:	bf00      	nop
 8005950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005952:	bc08      	pop	{r3}
 8005954:	469e      	mov	lr, r3
 8005956:	4770      	bx	lr

08005958 <_fini>:
 8005958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595a:	bf00      	nop
 800595c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800595e:	bc08      	pop	{r3}
 8005960:	469e      	mov	lr, r3
 8005962:	4770      	bx	lr
