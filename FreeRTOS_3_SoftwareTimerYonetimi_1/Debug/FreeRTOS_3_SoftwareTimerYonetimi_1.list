
FreeRTOS_3_SoftwareTimerYonetimi_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005da0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005f30  08005f30  00015f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800602c  0800602c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800602c  0800602c  0001602c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006034  08006034  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006034  08006034  00016034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006038  08006038  00016038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800603c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045b8  20000074  080060b0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000462c  080060b0  0002462c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015159  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002dcc  00000000  00000000  000351fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d8  00000000  00000000  00037fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001080  00000000  00000000  000391a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022ebd  00000000  00000000  0003a228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db4f  00000000  00000000  0005d0e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3107  00000000  00000000  0006ac34  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013dd3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d30  00000000  00000000  0013ddb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f18 	.word	0x08005f18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005f18 	.word	0x08005f18

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000090 	.word	0x20000090
 80005b0:	200000e4 	.word	0x200000e4

080005b4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetTimerTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005d2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d4:	bf00      	nop
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	200002e4 	.word	0x200002e4
 80005e4:	20000338 	.word	0x20000338

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b08e      	sub	sp, #56	; 0x38
 80005ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 fc01 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f883 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f915 	bl	8000824 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 f8e9 	bl	80007d0 <MX_USART2_UART_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of OneShot */
  osTimerDef(OneShot, OneShotCallback);
 80005fe:	4b34      	ldr	r3, [pc, #208]	; (80006d0 <main+0xe8>)
 8000600:	62bb      	str	r3, [r7, #40]	; 0x28
 8000602:	2300      	movs	r3, #0
 8000604:	62fb      	str	r3, [r7, #44]	; 0x2c
  OneShotHandle = osTimerCreate(osTimer(OneShot), osTimerOnce, NULL);
 8000606:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f002 faf6 	bl	8002c00 <osTimerCreate>
 8000614:	4602      	mov	r2, r0
 8000616:	4b2f      	ldr	r3, [pc, #188]	; (80006d4 <main+0xec>)
 8000618:	601a      	str	r2, [r3, #0]

  /* definition and creation of AutoReload */
  osTimerDef(AutoReload, AutoReloadCallback);
 800061a:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <main+0xf0>)
 800061c:	623b      	str	r3, [r7, #32]
 800061e:	2300      	movs	r3, #0
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  AutoReloadHandle = osTimerCreate(osTimer(AutoReload), osTimerPeriodic, NULL);
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2200      	movs	r2, #0
 8000628:	2101      	movs	r1, #1
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fae8 	bl	8002c00 <osTimerCreate>
 8000630:	4602      	mov	r2, r0
 8000632:	4b2a      	ldr	r3, [pc, #168]	; (80006dc <main+0xf4>)
 8000634:	601a      	str	r2, [r3, #0]

//  osTimerStart(AutoReloadHandle, 500);

  /* USER CODE BEGIN RTOS_TIMERS */

  AutoReloadTimer1 = xTimerCreate("AutoReload1",   mainAUTO_RELOAD_TIMER_PERIOD, osTimerPeriodic, 0, prvAutoReloadTimerCallback);
 8000636:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <main+0xf8>)
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2300      	movs	r3, #0
 800063c:	2201      	movs	r2, #1
 800063e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000642:	4828      	ldr	r0, [pc, #160]	; (80006e4 <main+0xfc>)
 8000644:	f004 f82a 	bl	800469c <xTimerCreate>
 8000648:	4602      	mov	r2, r0
 800064a:	4b27      	ldr	r3, [pc, #156]	; (80006e8 <main+0x100>)
 800064c:	601a      	str	r2, [r3, #0]
  AutoReloadTimer2 = xTimerCreate("AutoReload2", 2*mainAUTO_RELOAD_TIMER_PERIOD, osTimerPeriodic, 0, prvAutoReloadTimerCallback);
 800064e:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <main+0xf8>)
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2300      	movs	r3, #0
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800065a:	4824      	ldr	r0, [pc, #144]	; (80006ec <main+0x104>)
 800065c:	f004 f81e 	bl	800469c <xTimerCreate>
 8000660:	4602      	mov	r2, r0
 8000662:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <main+0x108>)
 8000664:	601a      	str	r2, [r3, #0]

  if(AutoReloadTimer1 != NULL && AutoReloadTimer2 != NULL)
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <main+0x100>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d01b      	beq.n	80006a6 <main+0xbe>
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <main+0x108>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d017      	beq.n	80006a6 <main+0xbe>
  {
	  xTimerStart( AutoReloadTimer1, 0 );
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <main+0x100>)
 8000678:	681c      	ldr	r4, [r3, #0]
 800067a:	f003 fb99 	bl	8003db0 <xTaskGetTickCount>
 800067e:	4602      	mov	r2, r0
 8000680:	2300      	movs	r3, #0
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2300      	movs	r3, #0
 8000686:	2101      	movs	r1, #1
 8000688:	4620      	mov	r0, r4
 800068a:	f004 f89f 	bl	80047cc <xTimerGenericCommand>
	  xTimerStart( AutoReloadTimer2, 0 );
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <main+0x108>)
 8000690:	681c      	ldr	r4, [r3, #0]
 8000692:	f003 fb8d 	bl	8003db0 <xTaskGetTickCount>
 8000696:	4602      	mov	r2, r0
 8000698:	2300      	movs	r3, #0
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2300      	movs	r3, #0
 800069e:	2101      	movs	r1, #1
 80006a0:	4620      	mov	r0, r4
 80006a2:	f004 f893 	bl	80047cc <xTimerGenericCommand>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, Task1Function, osPriorityNormal, 0, 128);
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <main+0x10c>)
 80006a8:	1d3c      	adds	r4, r7, #4
 80006aa:	461d      	mov	r5, r3
 80006ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 fa52 	bl	8002b66 <osThreadCreate>
 80006c2:	4602      	mov	r2, r0
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <main+0x110>)
 80006c6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006c8:	f002 fa46 	bl	8002b58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <main+0xe4>
 80006ce:	bf00      	nop
 80006d0:	08000ad1 	.word	0x08000ad1
 80006d4:	2000455c 	.word	0x2000455c
 80006d8:	08000ae5 	.word	0x08000ae5
 80006dc:	20004554 	.word	0x20004554
 80006e0:	080008e5 	.word	0x080008e5
 80006e4:	08005f30 	.word	0x08005f30
 80006e8:	200045a0 	.word	0x200045a0
 80006ec:	08005f3c 	.word	0x08005f3c
 80006f0:	20004550 	.word	0x20004550
 80006f4:	08005f50 	.word	0x08005f50
 80006f8:	20004558 	.word	0x20004558

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2230      	movs	r2, #48	; 0x30
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f004 ffeb 	bl	80056e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	4b28      	ldr	r3, [pc, #160]	; (80007c8 <SystemClock_Config+0xcc>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a27      	ldr	r2, [pc, #156]	; (80007c8 <SystemClock_Config+0xcc>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <SystemClock_Config+0xcc>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	4b22      	ldr	r3, [pc, #136]	; (80007cc <SystemClock_Config+0xd0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a21      	ldr	r2, [pc, #132]	; (80007cc <SystemClock_Config+0xd0>)
 8000746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <SystemClock_Config+0xd0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000758:	2301      	movs	r3, #1
 800075a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800075c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000762:	2302      	movs	r3, #2
 8000764:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000766:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800076c:	2304      	movs	r3, #4
 800076e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000770:	23a8      	movs	r3, #168	; 0xa8
 8000772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000774:	2302      	movs	r3, #2
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000778:	2304      	movs	r3, #4
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fe41 	bl	8001408 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800078c:	f000 f9c6 	bl	8000b1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000790:	230f      	movs	r3, #15
 8000792:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000794:	2302      	movs	r3, #2
 8000796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800079c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2105      	movs	r1, #5
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 f89a 	bl	80018e8 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ba:	f000 f9af 	bl	8000b1c <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3750      	adds	r7, #80	; 0x50
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007d6:	4a12      	ldr	r2, [pc, #72]	; (8000820 <MX_USART2_UART_Init+0x50>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USART2_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USART2_UART_Init+0x4c>)
 8000808:	f001 fcd0 	bl	80021ac <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000812:	f000 f983 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20004560 	.word	0x20004560
 8000820:	40004400 	.word	0x40004400

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <MX_GPIO_Init+0xb4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a25      	ldr	r2, [pc, #148]	; (80008d8 <MX_GPIO_Init+0xb4>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <MX_GPIO_Init+0xb4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <MX_GPIO_Init+0xb4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a1e      	ldr	r2, [pc, #120]	; (80008d8 <MX_GPIO_Init+0xb4>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <MX_GPIO_Init+0xb4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_GPIO_Init+0xb4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <MX_GPIO_Init+0xb4>)
 800087c:	f043 0308 	orr.w	r3, r3, #8
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <MX_GPIO_Init+0xb4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0308 	and.w	r3, r3, #8
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USER_LED_G_Pin|USER_LED_O_Pin|USER_LED_R_Pin|USER_LED_B_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000894:	4811      	ldr	r0, [pc, #68]	; (80008dc <MX_GPIO_Init+0xb8>)
 8000896:	f000 fd83 	bl	80013a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 800089a:	2301      	movs	r3, #1
 800089c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	4619      	mov	r1, r3
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <MX_GPIO_Init+0xbc>)
 80008ae:	f000 fbc5 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_G_Pin USER_LED_O_Pin USER_LED_R_Pin USER_LED_B_Pin */
  GPIO_InitStruct.Pin = USER_LED_G_Pin|USER_LED_O_Pin|USER_LED_R_Pin|USER_LED_B_Pin;
 80008b2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4619      	mov	r1, r3
 80008ca:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_GPIO_Init+0xb8>)
 80008cc:	f000 fbb6 	bl	800103c <HAL_GPIO_Init>

}
 80008d0:	bf00      	nop
 80008d2:	3720      	adds	r7, #32
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020c00 	.word	0x40020c00
 80008e0:	40020000 	.word	0x40020000

080008e4 <prvAutoReloadTimerCallback>:

/* USER CODE BEGIN 4 */

static void prvAutoReloadTimerCallback( TimerHandle_t xTimer )
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b098      	sub	sp, #96	; 0x60
 80008e8:	af02      	add	r7, sp, #8
 80008ea:	6078      	str	r0, [r7, #4]
	TickType_t xTimeNow;

	uint32_t ulExecutionCountT1 = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t ulExecutionCountT2 = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	653b      	str	r3, [r7, #80]	; 0x50

	xTimeNow = xTaskGetTickCount();
 80008f4:	f003 fa5c 	bl	8003db0 <xTaskGetTickCount>
 80008f8:	64f8      	str	r0, [r7, #76]	; 0x4c

	char msg[60];

	if(xTimer == AutoReloadTimer1)
 80008fa:	4b44      	ldr	r3, [pc, #272]	; (8000a0c <prvAutoReloadTimerCallback+0x128>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	429a      	cmp	r2, r3
 8000902:	d13b      	bne.n	800097c <prvAutoReloadTimerCallback+0x98>
	{
		ulExecutionCountT1 = ( uint32_t ) pvTimerGetTimerID( xTimer );
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f004 fa63 	bl	8004dd0 <pvTimerGetTimerID>
 800090a:	4603      	mov	r3, r0
 800090c:	657b      	str	r3, [r7, #84]	; 0x54
		ulExecutionCountT1++;
 800090e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000910:	3301      	adds	r3, #1
 8000912:	657b      	str	r3, [r7, #84]	; 0x54
		vTimerSetTimerID( xTimer, ( void * ) ulExecutionCountT1 );
 8000914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000916:	4619      	mov	r1, r3
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f004 fa78 	bl	8004e0e <vTimerSetTimerID>


		// TimerID degerini YazilimsalTimer'in kac kere trigger oldugunu tespit etmek icin kullanabiliriz.
		HAL_GPIO_TogglePin(USER_LED_G_GPIO_Port, USER_LED_G_Pin);
 800091e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000922:	483b      	ldr	r0, [pc, #236]	; (8000a10 <prvAutoReloadTimerCallback+0x12c>)
 8000924:	f000 fd55 	bl	80013d2 <HAL_GPIO_TogglePin>
		snprintf(msg,sizeof(msg),"Auto-reload timer1 callback executing %lu\r\n", xTimeNow);
 8000928:	f107 0008 	add.w	r0, r7, #8
 800092c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800092e:	4a39      	ldr	r2, [pc, #228]	; (8000a14 <prvAutoReloadTimerCallback+0x130>)
 8000930:	213c      	movs	r1, #60	; 0x3c
 8000932:	f004 fee1 	bl	80056f8 <sniprintf>

		if(!(ulExecutionCountT1 % 10)) // Her 10 trigger isleminde periyot degeri eski degerin 2 kati olmaktadir.
 8000936:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000938:	4b37      	ldr	r3, [pc, #220]	; (8000a18 <prvAutoReloadTimerCallback+0x134>)
 800093a:	fba3 2301 	umull	r2, r3, r3, r1
 800093e:	08da      	lsrs	r2, r3, #3
 8000940:	4613      	mov	r3, r2
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	1aca      	subs	r2, r1, r3
 800094a:	2a00      	cmp	r2, #0
 800094c:	d155      	bne.n	80009fa <prvAutoReloadTimerCallback+0x116>
		{
			TickType_t newPeriod = pdMS_TO_TICKS(xTimerGetPeriod(xTimer))*2;
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f003 ff88 	bl	8004864 <xTimerGetPeriod>
 8000954:	4602      	mov	r2, r0
 8000956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095a:	fb03 f302 	mul.w	r3, r3, r2
 800095e:	4a2f      	ldr	r2, [pc, #188]	; (8000a1c <prvAutoReloadTimerCallback+0x138>)
 8000960:	fba2 2303 	umull	r2, r3, r2, r3
 8000964:	099b      	lsrs	r3, r3, #6
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	647b      	str	r3, [r7, #68]	; 0x44
			xTimerChangePeriod(xTimer,newPeriod,100);
 800096a:	2364      	movs	r3, #100	; 0x64
 800096c:	9300      	str	r3, [sp, #0]
 800096e:	2300      	movs	r3, #0
 8000970:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000972:	2104      	movs	r1, #4
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f003 ff29 	bl	80047cc <xTimerGenericCommand>
 800097a:	e03e      	b.n	80009fa <prvAutoReloadTimerCallback+0x116>
		}
	}
	else if(xTimer == AutoReloadTimer2)
 800097c:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <prvAutoReloadTimerCallback+0x13c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	429a      	cmp	r2, r3
 8000984:	d139      	bne.n	80009fa <prvAutoReloadTimerCallback+0x116>
	{
		ulExecutionCountT2 = ( uint32_t ) pvTimerGetTimerID( xTimer );
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f004 fa22 	bl	8004dd0 <pvTimerGetTimerID>
 800098c:	4603      	mov	r3, r0
 800098e:	653b      	str	r3, [r7, #80]	; 0x50
		ulExecutionCountT2++;
 8000990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000992:	3301      	adds	r3, #1
 8000994:	653b      	str	r3, [r7, #80]	; 0x50
		vTimerSetTimerID( xTimer, ( void * ) ulExecutionCountT2 );
 8000996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000998:	4619      	mov	r1, r3
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f004 fa37 	bl	8004e0e <vTimerSetTimerID>

		HAL_GPIO_TogglePin(USER_LED_R_GPIO_Port, USER_LED_R_Pin);
 80009a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a4:	481a      	ldr	r0, [pc, #104]	; (8000a10 <prvAutoReloadTimerCallback+0x12c>)
 80009a6:	f000 fd14 	bl	80013d2 <HAL_GPIO_TogglePin>
		snprintf(msg,sizeof(msg),"Auto-reload timer2 callback executing %lu\r\n", xTimeNow);
 80009aa:	f107 0008 	add.w	r0, r7, #8
 80009ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80009b0:	4a1c      	ldr	r2, [pc, #112]	; (8000a24 <prvAutoReloadTimerCallback+0x140>)
 80009b2:	213c      	movs	r1, #60	; 0x3c
 80009b4:	f004 fea0 	bl	80056f8 <sniprintf>

		if(!(ulExecutionCountT2 % 5)) // Her 5 trigger isleminde periyot degeri eski degerin 2 kati olmaktadir.
 80009b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <prvAutoReloadTimerCallback+0x134>)
 80009bc:	fba3 2301 	umull	r2, r3, r3, r1
 80009c0:	089a      	lsrs	r2, r3, #2
 80009c2:	4613      	mov	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	4413      	add	r3, r2
 80009c8:	1aca      	subs	r2, r1, r3
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	d115      	bne.n	80009fa <prvAutoReloadTimerCallback+0x116>
		{
			TickType_t newPeriod = pdMS_TO_TICKS(xTimerGetPeriod(xTimer))*2;
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f003 ff48 	bl	8004864 <xTimerGetPeriod>
 80009d4:	4602      	mov	r2, r0
 80009d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009da:	fb03 f302 	mul.w	r3, r3, r2
 80009de:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <prvAutoReloadTimerCallback+0x138>)
 80009e0:	fba2 2303 	umull	r2, r3, r2, r3
 80009e4:	099b      	lsrs	r3, r3, #6
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	64bb      	str	r3, [r7, #72]	; 0x48
			xTimerChangePeriod(xTimer,newPeriod,100);
 80009ea:	2364      	movs	r3, #100	; 0x64
 80009ec:	9300      	str	r3, [sp, #0]
 80009ee:	2300      	movs	r3, #0
 80009f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80009f2:	2104      	movs	r1, #4
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f003 fee9 	bl	80047cc <xTimerGenericCommand>
		}
	}

	UartPrint(msg);
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 f812 	bl	8000a28 <UartPrint>

}
 8000a04:	bf00      	nop
 8000a06:	3758      	adds	r7, #88	; 0x58
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	200045a0 	.word	0x200045a0
 8000a10:	40020c00 	.word	0x40020c00
 8000a14:	08005f6c 	.word	0x08005f6c
 8000a18:	cccccccd 	.word	0xcccccccd
 8000a1c:	10624dd3 	.word	0x10624dd3
 8000a20:	20004550 	.word	0x20004550
 8000a24:	08005f98 	.word	0x08005f98

08000a28 <UartPrint>:

void UartPrint(char* message)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 50);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff fbcd 	bl	80001d0 <strlen>
 8000a36:	4603      	mov	r3, r0
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	2332      	movs	r3, #50	; 0x32
 8000a3c:	6879      	ldr	r1, [r7, #4]
 8000a3e:	4803      	ldr	r0, [pc, #12]	; (8000a4c <UartPrint+0x24>)
 8000a40:	f001 fc01 	bl	8002246 <HAL_UART_Transmit>
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20004560 	.word	0x20004560

08000a50 <Task1Function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1Function */
void Task1Function(void const * argument)
{
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b087      	sub	sp, #28
 8000a54:	af02      	add	r7, sp, #8
 8000a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	uint8_t btnFlag = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {

	  if(HAL_GPIO_ReadPin(USER_BTN_GPIO_Port, USER_BTN_Pin))
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4819      	ldr	r0, [pc, #100]	; (8000ac4 <Task1Function+0x74>)
 8000a60:	f000 fc86 	bl	8001370 <HAL_GPIO_ReadPin>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d0f8      	beq.n	8000a5c <Task1Function+0xc>
	  {

		  btnFlag = !btnFlag;
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	bf0c      	ite	eq
 8000a70:	2301      	moveq	r3, #1
 8000a72:	2300      	movne	r3, #0
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	73fb      	strb	r3, [r7, #15]

		  if(btnFlag)
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d00e      	beq.n	8000a9c <Task1Function+0x4c>
		  {
			  xTimerStop(AutoReloadTimer1,100);
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <Task1Function+0x78>)
 8000a80:	6818      	ldr	r0, [r3, #0]
 8000a82:	2364      	movs	r3, #100	; 0x64
 8000a84:	9300      	str	r3, [sp, #0]
 8000a86:	2300      	movs	r3, #0
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2103      	movs	r1, #3
 8000a8c:	f003 fe9e 	bl	80047cc <xTimerGenericCommand>
			  osTimerStop(AutoReloadTimer2);
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <Task1Function+0x7c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f002 f92d 	bl	8002cf4 <osTimerStop>
 8000a9a:	e7df      	b.n	8000a5c <Task1Function+0xc>
		  }
		  else
		  {
			  xTimerStart(AutoReloadTimer1,100);
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <Task1Function+0x78>)
 8000a9e:	681c      	ldr	r4, [r3, #0]
 8000aa0:	f003 f986 	bl	8003db0 <xTaskGetTickCount>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	2364      	movs	r3, #100	; 0x64
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	2300      	movs	r3, #0
 8000aac:	2101      	movs	r1, #1
 8000aae:	4620      	mov	r0, r4
 8000ab0:	f003 fe8c 	bl	80047cc <xTimerGenericCommand>
			  osTimerStart(AutoReloadTimer2, mainAUTO_RELOAD_TIMER_PERIOD*2);
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <Task1Function+0x7c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000abc:	4618      	mov	r0, r3
 8000abe:	f002 f8d3 	bl	8002c68 <osTimerStart>
	  if(HAL_GPIO_ReadPin(USER_BTN_GPIO_Port, USER_BTN_Pin))
 8000ac2:	e7cb      	b.n	8000a5c <Task1Function+0xc>
 8000ac4:	40020000 	.word	0x40020000
 8000ac8:	200045a0 	.word	0x200045a0
 8000acc:	20004550 	.word	0x20004550

08000ad0 <OneShotCallback>:
  /* USER CODE END 5 */
}

/* OneShotCallback function */
void OneShotCallback(void const * argument)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OneShotCallback */

  /* USER CODE END OneShotCallback */
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <AutoReloadCallback>:

/* AutoReloadCallback function */
void AutoReloadCallback(void const * argument)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AutoReloadCallback */

  /* USER CODE END AutoReloadCallback */
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d101      	bne.n	8000b0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b0a:	f000 f995 	bl	8000e38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40010000 	.word	0x40010000

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800

08000b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a19      	ldr	r2, [pc, #100]	; (8000c00 <HAL_UART_MspInit+0x84>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d12b      	bne.n	8000bf6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a17      	ldr	r2, [pc, #92]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a10      	ldr	r2, [pc, #64]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bd6:	230c      	movs	r3, #12
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000be6:	2307      	movs	r3, #7
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <HAL_UART_MspInit+0x8c>)
 8000bf2:	f000 fa23 	bl	800103c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3728      	adds	r7, #40	; 0x28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40004400 	.word	0x40004400
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020000 	.word	0x40020000

08000c0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08c      	sub	sp, #48	; 0x30
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	2019      	movs	r0, #25
 8000c22:	f000 f9e1 	bl	8000fe8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c26:	2019      	movs	r0, #25
 8000c28:	f000 f9fa 	bl	8001020 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <HAL_InitTick+0xa4>)
 8000c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c34:	4a1e      	ldr	r2, [pc, #120]	; (8000cb0 <HAL_InitTick+0xa4>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <HAL_InitTick+0xa4>)
 8000c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c48:	f107 0210 	add.w	r2, r7, #16
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f001 f83a 	bl	8001ccc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c58:	f001 f824 	bl	8001ca4 <HAL_RCC_GetPCLK2Freq>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c64:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <HAL_InitTick+0xa8>)
 8000c66:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6a:	0c9b      	lsrs	r3, r3, #18
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_InitTick+0xac>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <HAL_InitTick+0xb0>)
 8000c74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <HAL_InitTick+0xac>)
 8000c78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c7c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c7e:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <HAL_InitTick+0xac>)
 8000c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c82:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <HAL_InitTick+0xac>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_InitTick+0xac>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c90:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <HAL_InitTick+0xac>)
 8000c92:	f001 f84d 	bl	8001d30 <HAL_TIM_Base_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d104      	bne.n	8000ca6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c9c:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <HAL_InitTick+0xac>)
 8000c9e:	f001 f87c 	bl	8001d9a <HAL_TIM_Base_Start_IT>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	e000      	b.n	8000ca8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3730      	adds	r7, #48	; 0x30
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	431bde83 	.word	0x431bde83
 8000cb8:	200045a4 	.word	0x200045a4
 8000cbc:	40010000 	.word	0x40010000

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <BusFault_Handler+0x4>

08000ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <UsageFault_Handler+0x4>

08000ce6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000cfa:	f001 f872 	bl	8001de2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200045a4 	.word	0x200045a4

08000d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d10:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <_sbrk+0x5c>)
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <_sbrk+0x60>)
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <_sbrk+0x64>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <_sbrk+0x68>)
 8000d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d207      	bcs.n	8000d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d38:	f004 fca0 	bl	800567c <__errno>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	230c      	movs	r3, #12
 8000d40:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	e009      	b.n	8000d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <_sbrk+0x64>)
 8000d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20020000 	.word	0x20020000
 8000d68:	00000400 	.word	0x00000400
 8000d6c:	20000738 	.word	0x20000738
 8000d70:	20004630 	.word	0x20004630

08000d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <SystemInit+0x28>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7e:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <SystemInit+0x28>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <SystemInit+0x28>)
 8000d8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000da4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000da6:	e003      	b.n	8000db0 <LoopCopyDataInit>

08000da8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000daa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dae:	3104      	adds	r1, #4

08000db0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000db0:	480b      	ldr	r0, [pc, #44]	; (8000de0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000db4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000db6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000db8:	d3f6      	bcc.n	8000da8 <CopyDataInit>
  ldr  r2, =_sbss
 8000dba:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000dbc:	e002      	b.n	8000dc4 <LoopFillZerobss>

08000dbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dc0:	f842 3b04 	str.w	r3, [r2], #4

08000dc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dc8:	d3f9      	bcc.n	8000dbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dca:	f7ff ffd3 	bl	8000d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dce:	f004 fc5b 	bl	8005688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fc09 	bl	80005e8 <main>
  bx  lr    
 8000dd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ddc:	0800603c 	.word	0x0800603c
  ldr  r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000de4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000de8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000dec:	2000462c 	.word	0x2000462c

08000df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <HAL_Init+0x40>)
 8000dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e04:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <HAL_Init+0x40>)
 8000e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <HAL_Init+0x40>)
 8000e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f000 f8d8 	bl	8000fd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e22:	2000      	movs	r0, #0
 8000e24:	f7ff fef2 	bl	8000c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e28:	f7ff fe80 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023c00 	.word	0x40023c00

08000e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_IncTick+0x20>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_IncTick+0x24>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <HAL_IncTick+0x24>)
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	200045e4 	.word	0x200045e4

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <HAL_GetTick+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	200045e4 	.word	0x200045e4

08000e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	db0b      	blt.n	8000f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f003 021f 	and.w	r2, r3, #31
 8000ef4:	4907      	ldr	r1, [pc, #28]	; (8000f14 <__NVIC_EnableIRQ+0x38>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	2001      	movs	r0, #1
 8000efe:	fa00 f202 	lsl.w	r2, r0, r2
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000e100 	.word	0xe000e100

08000f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db0a      	blt.n	8000f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	490c      	ldr	r1, [pc, #48]	; (8000f64 <__NVIC_SetPriority+0x4c>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f40:	e00a      	b.n	8000f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4908      	ldr	r1, [pc, #32]	; (8000f68 <__NVIC_SetPriority+0x50>)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	440b      	add	r3, r1
 8000f56:	761a      	strb	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f1c3 0307 	rsb	r3, r3, #7
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf28      	it	cs
 8000f8a:	2304      	movcs	r3, #4
 8000f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3304      	adds	r3, #4
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d902      	bls.n	8000f9c <NVIC_EncodePriority+0x30>
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	e000      	b.n	8000f9e <NVIC_EncodePriority+0x32>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	4313      	orrs	r3, r2
         );
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3724      	adds	r7, #36	; 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ff4c 	bl	8000e78 <__NVIC_SetPriorityGrouping>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffa:	f7ff ff61 	bl	8000ec0 <__NVIC_GetPriorityGrouping>
 8000ffe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	68b9      	ldr	r1, [r7, #8]
 8001004:	6978      	ldr	r0, [r7, #20]
 8001006:	f7ff ffb1 	bl	8000f6c <NVIC_EncodePriority>
 800100a:	4602      	mov	r2, r0
 800100c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff80 	bl	8000f18 <__NVIC_SetPriority>
}
 8001018:	bf00      	nop
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ff54 	bl	8000edc <__NVIC_EnableIRQ>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
 8001056:	e16b      	b.n	8001330 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	429a      	cmp	r2, r3
 8001072:	f040 815a 	bne.w	800132a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d00b      	beq.n	8001096 <HAL_GPIO_Init+0x5a>
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b02      	cmp	r3, #2
 8001084:	d007      	beq.n	8001096 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800108a:	2b11      	cmp	r3, #17
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b12      	cmp	r3, #18
 8001094:	d130      	bne.n	80010f8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010cc:	2201      	movs	r2, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	091b      	lsrs	r3, r3, #4
 80010e2:	f003 0201 	and.w	r2, r3, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	2203      	movs	r2, #3
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b02      	cmp	r3, #2
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0xfc>
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b12      	cmp	r3, #18
 8001136:	d123      	bne.n	8001180 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	69b9      	ldr	r1, [r7, #24]
 800117c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0203 	and.w	r2, r3, #3
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80b4 	beq.w	800132a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b5f      	ldr	r3, [pc, #380]	; (8001344 <HAL_GPIO_Init+0x308>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a5e      	ldr	r2, [pc, #376]	; (8001344 <HAL_GPIO_Init+0x308>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b5c      	ldr	r3, [pc, #368]	; (8001344 <HAL_GPIO_Init+0x308>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011de:	4a5a      	ldr	r2, [pc, #360]	; (8001348 <HAL_GPIO_Init+0x30c>)
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a51      	ldr	r2, [pc, #324]	; (800134c <HAL_GPIO_Init+0x310>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d02b      	beq.n	8001262 <HAL_GPIO_Init+0x226>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a50      	ldr	r2, [pc, #320]	; (8001350 <HAL_GPIO_Init+0x314>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d025      	beq.n	800125e <HAL_GPIO_Init+0x222>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4f      	ldr	r2, [pc, #316]	; (8001354 <HAL_GPIO_Init+0x318>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d01f      	beq.n	800125a <HAL_GPIO_Init+0x21e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4e      	ldr	r2, [pc, #312]	; (8001358 <HAL_GPIO_Init+0x31c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d019      	beq.n	8001256 <HAL_GPIO_Init+0x21a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4d      	ldr	r2, [pc, #308]	; (800135c <HAL_GPIO_Init+0x320>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d013      	beq.n	8001252 <HAL_GPIO_Init+0x216>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4c      	ldr	r2, [pc, #304]	; (8001360 <HAL_GPIO_Init+0x324>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d00d      	beq.n	800124e <HAL_GPIO_Init+0x212>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4b      	ldr	r2, [pc, #300]	; (8001364 <HAL_GPIO_Init+0x328>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d007      	beq.n	800124a <HAL_GPIO_Init+0x20e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4a      	ldr	r2, [pc, #296]	; (8001368 <HAL_GPIO_Init+0x32c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d101      	bne.n	8001246 <HAL_GPIO_Init+0x20a>
 8001242:	2307      	movs	r3, #7
 8001244:	e00e      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001246:	2308      	movs	r3, #8
 8001248:	e00c      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800124a:	2306      	movs	r3, #6
 800124c:	e00a      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800124e:	2305      	movs	r3, #5
 8001250:	e008      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001252:	2304      	movs	r3, #4
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001256:	2303      	movs	r3, #3
 8001258:	e004      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800125a:	2302      	movs	r3, #2
 800125c:	e002      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001262:	2300      	movs	r3, #0
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	f002 0203 	and.w	r2, r2, #3
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	4093      	lsls	r3, r2
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001274:	4934      	ldr	r1, [pc, #208]	; (8001348 <HAL_GPIO_Init+0x30c>)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	089b      	lsrs	r3, r3, #2
 800127a:	3302      	adds	r3, #2
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001282:	4b3a      	ldr	r3, [pc, #232]	; (800136c <HAL_GPIO_Init+0x330>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a6:	4a31      	ldr	r2, [pc, #196]	; (800136c <HAL_GPIO_Init+0x330>)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012ac:	4b2f      	ldr	r3, [pc, #188]	; (800136c <HAL_GPIO_Init+0x330>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d0:	4a26      	ldr	r2, [pc, #152]	; (800136c <HAL_GPIO_Init+0x330>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d6:	4b25      	ldr	r3, [pc, #148]	; (800136c <HAL_GPIO_Init+0x330>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fa:	4a1c      	ldr	r2, [pc, #112]	; (800136c <HAL_GPIO_Init+0x330>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <HAL_GPIO_Init+0x330>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001324:	4a11      	ldr	r2, [pc, #68]	; (800136c <HAL_GPIO_Init+0x330>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3301      	adds	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	2b0f      	cmp	r3, #15
 8001334:	f67f ae90 	bls.w	8001058 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001338:	bf00      	nop
 800133a:	3724      	adds	r7, #36	; 0x24
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	40023800 	.word	0x40023800
 8001348:	40013800 	.word	0x40013800
 800134c:	40020000 	.word	0x40020000
 8001350:	40020400 	.word	0x40020400
 8001354:	40020800 	.word	0x40020800
 8001358:	40020c00 	.word	0x40020c00
 800135c:	40021000 	.word	0x40021000
 8001360:	40021400 	.word	0x40021400
 8001364:	40021800 	.word	0x40021800
 8001368:	40021c00 	.word	0x40021c00
 800136c:	40013c00 	.word	0x40013c00

08001370 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691a      	ldr	r2, [r3, #16]
 8001380:	887b      	ldrh	r3, [r7, #2]
 8001382:	4013      	ands	r3, r2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001388:	2301      	movs	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
 800138c:	e001      	b.n	8001392 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001392:	7bfb      	ldrb	r3, [r7, #15]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
 80013ac:	4613      	mov	r3, r2
 80013ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b0:	787b      	ldrb	r3, [r7, #1]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013bc:	e003      	b.n	80013c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013be:	887b      	ldrh	r3, [r7, #2]
 80013c0:	041a      	lsls	r2, r3, #16
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	619a      	str	r2, [r3, #24]
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	460b      	mov	r3, r1
 80013dc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695a      	ldr	r2, [r3, #20]
 80013e2:	887b      	ldrh	r3, [r7, #2]
 80013e4:	401a      	ands	r2, r3
 80013e6:	887b      	ldrh	r3, [r7, #2]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d104      	bne.n	80013f6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013ec:	887b      	ldrh	r3, [r7, #2]
 80013ee:	041a      	lsls	r2, r3, #16
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	619a      	str	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e25b      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d075      	beq.n	8001512 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001426:	4ba3      	ldr	r3, [pc, #652]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b04      	cmp	r3, #4
 8001430:	d00c      	beq.n	800144c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001432:	4ba0      	ldr	r3, [pc, #640]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800143a:	2b08      	cmp	r3, #8
 800143c:	d112      	bne.n	8001464 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800143e:	4b9d      	ldr	r3, [pc, #628]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001446:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800144a:	d10b      	bne.n	8001464 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144c:	4b99      	ldr	r3, [pc, #612]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d05b      	beq.n	8001510 <HAL_RCC_OscConfig+0x108>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d157      	bne.n	8001510 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e236      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800146c:	d106      	bne.n	800147c <HAL_RCC_OscConfig+0x74>
 800146e:	4b91      	ldr	r3, [pc, #580]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a90      	ldr	r2, [pc, #576]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e01d      	b.n	80014b8 <HAL_RCC_OscConfig+0xb0>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001484:	d10c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x98>
 8001486:	4b8b      	ldr	r3, [pc, #556]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a8a      	ldr	r2, [pc, #552]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 800148c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	4b88      	ldr	r3, [pc, #544]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a87      	ldr	r2, [pc, #540]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	e00b      	b.n	80014b8 <HAL_RCC_OscConfig+0xb0>
 80014a0:	4b84      	ldr	r3, [pc, #528]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a83      	ldr	r2, [pc, #524]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 80014a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b81      	ldr	r3, [pc, #516]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a80      	ldr	r2, [pc, #512]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 80014b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d013      	beq.n	80014e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fcce 	bl	8000e60 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c8:	f7ff fcca 	bl	8000e60 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e1fb      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014da:	4b76      	ldr	r3, [pc, #472]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0xc0>
 80014e6:	e014      	b.n	8001512 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fcba 	bl	8000e60 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f0:	f7ff fcb6 	bl	8000e60 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	; 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e1e7      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001502:	4b6c      	ldr	r3, [pc, #432]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0xe8>
 800150e:	e000      	b.n	8001512 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d063      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800151e:	4b65      	ldr	r3, [pc, #404]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00b      	beq.n	8001542 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800152a:	4b62      	ldr	r3, [pc, #392]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001532:	2b08      	cmp	r3, #8
 8001534:	d11c      	bne.n	8001570 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001536:	4b5f      	ldr	r3, [pc, #380]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d116      	bne.n	8001570 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001542:	4b5c      	ldr	r3, [pc, #368]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d005      	beq.n	800155a <HAL_RCC_OscConfig+0x152>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d001      	beq.n	800155a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e1bb      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155a:	4b56      	ldr	r3, [pc, #344]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	4952      	ldr	r1, [pc, #328]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 800156a:	4313      	orrs	r3, r2
 800156c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156e:	e03a      	b.n	80015e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d020      	beq.n	80015ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001578:	4b4f      	ldr	r3, [pc, #316]	; (80016b8 <HAL_RCC_OscConfig+0x2b0>)
 800157a:	2201      	movs	r2, #1
 800157c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157e:	f7ff fc6f 	bl	8000e60 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001586:	f7ff fc6b 	bl	8000e60 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e19c      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001598:	4b46      	ldr	r3, [pc, #280]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a4:	4b43      	ldr	r3, [pc, #268]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	4940      	ldr	r1, [pc, #256]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	600b      	str	r3, [r1, #0]
 80015b8:	e015      	b.n	80015e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ba:	4b3f      	ldr	r3, [pc, #252]	; (80016b8 <HAL_RCC_OscConfig+0x2b0>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c0:	f7ff fc4e 	bl	8000e60 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c8:	f7ff fc4a 	bl	8000e60 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e17b      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015da:	4b36      	ldr	r3, [pc, #216]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d030      	beq.n	8001654 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d016      	beq.n	8001628 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015fa:	4b30      	ldr	r3, [pc, #192]	; (80016bc <HAL_RCC_OscConfig+0x2b4>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001600:	f7ff fc2e 	bl	8000e60 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001608:	f7ff fc2a 	bl	8000e60 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e15b      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161a:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0x200>
 8001626:	e015      	b.n	8001654 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001628:	4b24      	ldr	r3, [pc, #144]	; (80016bc <HAL_RCC_OscConfig+0x2b4>)
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162e:	f7ff fc17 	bl	8000e60 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001636:	f7ff fc13 	bl	8000e60 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e144      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001648:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 800164a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1f0      	bne.n	8001636 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 80a0 	beq.w	80017a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10f      	bne.n	8001692 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 800167c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800168e:	2301      	movs	r3, #1
 8001690:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_RCC_OscConfig+0x2b8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169a:	2b00      	cmp	r3, #0
 800169c:	d121      	bne.n	80016e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_RCC_OscConfig+0x2b8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <HAL_RCC_OscConfig+0x2b8>)
 80016a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016aa:	f7ff fbd9 	bl	8000e60 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b0:	e011      	b.n	80016d6 <HAL_RCC_OscConfig+0x2ce>
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800
 80016b8:	42470000 	.word	0x42470000
 80016bc:	42470e80 	.word	0x42470e80
 80016c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c4:	f7ff fbcc 	bl	8000e60 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e0fd      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d6:	4b81      	ldr	r3, [pc, #516]	; (80018dc <HAL_RCC_OscConfig+0x4d4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d106      	bne.n	80016f8 <HAL_RCC_OscConfig+0x2f0>
 80016ea:	4b7d      	ldr	r3, [pc, #500]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 80016ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ee:	4a7c      	ldr	r2, [pc, #496]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6713      	str	r3, [r2, #112]	; 0x70
 80016f6:	e01c      	b.n	8001732 <HAL_RCC_OscConfig+0x32a>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b05      	cmp	r3, #5
 80016fe:	d10c      	bne.n	800171a <HAL_RCC_OscConfig+0x312>
 8001700:	4b77      	ldr	r3, [pc, #476]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 8001702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001704:	4a76      	ldr	r2, [pc, #472]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	6713      	str	r3, [r2, #112]	; 0x70
 800170c:	4b74      	ldr	r3, [pc, #464]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001710:	4a73      	ldr	r2, [pc, #460]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6713      	str	r3, [r2, #112]	; 0x70
 8001718:	e00b      	b.n	8001732 <HAL_RCC_OscConfig+0x32a>
 800171a:	4b71      	ldr	r3, [pc, #452]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171e:	4a70      	ldr	r2, [pc, #448]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	6713      	str	r3, [r2, #112]	; 0x70
 8001726:	4b6e      	ldr	r3, [pc, #440]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172a:	4a6d      	ldr	r2, [pc, #436]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 800172c:	f023 0304 	bic.w	r3, r3, #4
 8001730:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d015      	beq.n	8001766 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173a:	f7ff fb91 	bl	8000e60 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001740:	e00a      	b.n	8001758 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001742:	f7ff fb8d 	bl	8000e60 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001750:	4293      	cmp	r3, r2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e0bc      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001758:	4b61      	ldr	r3, [pc, #388]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 800175a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0ee      	beq.n	8001742 <HAL_RCC_OscConfig+0x33a>
 8001764:	e014      	b.n	8001790 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001766:	f7ff fb7b 	bl	8000e60 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176c:	e00a      	b.n	8001784 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800176e:	f7ff fb77 	bl	8000e60 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	f241 3288 	movw	r2, #5000	; 0x1388
 800177c:	4293      	cmp	r3, r2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e0a6      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001784:	4b56      	ldr	r3, [pc, #344]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 8001786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1ee      	bne.n	800176e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d105      	bne.n	80017a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001796:	4b52      	ldr	r3, [pc, #328]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	4a51      	ldr	r2, [pc, #324]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 800179c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 8092 	beq.w	80018d0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ac:	4b4c      	ldr	r3, [pc, #304]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d05c      	beq.n	8001872 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d141      	bne.n	8001844 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c0:	4b48      	ldr	r3, [pc, #288]	; (80018e4 <HAL_RCC_OscConfig+0x4dc>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7ff fb4b 	bl	8000e60 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ce:	f7ff fb47 	bl	8000e60 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e078      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e0:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1f0      	bne.n	80017ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69da      	ldr	r2, [r3, #28]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	019b      	lsls	r3, r3, #6
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	085b      	lsrs	r3, r3, #1
 8001804:	3b01      	subs	r3, #1
 8001806:	041b      	lsls	r3, r3, #16
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180e:	061b      	lsls	r3, r3, #24
 8001810:	4933      	ldr	r1, [pc, #204]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 8001812:	4313      	orrs	r3, r2
 8001814:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001816:	4b33      	ldr	r3, [pc, #204]	; (80018e4 <HAL_RCC_OscConfig+0x4dc>)
 8001818:	2201      	movs	r2, #1
 800181a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fb20 	bl	8000e60 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001824:	f7ff fb1c 	bl	8000e60 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e04d      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001836:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0x41c>
 8001842:	e045      	b.n	80018d0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001844:	4b27      	ldr	r3, [pc, #156]	; (80018e4 <HAL_RCC_OscConfig+0x4dc>)
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184a:	f7ff fb09 	bl	8000e60 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001852:	f7ff fb05 	bl	8000e60 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e036      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1f0      	bne.n	8001852 <HAL_RCC_OscConfig+0x44a>
 8001870:	e02e      	b.n	80018d0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e029      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800187e:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	429a      	cmp	r2, r3
 8001890:	d11c      	bne.n	80018cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189c:	429a      	cmp	r2, r3
 800189e:	d115      	bne.n	80018cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018a6:	4013      	ands	r3, r2
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d10d      	bne.n	80018cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d106      	bne.n	80018cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40007000 	.word	0x40007000
 80018e0:	40023800 	.word	0x40023800
 80018e4:	42470060 	.word	0x42470060

080018e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0cc      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018fc:	4b68      	ldr	r3, [pc, #416]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d90c      	bls.n	8001924 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b65      	ldr	r3, [pc, #404]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001912:	4b63      	ldr	r3, [pc, #396]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0b8      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d020      	beq.n	8001972 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800193c:	4b59      	ldr	r3, [pc, #356]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	4a58      	ldr	r2, [pc, #352]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001946:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001954:	4b53      	ldr	r3, [pc, #332]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	4a52      	ldr	r2, [pc, #328]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800195e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001960:	4b50      	ldr	r3, [pc, #320]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	494d      	ldr	r1, [pc, #308]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	4313      	orrs	r3, r2
 8001970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d044      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d107      	bne.n	8001996 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001986:	4b47      	ldr	r3, [pc, #284]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d119      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e07f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d003      	beq.n	80019a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a6:	4b3f      	ldr	r3, [pc, #252]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e06f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b6:	4b3b      	ldr	r3, [pc, #236]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e067      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c6:	4b37      	ldr	r3, [pc, #220]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f023 0203 	bic.w	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4934      	ldr	r1, [pc, #208]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d8:	f7ff fa42 	bl	8000e60 <HAL_GetTick>
 80019dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019de:	e00a      	b.n	80019f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e0:	f7ff fa3e 	bl	8000e60 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e04f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f6:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 020c 	and.w	r2, r3, #12
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d1eb      	bne.n	80019e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a08:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d20c      	bcs.n	8001a30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1e:	4b20      	ldr	r3, [pc, #128]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e032      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	4916      	ldr	r1, [pc, #88]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d009      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a5a:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	490e      	ldr	r1, [pc, #56]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a6e:	f000 f821 	bl	8001ab4 <HAL_RCC_GetSysClockFreq>
 8001a72:	4601      	mov	r1, r0
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a80:	5cd3      	ldrb	r3, [r2, r3]
 8001a82:	fa21 f303 	lsr.w	r3, r1, r3
 8001a86:	4a09      	ldr	r2, [pc, #36]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff f8bc 	bl	8000c0c <HAL_InitTick>

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023c00 	.word	0x40023c00
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	08005fe0 	.word	0x08005fe0
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	20000004 	.word	0x20000004

08001ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aca:	4b63      	ldr	r3, [pc, #396]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d007      	beq.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x32>
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d008      	beq.n	8001aec <HAL_RCC_GetSysClockFreq+0x38>
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f040 80b4 	bne.w	8001c48 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ae0:	4b5e      	ldr	r3, [pc, #376]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ae2:	60bb      	str	r3, [r7, #8]
       break;
 8001ae4:	e0b3      	b.n	8001c4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ae6:	4b5e      	ldr	r3, [pc, #376]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001ae8:	60bb      	str	r3, [r7, #8]
      break;
 8001aea:	e0b0      	b.n	8001c4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aec:	4b5a      	ldr	r3, [pc, #360]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001af4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001af6:	4b58      	ldr	r3, [pc, #352]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d04a      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b02:	4b55      	ldr	r3, [pc, #340]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	099b      	lsrs	r3, r3, #6
 8001b08:	f04f 0400 	mov.w	r4, #0
 8001b0c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	ea03 0501 	and.w	r5, r3, r1
 8001b18:	ea04 0602 	and.w	r6, r4, r2
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	4632      	mov	r2, r6
 8001b20:	f04f 0300 	mov.w	r3, #0
 8001b24:	f04f 0400 	mov.w	r4, #0
 8001b28:	0154      	lsls	r4, r2, #5
 8001b2a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b2e:	014b      	lsls	r3, r1, #5
 8001b30:	4619      	mov	r1, r3
 8001b32:	4622      	mov	r2, r4
 8001b34:	1b49      	subs	r1, r1, r5
 8001b36:	eb62 0206 	sbc.w	r2, r2, r6
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	f04f 0400 	mov.w	r4, #0
 8001b42:	0194      	lsls	r4, r2, #6
 8001b44:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b48:	018b      	lsls	r3, r1, #6
 8001b4a:	1a5b      	subs	r3, r3, r1
 8001b4c:	eb64 0402 	sbc.w	r4, r4, r2
 8001b50:	f04f 0100 	mov.w	r1, #0
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	00e2      	lsls	r2, r4, #3
 8001b5a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b5e:	00d9      	lsls	r1, r3, #3
 8001b60:	460b      	mov	r3, r1
 8001b62:	4614      	mov	r4, r2
 8001b64:	195b      	adds	r3, r3, r5
 8001b66:	eb44 0406 	adc.w	r4, r4, r6
 8001b6a:	f04f 0100 	mov.w	r1, #0
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	0262      	lsls	r2, r4, #9
 8001b74:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001b78:	0259      	lsls	r1, r3, #9
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4614      	mov	r4, r2
 8001b7e:	4618      	mov	r0, r3
 8001b80:	4621      	mov	r1, r4
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f04f 0400 	mov.w	r4, #0
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4623      	mov	r3, r4
 8001b8c:	f7fe fb78 	bl	8000280 <__aeabi_uldivmod>
 8001b90:	4603      	mov	r3, r0
 8001b92:	460c      	mov	r4, r1
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	e049      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b98:	4b2f      	ldr	r3, [pc, #188]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	099b      	lsrs	r3, r3, #6
 8001b9e:	f04f 0400 	mov.w	r4, #0
 8001ba2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	ea03 0501 	and.w	r5, r3, r1
 8001bae:	ea04 0602 	and.w	r6, r4, r2
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	4632      	mov	r2, r6
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	f04f 0400 	mov.w	r4, #0
 8001bbe:	0154      	lsls	r4, r2, #5
 8001bc0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bc4:	014b      	lsls	r3, r1, #5
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4622      	mov	r2, r4
 8001bca:	1b49      	subs	r1, r1, r5
 8001bcc:	eb62 0206 	sbc.w	r2, r2, r6
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	f04f 0400 	mov.w	r4, #0
 8001bd8:	0194      	lsls	r4, r2, #6
 8001bda:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001bde:	018b      	lsls	r3, r1, #6
 8001be0:	1a5b      	subs	r3, r3, r1
 8001be2:	eb64 0402 	sbc.w	r4, r4, r2
 8001be6:	f04f 0100 	mov.w	r1, #0
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	00e2      	lsls	r2, r4, #3
 8001bf0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001bf4:	00d9      	lsls	r1, r3, #3
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4614      	mov	r4, r2
 8001bfa:	195b      	adds	r3, r3, r5
 8001bfc:	eb44 0406 	adc.w	r4, r4, r6
 8001c00:	f04f 0100 	mov.w	r1, #0
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	02a2      	lsls	r2, r4, #10
 8001c0a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c0e:	0299      	lsls	r1, r3, #10
 8001c10:	460b      	mov	r3, r1
 8001c12:	4614      	mov	r4, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	4621      	mov	r1, r4
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f04f 0400 	mov.w	r4, #0
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4623      	mov	r3, r4
 8001c22:	f7fe fb2d 	bl	8000280 <__aeabi_uldivmod>
 8001c26:	4603      	mov	r3, r0
 8001c28:	460c      	mov	r4, r1
 8001c2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	0c1b      	lsrs	r3, r3, #16
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	3301      	adds	r3, #1
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c3c:	68fa      	ldr	r2, [r7, #12]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c44:	60bb      	str	r3, [r7, #8]
      break;
 8001c46:	e002      	b.n	8001c4e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c4a:	60bb      	str	r3, [r7, #8]
      break;
 8001c4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c4e:	68bb      	ldr	r3, [r7, #8]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	00f42400 	.word	0x00f42400
 8001c60:	007a1200 	.word	0x007a1200

08001c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000000 	.word	0x20000000

08001c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c80:	f7ff fff0 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001c84:	4601      	mov	r1, r0
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	0a9b      	lsrs	r3, r3, #10
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4a03      	ldr	r2, [pc, #12]	; (8001ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c92:	5cd3      	ldrb	r3, [r2, r3]
 8001c94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	08005ff0 	.word	0x08005ff0

08001ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ca8:	f7ff ffdc 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001cac:	4601      	mov	r1, r0
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	0b5b      	lsrs	r3, r3, #13
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4a03      	ldr	r2, [pc, #12]	; (8001cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cba:	5cd3      	ldrb	r3, [r2, r3]
 8001cbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	08005ff0 	.word	0x08005ff0

08001ccc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	220f      	movs	r2, #15
 8001cda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_RCC_GetClockConfig+0x5c>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 0203 	and.w	r2, r3, #3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <HAL_RCC_GetClockConfig+0x5c>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_RCC_GetClockConfig+0x5c>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	08db      	lsrs	r3, r3, #3
 8001d06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <HAL_RCC_GetClockConfig+0x60>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 020f 	and.w	r2, r3, #15
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	601a      	str	r2, [r3, #0]
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40023c00 	.word	0x40023c00

08001d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e01d      	b.n	8001d7e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d106      	bne.n	8001d5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f815 	bl	8001d86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4610      	mov	r0, r2
 8001d70:	f000 f968 	bl	8002044 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b085      	sub	sp, #20
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f042 0201 	orr.w	r2, r2, #1
 8001db0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b06      	cmp	r3, #6
 8001dc2:	d007      	beq.n	8001dd4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d122      	bne.n	8001e3e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d11b      	bne.n	8001e3e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f06f 0202 	mvn.w	r2, #2
 8001e0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f8ee 	bl	8002006 <HAL_TIM_IC_CaptureCallback>
 8001e2a:	e005      	b.n	8001e38 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f8e0 	bl	8001ff2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f8f1 	bl	800201a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d122      	bne.n	8001e92 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d11b      	bne.n	8001e92 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f06f 0204 	mvn.w	r2, #4
 8001e62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2202      	movs	r2, #2
 8001e68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f8c4 	bl	8002006 <HAL_TIM_IC_CaptureCallback>
 8001e7e:	e005      	b.n	8001e8c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f8b6 	bl	8001ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f8c7 	bl	800201a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d122      	bne.n	8001ee6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d11b      	bne.n	8001ee6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f06f 0208 	mvn.w	r2, #8
 8001eb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2204      	movs	r2, #4
 8001ebc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f89a 	bl	8002006 <HAL_TIM_IC_CaptureCallback>
 8001ed2:	e005      	b.n	8001ee0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f88c 	bl	8001ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f89d 	bl	800201a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b10      	cmp	r3, #16
 8001ef2:	d122      	bne.n	8001f3a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b10      	cmp	r3, #16
 8001f00:	d11b      	bne.n	8001f3a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f06f 0210 	mvn.w	r2, #16
 8001f0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2208      	movs	r2, #8
 8001f10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f870 	bl	8002006 <HAL_TIM_IC_CaptureCallback>
 8001f26:	e005      	b.n	8001f34 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f862 	bl	8001ff2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f873 	bl	800201a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d10e      	bne.n	8001f66 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d107      	bne.n	8001f66 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f06f 0201 	mvn.w	r2, #1
 8001f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7fe fdc9 	bl	8000af8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f70:	2b80      	cmp	r3, #128	; 0x80
 8001f72:	d10e      	bne.n	8001f92 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7e:	2b80      	cmp	r3, #128	; 0x80
 8001f80:	d107      	bne.n	8001f92 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f903 	bl	8002198 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9c:	2b40      	cmp	r3, #64	; 0x40
 8001f9e:	d10e      	bne.n	8001fbe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001faa:	2b40      	cmp	r3, #64	; 0x40
 8001fac:	d107      	bne.n	8001fbe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f838 	bl	800202e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	f003 0320 	and.w	r3, r3, #32
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	d10e      	bne.n	8001fea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	f003 0320 	and.w	r3, r3, #32
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	d107      	bne.n	8001fea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f06f 0220 	mvn.w	r2, #32
 8001fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f8cd 	bl	8002184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a40      	ldr	r2, [pc, #256]	; (8002158 <TIM_Base_SetConfig+0x114>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d013      	beq.n	8002084 <TIM_Base_SetConfig+0x40>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002062:	d00f      	beq.n	8002084 <TIM_Base_SetConfig+0x40>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a3d      	ldr	r2, [pc, #244]	; (800215c <TIM_Base_SetConfig+0x118>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d00b      	beq.n	8002084 <TIM_Base_SetConfig+0x40>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a3c      	ldr	r2, [pc, #240]	; (8002160 <TIM_Base_SetConfig+0x11c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d007      	beq.n	8002084 <TIM_Base_SetConfig+0x40>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a3b      	ldr	r2, [pc, #236]	; (8002164 <TIM_Base_SetConfig+0x120>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d003      	beq.n	8002084 <TIM_Base_SetConfig+0x40>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a3a      	ldr	r2, [pc, #232]	; (8002168 <TIM_Base_SetConfig+0x124>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d108      	bne.n	8002096 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800208a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a2f      	ldr	r2, [pc, #188]	; (8002158 <TIM_Base_SetConfig+0x114>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d02b      	beq.n	80020f6 <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a4:	d027      	beq.n	80020f6 <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a2c      	ldr	r2, [pc, #176]	; (800215c <TIM_Base_SetConfig+0x118>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d023      	beq.n	80020f6 <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a2b      	ldr	r2, [pc, #172]	; (8002160 <TIM_Base_SetConfig+0x11c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d01f      	beq.n	80020f6 <TIM_Base_SetConfig+0xb2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a2a      	ldr	r2, [pc, #168]	; (8002164 <TIM_Base_SetConfig+0x120>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d01b      	beq.n	80020f6 <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a29      	ldr	r2, [pc, #164]	; (8002168 <TIM_Base_SetConfig+0x124>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d017      	beq.n	80020f6 <TIM_Base_SetConfig+0xb2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a28      	ldr	r2, [pc, #160]	; (800216c <TIM_Base_SetConfig+0x128>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d013      	beq.n	80020f6 <TIM_Base_SetConfig+0xb2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a27      	ldr	r2, [pc, #156]	; (8002170 <TIM_Base_SetConfig+0x12c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00f      	beq.n	80020f6 <TIM_Base_SetConfig+0xb2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a26      	ldr	r2, [pc, #152]	; (8002174 <TIM_Base_SetConfig+0x130>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00b      	beq.n	80020f6 <TIM_Base_SetConfig+0xb2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a25      	ldr	r2, [pc, #148]	; (8002178 <TIM_Base_SetConfig+0x134>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d007      	beq.n	80020f6 <TIM_Base_SetConfig+0xb2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a24      	ldr	r2, [pc, #144]	; (800217c <TIM_Base_SetConfig+0x138>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d003      	beq.n	80020f6 <TIM_Base_SetConfig+0xb2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a23      	ldr	r2, [pc, #140]	; (8002180 <TIM_Base_SetConfig+0x13c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d108      	bne.n	8002108 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4313      	orrs	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	4313      	orrs	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <TIM_Base_SetConfig+0x114>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d003      	beq.n	800213c <TIM_Base_SetConfig+0xf8>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a0c      	ldr	r2, [pc, #48]	; (8002168 <TIM_Base_SetConfig+0x124>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d103      	bne.n	8002144 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	615a      	str	r2, [r3, #20]
}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40010000 	.word	0x40010000
 800215c:	40000400 	.word	0x40000400
 8002160:	40000800 	.word	0x40000800
 8002164:	40000c00 	.word	0x40000c00
 8002168:	40010400 	.word	0x40010400
 800216c:	40014000 	.word	0x40014000
 8002170:	40014400 	.word	0x40014400
 8002174:	40014800 	.word	0x40014800
 8002178:	40001800 	.word	0x40001800
 800217c:	40001c00 	.word	0x40001c00
 8002180:	40002000 	.word	0x40002000

08002184 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e03f      	b.n	800223e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d106      	bne.n	80021d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe fcd2 	bl	8000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2224      	movs	r2, #36	; 0x24
 80021dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f90b 	bl	800240c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002204:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695a      	ldr	r2, [r3, #20]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002214:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002224:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2220      	movs	r2, #32
 8002238:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b088      	sub	sp, #32
 800224a:	af02      	add	r7, sp, #8
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	603b      	str	r3, [r7, #0]
 8002252:	4613      	mov	r3, r2
 8002254:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b20      	cmp	r3, #32
 8002264:	f040 8083 	bne.w	800236e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <HAL_UART_Transmit+0x2e>
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e07b      	b.n	8002370 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <HAL_UART_Transmit+0x40>
 8002282:	2302      	movs	r3, #2
 8002284:	e074      	b.n	8002370 <HAL_UART_Transmit+0x12a>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2221      	movs	r2, #33	; 0x21
 8002298:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800229c:	f7fe fde0 	bl	8000e60 <HAL_GetTick>
 80022a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	88fa      	ldrh	r2, [r7, #6]
 80022a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	88fa      	ldrh	r2, [r7, #6]
 80022ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80022b6:	e042      	b.n	800233e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022bc:	b29b      	uxth	r3, r3
 80022be:	3b01      	subs	r3, #1
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ce:	d122      	bne.n	8002316 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2200      	movs	r2, #0
 80022d8:	2180      	movs	r1, #128	; 0x80
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f84c 	bl	8002378 <UART_WaitOnFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e042      	b.n	8002370 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022fc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d103      	bne.n	800230e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	3302      	adds	r3, #2
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	e017      	b.n	800233e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	3301      	adds	r3, #1
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	e013      	b.n	800233e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2200      	movs	r2, #0
 800231e:	2180      	movs	r1, #128	; 0x80
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 f829 	bl	8002378 <UART_WaitOnFlagUntilTimeout>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e01f      	b.n	8002370 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	60ba      	str	r2, [r7, #8]
 8002336:	781a      	ldrb	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1b7      	bne.n	80022b8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2200      	movs	r2, #0
 8002350:	2140      	movs	r1, #64	; 0x40
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 f810 	bl	8002378 <UART_WaitOnFlagUntilTimeout>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e006      	b.n	8002370 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2220      	movs	r2, #32
 8002366:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	e000      	b.n	8002370 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800236e:	2302      	movs	r3, #2
  }
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	4613      	mov	r3, r2
 8002386:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002388:	e02c      	b.n	80023e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002390:	d028      	beq.n	80023e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d007      	beq.n	80023a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002398:	f7fe fd62 	bl	8000e60 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d21d      	bcs.n	80023e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80023b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0201 	bic.w	r2, r2, #1
 80023c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e00f      	b.n	8002404 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	4013      	ands	r3, r2
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	bf0c      	ite	eq
 80023f4:	2301      	moveq	r3, #1
 80023f6:	2300      	movne	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d0c3      	beq.n	800238a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800240c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002410:	b085      	sub	sp, #20
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	4313      	orrs	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800244e:	f023 030c 	bic.w	r3, r3, #12
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	68f9      	ldr	r1, [r7, #12]
 8002458:	430b      	orrs	r3, r1
 800245a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699a      	ldr	r2, [r3, #24]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800247a:	f040 818b 	bne.w	8002794 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4ac1      	ldr	r2, [pc, #772]	; (8002788 <UART_SetConfig+0x37c>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d005      	beq.n	8002494 <UART_SetConfig+0x88>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4abf      	ldr	r2, [pc, #764]	; (800278c <UART_SetConfig+0x380>)
 800248e:	4293      	cmp	r3, r2
 8002490:	f040 80bd 	bne.w	800260e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002494:	f7ff fc06 	bl	8001ca4 <HAL_RCC_GetPCLK2Freq>
 8002498:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	461d      	mov	r5, r3
 800249e:	f04f 0600 	mov.w	r6, #0
 80024a2:	46a8      	mov	r8, r5
 80024a4:	46b1      	mov	r9, r6
 80024a6:	eb18 0308 	adds.w	r3, r8, r8
 80024aa:	eb49 0409 	adc.w	r4, r9, r9
 80024ae:	4698      	mov	r8, r3
 80024b0:	46a1      	mov	r9, r4
 80024b2:	eb18 0805 	adds.w	r8, r8, r5
 80024b6:	eb49 0906 	adc.w	r9, r9, r6
 80024ba:	f04f 0100 	mov.w	r1, #0
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80024c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80024ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80024ce:	4688      	mov	r8, r1
 80024d0:	4691      	mov	r9, r2
 80024d2:	eb18 0005 	adds.w	r0, r8, r5
 80024d6:	eb49 0106 	adc.w	r1, r9, r6
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	461d      	mov	r5, r3
 80024e0:	f04f 0600 	mov.w	r6, #0
 80024e4:	196b      	adds	r3, r5, r5
 80024e6:	eb46 0406 	adc.w	r4, r6, r6
 80024ea:	461a      	mov	r2, r3
 80024ec:	4623      	mov	r3, r4
 80024ee:	f7fd fec7 	bl	8000280 <__aeabi_uldivmod>
 80024f2:	4603      	mov	r3, r0
 80024f4:	460c      	mov	r4, r1
 80024f6:	461a      	mov	r2, r3
 80024f8:	4ba5      	ldr	r3, [pc, #660]	; (8002790 <UART_SetConfig+0x384>)
 80024fa:	fba3 2302 	umull	r2, r3, r3, r2
 80024fe:	095b      	lsrs	r3, r3, #5
 8002500:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	461d      	mov	r5, r3
 8002508:	f04f 0600 	mov.w	r6, #0
 800250c:	46a9      	mov	r9, r5
 800250e:	46b2      	mov	sl, r6
 8002510:	eb19 0309 	adds.w	r3, r9, r9
 8002514:	eb4a 040a 	adc.w	r4, sl, sl
 8002518:	4699      	mov	r9, r3
 800251a:	46a2      	mov	sl, r4
 800251c:	eb19 0905 	adds.w	r9, r9, r5
 8002520:	eb4a 0a06 	adc.w	sl, sl, r6
 8002524:	f04f 0100 	mov.w	r1, #0
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002530:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002534:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002538:	4689      	mov	r9, r1
 800253a:	4692      	mov	sl, r2
 800253c:	eb19 0005 	adds.w	r0, r9, r5
 8002540:	eb4a 0106 	adc.w	r1, sl, r6
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	461d      	mov	r5, r3
 800254a:	f04f 0600 	mov.w	r6, #0
 800254e:	196b      	adds	r3, r5, r5
 8002550:	eb46 0406 	adc.w	r4, r6, r6
 8002554:	461a      	mov	r2, r3
 8002556:	4623      	mov	r3, r4
 8002558:	f7fd fe92 	bl	8000280 <__aeabi_uldivmod>
 800255c:	4603      	mov	r3, r0
 800255e:	460c      	mov	r4, r1
 8002560:	461a      	mov	r2, r3
 8002562:	4b8b      	ldr	r3, [pc, #556]	; (8002790 <UART_SetConfig+0x384>)
 8002564:	fba3 1302 	umull	r1, r3, r3, r2
 8002568:	095b      	lsrs	r3, r3, #5
 800256a:	2164      	movs	r1, #100	; 0x64
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	3332      	adds	r3, #50	; 0x32
 8002576:	4a86      	ldr	r2, [pc, #536]	; (8002790 <UART_SetConfig+0x384>)
 8002578:	fba2 2303 	umull	r2, r3, r2, r3
 800257c:	095b      	lsrs	r3, r3, #5
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002584:	4498      	add	r8, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	461d      	mov	r5, r3
 800258a:	f04f 0600 	mov.w	r6, #0
 800258e:	46a9      	mov	r9, r5
 8002590:	46b2      	mov	sl, r6
 8002592:	eb19 0309 	adds.w	r3, r9, r9
 8002596:	eb4a 040a 	adc.w	r4, sl, sl
 800259a:	4699      	mov	r9, r3
 800259c:	46a2      	mov	sl, r4
 800259e:	eb19 0905 	adds.w	r9, r9, r5
 80025a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80025a6:	f04f 0100 	mov.w	r1, #0
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025ba:	4689      	mov	r9, r1
 80025bc:	4692      	mov	sl, r2
 80025be:	eb19 0005 	adds.w	r0, r9, r5
 80025c2:	eb4a 0106 	adc.w	r1, sl, r6
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	461d      	mov	r5, r3
 80025cc:	f04f 0600 	mov.w	r6, #0
 80025d0:	196b      	adds	r3, r5, r5
 80025d2:	eb46 0406 	adc.w	r4, r6, r6
 80025d6:	461a      	mov	r2, r3
 80025d8:	4623      	mov	r3, r4
 80025da:	f7fd fe51 	bl	8000280 <__aeabi_uldivmod>
 80025de:	4603      	mov	r3, r0
 80025e0:	460c      	mov	r4, r1
 80025e2:	461a      	mov	r2, r3
 80025e4:	4b6a      	ldr	r3, [pc, #424]	; (8002790 <UART_SetConfig+0x384>)
 80025e6:	fba3 1302 	umull	r1, r3, r3, r2
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	2164      	movs	r1, #100	; 0x64
 80025ee:	fb01 f303 	mul.w	r3, r1, r3
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	3332      	adds	r3, #50	; 0x32
 80025f8:	4a65      	ldr	r2, [pc, #404]	; (8002790 <UART_SetConfig+0x384>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	f003 0207 	and.w	r2, r3, #7
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4442      	add	r2, r8
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	e26f      	b.n	8002aee <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800260e:	f7ff fb35 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 8002612:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	461d      	mov	r5, r3
 8002618:	f04f 0600 	mov.w	r6, #0
 800261c:	46a8      	mov	r8, r5
 800261e:	46b1      	mov	r9, r6
 8002620:	eb18 0308 	adds.w	r3, r8, r8
 8002624:	eb49 0409 	adc.w	r4, r9, r9
 8002628:	4698      	mov	r8, r3
 800262a:	46a1      	mov	r9, r4
 800262c:	eb18 0805 	adds.w	r8, r8, r5
 8002630:	eb49 0906 	adc.w	r9, r9, r6
 8002634:	f04f 0100 	mov.w	r1, #0
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002640:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002644:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002648:	4688      	mov	r8, r1
 800264a:	4691      	mov	r9, r2
 800264c:	eb18 0005 	adds.w	r0, r8, r5
 8002650:	eb49 0106 	adc.w	r1, r9, r6
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	461d      	mov	r5, r3
 800265a:	f04f 0600 	mov.w	r6, #0
 800265e:	196b      	adds	r3, r5, r5
 8002660:	eb46 0406 	adc.w	r4, r6, r6
 8002664:	461a      	mov	r2, r3
 8002666:	4623      	mov	r3, r4
 8002668:	f7fd fe0a 	bl	8000280 <__aeabi_uldivmod>
 800266c:	4603      	mov	r3, r0
 800266e:	460c      	mov	r4, r1
 8002670:	461a      	mov	r2, r3
 8002672:	4b47      	ldr	r3, [pc, #284]	; (8002790 <UART_SetConfig+0x384>)
 8002674:	fba3 2302 	umull	r2, r3, r3, r2
 8002678:	095b      	lsrs	r3, r3, #5
 800267a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	461d      	mov	r5, r3
 8002682:	f04f 0600 	mov.w	r6, #0
 8002686:	46a9      	mov	r9, r5
 8002688:	46b2      	mov	sl, r6
 800268a:	eb19 0309 	adds.w	r3, r9, r9
 800268e:	eb4a 040a 	adc.w	r4, sl, sl
 8002692:	4699      	mov	r9, r3
 8002694:	46a2      	mov	sl, r4
 8002696:	eb19 0905 	adds.w	r9, r9, r5
 800269a:	eb4a 0a06 	adc.w	sl, sl, r6
 800269e:	f04f 0100 	mov.w	r1, #0
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026b2:	4689      	mov	r9, r1
 80026b4:	4692      	mov	sl, r2
 80026b6:	eb19 0005 	adds.w	r0, r9, r5
 80026ba:	eb4a 0106 	adc.w	r1, sl, r6
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	461d      	mov	r5, r3
 80026c4:	f04f 0600 	mov.w	r6, #0
 80026c8:	196b      	adds	r3, r5, r5
 80026ca:	eb46 0406 	adc.w	r4, r6, r6
 80026ce:	461a      	mov	r2, r3
 80026d0:	4623      	mov	r3, r4
 80026d2:	f7fd fdd5 	bl	8000280 <__aeabi_uldivmod>
 80026d6:	4603      	mov	r3, r0
 80026d8:	460c      	mov	r4, r1
 80026da:	461a      	mov	r2, r3
 80026dc:	4b2c      	ldr	r3, [pc, #176]	; (8002790 <UART_SetConfig+0x384>)
 80026de:	fba3 1302 	umull	r1, r3, r3, r2
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	2164      	movs	r1, #100	; 0x64
 80026e6:	fb01 f303 	mul.w	r3, r1, r3
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	3332      	adds	r3, #50	; 0x32
 80026f0:	4a27      	ldr	r2, [pc, #156]	; (8002790 <UART_SetConfig+0x384>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026fe:	4498      	add	r8, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	461d      	mov	r5, r3
 8002704:	f04f 0600 	mov.w	r6, #0
 8002708:	46a9      	mov	r9, r5
 800270a:	46b2      	mov	sl, r6
 800270c:	eb19 0309 	adds.w	r3, r9, r9
 8002710:	eb4a 040a 	adc.w	r4, sl, sl
 8002714:	4699      	mov	r9, r3
 8002716:	46a2      	mov	sl, r4
 8002718:	eb19 0905 	adds.w	r9, r9, r5
 800271c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002720:	f04f 0100 	mov.w	r1, #0
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800272c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002730:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002734:	4689      	mov	r9, r1
 8002736:	4692      	mov	sl, r2
 8002738:	eb19 0005 	adds.w	r0, r9, r5
 800273c:	eb4a 0106 	adc.w	r1, sl, r6
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	461d      	mov	r5, r3
 8002746:	f04f 0600 	mov.w	r6, #0
 800274a:	196b      	adds	r3, r5, r5
 800274c:	eb46 0406 	adc.w	r4, r6, r6
 8002750:	461a      	mov	r2, r3
 8002752:	4623      	mov	r3, r4
 8002754:	f7fd fd94 	bl	8000280 <__aeabi_uldivmod>
 8002758:	4603      	mov	r3, r0
 800275a:	460c      	mov	r4, r1
 800275c:	461a      	mov	r2, r3
 800275e:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <UART_SetConfig+0x384>)
 8002760:	fba3 1302 	umull	r1, r3, r3, r2
 8002764:	095b      	lsrs	r3, r3, #5
 8002766:	2164      	movs	r1, #100	; 0x64
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	3332      	adds	r3, #50	; 0x32
 8002772:	4a07      	ldr	r2, [pc, #28]	; (8002790 <UART_SetConfig+0x384>)
 8002774:	fba2 2303 	umull	r2, r3, r2, r3
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	f003 0207 	and.w	r2, r3, #7
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4442      	add	r2, r8
 8002784:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002786:	e1b2      	b.n	8002aee <UART_SetConfig+0x6e2>
 8002788:	40011000 	.word	0x40011000
 800278c:	40011400 	.word	0x40011400
 8002790:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4ad7      	ldr	r2, [pc, #860]	; (8002af8 <UART_SetConfig+0x6ec>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d005      	beq.n	80027aa <UART_SetConfig+0x39e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4ad6      	ldr	r2, [pc, #856]	; (8002afc <UART_SetConfig+0x6f0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	f040 80d1 	bne.w	800294c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80027aa:	f7ff fa7b 	bl	8001ca4 <HAL_RCC_GetPCLK2Freq>
 80027ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	469a      	mov	sl, r3
 80027b4:	f04f 0b00 	mov.w	fp, #0
 80027b8:	46d0      	mov	r8, sl
 80027ba:	46d9      	mov	r9, fp
 80027bc:	eb18 0308 	adds.w	r3, r8, r8
 80027c0:	eb49 0409 	adc.w	r4, r9, r9
 80027c4:	4698      	mov	r8, r3
 80027c6:	46a1      	mov	r9, r4
 80027c8:	eb18 080a 	adds.w	r8, r8, sl
 80027cc:	eb49 090b 	adc.w	r9, r9, fp
 80027d0:	f04f 0100 	mov.w	r1, #0
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80027dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80027e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80027e4:	4688      	mov	r8, r1
 80027e6:	4691      	mov	r9, r2
 80027e8:	eb1a 0508 	adds.w	r5, sl, r8
 80027ec:	eb4b 0609 	adc.w	r6, fp, r9
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	4619      	mov	r1, r3
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	f04f 0300 	mov.w	r3, #0
 80027fe:	f04f 0400 	mov.w	r4, #0
 8002802:	0094      	lsls	r4, r2, #2
 8002804:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002808:	008b      	lsls	r3, r1, #2
 800280a:	461a      	mov	r2, r3
 800280c:	4623      	mov	r3, r4
 800280e:	4628      	mov	r0, r5
 8002810:	4631      	mov	r1, r6
 8002812:	f7fd fd35 	bl	8000280 <__aeabi_uldivmod>
 8002816:	4603      	mov	r3, r0
 8002818:	460c      	mov	r4, r1
 800281a:	461a      	mov	r2, r3
 800281c:	4bb8      	ldr	r3, [pc, #736]	; (8002b00 <UART_SetConfig+0x6f4>)
 800281e:	fba3 2302 	umull	r2, r3, r3, r2
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	469b      	mov	fp, r3
 800282c:	f04f 0c00 	mov.w	ip, #0
 8002830:	46d9      	mov	r9, fp
 8002832:	46e2      	mov	sl, ip
 8002834:	eb19 0309 	adds.w	r3, r9, r9
 8002838:	eb4a 040a 	adc.w	r4, sl, sl
 800283c:	4699      	mov	r9, r3
 800283e:	46a2      	mov	sl, r4
 8002840:	eb19 090b 	adds.w	r9, r9, fp
 8002844:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002848:	f04f 0100 	mov.w	r1, #0
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002854:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002858:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800285c:	4689      	mov	r9, r1
 800285e:	4692      	mov	sl, r2
 8002860:	eb1b 0509 	adds.w	r5, fp, r9
 8002864:	eb4c 060a 	adc.w	r6, ip, sl
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	4619      	mov	r1, r3
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	f04f 0400 	mov.w	r4, #0
 800287a:	0094      	lsls	r4, r2, #2
 800287c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002880:	008b      	lsls	r3, r1, #2
 8002882:	461a      	mov	r2, r3
 8002884:	4623      	mov	r3, r4
 8002886:	4628      	mov	r0, r5
 8002888:	4631      	mov	r1, r6
 800288a:	f7fd fcf9 	bl	8000280 <__aeabi_uldivmod>
 800288e:	4603      	mov	r3, r0
 8002890:	460c      	mov	r4, r1
 8002892:	461a      	mov	r2, r3
 8002894:	4b9a      	ldr	r3, [pc, #616]	; (8002b00 <UART_SetConfig+0x6f4>)
 8002896:	fba3 1302 	umull	r1, r3, r3, r2
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	2164      	movs	r1, #100	; 0x64
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	3332      	adds	r3, #50	; 0x32
 80028a8:	4a95      	ldr	r2, [pc, #596]	; (8002b00 <UART_SetConfig+0x6f4>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028b4:	4498      	add	r8, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	469b      	mov	fp, r3
 80028ba:	f04f 0c00 	mov.w	ip, #0
 80028be:	46d9      	mov	r9, fp
 80028c0:	46e2      	mov	sl, ip
 80028c2:	eb19 0309 	adds.w	r3, r9, r9
 80028c6:	eb4a 040a 	adc.w	r4, sl, sl
 80028ca:	4699      	mov	r9, r3
 80028cc:	46a2      	mov	sl, r4
 80028ce:	eb19 090b 	adds.w	r9, r9, fp
 80028d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80028d6:	f04f 0100 	mov.w	r1, #0
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028ea:	4689      	mov	r9, r1
 80028ec:	4692      	mov	sl, r2
 80028ee:	eb1b 0509 	adds.w	r5, fp, r9
 80028f2:	eb4c 060a 	adc.w	r6, ip, sl
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4619      	mov	r1, r3
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	f04f 0400 	mov.w	r4, #0
 8002908:	0094      	lsls	r4, r2, #2
 800290a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800290e:	008b      	lsls	r3, r1, #2
 8002910:	461a      	mov	r2, r3
 8002912:	4623      	mov	r3, r4
 8002914:	4628      	mov	r0, r5
 8002916:	4631      	mov	r1, r6
 8002918:	f7fd fcb2 	bl	8000280 <__aeabi_uldivmod>
 800291c:	4603      	mov	r3, r0
 800291e:	460c      	mov	r4, r1
 8002920:	461a      	mov	r2, r3
 8002922:	4b77      	ldr	r3, [pc, #476]	; (8002b00 <UART_SetConfig+0x6f4>)
 8002924:	fba3 1302 	umull	r1, r3, r3, r2
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	2164      	movs	r1, #100	; 0x64
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	3332      	adds	r3, #50	; 0x32
 8002936:	4a72      	ldr	r2, [pc, #456]	; (8002b00 <UART_SetConfig+0x6f4>)
 8002938:	fba2 2303 	umull	r2, r3, r2, r3
 800293c:	095b      	lsrs	r3, r3, #5
 800293e:	f003 020f 	and.w	r2, r3, #15
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4442      	add	r2, r8
 8002948:	609a      	str	r2, [r3, #8]
 800294a:	e0d0      	b.n	8002aee <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800294c:	f7ff f996 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 8002950:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	469a      	mov	sl, r3
 8002956:	f04f 0b00 	mov.w	fp, #0
 800295a:	46d0      	mov	r8, sl
 800295c:	46d9      	mov	r9, fp
 800295e:	eb18 0308 	adds.w	r3, r8, r8
 8002962:	eb49 0409 	adc.w	r4, r9, r9
 8002966:	4698      	mov	r8, r3
 8002968:	46a1      	mov	r9, r4
 800296a:	eb18 080a 	adds.w	r8, r8, sl
 800296e:	eb49 090b 	adc.w	r9, r9, fp
 8002972:	f04f 0100 	mov.w	r1, #0
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800297e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002982:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002986:	4688      	mov	r8, r1
 8002988:	4691      	mov	r9, r2
 800298a:	eb1a 0508 	adds.w	r5, sl, r8
 800298e:	eb4b 0609 	adc.w	r6, fp, r9
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4619      	mov	r1, r3
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	f04f 0400 	mov.w	r4, #0
 80029a4:	0094      	lsls	r4, r2, #2
 80029a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80029aa:	008b      	lsls	r3, r1, #2
 80029ac:	461a      	mov	r2, r3
 80029ae:	4623      	mov	r3, r4
 80029b0:	4628      	mov	r0, r5
 80029b2:	4631      	mov	r1, r6
 80029b4:	f7fd fc64 	bl	8000280 <__aeabi_uldivmod>
 80029b8:	4603      	mov	r3, r0
 80029ba:	460c      	mov	r4, r1
 80029bc:	461a      	mov	r2, r3
 80029be:	4b50      	ldr	r3, [pc, #320]	; (8002b00 <UART_SetConfig+0x6f4>)
 80029c0:	fba3 2302 	umull	r2, r3, r3, r2
 80029c4:	095b      	lsrs	r3, r3, #5
 80029c6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	469b      	mov	fp, r3
 80029ce:	f04f 0c00 	mov.w	ip, #0
 80029d2:	46d9      	mov	r9, fp
 80029d4:	46e2      	mov	sl, ip
 80029d6:	eb19 0309 	adds.w	r3, r9, r9
 80029da:	eb4a 040a 	adc.w	r4, sl, sl
 80029de:	4699      	mov	r9, r3
 80029e0:	46a2      	mov	sl, r4
 80029e2:	eb19 090b 	adds.w	r9, r9, fp
 80029e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80029ea:	f04f 0100 	mov.w	r1, #0
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029fe:	4689      	mov	r9, r1
 8002a00:	4692      	mov	sl, r2
 8002a02:	eb1b 0509 	adds.w	r5, fp, r9
 8002a06:	eb4c 060a 	adc.w	r6, ip, sl
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4619      	mov	r1, r3
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	f04f 0400 	mov.w	r4, #0
 8002a1c:	0094      	lsls	r4, r2, #2
 8002a1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a22:	008b      	lsls	r3, r1, #2
 8002a24:	461a      	mov	r2, r3
 8002a26:	4623      	mov	r3, r4
 8002a28:	4628      	mov	r0, r5
 8002a2a:	4631      	mov	r1, r6
 8002a2c:	f7fd fc28 	bl	8000280 <__aeabi_uldivmod>
 8002a30:	4603      	mov	r3, r0
 8002a32:	460c      	mov	r4, r1
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b32      	ldr	r3, [pc, #200]	; (8002b00 <UART_SetConfig+0x6f4>)
 8002a38:	fba3 1302 	umull	r1, r3, r3, r2
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	2164      	movs	r1, #100	; 0x64
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	3332      	adds	r3, #50	; 0x32
 8002a4a:	4a2d      	ldr	r2, [pc, #180]	; (8002b00 <UART_SetConfig+0x6f4>)
 8002a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a56:	4498      	add	r8, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	469b      	mov	fp, r3
 8002a5c:	f04f 0c00 	mov.w	ip, #0
 8002a60:	46d9      	mov	r9, fp
 8002a62:	46e2      	mov	sl, ip
 8002a64:	eb19 0309 	adds.w	r3, r9, r9
 8002a68:	eb4a 040a 	adc.w	r4, sl, sl
 8002a6c:	4699      	mov	r9, r3
 8002a6e:	46a2      	mov	sl, r4
 8002a70:	eb19 090b 	adds.w	r9, r9, fp
 8002a74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a78:	f04f 0100 	mov.w	r1, #0
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a8c:	4689      	mov	r9, r1
 8002a8e:	4692      	mov	sl, r2
 8002a90:	eb1b 0509 	adds.w	r5, fp, r9
 8002a94:	eb4c 060a 	adc.w	r6, ip, sl
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	f04f 0400 	mov.w	r4, #0
 8002aaa:	0094      	lsls	r4, r2, #2
 8002aac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ab0:	008b      	lsls	r3, r1, #2
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	4623      	mov	r3, r4
 8002ab6:	4628      	mov	r0, r5
 8002ab8:	4631      	mov	r1, r6
 8002aba:	f7fd fbe1 	bl	8000280 <__aeabi_uldivmod>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	460c      	mov	r4, r1
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <UART_SetConfig+0x6f4>)
 8002ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	2164      	movs	r1, #100	; 0x64
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	3332      	adds	r3, #50	; 0x32
 8002ad8:	4a09      	ldr	r2, [pc, #36]	; (8002b00 <UART_SetConfig+0x6f4>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	f003 020f 	and.w	r2, r3, #15
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4442      	add	r2, r8
 8002aea:	609a      	str	r2, [r3, #8]
}
 8002aec:	e7ff      	b.n	8002aee <UART_SetConfig+0x6e2>
 8002aee:	bf00      	nop
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002af8:	40011000 	.word	0x40011000
 8002afc:	40011400 	.word	0x40011400
 8002b00:	51eb851f 	.word	0x51eb851f

08002b04 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b16:	2b84      	cmp	r3, #132	; 0x84
 8002b18:	d005      	beq.n	8002b26 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002b1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4413      	add	r3, r2
 8002b22:	3303      	adds	r3, #3
 8002b24:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002b26:	68fb      	ldr	r3, [r7, #12]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b3a:	f3ef 8305 	mrs	r3, IPSR
 8002b3e:	607b      	str	r3, [r7, #4]
  return(result);
 8002b40:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	bf14      	ite	ne
 8002b46:	2301      	movne	r3, #1
 8002b48:	2300      	moveq	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002b5c:	f001 f81a 	bl	8003b94 <vTaskStartScheduler>
  
  return osOK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002b66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b68:	b089      	sub	sp, #36	; 0x24
 8002b6a:	af04      	add	r7, sp, #16
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d020      	beq.n	8002bba <osThreadCreate+0x54>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01c      	beq.n	8002bba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685c      	ldr	r4, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681d      	ldr	r5, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691e      	ldr	r6, [r3, #16]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff ffb6 	bl	8002b04 <makeFreeRtosPriority>
 8002b98:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ba2:	9202      	str	r2, [sp, #8]
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	9100      	str	r1, [sp, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	4632      	mov	r2, r6
 8002bac:	4629      	mov	r1, r5
 8002bae:	4620      	mov	r0, r4
 8002bb0:	f000 fe60 	bl	8003874 <xTaskCreateStatic>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	e01c      	b.n	8002bf4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685c      	ldr	r4, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002bc6:	b29e      	uxth	r6, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff ff98 	bl	8002b04 <makeFreeRtosPriority>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	f107 030c 	add.w	r3, r7, #12
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	9200      	str	r2, [sp, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	4632      	mov	r2, r6
 8002be2:	4629      	mov	r1, r5
 8002be4:	4620      	mov	r0, r4
 8002be6:	f000 fe9f 	bl	8003928 <xTaskCreate>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d001      	beq.n	8002bf4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e000      	b.n	8002bf6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002c00 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d013      	beq.n	8002c3e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8002c16:	7afb      	ldrb	r3, [r7, #11]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <osTimerCreate+0x20>
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	e000      	b.n	8002c22 <osTimerCreate+0x22>
 8002c20:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8002c2a:	9201      	str	r2, [sp, #4]
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	460a      	mov	r2, r1
 8002c32:	2101      	movs	r1, #1
 8002c34:	480b      	ldr	r0, [pc, #44]	; (8002c64 <osTimerCreate+0x64>)
 8002c36:	f001 fd52 	bl	80046de <xTimerCreateStatic>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	e00e      	b.n	8002c5c <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8002c3e:	7afb      	ldrb	r3, [r7, #11]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <osTimerCreate+0x48>
 8002c44:	2201      	movs	r2, #1
 8002c46:	e000      	b.n	8002c4a <osTimerCreate+0x4a>
 8002c48:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2101      	movs	r1, #1
 8002c54:	4803      	ldr	r0, [pc, #12]	; (8002c64 <osTimerCreate+0x64>)
 8002c56:	f001 fd21 	bl	800469c <xTimerCreate>
 8002c5a:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	08005fc4 	.word	0x08005fc4

08002c68 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b088      	sub	sp, #32
 8002c6c:	af02      	add	r7, sp, #8
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <osTimerStart+0x20>
    ticks = 1;
 8002c84:	2301      	movs	r3, #1
 8002c86:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8002c88:	f7ff ff54 	bl	8002b34 <inHandlerMode>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01b      	beq.n	8002cca <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8002c92:	f107 020c 	add.w	r2, r7, #12
 8002c96:	2300      	movs	r3, #0
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	2109      	movs	r1, #9
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f001 fd93 	bl	80047cc <xTimerGenericCommand>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d002      	beq.n	8002cb2 <osTimerStart+0x4a>
    {
      result = osErrorOS;
 8002cac:	23ff      	movs	r3, #255	; 0xff
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	e018      	b.n	8002ce4 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d015      	beq.n	8002ce4 <osTimerStart+0x7c>
 8002cb8:	4b0d      	ldr	r3, [pc, #52]	; (8002cf0 <osTimerStart+0x88>)
 8002cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	e00c      	b.n	8002ce4 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8002cca:	2300      	movs	r3, #0
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	2104      	movs	r1, #4
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f001 fd79 	bl	80047cc <xTimerGenericCommand>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d001      	beq.n	8002ce4 <osTimerStart+0x7c>
      result = osErrorOS;
 8002ce0:	23ff      	movs	r3, #255	; 0xff
 8002ce2:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8002ce4:	697b      	ldr	r3, [r7, #20]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	e000ed04 	.word	0xe000ed04

08002cf4 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af02      	add	r7, sp, #8
 8002cfa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 8002d04:	f7ff ff16 	bl	8002b34 <inHandlerMode>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d01a      	beq.n	8002d44 <osTimerStop+0x50>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8002d0e:	f107 0208 	add.w	r2, r7, #8
 8002d12:	2300      	movs	r3, #0
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	4613      	mov	r3, r2
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2108      	movs	r1, #8
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f001 fd55 	bl	80047cc <xTimerGenericCommand>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d001      	beq.n	8002d2c <osTimerStop+0x38>
      return osErrorOS;
 8002d28:	23ff      	movs	r3, #255	; 0xff
 8002d2a:	e019      	b.n	8002d60 <osTimerStop+0x6c>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d015      	beq.n	8002d5e <osTimerStop+0x6a>
 8002d32:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <osTimerStop+0x74>)
 8002d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	f3bf 8f6f 	isb	sy
 8002d42:	e00c      	b.n	8002d5e <osTimerStop+0x6a>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8002d44:	2300      	movs	r3, #0
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	2300      	movs	r3, #0
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2103      	movs	r1, #3
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f001 fd3c 	bl	80047cc <xTimerGenericCommand>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d001      	beq.n	8002d5e <osTimerStop+0x6a>
      result = osErrorOS;
 8002d5a:	23ff      	movs	r3, #255	; 0xff
 8002d5c:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	e000ed04 	.word	0xe000ed04

08002d6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f103 0208 	add.w	r2, r3, #8
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f04f 32ff 	mov.w	r2, #4294967295
 8002d84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f103 0208 	add.w	r2, r3, #8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f103 0208 	add.w	r2, r3, #8
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b085      	sub	sp, #20
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	601a      	str	r2, [r3, #0]
}
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b085      	sub	sp, #20
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e24:	d103      	bne.n	8002e2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	e00c      	b.n	8002e48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3308      	adds	r3, #8
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	e002      	b.n	8002e3c <vListInsert+0x2e>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d2f6      	bcs.n	8002e36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	601a      	str	r2, [r3, #0]
}
 8002e74:	bf00      	nop
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6892      	ldr	r2, [r2, #8]
 8002e96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6852      	ldr	r2, [r2, #4]
 8002ea0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d103      	bne.n	8002eb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	1e5a      	subs	r2, r3, #1
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d109      	bne.n	8002efc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eec:	f383 8811 	msr	BASEPRI, r3
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	e7fe      	b.n	8002efa <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002efc:	f002 f8ce 	bl	800509c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f08:	68f9      	ldr	r1, [r7, #12]
 8002f0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	441a      	add	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	68f9      	ldr	r1, [r7, #12]
 8002f30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f32:	fb01 f303 	mul.w	r3, r1, r3
 8002f36:	441a      	add	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	22ff      	movs	r2, #255	; 0xff
 8002f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	22ff      	movs	r2, #255	; 0xff
 8002f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d114      	bne.n	8002f7c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d01a      	beq.n	8002f90 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	3310      	adds	r3, #16
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f001 f896 	bl	8004090 <xTaskRemoveFromEventList>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d012      	beq.n	8002f90 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <xQueueGenericReset+0xcc>)
 8002f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	f3bf 8f4f 	dsb	sy
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	e009      	b.n	8002f90 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	3310      	adds	r3, #16
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fef3 	bl	8002d6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	3324      	adds	r3, #36	; 0x24
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff feee 	bl	8002d6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f90:	f002 f8b2 	bl	80050f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f94:	2301      	movs	r3, #1
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	e000ed04 	.word	0xe000ed04

08002fa4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08e      	sub	sp, #56	; 0x38
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
 8002fb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d109      	bne.n	8002fcc <xQueueGenericCreateStatic+0x28>
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fca:	e7fe      	b.n	8002fca <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <xQueueGenericCreateStatic+0x42>
 8002fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd6:	f383 8811 	msr	BASEPRI, r3
 8002fda:	f3bf 8f6f 	isb	sy
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe4:	e7fe      	b.n	8002fe4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <xQueueGenericCreateStatic+0x4e>
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <xQueueGenericCreateStatic+0x52>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <xQueueGenericCreateStatic+0x54>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d109      	bne.n	8003010 <xQueueGenericCreateStatic+0x6c>
 8002ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003000:	f383 8811 	msr	BASEPRI, r3
 8003004:	f3bf 8f6f 	isb	sy
 8003008:	f3bf 8f4f 	dsb	sy
 800300c:	623b      	str	r3, [r7, #32]
 800300e:	e7fe      	b.n	800300e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d102      	bne.n	800301c <xQueueGenericCreateStatic+0x78>
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <xQueueGenericCreateStatic+0x7c>
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <xQueueGenericCreateStatic+0x7e>
 8003020:	2300      	movs	r3, #0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <xQueueGenericCreateStatic+0x96>
 8003026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	61fb      	str	r3, [r7, #28]
 8003038:	e7fe      	b.n	8003038 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800303a:	2348      	movs	r3, #72	; 0x48
 800303c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2b48      	cmp	r3, #72	; 0x48
 8003042:	d009      	beq.n	8003058 <xQueueGenericCreateStatic+0xb4>
 8003044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003048:	f383 8811 	msr	BASEPRI, r3
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	61bb      	str	r3, [r7, #24]
 8003056:	e7fe      	b.n	8003056 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003058:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800305e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00d      	beq.n	8003080 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800306c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	4613      	mov	r3, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f805 	bl	800308a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003082:	4618      	mov	r0, r3
 8003084:	3730      	adds	r7, #48	; 0x30
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d103      	bne.n	80030a6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	e002      	b.n	80030ac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80030b8:	2101      	movs	r1, #1
 80030ba:	69b8      	ldr	r0, [r7, #24]
 80030bc:	f7ff ff0a 	bl	8002ed4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80030c0:	bf00      	nop
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08e      	sub	sp, #56	; 0x38
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
 80030d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80030d6:	2300      	movs	r3, #0
 80030d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80030de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d109      	bne.n	80030f8 <xQueueGenericSend+0x30>
 80030e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e8:	f383 8811 	msr	BASEPRI, r3
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030f6:	e7fe      	b.n	80030f6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d103      	bne.n	8003106 <xQueueGenericSend+0x3e>
 80030fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <xQueueGenericSend+0x42>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <xQueueGenericSend+0x44>
 800310a:	2300      	movs	r3, #0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d109      	bne.n	8003124 <xQueueGenericSend+0x5c>
 8003110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003114:	f383 8811 	msr	BASEPRI, r3
 8003118:	f3bf 8f6f 	isb	sy
 800311c:	f3bf 8f4f 	dsb	sy
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
 8003122:	e7fe      	b.n	8003122 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d103      	bne.n	8003132 <xQueueGenericSend+0x6a>
 800312a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312e:	2b01      	cmp	r3, #1
 8003130:	d101      	bne.n	8003136 <xQueueGenericSend+0x6e>
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <xQueueGenericSend+0x70>
 8003136:	2300      	movs	r3, #0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d109      	bne.n	8003150 <xQueueGenericSend+0x88>
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	623b      	str	r3, [r7, #32]
 800314e:	e7fe      	b.n	800314e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003150:	f001 f954 	bl	80043fc <xTaskGetSchedulerState>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d102      	bne.n	8003160 <xQueueGenericSend+0x98>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <xQueueGenericSend+0x9c>
 8003160:	2301      	movs	r3, #1
 8003162:	e000      	b.n	8003166 <xQueueGenericSend+0x9e>
 8003164:	2300      	movs	r3, #0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <xQueueGenericSend+0xb6>
 800316a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	61fb      	str	r3, [r7, #28]
 800317c:	e7fe      	b.n	800317c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800317e:	f001 ff8d 	bl	800509c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318a:	429a      	cmp	r2, r3
 800318c:	d302      	bcc.n	8003194 <xQueueGenericSend+0xcc>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b02      	cmp	r3, #2
 8003192:	d129      	bne.n	80031e8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800319a:	f000 f9ff 	bl	800359c <prvCopyDataToQueue>
 800319e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d010      	beq.n	80031ca <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	3324      	adds	r3, #36	; 0x24
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 ff6f 	bl	8004090 <xTaskRemoveFromEventList>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d013      	beq.n	80031e0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80031b8:	4b3f      	ldr	r3, [pc, #252]	; (80032b8 <xQueueGenericSend+0x1f0>)
 80031ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	f3bf 8f4f 	dsb	sy
 80031c4:	f3bf 8f6f 	isb	sy
 80031c8:	e00a      	b.n	80031e0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80031ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d007      	beq.n	80031e0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80031d0:	4b39      	ldr	r3, [pc, #228]	; (80032b8 <xQueueGenericSend+0x1f0>)
 80031d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	f3bf 8f4f 	dsb	sy
 80031dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80031e0:	f001 ff8a 	bl	80050f8 <vPortExitCritical>
				return pdPASS;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e063      	b.n	80032b0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d103      	bne.n	80031f6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80031ee:	f001 ff83 	bl	80050f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e05c      	b.n	80032b0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d106      	bne.n	800320a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031fc:	f107 0314 	add.w	r3, r7, #20
 8003200:	4618      	mov	r0, r3
 8003202:	f000 ffa7 	bl	8004154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003206:	2301      	movs	r3, #1
 8003208:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800320a:	f001 ff75 	bl	80050f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800320e:	f000 fd25 	bl	8003c5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003212:	f001 ff43 	bl	800509c <vPortEnterCritical>
 8003216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003218:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800321c:	b25b      	sxtb	r3, r3
 800321e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003222:	d103      	bne.n	800322c <xQueueGenericSend+0x164>
 8003224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800322c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003232:	b25b      	sxtb	r3, r3
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d103      	bne.n	8003242 <xQueueGenericSend+0x17a>
 800323a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003242:	f001 ff59 	bl	80050f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003246:	1d3a      	adds	r2, r7, #4
 8003248:	f107 0314 	add.w	r3, r7, #20
 800324c:	4611      	mov	r1, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f000 ff96 	bl	8004180 <xTaskCheckForTimeOut>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d124      	bne.n	80032a4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800325a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800325c:	f000 fa96 	bl	800378c <prvIsQueueFull>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d018      	beq.n	8003298 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	3310      	adds	r3, #16
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	4611      	mov	r1, r2
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fec0 	bl	8003ff4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003276:	f000 fa21 	bl	80036bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800327a:	f000 fcfd 	bl	8003c78 <xTaskResumeAll>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	f47f af7c 	bne.w	800317e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003286:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <xQueueGenericSend+0x1f0>)
 8003288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	f3bf 8f6f 	isb	sy
 8003296:	e772      	b.n	800317e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800329a:	f000 fa0f 	bl	80036bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800329e:	f000 fceb 	bl	8003c78 <xTaskResumeAll>
 80032a2:	e76c      	b.n	800317e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80032a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032a6:	f000 fa09 	bl	80036bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032aa:	f000 fce5 	bl	8003c78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80032ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3738      	adds	r7, #56	; 0x38
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	e000ed04 	.word	0xe000ed04

080032bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08e      	sub	sp, #56	; 0x38
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
 80032c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80032ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d109      	bne.n	80032e8 <xQueueGenericSendFromISR+0x2c>
 80032d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d8:	f383 8811 	msr	BASEPRI, r3
 80032dc:	f3bf 8f6f 	isb	sy
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
 80032e6:	e7fe      	b.n	80032e6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d103      	bne.n	80032f6 <xQueueGenericSendFromISR+0x3a>
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <xQueueGenericSendFromISR+0x3e>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <xQueueGenericSendFromISR+0x40>
 80032fa:	2300      	movs	r3, #0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d109      	bne.n	8003314 <xQueueGenericSendFromISR+0x58>
 8003300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	623b      	str	r3, [r7, #32]
 8003312:	e7fe      	b.n	8003312 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d103      	bne.n	8003322 <xQueueGenericSendFromISR+0x66>
 800331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <xQueueGenericSendFromISR+0x6a>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <xQueueGenericSendFromISR+0x6c>
 8003326:	2300      	movs	r3, #0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d109      	bne.n	8003340 <xQueueGenericSendFromISR+0x84>
 800332c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003330:	f383 8811 	msr	BASEPRI, r3
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	e7fe      	b.n	800333e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003340:	f001 ff88 	bl	8005254 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003344:	f3ef 8211 	mrs	r2, BASEPRI
 8003348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	61ba      	str	r2, [r7, #24]
 800335a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800335c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800335e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003368:	429a      	cmp	r2, r3
 800336a:	d302      	bcc.n	8003372 <xQueueGenericSendFromISR+0xb6>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d12c      	bne.n	80033cc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003374:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003378:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	68b9      	ldr	r1, [r7, #8]
 8003380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003382:	f000 f90b 	bl	800359c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003386:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800338a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338e:	d112      	bne.n	80033b6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	2b00      	cmp	r3, #0
 8003396:	d016      	beq.n	80033c6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339a:	3324      	adds	r3, #36	; 0x24
 800339c:	4618      	mov	r0, r3
 800339e:	f000 fe77 	bl	8004090 <xTaskRemoveFromEventList>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00e      	beq.n	80033c6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00b      	beq.n	80033c6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	e007      	b.n	80033c6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80033b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80033ba:	3301      	adds	r3, #1
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	b25a      	sxtb	r2, r3
 80033c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80033c6:	2301      	movs	r3, #1
 80033c8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80033ca:	e001      	b.n	80033d0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	637b      	str	r3, [r7, #52]	; 0x34
 80033d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80033da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3738      	adds	r7, #56	; 0x38
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b08c      	sub	sp, #48	; 0x30
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80033f0:	2300      	movs	r3, #0
 80033f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d109      	bne.n	8003412 <xQueueReceive+0x2e>
	__asm volatile
 80033fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003402:	f383 8811 	msr	BASEPRI, r3
 8003406:	f3bf 8f6f 	isb	sy
 800340a:	f3bf 8f4f 	dsb	sy
 800340e:	623b      	str	r3, [r7, #32]
 8003410:	e7fe      	b.n	8003410 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d103      	bne.n	8003420 <xQueueReceive+0x3c>
 8003418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <xQueueReceive+0x40>
 8003420:	2301      	movs	r3, #1
 8003422:	e000      	b.n	8003426 <xQueueReceive+0x42>
 8003424:	2300      	movs	r3, #0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <xQueueReceive+0x5a>
 800342a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342e:	f383 8811 	msr	BASEPRI, r3
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	f3bf 8f4f 	dsb	sy
 800343a:	61fb      	str	r3, [r7, #28]
 800343c:	e7fe      	b.n	800343c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800343e:	f000 ffdd 	bl	80043fc <xTaskGetSchedulerState>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d102      	bne.n	800344e <xQueueReceive+0x6a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <xQueueReceive+0x6e>
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <xQueueReceive+0x70>
 8003452:	2300      	movs	r3, #0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d109      	bne.n	800346c <xQueueReceive+0x88>
 8003458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345c:	f383 8811 	msr	BASEPRI, r3
 8003460:	f3bf 8f6f 	isb	sy
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	e7fe      	b.n	800346a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800346c:	f001 fe16 	bl	800509c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01f      	beq.n	80034bc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800347c:	68b9      	ldr	r1, [r7, #8]
 800347e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003480:	f000 f8f6 	bl	8003670 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	1e5a      	subs	r2, r3, #1
 8003488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800348c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00f      	beq.n	80034b4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003496:	3310      	adds	r3, #16
 8003498:	4618      	mov	r0, r3
 800349a:	f000 fdf9 	bl	8004090 <xTaskRemoveFromEventList>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d007      	beq.n	80034b4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80034a4:	4b3c      	ldr	r3, [pc, #240]	; (8003598 <xQueueReceive+0x1b4>)
 80034a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80034b4:	f001 fe20 	bl	80050f8 <vPortExitCritical>
				return pdPASS;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e069      	b.n	8003590 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d103      	bne.n	80034ca <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80034c2:	f001 fe19 	bl	80050f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e062      	b.n	8003590 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d106      	bne.n	80034de <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034d0:	f107 0310 	add.w	r3, r7, #16
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fe3d 	bl	8004154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034da:	2301      	movs	r3, #1
 80034dc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034de:	f001 fe0b 	bl	80050f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034e2:	f000 fbbb 	bl	8003c5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034e6:	f001 fdd9 	bl	800509c <vPortEnterCritical>
 80034ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034f0:	b25b      	sxtb	r3, r3
 80034f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f6:	d103      	bne.n	8003500 <xQueueReceive+0x11c>
 80034f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003506:	b25b      	sxtb	r3, r3
 8003508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350c:	d103      	bne.n	8003516 <xQueueReceive+0x132>
 800350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003516:	f001 fdef 	bl	80050f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800351a:	1d3a      	adds	r2, r7, #4
 800351c:	f107 0310 	add.w	r3, r7, #16
 8003520:	4611      	mov	r1, r2
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fe2c 	bl	8004180 <xTaskCheckForTimeOut>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d123      	bne.n	8003576 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800352e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003530:	f000 f916 	bl	8003760 <prvIsQueueEmpty>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d017      	beq.n	800356a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800353a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353c:	3324      	adds	r3, #36	; 0x24
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	4611      	mov	r1, r2
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fd56 	bl	8003ff4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800354a:	f000 f8b7 	bl	80036bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800354e:	f000 fb93 	bl	8003c78 <xTaskResumeAll>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d189      	bne.n	800346c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003558:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <xQueueReceive+0x1b4>)
 800355a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	e780      	b.n	800346c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800356a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800356c:	f000 f8a6 	bl	80036bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003570:	f000 fb82 	bl	8003c78 <xTaskResumeAll>
 8003574:	e77a      	b.n	800346c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003578:	f000 f8a0 	bl	80036bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800357c:	f000 fb7c 	bl	8003c78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003582:	f000 f8ed 	bl	8003760 <prvIsQueueEmpty>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	f43f af6f 	beq.w	800346c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800358e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003590:	4618      	mov	r0, r3
 8003592:	3730      	adds	r7, #48	; 0x30
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	e000ed04 	.word	0xe000ed04

0800359c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10d      	bne.n	80035d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d14d      	bne.n	800365e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 ff36 	bl	8004438 <xTaskPriorityDisinherit>
 80035cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	e043      	b.n	800365e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d119      	bne.n	8003610 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6858      	ldr	r0, [r3, #4]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	461a      	mov	r2, r3
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	f002 f872 	bl	80056d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	441a      	add	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	429a      	cmp	r2, r3
 8003604:	d32b      	bcc.n	800365e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	e026      	b.n	800365e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	68d8      	ldr	r0, [r3, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	461a      	mov	r2, r3
 800361a:	68b9      	ldr	r1, [r7, #8]
 800361c:	f002 f858 	bl	80056d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	425b      	negs	r3, r3
 800362a:	441a      	add	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d207      	bcs.n	800364c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	425b      	negs	r3, r3
 8003646:	441a      	add	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d105      	bne.n	800365e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	3b01      	subs	r3, #1
 800365c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003666:	697b      	ldr	r3, [r7, #20]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	d018      	beq.n	80036b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	441a      	add	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	429a      	cmp	r2, r3
 800369a:	d303      	bcc.n	80036a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68d9      	ldr	r1, [r3, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	461a      	mov	r2, r3
 80036ae:	6838      	ldr	r0, [r7, #0]
 80036b0:	f002 f80e 	bl	80056d0 <memcpy>
	}
}
 80036b4:	bf00      	nop
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80036c4:	f001 fcea 	bl	800509c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036d0:	e011      	b.n	80036f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d012      	beq.n	8003700 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3324      	adds	r3, #36	; 0x24
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fcd6 	bl	8004090 <xTaskRemoveFromEventList>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80036ea:	f000 fda9 	bl	8004240 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	dce9      	bgt.n	80036d2 <prvUnlockQueue+0x16>
 80036fe:	e000      	b.n	8003702 <prvUnlockQueue+0x46>
					break;
 8003700:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	22ff      	movs	r2, #255	; 0xff
 8003706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800370a:	f001 fcf5 	bl	80050f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800370e:	f001 fcc5 	bl	800509c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003718:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800371a:	e011      	b.n	8003740 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d012      	beq.n	800374a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3310      	adds	r3, #16
 8003728:	4618      	mov	r0, r3
 800372a:	f000 fcb1 	bl	8004090 <xTaskRemoveFromEventList>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003734:	f000 fd84 	bl	8004240 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003738:	7bbb      	ldrb	r3, [r7, #14]
 800373a:	3b01      	subs	r3, #1
 800373c:	b2db      	uxtb	r3, r3
 800373e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003740:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003744:	2b00      	cmp	r3, #0
 8003746:	dce9      	bgt.n	800371c <prvUnlockQueue+0x60>
 8003748:	e000      	b.n	800374c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800374a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	22ff      	movs	r2, #255	; 0xff
 8003750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003754:	f001 fcd0 	bl	80050f8 <vPortExitCritical>
}
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003768:	f001 fc98 	bl	800509c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003774:	2301      	movs	r3, #1
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	e001      	b.n	800377e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800377e:	f001 fcbb 	bl	80050f8 <vPortExitCritical>

	return xReturn;
 8003782:	68fb      	ldr	r3, [r7, #12]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003794:	f001 fc82 	bl	800509c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d102      	bne.n	80037aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80037a4:	2301      	movs	r3, #1
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	e001      	b.n	80037ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80037ae:	f001 fca3 	bl	80050f8 <vPortExitCritical>

	return xReturn;
 80037b2:	68fb      	ldr	r3, [r7, #12]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	e014      	b.n	80037f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80037cc:	4a0e      	ldr	r2, [pc, #56]	; (8003808 <vQueueAddToRegistry+0x4c>)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10b      	bne.n	80037f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80037d8:	490b      	ldr	r1, [pc, #44]	; (8003808 <vQueueAddToRegistry+0x4c>)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80037e2:	4a09      	ldr	r2, [pc, #36]	; (8003808 <vQueueAddToRegistry+0x4c>)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4413      	add	r3, r2
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80037ee:	e005      	b.n	80037fc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	3301      	adds	r3, #1
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2b07      	cmp	r3, #7
 80037fa:	d9e7      	bls.n	80037cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80037fc:	bf00      	nop
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	200045e8 	.word	0x200045e8

0800380c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800381c:	f001 fc3e 	bl	800509c <vPortEnterCritical>
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003826:	b25b      	sxtb	r3, r3
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382c:	d103      	bne.n	8003836 <vQueueWaitForMessageRestricted+0x2a>
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800383c:	b25b      	sxtb	r3, r3
 800383e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003842:	d103      	bne.n	800384c <vQueueWaitForMessageRestricted+0x40>
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800384c:	f001 fc54 	bl	80050f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	2b00      	cmp	r3, #0
 8003856:	d106      	bne.n	8003866 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	3324      	adds	r3, #36	; 0x24
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	68b9      	ldr	r1, [r7, #8]
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fbeb 	bl	800403c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003866:	6978      	ldr	r0, [r7, #20]
 8003868:	f7ff ff28 	bl	80036bc <prvUnlockQueue>
	}
 800386c:	bf00      	nop
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08e      	sub	sp, #56	; 0x38
 8003878:	af04      	add	r7, sp, #16
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003884:	2b00      	cmp	r3, #0
 8003886:	d109      	bne.n	800389c <xTaskCreateStatic+0x28>
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	623b      	str	r3, [r7, #32]
 800389a:	e7fe      	b.n	800389a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800389c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d109      	bne.n	80038b6 <xTaskCreateStatic+0x42>
 80038a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	61fb      	str	r3, [r7, #28]
 80038b4:	e7fe      	b.n	80038b4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80038b6:	2354      	movs	r3, #84	; 0x54
 80038b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	2b54      	cmp	r3, #84	; 0x54
 80038be:	d009      	beq.n	80038d4 <xTaskCreateStatic+0x60>
 80038c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c4:	f383 8811 	msr	BASEPRI, r3
 80038c8:	f3bf 8f6f 	isb	sy
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	61bb      	str	r3, [r7, #24]
 80038d2:	e7fe      	b.n	80038d2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80038d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80038d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01e      	beq.n	800391a <xTaskCreateStatic+0xa6>
 80038dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d01b      	beq.n	800391a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038f4:	2300      	movs	r3, #0
 80038f6:	9303      	str	r3, [sp, #12]
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	9302      	str	r3, [sp, #8]
 80038fc:	f107 0314 	add.w	r3, r7, #20
 8003900:	9301      	str	r3, [sp, #4]
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	68b9      	ldr	r1, [r7, #8]
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 f850 	bl	80039b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003912:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003914:	f000 f8d4 	bl	8003ac0 <prvAddNewTaskToReadyList>
 8003918:	e001      	b.n	800391e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800391e:	697b      	ldr	r3, [r7, #20]
	}
 8003920:	4618      	mov	r0, r3
 8003922:	3728      	adds	r7, #40	; 0x28
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08c      	sub	sp, #48	; 0x30
 800392c:	af04      	add	r7, sp, #16
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	4613      	mov	r3, r2
 8003936:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4618      	mov	r0, r3
 800393e:	f001 fcc7 	bl	80052d0 <pvPortMalloc>
 8003942:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00e      	beq.n	8003968 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800394a:	2054      	movs	r0, #84	; 0x54
 800394c:	f001 fcc0 	bl	80052d0 <pvPortMalloc>
 8003950:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	631a      	str	r2, [r3, #48]	; 0x30
 800395e:	e005      	b.n	800396c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003960:	6978      	ldr	r0, [r7, #20]
 8003962:	f001 fd77 	bl	8005454 <vPortFree>
 8003966:	e001      	b.n	800396c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003968:	2300      	movs	r3, #0
 800396a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d017      	beq.n	80039a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800397a:	88fa      	ldrh	r2, [r7, #6]
 800397c:	2300      	movs	r3, #0
 800397e:	9303      	str	r3, [sp, #12]
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	9302      	str	r3, [sp, #8]
 8003984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003986:	9301      	str	r3, [sp, #4]
 8003988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	68b9      	ldr	r1, [r7, #8]
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f80e 	bl	80039b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003996:	69f8      	ldr	r0, [r7, #28]
 8003998:	f000 f892 	bl	8003ac0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800399c:	2301      	movs	r3, #1
 800399e:	61bb      	str	r3, [r7, #24]
 80039a0:	e002      	b.n	80039a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039a2:	f04f 33ff 	mov.w	r3, #4294967295
 80039a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039a8:	69bb      	ldr	r3, [r7, #24]
	}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b088      	sub	sp, #32
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	607a      	str	r2, [r7, #4]
 80039be:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039ca:	3b01      	subs	r3, #1
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	f023 0307 	bic.w	r3, r3, #7
 80039d8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d009      	beq.n	80039f8 <prvInitialiseNewTask+0x46>
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	e7fe      	b.n	80039f6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d01f      	beq.n	8003a3e <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
 8003a02:	e012      	b.n	8003a2a <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	4413      	add	r3, r2
 8003a0a:	7819      	ldrb	r1, [r3, #0]
 8003a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	4413      	add	r3, r2
 8003a12:	3334      	adds	r3, #52	; 0x34
 8003a14:	460a      	mov	r2, r1
 8003a16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d006      	beq.n	8003a32 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	3301      	adds	r3, #1
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	2b0f      	cmp	r3, #15
 8003a2e:	d9e9      	bls.n	8003a04 <prvInitialiseNewTask+0x52>
 8003a30:	e000      	b.n	8003a34 <prvInitialiseNewTask+0x82>
			{
				break;
 8003a32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a3c:	e003      	b.n	8003a46 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a48:	2b06      	cmp	r3, #6
 8003a4a:	d901      	bls.n	8003a50 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a4c:	2306      	movs	r3, #6
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a5a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	2200      	movs	r2, #0
 8003a60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a64:	3304      	adds	r3, #4
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff f9a0 	bl	8002dac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6e:	3318      	adds	r3, #24
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff f99b 	bl	8002dac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7e:	f1c3 0207 	rsb	r2, r3, #7
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8e:	2200      	movs	r2, #0
 8003a90:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	68f9      	ldr	r1, [r7, #12]
 8003a9e:	69b8      	ldr	r0, [r7, #24]
 8003aa0:	f001 f9d4 	bl	8004e4c <pxPortInitialiseStack>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ab6:	bf00      	nop
 8003ab8:	3720      	adds	r7, #32
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ac8:	f001 fae8 	bl	800509c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003acc:	4b2a      	ldr	r3, [pc, #168]	; (8003b78 <prvAddNewTaskToReadyList+0xb8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	4a29      	ldr	r2, [pc, #164]	; (8003b78 <prvAddNewTaskToReadyList+0xb8>)
 8003ad4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ad6:	4b29      	ldr	r3, [pc, #164]	; (8003b7c <prvAddNewTaskToReadyList+0xbc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ade:	4a27      	ldr	r2, [pc, #156]	; (8003b7c <prvAddNewTaskToReadyList+0xbc>)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ae4:	4b24      	ldr	r3, [pc, #144]	; (8003b78 <prvAddNewTaskToReadyList+0xb8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d110      	bne.n	8003b0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003aec:	f000 fbcc 	bl	8004288 <prvInitialiseTaskLists>
 8003af0:	e00d      	b.n	8003b0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003af2:	4b23      	ldr	r3, [pc, #140]	; (8003b80 <prvAddNewTaskToReadyList+0xc0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d109      	bne.n	8003b0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003afa:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <prvAddNewTaskToReadyList+0xbc>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d802      	bhi.n	8003b0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b08:	4a1c      	ldr	r2, [pc, #112]	; (8003b7c <prvAddNewTaskToReadyList+0xbc>)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b0e:	4b1d      	ldr	r3, [pc, #116]	; (8003b84 <prvAddNewTaskToReadyList+0xc4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	3301      	adds	r3, #1
 8003b14:	4a1b      	ldr	r2, [pc, #108]	; (8003b84 <prvAddNewTaskToReadyList+0xc4>)
 8003b16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	409a      	lsls	r2, r3
 8003b20:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <prvAddNewTaskToReadyList+0xc8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	4a18      	ldr	r2, [pc, #96]	; (8003b88 <prvAddNewTaskToReadyList+0xc8>)
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2e:	4613      	mov	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4a15      	ldr	r2, [pc, #84]	; (8003b8c <prvAddNewTaskToReadyList+0xcc>)
 8003b38:	441a      	add	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4610      	mov	r0, r2
 8003b42:	f7ff f940 	bl	8002dc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b46:	f001 fad7 	bl	80050f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <prvAddNewTaskToReadyList+0xc0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00e      	beq.n	8003b70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b52:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <prvAddNewTaskToReadyList+0xbc>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d207      	bcs.n	8003b70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <prvAddNewTaskToReadyList+0xd0>)
 8003b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b70:	bf00      	nop
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	2000083c 	.word	0x2000083c
 8003b7c:	2000073c 	.word	0x2000073c
 8003b80:	20000848 	.word	0x20000848
 8003b84:	20000858 	.word	0x20000858
 8003b88:	20000844 	.word	0x20000844
 8003b8c:	20000740 	.word	0x20000740
 8003b90:	e000ed04 	.word	0xe000ed04

08003b94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	; 0x28
 8003b98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ba2:	463a      	mov	r2, r7
 8003ba4:	1d39      	adds	r1, r7, #4
 8003ba6:	f107 0308 	add.w	r3, r7, #8
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fc fce8 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003bb0:	6839      	ldr	r1, [r7, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	9202      	str	r2, [sp, #8]
 8003bb8:	9301      	str	r3, [sp, #4]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	460a      	mov	r2, r1
 8003bc2:	4920      	ldr	r1, [pc, #128]	; (8003c44 <vTaskStartScheduler+0xb0>)
 8003bc4:	4820      	ldr	r0, [pc, #128]	; (8003c48 <vTaskStartScheduler+0xb4>)
 8003bc6:	f7ff fe55 	bl	8003874 <xTaskCreateStatic>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	4b1f      	ldr	r3, [pc, #124]	; (8003c4c <vTaskStartScheduler+0xb8>)
 8003bce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003bd0:	4b1e      	ldr	r3, [pc, #120]	; (8003c4c <vTaskStartScheduler+0xb8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	e001      	b.n	8003be2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d102      	bne.n	8003bee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003be8:	f000 fd10 	bl	800460c <xTimerCreateTimerTask>
 8003bec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d115      	bne.n	8003c20 <vTaskStartScheduler+0x8c>
 8003bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c06:	4b12      	ldr	r3, [pc, #72]	; (8003c50 <vTaskStartScheduler+0xbc>)
 8003c08:	f04f 32ff 	mov.w	r2, #4294967295
 8003c0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c0e:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <vTaskStartScheduler+0xc0>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c14:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <vTaskStartScheduler+0xc4>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c1a:	f001 f9a1 	bl	8004f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c1e:	e00d      	b.n	8003c3c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c26:	d109      	bne.n	8003c3c <vTaskStartScheduler+0xa8>
 8003c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	e7fe      	b.n	8003c3a <vTaskStartScheduler+0xa6>
}
 8003c3c:	bf00      	nop
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	08005fc8 	.word	0x08005fc8
 8003c48:	08004259 	.word	0x08004259
 8003c4c:	20000860 	.word	0x20000860
 8003c50:	2000085c 	.word	0x2000085c
 8003c54:	20000848 	.word	0x20000848
 8003c58:	20000840 	.word	0x20000840

08003c5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c60:	4b04      	ldr	r3, [pc, #16]	; (8003c74 <vTaskSuspendAll+0x18>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3301      	adds	r3, #1
 8003c66:	4a03      	ldr	r2, [pc, #12]	; (8003c74 <vTaskSuspendAll+0x18>)
 8003c68:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003c6a:	bf00      	nop
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	20000864 	.word	0x20000864

08003c78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c82:	2300      	movs	r3, #0
 8003c84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c86:	4b41      	ldr	r3, [pc, #260]	; (8003d8c <xTaskResumeAll+0x114>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <xTaskResumeAll+0x2a>
 8003c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	603b      	str	r3, [r7, #0]
 8003ca0:	e7fe      	b.n	8003ca0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ca2:	f001 f9fb 	bl	800509c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ca6:	4b39      	ldr	r3, [pc, #228]	; (8003d8c <xTaskResumeAll+0x114>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	4a37      	ldr	r2, [pc, #220]	; (8003d8c <xTaskResumeAll+0x114>)
 8003cae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cb0:	4b36      	ldr	r3, [pc, #216]	; (8003d8c <xTaskResumeAll+0x114>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d161      	bne.n	8003d7c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003cb8:	4b35      	ldr	r3, [pc, #212]	; (8003d90 <xTaskResumeAll+0x118>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d05d      	beq.n	8003d7c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cc0:	e02e      	b.n	8003d20 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cc2:	4b34      	ldr	r3, [pc, #208]	; (8003d94 <xTaskResumeAll+0x11c>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	3318      	adds	r3, #24
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff f8d6 	bl	8002e80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff f8d1 	bl	8002e80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	409a      	lsls	r2, r3
 8003ce6:	4b2c      	ldr	r3, [pc, #176]	; (8003d98 <xTaskResumeAll+0x120>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	4a2a      	ldr	r2, [pc, #168]	; (8003d98 <xTaskResumeAll+0x120>)
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4a27      	ldr	r2, [pc, #156]	; (8003d9c <xTaskResumeAll+0x124>)
 8003cfe:	441a      	add	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3304      	adds	r3, #4
 8003d04:	4619      	mov	r1, r3
 8003d06:	4610      	mov	r0, r2
 8003d08:	f7ff f85d 	bl	8002dc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d10:	4b23      	ldr	r3, [pc, #140]	; (8003da0 <xTaskResumeAll+0x128>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d302      	bcc.n	8003d20 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003d1a:	4b22      	ldr	r3, [pc, #136]	; (8003da4 <xTaskResumeAll+0x12c>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d20:	4b1c      	ldr	r3, [pc, #112]	; (8003d94 <xTaskResumeAll+0x11c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1cc      	bne.n	8003cc2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d2e:	f000 fb45 	bl	80043bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003d32:	4b1d      	ldr	r3, [pc, #116]	; (8003da8 <xTaskResumeAll+0x130>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d010      	beq.n	8003d60 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d3e:	f000 f847 	bl	8003dd0 <xTaskIncrementTick>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003d48:	4b16      	ldr	r3, [pc, #88]	; (8003da4 <xTaskResumeAll+0x12c>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3b01      	subs	r3, #1
 8003d52:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f1      	bne.n	8003d3e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003d5a:	4b13      	ldr	r3, [pc, #76]	; (8003da8 <xTaskResumeAll+0x130>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d60:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <xTaskResumeAll+0x12c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d009      	beq.n	8003d7c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d6c:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <xTaskResumeAll+0x134>)
 8003d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d7c:	f001 f9bc 	bl	80050f8 <vPortExitCritical>

	return xAlreadyYielded;
 8003d80:	68bb      	ldr	r3, [r7, #8]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000864 	.word	0x20000864
 8003d90:	2000083c 	.word	0x2000083c
 8003d94:	200007fc 	.word	0x200007fc
 8003d98:	20000844 	.word	0x20000844
 8003d9c:	20000740 	.word	0x20000740
 8003da0:	2000073c 	.word	0x2000073c
 8003da4:	20000850 	.word	0x20000850
 8003da8:	2000084c 	.word	0x2000084c
 8003dac:	e000ed04 	.word	0xe000ed04

08003db0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003db6:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <xTaskGetTickCount+0x1c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003dbc:	687b      	ldr	r3, [r7, #4]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	20000840 	.word	0x20000840

08003dd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dda:	4b4e      	ldr	r3, [pc, #312]	; (8003f14 <xTaskIncrementTick+0x144>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f040 8087 	bne.w	8003ef2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003de4:	4b4c      	ldr	r3, [pc, #304]	; (8003f18 <xTaskIncrementTick+0x148>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3301      	adds	r3, #1
 8003dea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003dec:	4a4a      	ldr	r2, [pc, #296]	; (8003f18 <xTaskIncrementTick+0x148>)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d11f      	bne.n	8003e38 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003df8:	4b48      	ldr	r3, [pc, #288]	; (8003f1c <xTaskIncrementTick+0x14c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d009      	beq.n	8003e16 <xTaskIncrementTick+0x46>
 8003e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	e7fe      	b.n	8003e14 <xTaskIncrementTick+0x44>
 8003e16:	4b41      	ldr	r3, [pc, #260]	; (8003f1c <xTaskIncrementTick+0x14c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	4b40      	ldr	r3, [pc, #256]	; (8003f20 <xTaskIncrementTick+0x150>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a3e      	ldr	r2, [pc, #248]	; (8003f1c <xTaskIncrementTick+0x14c>)
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	4a3e      	ldr	r2, [pc, #248]	; (8003f20 <xTaskIncrementTick+0x150>)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	4b3e      	ldr	r3, [pc, #248]	; (8003f24 <xTaskIncrementTick+0x154>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	4a3c      	ldr	r2, [pc, #240]	; (8003f24 <xTaskIncrementTick+0x154>)
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	f000 fac2 	bl	80043bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e38:	4b3b      	ldr	r3, [pc, #236]	; (8003f28 <xTaskIncrementTick+0x158>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d348      	bcc.n	8003ed4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e42:	4b36      	ldr	r3, [pc, #216]	; (8003f1c <xTaskIncrementTick+0x14c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d104      	bne.n	8003e56 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e4c:	4b36      	ldr	r3, [pc, #216]	; (8003f28 <xTaskIncrementTick+0x158>)
 8003e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e52:	601a      	str	r2, [r3, #0]
					break;
 8003e54:	e03e      	b.n	8003ed4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e56:	4b31      	ldr	r3, [pc, #196]	; (8003f1c <xTaskIncrementTick+0x14c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d203      	bcs.n	8003e76 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e6e:	4a2e      	ldr	r2, [pc, #184]	; (8003f28 <xTaskIncrementTick+0x158>)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e74:	e02e      	b.n	8003ed4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff f800 	bl	8002e80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d004      	beq.n	8003e92 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	3318      	adds	r3, #24
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fe fff7 	bl	8002e80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	2201      	movs	r2, #1
 8003e98:	409a      	lsls	r2, r3
 8003e9a:	4b24      	ldr	r3, [pc, #144]	; (8003f2c <xTaskIncrementTick+0x15c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	4a22      	ldr	r2, [pc, #136]	; (8003f2c <xTaskIncrementTick+0x15c>)
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4a1f      	ldr	r2, [pc, #124]	; (8003f30 <xTaskIncrementTick+0x160>)
 8003eb2:	441a      	add	r2, r3
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4610      	mov	r0, r2
 8003ebc:	f7fe ff83 	bl	8002dc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec4:	4b1b      	ldr	r3, [pc, #108]	; (8003f34 <xTaskIncrementTick+0x164>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d3b9      	bcc.n	8003e42 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ed2:	e7b6      	b.n	8003e42 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ed4:	4b17      	ldr	r3, [pc, #92]	; (8003f34 <xTaskIncrementTick+0x164>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eda:	4915      	ldr	r1, [pc, #84]	; (8003f30 <xTaskIncrementTick+0x160>)
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d907      	bls.n	8003efc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003eec:	2301      	movs	r3, #1
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	e004      	b.n	8003efc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003ef2:	4b11      	ldr	r3, [pc, #68]	; (8003f38 <xTaskIncrementTick+0x168>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	4a0f      	ldr	r2, [pc, #60]	; (8003f38 <xTaskIncrementTick+0x168>)
 8003efa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003efc:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <xTaskIncrementTick+0x16c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003f04:	2301      	movs	r3, #1
 8003f06:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003f08:	697b      	ldr	r3, [r7, #20]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20000864 	.word	0x20000864
 8003f18:	20000840 	.word	0x20000840
 8003f1c:	200007f4 	.word	0x200007f4
 8003f20:	200007f8 	.word	0x200007f8
 8003f24:	20000854 	.word	0x20000854
 8003f28:	2000085c 	.word	0x2000085c
 8003f2c:	20000844 	.word	0x20000844
 8003f30:	20000740 	.word	0x20000740
 8003f34:	2000073c 	.word	0x2000073c
 8003f38:	2000084c 	.word	0x2000084c
 8003f3c:	20000850 	.word	0x20000850

08003f40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f46:	4b26      	ldr	r3, [pc, #152]	; (8003fe0 <vTaskSwitchContext+0xa0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f4e:	4b25      	ldr	r3, [pc, #148]	; (8003fe4 <vTaskSwitchContext+0xa4>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f54:	e03e      	b.n	8003fd4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003f56:	4b23      	ldr	r3, [pc, #140]	; (8003fe4 <vTaskSwitchContext+0xa4>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f5c:	4b22      	ldr	r3, [pc, #136]	; (8003fe8 <vTaskSwitchContext+0xa8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	fab3 f383 	clz	r3, r3
 8003f68:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003f6a:	7afb      	ldrb	r3, [r7, #11]
 8003f6c:	f1c3 031f 	rsb	r3, r3, #31
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	491e      	ldr	r1, [pc, #120]	; (8003fec <vTaskSwitchContext+0xac>)
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	4613      	mov	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <vTaskSwitchContext+0x5a>
	__asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	607b      	str	r3, [r7, #4]
 8003f98:	e7fe      	b.n	8003f98 <vTaskSwitchContext+0x58>
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4a11      	ldr	r2, [pc, #68]	; (8003fec <vTaskSwitchContext+0xac>)
 8003fa6:	4413      	add	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	605a      	str	r2, [r3, #4]
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	3308      	adds	r3, #8
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d104      	bne.n	8003fca <vTaskSwitchContext+0x8a>
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	605a      	str	r2, [r3, #4]
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4a07      	ldr	r2, [pc, #28]	; (8003ff0 <vTaskSwitchContext+0xb0>)
 8003fd2:	6013      	str	r3, [r2, #0]
}
 8003fd4:	bf00      	nop
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	20000864 	.word	0x20000864
 8003fe4:	20000850 	.word	0x20000850
 8003fe8:	20000844 	.word	0x20000844
 8003fec:	20000740 	.word	0x20000740
 8003ff0:	2000073c 	.word	0x2000073c

08003ff4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d109      	bne.n	8004018 <vTaskPlaceOnEventList+0x24>
 8004004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	e7fe      	b.n	8004016 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004018:	4b07      	ldr	r3, [pc, #28]	; (8004038 <vTaskPlaceOnEventList+0x44>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3318      	adds	r3, #24
 800401e:	4619      	mov	r1, r3
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7fe fef4 	bl	8002e0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004026:	2101      	movs	r1, #1
 8004028:	6838      	ldr	r0, [r7, #0]
 800402a:	f000 fa89 	bl	8004540 <prvAddCurrentTaskToDelayedList>
}
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	2000073c 	.word	0x2000073c

0800403c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <vTaskPlaceOnEventListRestricted+0x26>
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	e7fe      	b.n	8004060 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004062:	4b0a      	ldr	r3, [pc, #40]	; (800408c <vTaskPlaceOnEventListRestricted+0x50>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3318      	adds	r3, #24
 8004068:	4619      	mov	r1, r3
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f7fe feab 	bl	8002dc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004076:	f04f 33ff 	mov.w	r3, #4294967295
 800407a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	68b8      	ldr	r0, [r7, #8]
 8004080:	f000 fa5e 	bl	8004540 <prvAddCurrentTaskToDelayedList>
	}
 8004084:	bf00      	nop
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	2000073c 	.word	0x2000073c

08004090 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <xTaskRemoveFromEventList+0x2a>
 80040a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040aa:	f383 8811 	msr	BASEPRI, r3
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	e7fe      	b.n	80040b8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	3318      	adds	r3, #24
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fe fede 	bl	8002e80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040c4:	4b1d      	ldr	r3, [pc, #116]	; (800413c <xTaskRemoveFromEventList+0xac>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d11c      	bne.n	8004106 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	3304      	adds	r3, #4
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fe fed5 	bl	8002e80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	2201      	movs	r2, #1
 80040dc:	409a      	lsls	r2, r3
 80040de:	4b18      	ldr	r3, [pc, #96]	; (8004140 <xTaskRemoveFromEventList+0xb0>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	4a16      	ldr	r2, [pc, #88]	; (8004140 <xTaskRemoveFromEventList+0xb0>)
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4a13      	ldr	r2, [pc, #76]	; (8004144 <xTaskRemoveFromEventList+0xb4>)
 80040f6:	441a      	add	r2, r3
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	3304      	adds	r3, #4
 80040fc:	4619      	mov	r1, r3
 80040fe:	4610      	mov	r0, r2
 8004100:	f7fe fe61 	bl	8002dc6 <vListInsertEnd>
 8004104:	e005      	b.n	8004112 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	3318      	adds	r3, #24
 800410a:	4619      	mov	r1, r3
 800410c:	480e      	ldr	r0, [pc, #56]	; (8004148 <xTaskRemoveFromEventList+0xb8>)
 800410e:	f7fe fe5a 	bl	8002dc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004116:	4b0d      	ldr	r3, [pc, #52]	; (800414c <xTaskRemoveFromEventList+0xbc>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	429a      	cmp	r2, r3
 800411e:	d905      	bls.n	800412c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004120:	2301      	movs	r3, #1
 8004122:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004124:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <xTaskRemoveFromEventList+0xc0>)
 8004126:	2201      	movs	r2, #1
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	e001      	b.n	8004130 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800412c:	2300      	movs	r3, #0
 800412e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004130:	697b      	ldr	r3, [r7, #20]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20000864 	.word	0x20000864
 8004140:	20000844 	.word	0x20000844
 8004144:	20000740 	.word	0x20000740
 8004148:	200007fc 	.word	0x200007fc
 800414c:	2000073c 	.word	0x2000073c
 8004150:	20000850 	.word	0x20000850

08004154 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800415c:	4b06      	ldr	r3, [pc, #24]	; (8004178 <vTaskInternalSetTimeOutState+0x24>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004164:	4b05      	ldr	r3, [pc, #20]	; (800417c <vTaskInternalSetTimeOutState+0x28>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	605a      	str	r2, [r3, #4]
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	20000854 	.word	0x20000854
 800417c:	20000840 	.word	0x20000840

08004180 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d109      	bne.n	80041a4 <xTaskCheckForTimeOut+0x24>
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	613b      	str	r3, [r7, #16]
 80041a2:	e7fe      	b.n	80041a2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d109      	bne.n	80041be <xTaskCheckForTimeOut+0x3e>
 80041aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	e7fe      	b.n	80041bc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80041be:	f000 ff6d 	bl	800509c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80041c2:	4b1d      	ldr	r3, [pc, #116]	; (8004238 <xTaskCheckForTimeOut+0xb8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041da:	d102      	bne.n	80041e2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80041dc:	2300      	movs	r3, #0
 80041de:	61fb      	str	r3, [r7, #28]
 80041e0:	e023      	b.n	800422a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	4b15      	ldr	r3, [pc, #84]	; (800423c <xTaskCheckForTimeOut+0xbc>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d007      	beq.n	80041fe <xTaskCheckForTimeOut+0x7e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d302      	bcc.n	80041fe <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80041f8:	2301      	movs	r3, #1
 80041fa:	61fb      	str	r3, [r7, #28]
 80041fc:	e015      	b.n	800422a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	429a      	cmp	r2, r3
 8004206:	d20b      	bcs.n	8004220 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	1ad2      	subs	r2, r2, r3
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff ff9d 	bl	8004154 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
 800421e:	e004      	b.n	800422a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004226:	2301      	movs	r3, #1
 8004228:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800422a:	f000 ff65 	bl	80050f8 <vPortExitCritical>

	return xReturn;
 800422e:	69fb      	ldr	r3, [r7, #28]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3720      	adds	r7, #32
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	20000840 	.word	0x20000840
 800423c:	20000854 	.word	0x20000854

08004240 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004244:	4b03      	ldr	r3, [pc, #12]	; (8004254 <vTaskMissedYield+0x14>)
 8004246:	2201      	movs	r2, #1
 8004248:	601a      	str	r2, [r3, #0]
}
 800424a:	bf00      	nop
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	20000850 	.word	0x20000850

08004258 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004260:	f000 f852 	bl	8004308 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004264:	4b06      	ldr	r3, [pc, #24]	; (8004280 <prvIdleTask+0x28>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d9f9      	bls.n	8004260 <prvIdleTask+0x8>
			{
				taskYIELD();
 800426c:	4b05      	ldr	r3, [pc, #20]	; (8004284 <prvIdleTask+0x2c>)
 800426e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800427c:	e7f0      	b.n	8004260 <prvIdleTask+0x8>
 800427e:	bf00      	nop
 8004280:	20000740 	.word	0x20000740
 8004284:	e000ed04 	.word	0xe000ed04

08004288 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800428e:	2300      	movs	r3, #0
 8004290:	607b      	str	r3, [r7, #4]
 8004292:	e00c      	b.n	80042ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	4613      	mov	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4a12      	ldr	r2, [pc, #72]	; (80042e8 <prvInitialiseTaskLists+0x60>)
 80042a0:	4413      	add	r3, r2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fe fd62 	bl	8002d6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3301      	adds	r3, #1
 80042ac:	607b      	str	r3, [r7, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b06      	cmp	r3, #6
 80042b2:	d9ef      	bls.n	8004294 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042b4:	480d      	ldr	r0, [pc, #52]	; (80042ec <prvInitialiseTaskLists+0x64>)
 80042b6:	f7fe fd59 	bl	8002d6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042ba:	480d      	ldr	r0, [pc, #52]	; (80042f0 <prvInitialiseTaskLists+0x68>)
 80042bc:	f7fe fd56 	bl	8002d6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042c0:	480c      	ldr	r0, [pc, #48]	; (80042f4 <prvInitialiseTaskLists+0x6c>)
 80042c2:	f7fe fd53 	bl	8002d6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042c6:	480c      	ldr	r0, [pc, #48]	; (80042f8 <prvInitialiseTaskLists+0x70>)
 80042c8:	f7fe fd50 	bl	8002d6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042cc:	480b      	ldr	r0, [pc, #44]	; (80042fc <prvInitialiseTaskLists+0x74>)
 80042ce:	f7fe fd4d 	bl	8002d6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042d2:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <prvInitialiseTaskLists+0x78>)
 80042d4:	4a05      	ldr	r2, [pc, #20]	; (80042ec <prvInitialiseTaskLists+0x64>)
 80042d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042d8:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <prvInitialiseTaskLists+0x7c>)
 80042da:	4a05      	ldr	r2, [pc, #20]	; (80042f0 <prvInitialiseTaskLists+0x68>)
 80042dc:	601a      	str	r2, [r3, #0]
}
 80042de:	bf00      	nop
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20000740 	.word	0x20000740
 80042ec:	200007cc 	.word	0x200007cc
 80042f0:	200007e0 	.word	0x200007e0
 80042f4:	200007fc 	.word	0x200007fc
 80042f8:	20000810 	.word	0x20000810
 80042fc:	20000828 	.word	0x20000828
 8004300:	200007f4 	.word	0x200007f4
 8004304:	200007f8 	.word	0x200007f8

08004308 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800430e:	e019      	b.n	8004344 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004310:	f000 fec4 	bl	800509c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004314:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <prvCheckTasksWaitingTermination+0x4c>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3304      	adds	r3, #4
 8004320:	4618      	mov	r0, r3
 8004322:	f7fe fdad 	bl	8002e80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004326:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <prvCheckTasksWaitingTermination+0x50>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3b01      	subs	r3, #1
 800432c:	4a0a      	ldr	r2, [pc, #40]	; (8004358 <prvCheckTasksWaitingTermination+0x50>)
 800432e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004330:	4b0a      	ldr	r3, [pc, #40]	; (800435c <prvCheckTasksWaitingTermination+0x54>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3b01      	subs	r3, #1
 8004336:	4a09      	ldr	r2, [pc, #36]	; (800435c <prvCheckTasksWaitingTermination+0x54>)
 8004338:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800433a:	f000 fedd 	bl	80050f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f80e 	bl	8004360 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <prvCheckTasksWaitingTermination+0x54>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e1      	bne.n	8004310 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800434c:	bf00      	nop
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	20000810 	.word	0x20000810
 8004358:	2000083c 	.word	0x2000083c
 800435c:	20000824 	.word	0x20000824

08004360 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800436e:	2b00      	cmp	r3, #0
 8004370:	d108      	bne.n	8004384 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	4618      	mov	r0, r3
 8004378:	f001 f86c 	bl	8005454 <vPortFree>
				vPortFree( pxTCB );
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f001 f869 	bl	8005454 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004382:	e017      	b.n	80043b4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800438a:	2b01      	cmp	r3, #1
 800438c:	d103      	bne.n	8004396 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f001 f860 	bl	8005454 <vPortFree>
	}
 8004394:	e00e      	b.n	80043b4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800439c:	2b02      	cmp	r3, #2
 800439e:	d009      	beq.n	80043b4 <prvDeleteTCB+0x54>
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	e7fe      	b.n	80043b2 <prvDeleteTCB+0x52>
	}
 80043b4:	bf00      	nop
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043c2:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <prvResetNextTaskUnblockTime+0x38>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043cc:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <prvResetNextTaskUnblockTime+0x3c>)
 80043ce:	f04f 32ff 	mov.w	r2, #4294967295
 80043d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043d4:	e008      	b.n	80043e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043d6:	4b07      	ldr	r3, [pc, #28]	; (80043f4 <prvResetNextTaskUnblockTime+0x38>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	4a04      	ldr	r2, [pc, #16]	; (80043f8 <prvResetNextTaskUnblockTime+0x3c>)
 80043e6:	6013      	str	r3, [r2, #0]
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	200007f4 	.word	0x200007f4
 80043f8:	2000085c 	.word	0x2000085c

080043fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004402:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <xTaskGetSchedulerState+0x34>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d102      	bne.n	8004410 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800440a:	2301      	movs	r3, #1
 800440c:	607b      	str	r3, [r7, #4]
 800440e:	e008      	b.n	8004422 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004410:	4b08      	ldr	r3, [pc, #32]	; (8004434 <xTaskGetSchedulerState+0x38>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d102      	bne.n	800441e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004418:	2302      	movs	r3, #2
 800441a:	607b      	str	r3, [r7, #4]
 800441c:	e001      	b.n	8004422 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800441e:	2300      	movs	r3, #0
 8004420:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004422:	687b      	ldr	r3, [r7, #4]
	}
 8004424:	4618      	mov	r0, r3
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	20000848 	.word	0x20000848
 8004434:	20000864 	.word	0x20000864

08004438 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d06c      	beq.n	8004528 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800444e:	4b39      	ldr	r3, [pc, #228]	; (8004534 <xTaskPriorityDisinherit+0xfc>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	429a      	cmp	r2, r3
 8004456:	d009      	beq.n	800446c <xTaskPriorityDisinherit+0x34>
 8004458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	e7fe      	b.n	800446a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004470:	2b00      	cmp	r3, #0
 8004472:	d109      	bne.n	8004488 <xTaskPriorityDisinherit+0x50>
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	e7fe      	b.n	8004486 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800448c:	1e5a      	subs	r2, r3, #1
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449a:	429a      	cmp	r2, r3
 800449c:	d044      	beq.n	8004528 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d140      	bne.n	8004528 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	3304      	adds	r3, #4
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fe fce8 	bl	8002e80 <uxListRemove>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d115      	bne.n	80044e2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ba:	491f      	ldr	r1, [pc, #124]	; (8004538 <xTaskPriorityDisinherit+0x100>)
 80044bc:	4613      	mov	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	440b      	add	r3, r1
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <xTaskPriorityDisinherit+0xaa>
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	2201      	movs	r2, #1
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	43da      	mvns	r2, r3
 80044d8:	4b18      	ldr	r3, [pc, #96]	; (800453c <xTaskPriorityDisinherit+0x104>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4013      	ands	r3, r2
 80044de:	4a17      	ldr	r2, [pc, #92]	; (800453c <xTaskPriorityDisinherit+0x104>)
 80044e0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ee:	f1c3 0207 	rsb	r2, r3, #7
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	2201      	movs	r2, #1
 80044fc:	409a      	lsls	r2, r3
 80044fe:	4b0f      	ldr	r3, [pc, #60]	; (800453c <xTaskPriorityDisinherit+0x104>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4313      	orrs	r3, r2
 8004504:	4a0d      	ldr	r2, [pc, #52]	; (800453c <xTaskPriorityDisinherit+0x104>)
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4a08      	ldr	r2, [pc, #32]	; (8004538 <xTaskPriorityDisinherit+0x100>)
 8004516:	441a      	add	r2, r3
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	3304      	adds	r3, #4
 800451c:	4619      	mov	r1, r3
 800451e:	4610      	mov	r0, r2
 8004520:	f7fe fc51 	bl	8002dc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004524:	2301      	movs	r3, #1
 8004526:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004528:	697b      	ldr	r3, [r7, #20]
	}
 800452a:	4618      	mov	r0, r3
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	2000073c 	.word	0x2000073c
 8004538:	20000740 	.word	0x20000740
 800453c:	20000844 	.word	0x20000844

08004540 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800454a:	4b29      	ldr	r3, [pc, #164]	; (80045f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004550:	4b28      	ldr	r3, [pc, #160]	; (80045f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3304      	adds	r3, #4
 8004556:	4618      	mov	r0, r3
 8004558:	f7fe fc92 	bl	8002e80 <uxListRemove>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10b      	bne.n	800457a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004562:	4b24      	ldr	r3, [pc, #144]	; (80045f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	2201      	movs	r2, #1
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43da      	mvns	r2, r3
 8004570:	4b21      	ldr	r3, [pc, #132]	; (80045f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4013      	ands	r3, r2
 8004576:	4a20      	ldr	r2, [pc, #128]	; (80045f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004578:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004580:	d10a      	bne.n	8004598 <prvAddCurrentTaskToDelayedList+0x58>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d007      	beq.n	8004598 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004588:	4b1a      	ldr	r3, [pc, #104]	; (80045f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3304      	adds	r3, #4
 800458e:	4619      	mov	r1, r3
 8004590:	481a      	ldr	r0, [pc, #104]	; (80045fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004592:	f7fe fc18 	bl	8002dc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004596:	e026      	b.n	80045e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4413      	add	r3, r2
 800459e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045a0:	4b14      	ldr	r3, [pc, #80]	; (80045f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d209      	bcs.n	80045c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045b0:	4b13      	ldr	r3, [pc, #76]	; (8004600 <prvAddCurrentTaskToDelayedList+0xc0>)
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3304      	adds	r3, #4
 80045ba:	4619      	mov	r1, r3
 80045bc:	4610      	mov	r0, r2
 80045be:	f7fe fc26 	bl	8002e0e <vListInsert>
}
 80045c2:	e010      	b.n	80045e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045c4:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <prvAddCurrentTaskToDelayedList+0xc4>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3304      	adds	r3, #4
 80045ce:	4619      	mov	r1, r3
 80045d0:	4610      	mov	r0, r2
 80045d2:	f7fe fc1c 	bl	8002e0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045d6:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d202      	bcs.n	80045e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80045e0:	4a09      	ldr	r2, [pc, #36]	; (8004608 <prvAddCurrentTaskToDelayedList+0xc8>)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	6013      	str	r3, [r2, #0]
}
 80045e6:	bf00      	nop
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20000840 	.word	0x20000840
 80045f4:	2000073c 	.word	0x2000073c
 80045f8:	20000844 	.word	0x20000844
 80045fc:	20000828 	.word	0x20000828
 8004600:	200007f8 	.word	0x200007f8
 8004604:	200007f4 	.word	0x200007f4
 8004608:	2000085c 	.word	0x2000085c

0800460c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	; 0x28
 8004610:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004616:	f000 fb9b 	bl	8004d50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800461a:	4b1c      	ldr	r3, [pc, #112]	; (800468c <xTimerCreateTimerTask+0x80>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d021      	beq.n	8004666 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004626:	2300      	movs	r3, #0
 8004628:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800462a:	1d3a      	adds	r2, r7, #4
 800462c:	f107 0108 	add.w	r1, r7, #8
 8004630:	f107 030c 	add.w	r3, r7, #12
 8004634:	4618      	mov	r0, r3
 8004636:	f7fb ffbd 	bl	80005b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	9202      	str	r2, [sp, #8]
 8004642:	9301      	str	r3, [sp, #4]
 8004644:	2306      	movs	r3, #6
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	2300      	movs	r3, #0
 800464a:	460a      	mov	r2, r1
 800464c:	4910      	ldr	r1, [pc, #64]	; (8004690 <xTimerCreateTimerTask+0x84>)
 800464e:	4811      	ldr	r0, [pc, #68]	; (8004694 <xTimerCreateTimerTask+0x88>)
 8004650:	f7ff f910 	bl	8003874 <xTaskCreateStatic>
 8004654:	4602      	mov	r2, r0
 8004656:	4b10      	ldr	r3, [pc, #64]	; (8004698 <xTimerCreateTimerTask+0x8c>)
 8004658:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800465a:	4b0f      	ldr	r3, [pc, #60]	; (8004698 <xTimerCreateTimerTask+0x8c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004662:	2301      	movs	r3, #1
 8004664:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d109      	bne.n	8004680 <xTimerCreateTimerTask+0x74>
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	e7fe      	b.n	800467e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004680:	697b      	ldr	r3, [r7, #20]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000898 	.word	0x20000898
 8004690:	08005fd0 	.word	0x08005fd0
 8004694:	08004935 	.word	0x08004935
 8004698:	2000089c 	.word	0x2000089c

0800469c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af02      	add	r7, sp, #8
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80046aa:	2028      	movs	r0, #40	; 0x28
 80046ac:	f000 fe10 	bl	80052d0 <pvPortMalloc>
 80046b0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00d      	beq.n	80046d4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	9301      	str	r3, [sp, #4]
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	68b9      	ldr	r1, [r7, #8]
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f841 	bl	8004756 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80046d4:	697b      	ldr	r3, [r7, #20]
	}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b08a      	sub	sp, #40	; 0x28
 80046e2:	af02      	add	r7, sp, #8
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	607a      	str	r2, [r7, #4]
 80046ea:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80046ec:	2328      	movs	r3, #40	; 0x28
 80046ee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	2b28      	cmp	r3, #40	; 0x28
 80046f4:	d009      	beq.n	800470a <xTimerCreateStatic+0x2c>
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	61bb      	str	r3, [r7, #24]
 8004708:	e7fe      	b.n	8004708 <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800470a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800470c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <xTimerCreateStatic+0x48>
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	e7fe      	b.n	8004724 <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8004726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004728:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00d      	beq.n	800474c <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	9301      	str	r3, [sp, #4]
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f805 	bl	8004756 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800474c:	69fb      	ldr	r3, [r7, #28]
	}
 800474e:	4618      	mov	r0, r3
 8004750:	3720      	adds	r7, #32
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b086      	sub	sp, #24
 800475a:	af00      	add	r7, sp, #0
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	60b9      	str	r1, [r7, #8]
 8004760:	607a      	str	r2, [r7, #4]
 8004762:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d109      	bne.n	800477e <prvInitialiseNewTimer+0x28>
 800476a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	e7fe      	b.n	800477c <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01e      	beq.n	80047c2 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004784:	f000 fae4 	bl	8004d50 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	6a3a      	ldr	r2, [r7, #32]
 800479e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	3304      	adds	r3, #4
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fe fb01 	bl	8002dac <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047b6:	f043 0304 	orr.w	r3, r3, #4
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80047c2:	bf00      	nop
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08a      	sub	sp, #40	; 0x28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
 80047d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80047da:	2300      	movs	r3, #0
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d109      	bne.n	80047f8 <xTimerGenericCommand+0x2c>
 80047e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	623b      	str	r3, [r7, #32]
 80047f6:	e7fe      	b.n	80047f6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80047f8:	4b19      	ldr	r3, [pc, #100]	; (8004860 <xTimerGenericCommand+0x94>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d02a      	beq.n	8004856 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b05      	cmp	r3, #5
 8004810:	dc18      	bgt.n	8004844 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004812:	f7ff fdf3 	bl	80043fc <xTaskGetSchedulerState>
 8004816:	4603      	mov	r3, r0
 8004818:	2b02      	cmp	r3, #2
 800481a:	d109      	bne.n	8004830 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800481c:	4b10      	ldr	r3, [pc, #64]	; (8004860 <xTimerGenericCommand+0x94>)
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	f107 0114 	add.w	r1, r7, #20
 8004824:	2300      	movs	r3, #0
 8004826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004828:	f7fe fc4e 	bl	80030c8 <xQueueGenericSend>
 800482c:	6278      	str	r0, [r7, #36]	; 0x24
 800482e:	e012      	b.n	8004856 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004830:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <xTimerGenericCommand+0x94>)
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	f107 0114 	add.w	r1, r7, #20
 8004838:	2300      	movs	r3, #0
 800483a:	2200      	movs	r2, #0
 800483c:	f7fe fc44 	bl	80030c8 <xQueueGenericSend>
 8004840:	6278      	str	r0, [r7, #36]	; 0x24
 8004842:	e008      	b.n	8004856 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004844:	4b06      	ldr	r3, [pc, #24]	; (8004860 <xTimerGenericCommand+0x94>)
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	f107 0114 	add.w	r1, r7, #20
 800484c:	2300      	movs	r3, #0
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	f7fe fd34 	bl	80032bc <xQueueGenericSendFromISR>
 8004854:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004858:	4618      	mov	r0, r3
 800485a:	3728      	adds	r7, #40	; 0x28
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	20000898 	.word	0x20000898

08004864 <xTimerGetPeriod>:
	return xTimerTaskHandle;
}
/*-----------------------------------------------------------*/

TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
Timer_t *pxTimer = xTimer;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <xTimerGetPeriod+0x26>
 8004876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	60bb      	str	r3, [r7, #8]
 8004888:	e7fe      	b.n	8004888 <xTimerGetPeriod+0x24>
	return pxTimer->xTimerPeriodInTicks;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	699b      	ldr	r3, [r3, #24]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
	...

0800489c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048a6:	4b22      	ldr	r3, [pc, #136]	; (8004930 <prvProcessExpiredTimer+0x94>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	3304      	adds	r3, #4
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fe fae3 	bl	8002e80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d021      	beq.n	800490c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	699a      	ldr	r2, [r3, #24]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	18d1      	adds	r1, r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	6978      	ldr	r0, [r7, #20]
 80048d6:	f000 f8d1 	bl	8004a7c <prvInsertTimerInActiveList>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01e      	beq.n	800491e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048e0:	2300      	movs	r3, #0
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	2300      	movs	r3, #0
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	2100      	movs	r1, #0
 80048ea:	6978      	ldr	r0, [r7, #20]
 80048ec:	f7ff ff6e 	bl	80047cc <xTimerGenericCommand>
 80048f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d112      	bne.n	800491e <prvProcessExpiredTimer+0x82>
 80048f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	e7fe      	b.n	800490a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	b2da      	uxtb	r2, r3
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	6978      	ldr	r0, [r7, #20]
 8004924:	4798      	blx	r3
}
 8004926:	bf00      	nop
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20000890 	.word	0x20000890

08004934 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800493c:	f107 0308 	add.w	r3, r7, #8
 8004940:	4618      	mov	r0, r3
 8004942:	f000 f857 	bl	80049f4 <prvGetNextExpireTime>
 8004946:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4619      	mov	r1, r3
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 f803 	bl	8004958 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004952:	f000 f8d5 	bl	8004b00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004956:	e7f1      	b.n	800493c <prvTimerTask+0x8>

08004958 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004962:	f7ff f97b 	bl	8003c5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004966:	f107 0308 	add.w	r3, r7, #8
 800496a:	4618      	mov	r0, r3
 800496c:	f000 f866 	bl	8004a3c <prvSampleTimeNow>
 8004970:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d130      	bne.n	80049da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10a      	bne.n	8004994 <prvProcessTimerOrBlockTask+0x3c>
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	429a      	cmp	r2, r3
 8004984:	d806      	bhi.n	8004994 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004986:	f7ff f977 	bl	8003c78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800498a:	68f9      	ldr	r1, [r7, #12]
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff ff85 	bl	800489c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004992:	e024      	b.n	80049de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d008      	beq.n	80049ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800499a:	4b13      	ldr	r3, [pc, #76]	; (80049e8 <prvProcessTimerOrBlockTask+0x90>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <prvProcessTimerOrBlockTask+0x50>
 80049a4:	2301      	movs	r3, #1
 80049a6:	e000      	b.n	80049aa <prvProcessTimerOrBlockTask+0x52>
 80049a8:	2300      	movs	r3, #0
 80049aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80049ac:	4b0f      	ldr	r3, [pc, #60]	; (80049ec <prvProcessTimerOrBlockTask+0x94>)
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	4619      	mov	r1, r3
 80049ba:	f7fe ff27 	bl	800380c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80049be:	f7ff f95b 	bl	8003c78 <xTaskResumeAll>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10a      	bne.n	80049de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80049c8:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <prvProcessTimerOrBlockTask+0x98>)
 80049ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	f3bf 8f6f 	isb	sy
}
 80049d8:	e001      	b.n	80049de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80049da:	f7ff f94d 	bl	8003c78 <xTaskResumeAll>
}
 80049de:	bf00      	nop
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	20000894 	.word	0x20000894
 80049ec:	20000898 	.word	0x20000898
 80049f0:	e000ed04 	.word	0xe000ed04

080049f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049fc:	4b0e      	ldr	r3, [pc, #56]	; (8004a38 <prvGetNextExpireTime+0x44>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <prvGetNextExpireTime+0x16>
 8004a06:	2201      	movs	r2, #1
 8004a08:	e000      	b.n	8004a0c <prvGetNextExpireTime+0x18>
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d105      	bne.n	8004a24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a18:	4b07      	ldr	r3, [pc, #28]	; (8004a38 <prvGetNextExpireTime+0x44>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	e001      	b.n	8004a28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a28:	68fb      	ldr	r3, [r7, #12]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	20000890 	.word	0x20000890

08004a3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a44:	f7ff f9b4 	bl	8003db0 <xTaskGetTickCount>
 8004a48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <prvSampleTimeNow+0x3c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d205      	bcs.n	8004a60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a54:	f000 f918 	bl	8004c88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	e002      	b.n	8004a66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a66:	4a04      	ldr	r2, [pc, #16]	; (8004a78 <prvSampleTimeNow+0x3c>)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	200008a0 	.word	0x200008a0

08004a7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d812      	bhi.n	8004ac8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	1ad2      	subs	r2, r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d302      	bcc.n	8004ab6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	e01b      	b.n	8004aee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ab6:	4b10      	ldr	r3, [pc, #64]	; (8004af8 <prvInsertTimerInActiveList+0x7c>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3304      	adds	r3, #4
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	f7fe f9a4 	bl	8002e0e <vListInsert>
 8004ac6:	e012      	b.n	8004aee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d206      	bcs.n	8004ade <prvInsertTimerInActiveList+0x62>
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d302      	bcc.n	8004ade <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	e007      	b.n	8004aee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ade:	4b07      	ldr	r3, [pc, #28]	; (8004afc <prvInsertTimerInActiveList+0x80>)
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4610      	mov	r0, r2
 8004aea:	f7fe f990 	bl	8002e0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004aee:	697b      	ldr	r3, [r7, #20]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	20000894 	.word	0x20000894
 8004afc:	20000890 	.word	0x20000890

08004b00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b08c      	sub	sp, #48	; 0x30
 8004b04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b06:	e0ac      	b.n	8004c62 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f2c0 80a8 	blt.w	8004c60 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d004      	beq.n	8004b26 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	3304      	adds	r3, #4
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fe f9ad 	bl	8002e80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b26:	1d3b      	adds	r3, r7, #4
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff ff87 	bl	8004a3c <prvSampleTimeNow>
 8004b2e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b09      	cmp	r3, #9
 8004b34:	f200 8095 	bhi.w	8004c62 <prvProcessReceivedCommands+0x162>
 8004b38:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <prvProcessReceivedCommands+0x40>)
 8004b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3e:	bf00      	nop
 8004b40:	08004b69 	.word	0x08004b69
 8004b44:	08004b69 	.word	0x08004b69
 8004b48:	08004b69 	.word	0x08004b69
 8004b4c:	08004bdb 	.word	0x08004bdb
 8004b50:	08004bef 	.word	0x08004bef
 8004b54:	08004c37 	.word	0x08004c37
 8004b58:	08004b69 	.word	0x08004b69
 8004b5c:	08004b69 	.word	0x08004b69
 8004b60:	08004bdb 	.word	0x08004bdb
 8004b64:	08004bef 	.word	0x08004bef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b6e:	f043 0301 	orr.w	r3, r3, #1
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	18d1      	adds	r1, r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a3a      	ldr	r2, [r7, #32]
 8004b86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b88:	f7ff ff78 	bl	8004a7c <prvInsertTimerInActiveList>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d067      	beq.n	8004c62 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d05c      	beq.n	8004c62 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	441a      	add	r2, r3
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bba:	f7ff fe07 	bl	80047cc <xTimerGenericCommand>
 8004bbe:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d14d      	bne.n	8004c62 <prvProcessReceivedCommands+0x162>
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	61bb      	str	r3, [r7, #24]
 8004bd8:	e7fe      	b.n	8004bd8 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004be0:	f023 0301 	bic.w	r3, r3, #1
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8004bec:	e039      	b.n	8004c62 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004bf4:	f043 0301 	orr.w	r3, r3, #1
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d109      	bne.n	8004c22 <prvProcessReceivedCommands+0x122>
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	e7fe      	b.n	8004c20 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	699a      	ldr	r2, [r3, #24]
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	18d1      	adds	r1, r2, r3
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	6a3a      	ldr	r2, [r7, #32]
 8004c2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c30:	f7ff ff24 	bl	8004a7c <prvInsertTimerInActiveList>
					break;
 8004c34:	e015      	b.n	8004c62 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d103      	bne.n	8004c4c <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8004c44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c46:	f000 fc05 	bl	8005454 <vPortFree>
 8004c4a:	e00a      	b.n	8004c62 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c52:	f023 0301 	bic.w	r3, r3, #1
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c5e:	e000      	b.n	8004c62 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004c60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c62:	4b08      	ldr	r3, [pc, #32]	; (8004c84 <prvProcessReceivedCommands+0x184>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f107 0108 	add.w	r1, r7, #8
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fe fbb9 	bl	80033e4 <xQueueReceive>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f47f af47 	bne.w	8004b08 <prvProcessReceivedCommands+0x8>
	}
}
 8004c7a:	bf00      	nop
 8004c7c:	3728      	adds	r7, #40	; 0x28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20000898 	.word	0x20000898

08004c88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c8e:	e047      	b.n	8004d20 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c90:	4b2d      	ldr	r3, [pc, #180]	; (8004d48 <prvSwitchTimerLists+0xc0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c9a:	4b2b      	ldr	r3, [pc, #172]	; (8004d48 <prvSwitchTimerLists+0xc0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fe f8e9 	bl	8002e80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d02d      	beq.n	8004d20 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4413      	add	r3, r2
 8004ccc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d90e      	bls.n	8004cf4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ce2:	4b19      	ldr	r3, [pc, #100]	; (8004d48 <prvSwitchTimerLists+0xc0>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3304      	adds	r3, #4
 8004cea:	4619      	mov	r1, r3
 8004cec:	4610      	mov	r0, r2
 8004cee:	f7fe f88e 	bl	8002e0e <vListInsert>
 8004cf2:	e015      	b.n	8004d20 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f7ff fd64 	bl	80047cc <xTimerGenericCommand>
 8004d04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d109      	bne.n	8004d20 <prvSwitchTimerLists+0x98>
 8004d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	603b      	str	r3, [r7, #0]
 8004d1e:	e7fe      	b.n	8004d1e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d20:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <prvSwitchTimerLists+0xc0>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1b2      	bne.n	8004c90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d2a:	4b07      	ldr	r3, [pc, #28]	; (8004d48 <prvSwitchTimerLists+0xc0>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d30:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <prvSwitchTimerLists+0xc4>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a04      	ldr	r2, [pc, #16]	; (8004d48 <prvSwitchTimerLists+0xc0>)
 8004d36:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d38:	4a04      	ldr	r2, [pc, #16]	; (8004d4c <prvSwitchTimerLists+0xc4>)
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	6013      	str	r3, [r2, #0]
}
 8004d3e:	bf00      	nop
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	20000890 	.word	0x20000890
 8004d4c:	20000894 	.word	0x20000894

08004d50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d56:	f000 f9a1 	bl	800509c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d5a:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <prvCheckForValidListAndQueue+0x60>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d120      	bne.n	8004da4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d62:	4814      	ldr	r0, [pc, #80]	; (8004db4 <prvCheckForValidListAndQueue+0x64>)
 8004d64:	f7fe f802 	bl	8002d6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d68:	4813      	ldr	r0, [pc, #76]	; (8004db8 <prvCheckForValidListAndQueue+0x68>)
 8004d6a:	f7fd ffff 	bl	8002d6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d6e:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <prvCheckForValidListAndQueue+0x6c>)
 8004d70:	4a10      	ldr	r2, [pc, #64]	; (8004db4 <prvCheckForValidListAndQueue+0x64>)
 8004d72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d74:	4b12      	ldr	r3, [pc, #72]	; (8004dc0 <prvCheckForValidListAndQueue+0x70>)
 8004d76:	4a10      	ldr	r2, [pc, #64]	; (8004db8 <prvCheckForValidListAndQueue+0x68>)
 8004d78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	4b11      	ldr	r3, [pc, #68]	; (8004dc4 <prvCheckForValidListAndQueue+0x74>)
 8004d80:	4a11      	ldr	r2, [pc, #68]	; (8004dc8 <prvCheckForValidListAndQueue+0x78>)
 8004d82:	210c      	movs	r1, #12
 8004d84:	2005      	movs	r0, #5
 8004d86:	f7fe f90d 	bl	8002fa4 <xQueueGenericCreateStatic>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	4b08      	ldr	r3, [pc, #32]	; (8004db0 <prvCheckForValidListAndQueue+0x60>)
 8004d8e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d90:	4b07      	ldr	r3, [pc, #28]	; (8004db0 <prvCheckForValidListAndQueue+0x60>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <prvCheckForValidListAndQueue+0x60>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	490b      	ldr	r1, [pc, #44]	; (8004dcc <prvCheckForValidListAndQueue+0x7c>)
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fe fd0c 	bl	80037bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004da4:	f000 f9a8 	bl	80050f8 <vPortExitCritical>
}
 8004da8:	bf00      	nop
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	20000898 	.word	0x20000898
 8004db4:	20000868 	.word	0x20000868
 8004db8:	2000087c 	.word	0x2000087c
 8004dbc:	20000890 	.word	0x20000890
 8004dc0:	20000894 	.word	0x20000894
 8004dc4:	200008e0 	.word	0x200008e0
 8004dc8:	200008a4 	.word	0x200008a4
 8004dcc:	08005fd8 	.word	0x08005fd8

08004dd0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d109      	bne.n	8004df6 <pvTimerGetTimerID+0x26>
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	e7fe      	b.n	8004df4 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 8004df6:	f000 f951 	bl	800509c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8004e00:	f000 f97a 	bl	80050f8 <vPortExitCritical>

	return pvReturn;
 8004e04:	693b      	ldr	r3, [r7, #16]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b084      	sub	sp, #16
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	6039      	str	r1, [r7, #0]
Timer_t * const pxTimer = xTimer;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d109      	bne.n	8004e36 <vTimerSetTimerID+0x28>
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	60bb      	str	r3, [r7, #8]
 8004e34:	e7fe      	b.n	8004e34 <vTimerSetTimerID+0x26>

	taskENTER_CRITICAL();
 8004e36:	f000 f931 	bl	800509c <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	61da      	str	r2, [r3, #28]
	}
	taskEXIT_CRITICAL();
 8004e40:	f000 f95a 	bl	80050f8 <vPortExitCritical>
}
 8004e44:	bf00      	nop
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	3b04      	subs	r3, #4
 8004e5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	3b04      	subs	r3, #4
 8004e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f023 0201 	bic.w	r2, r3, #1
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	3b04      	subs	r3, #4
 8004e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e7c:	4a0c      	ldr	r2, [pc, #48]	; (8004eb0 <pxPortInitialiseStack+0x64>)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	3b14      	subs	r3, #20
 8004e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3b04      	subs	r3, #4
 8004e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f06f 0202 	mvn.w	r2, #2
 8004e9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	3b20      	subs	r3, #32
 8004ea0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	08004eb5 	.word	0x08004eb5

08004eb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ebe:	4b11      	ldr	r3, [pc, #68]	; (8004f04 <prvTaskExitError+0x50>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec6:	d009      	beq.n	8004edc <prvTaskExitError+0x28>
 8004ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	e7fe      	b.n	8004eda <prvTaskExitError+0x26>
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004eee:	bf00      	nop
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d0fc      	beq.n	8004ef0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ef6:	bf00      	nop
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	2000000c 	.word	0x2000000c
	...

08004f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f10:	4b07      	ldr	r3, [pc, #28]	; (8004f30 <pxCurrentTCBConst2>)
 8004f12:	6819      	ldr	r1, [r3, #0]
 8004f14:	6808      	ldr	r0, [r1, #0]
 8004f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f1a:	f380 8809 	msr	PSP, r0
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f04f 0000 	mov.w	r0, #0
 8004f26:	f380 8811 	msr	BASEPRI, r0
 8004f2a:	4770      	bx	lr
 8004f2c:	f3af 8000 	nop.w

08004f30 <pxCurrentTCBConst2>:
 8004f30:	2000073c 	.word	0x2000073c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop

08004f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f38:	4808      	ldr	r0, [pc, #32]	; (8004f5c <prvPortStartFirstTask+0x24>)
 8004f3a:	6800      	ldr	r0, [r0, #0]
 8004f3c:	6800      	ldr	r0, [r0, #0]
 8004f3e:	f380 8808 	msr	MSP, r0
 8004f42:	f04f 0000 	mov.w	r0, #0
 8004f46:	f380 8814 	msr	CONTROL, r0
 8004f4a:	b662      	cpsie	i
 8004f4c:	b661      	cpsie	f
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	df00      	svc	0
 8004f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f5a:	bf00      	nop
 8004f5c:	e000ed08 	.word	0xe000ed08

08004f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f66:	4b44      	ldr	r3, [pc, #272]	; (8005078 <xPortStartScheduler+0x118>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a44      	ldr	r2, [pc, #272]	; (800507c <xPortStartScheduler+0x11c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d109      	bne.n	8004f84 <xPortStartScheduler+0x24>
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	613b      	str	r3, [r7, #16]
 8004f82:	e7fe      	b.n	8004f82 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f84:	4b3c      	ldr	r3, [pc, #240]	; (8005078 <xPortStartScheduler+0x118>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a3d      	ldr	r2, [pc, #244]	; (8005080 <xPortStartScheduler+0x120>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d109      	bne.n	8004fa2 <xPortStartScheduler+0x42>
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	e7fe      	b.n	8004fa0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004fa2:	4b38      	ldr	r3, [pc, #224]	; (8005084 <xPortStartScheduler+0x124>)
 8004fa4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	22ff      	movs	r2, #255	; 0xff
 8004fb2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004fbc:	78fb      	ldrb	r3, [r7, #3]
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	4b30      	ldr	r3, [pc, #192]	; (8005088 <xPortStartScheduler+0x128>)
 8004fc8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004fca:	4b30      	ldr	r3, [pc, #192]	; (800508c <xPortStartScheduler+0x12c>)
 8004fcc:	2207      	movs	r2, #7
 8004fce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fd0:	e009      	b.n	8004fe6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004fd2:	4b2e      	ldr	r3, [pc, #184]	; (800508c <xPortStartScheduler+0x12c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	4a2c      	ldr	r2, [pc, #176]	; (800508c <xPortStartScheduler+0x12c>)
 8004fda:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fdc:	78fb      	ldrb	r3, [r7, #3]
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fe6:	78fb      	ldrb	r3, [r7, #3]
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fee:	2b80      	cmp	r3, #128	; 0x80
 8004ff0:	d0ef      	beq.n	8004fd2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ff2:	4b26      	ldr	r3, [pc, #152]	; (800508c <xPortStartScheduler+0x12c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f1c3 0307 	rsb	r3, r3, #7
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d009      	beq.n	8005012 <xPortStartScheduler+0xb2>
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	60bb      	str	r3, [r7, #8]
 8005010:	e7fe      	b.n	8005010 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005012:	4b1e      	ldr	r3, [pc, #120]	; (800508c <xPortStartScheduler+0x12c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	4a1c      	ldr	r2, [pc, #112]	; (800508c <xPortStartScheduler+0x12c>)
 800501a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800501c:	4b1b      	ldr	r3, [pc, #108]	; (800508c <xPortStartScheduler+0x12c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005024:	4a19      	ldr	r2, [pc, #100]	; (800508c <xPortStartScheduler+0x12c>)
 8005026:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	b2da      	uxtb	r2, r3
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005030:	4b17      	ldr	r3, [pc, #92]	; (8005090 <xPortStartScheduler+0x130>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a16      	ldr	r2, [pc, #88]	; (8005090 <xPortStartScheduler+0x130>)
 8005036:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800503a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800503c:	4b14      	ldr	r3, [pc, #80]	; (8005090 <xPortStartScheduler+0x130>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a13      	ldr	r2, [pc, #76]	; (8005090 <xPortStartScheduler+0x130>)
 8005042:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005046:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005048:	f000 f8d6 	bl	80051f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800504c:	4b11      	ldr	r3, [pc, #68]	; (8005094 <xPortStartScheduler+0x134>)
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005052:	f000 f8f5 	bl	8005240 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005056:	4b10      	ldr	r3, [pc, #64]	; (8005098 <xPortStartScheduler+0x138>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a0f      	ldr	r2, [pc, #60]	; (8005098 <xPortStartScheduler+0x138>)
 800505c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005060:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005062:	f7ff ff69 	bl	8004f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005066:	f7fe ff6b 	bl	8003f40 <vTaskSwitchContext>
	prvTaskExitError();
 800506a:	f7ff ff23 	bl	8004eb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	e000ed00 	.word	0xe000ed00
 800507c:	410fc271 	.word	0x410fc271
 8005080:	410fc270 	.word	0x410fc270
 8005084:	e000e400 	.word	0xe000e400
 8005088:	20000928 	.word	0x20000928
 800508c:	2000092c 	.word	0x2000092c
 8005090:	e000ed20 	.word	0xe000ed20
 8005094:	2000000c 	.word	0x2000000c
 8005098:	e000ef34 	.word	0xe000ef34

0800509c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050b4:	4b0e      	ldr	r3, [pc, #56]	; (80050f0 <vPortEnterCritical+0x54>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3301      	adds	r3, #1
 80050ba:	4a0d      	ldr	r2, [pc, #52]	; (80050f0 <vPortEnterCritical+0x54>)
 80050bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050be:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <vPortEnterCritical+0x54>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d10e      	bne.n	80050e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050c6:	4b0b      	ldr	r3, [pc, #44]	; (80050f4 <vPortEnterCritical+0x58>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d009      	beq.n	80050e4 <vPortEnterCritical+0x48>
 80050d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	603b      	str	r3, [r7, #0]
 80050e2:	e7fe      	b.n	80050e2 <vPortEnterCritical+0x46>
	}
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	2000000c 	.word	0x2000000c
 80050f4:	e000ed04 	.word	0xe000ed04

080050f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050fe:	4b11      	ldr	r3, [pc, #68]	; (8005144 <vPortExitCritical+0x4c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d109      	bne.n	800511a <vPortExitCritical+0x22>
 8005106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	607b      	str	r3, [r7, #4]
 8005118:	e7fe      	b.n	8005118 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800511a:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <vPortExitCritical+0x4c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	3b01      	subs	r3, #1
 8005120:	4a08      	ldr	r2, [pc, #32]	; (8005144 <vPortExitCritical+0x4c>)
 8005122:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005124:	4b07      	ldr	r3, [pc, #28]	; (8005144 <vPortExitCritical+0x4c>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d104      	bne.n	8005136 <vPortExitCritical+0x3e>
 800512c:	2300      	movs	r3, #0
 800512e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	2000000c 	.word	0x2000000c
	...

08005150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005150:	f3ef 8009 	mrs	r0, PSP
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	4b15      	ldr	r3, [pc, #84]	; (80051b0 <pxCurrentTCBConst>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	f01e 0f10 	tst.w	lr, #16
 8005160:	bf08      	it	eq
 8005162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516a:	6010      	str	r0, [r2, #0]
 800516c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005174:	f380 8811 	msr	BASEPRI, r0
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f7fe fede 	bl	8003f40 <vTaskSwitchContext>
 8005184:	f04f 0000 	mov.w	r0, #0
 8005188:	f380 8811 	msr	BASEPRI, r0
 800518c:	bc09      	pop	{r0, r3}
 800518e:	6819      	ldr	r1, [r3, #0]
 8005190:	6808      	ldr	r0, [r1, #0]
 8005192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005196:	f01e 0f10 	tst.w	lr, #16
 800519a:	bf08      	it	eq
 800519c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051a0:	f380 8809 	msr	PSP, r0
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	f3af 8000 	nop.w

080051b0 <pxCurrentTCBConst>:
 80051b0:	2000073c 	.word	0x2000073c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop

080051b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051d0:	f7fe fdfe 	bl	8003dd0 <xTaskIncrementTick>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051da:	4b06      	ldr	r3, [pc, #24]	; (80051f4 <SysTick_Handler+0x3c>)
 80051dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	2300      	movs	r3, #0
 80051e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80051ec:	bf00      	nop
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	e000ed04 	.word	0xe000ed04

080051f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051fc:	4b0b      	ldr	r3, [pc, #44]	; (800522c <vPortSetupTimerInterrupt+0x34>)
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005202:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <vPortSetupTimerInterrupt+0x38>)
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005208:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <vPortSetupTimerInterrupt+0x3c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a0a      	ldr	r2, [pc, #40]	; (8005238 <vPortSetupTimerInterrupt+0x40>)
 800520e:	fba2 2303 	umull	r2, r3, r2, r3
 8005212:	099b      	lsrs	r3, r3, #6
 8005214:	4a09      	ldr	r2, [pc, #36]	; (800523c <vPortSetupTimerInterrupt+0x44>)
 8005216:	3b01      	subs	r3, #1
 8005218:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800521a:	4b04      	ldr	r3, [pc, #16]	; (800522c <vPortSetupTimerInterrupt+0x34>)
 800521c:	2207      	movs	r2, #7
 800521e:	601a      	str	r2, [r3, #0]
}
 8005220:	bf00      	nop
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	e000e010 	.word	0xe000e010
 8005230:	e000e018 	.word	0xe000e018
 8005234:	20000000 	.word	0x20000000
 8005238:	10624dd3 	.word	0x10624dd3
 800523c:	e000e014 	.word	0xe000e014

08005240 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005240:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005250 <vPortEnableVFP+0x10>
 8005244:	6801      	ldr	r1, [r0, #0]
 8005246:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800524a:	6001      	str	r1, [r0, #0]
 800524c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800524e:	bf00      	nop
 8005250:	e000ed88 	.word	0xe000ed88

08005254 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800525a:	f3ef 8305 	mrs	r3, IPSR
 800525e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b0f      	cmp	r3, #15
 8005264:	d913      	bls.n	800528e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005266:	4a16      	ldr	r2, [pc, #88]	; (80052c0 <vPortValidateInterruptPriority+0x6c>)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4413      	add	r3, r2
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005270:	4b14      	ldr	r3, [pc, #80]	; (80052c4 <vPortValidateInterruptPriority+0x70>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	7afa      	ldrb	r2, [r7, #11]
 8005276:	429a      	cmp	r2, r3
 8005278:	d209      	bcs.n	800528e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	607b      	str	r3, [r7, #4]
 800528c:	e7fe      	b.n	800528c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800528e:	4b0e      	ldr	r3, [pc, #56]	; (80052c8 <vPortValidateInterruptPriority+0x74>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005296:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <vPortValidateInterruptPriority+0x78>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d909      	bls.n	80052b2 <vPortValidateInterruptPriority+0x5e>
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	e7fe      	b.n	80052b0 <vPortValidateInterruptPriority+0x5c>
	}
 80052b2:	bf00      	nop
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	e000e3f0 	.word	0xe000e3f0
 80052c4:	20000928 	.word	0x20000928
 80052c8:	e000ed0c 	.word	0xe000ed0c
 80052cc:	2000092c 	.word	0x2000092c

080052d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08a      	sub	sp, #40	; 0x28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052d8:	2300      	movs	r3, #0
 80052da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052dc:	f7fe fcbe 	bl	8003c5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052e0:	4b57      	ldr	r3, [pc, #348]	; (8005440 <pvPortMalloc+0x170>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052e8:	f000 f90c 	bl	8005504 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052ec:	4b55      	ldr	r3, [pc, #340]	; (8005444 <pvPortMalloc+0x174>)
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4013      	ands	r3, r2
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f040 808c 	bne.w	8005412 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d01c      	beq.n	800533a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005300:	2208      	movs	r2, #8
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4413      	add	r3, r2
 8005306:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	2b00      	cmp	r3, #0
 8005310:	d013      	beq.n	800533a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f023 0307 	bic.w	r3, r3, #7
 8005318:	3308      	adds	r3, #8
 800531a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <pvPortMalloc+0x6a>
 8005326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	e7fe      	b.n	8005338 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d068      	beq.n	8005412 <pvPortMalloc+0x142>
 8005340:	4b41      	ldr	r3, [pc, #260]	; (8005448 <pvPortMalloc+0x178>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	429a      	cmp	r2, r3
 8005348:	d863      	bhi.n	8005412 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800534a:	4b40      	ldr	r3, [pc, #256]	; (800544c <pvPortMalloc+0x17c>)
 800534c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800534e:	4b3f      	ldr	r3, [pc, #252]	; (800544c <pvPortMalloc+0x17c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005354:	e004      	b.n	8005360 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	429a      	cmp	r2, r3
 8005368:	d903      	bls.n	8005372 <pvPortMalloc+0xa2>
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f1      	bne.n	8005356 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005372:	4b33      	ldr	r3, [pc, #204]	; (8005440 <pvPortMalloc+0x170>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005378:	429a      	cmp	r2, r3
 800537a:	d04a      	beq.n	8005412 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2208      	movs	r2, #8
 8005382:	4413      	add	r3, r2
 8005384:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	1ad2      	subs	r2, r2, r3
 8005396:	2308      	movs	r3, #8
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	429a      	cmp	r2, r3
 800539c:	d91e      	bls.n	80053dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800539e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4413      	add	r3, r2
 80053a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d009      	beq.n	80053c4 <pvPortMalloc+0xf4>
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	613b      	str	r3, [r7, #16]
 80053c2:	e7fe      	b.n	80053c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	1ad2      	subs	r2, r2, r3
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053d6:	69b8      	ldr	r0, [r7, #24]
 80053d8:	f000 f8f6 	bl	80055c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053dc:	4b1a      	ldr	r3, [pc, #104]	; (8005448 <pvPortMalloc+0x178>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	4a18      	ldr	r2, [pc, #96]	; (8005448 <pvPortMalloc+0x178>)
 80053e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053ea:	4b17      	ldr	r3, [pc, #92]	; (8005448 <pvPortMalloc+0x178>)
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	4b18      	ldr	r3, [pc, #96]	; (8005450 <pvPortMalloc+0x180>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d203      	bcs.n	80053fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053f6:	4b14      	ldr	r3, [pc, #80]	; (8005448 <pvPortMalloc+0x178>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a15      	ldr	r2, [pc, #84]	; (8005450 <pvPortMalloc+0x180>)
 80053fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	4b10      	ldr	r3, [pc, #64]	; (8005444 <pvPortMalloc+0x174>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	431a      	orrs	r2, r3
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005412:	f7fe fc31 	bl	8003c78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	2b00      	cmp	r3, #0
 800541e:	d009      	beq.n	8005434 <pvPortMalloc+0x164>
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	e7fe      	b.n	8005432 <pvPortMalloc+0x162>
	return pvReturn;
 8005434:	69fb      	ldr	r3, [r7, #28]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3728      	adds	r7, #40	; 0x28
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	20004538 	.word	0x20004538
 8005444:	20004544 	.word	0x20004544
 8005448:	2000453c 	.word	0x2000453c
 800544c:	20004530 	.word	0x20004530
 8005450:	20004540 	.word	0x20004540

08005454 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d046      	beq.n	80054f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005466:	2308      	movs	r3, #8
 8005468:	425b      	negs	r3, r3
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	4413      	add	r3, r2
 800546e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	4b20      	ldr	r3, [pc, #128]	; (80054fc <vPortFree+0xa8>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4013      	ands	r3, r2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d109      	bne.n	8005496 <vPortFree+0x42>
 8005482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	e7fe      	b.n	8005494 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <vPortFree+0x5e>
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	60bb      	str	r3, [r7, #8]
 80054b0:	e7fe      	b.n	80054b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	4b11      	ldr	r3, [pc, #68]	; (80054fc <vPortFree+0xa8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d019      	beq.n	80054f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d115      	bne.n	80054f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <vPortFree+0xa8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	43db      	mvns	r3, r3
 80054d2:	401a      	ands	r2, r3
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054d8:	f7fe fbc0 	bl	8003c5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	4b07      	ldr	r3, [pc, #28]	; (8005500 <vPortFree+0xac>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4413      	add	r3, r2
 80054e6:	4a06      	ldr	r2, [pc, #24]	; (8005500 <vPortFree+0xac>)
 80054e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054ea:	6938      	ldr	r0, [r7, #16]
 80054ec:	f000 f86c 	bl	80055c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80054f0:	f7fe fbc2 	bl	8003c78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054f4:	bf00      	nop
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	20004544 	.word	0x20004544
 8005500:	2000453c 	.word	0x2000453c

08005504 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800550a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800550e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005510:	4b27      	ldr	r3, [pc, #156]	; (80055b0 <prvHeapInit+0xac>)
 8005512:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00c      	beq.n	8005538 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3307      	adds	r3, #7
 8005522:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0307 	bic.w	r3, r3, #7
 800552a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	4a1f      	ldr	r2, [pc, #124]	; (80055b0 <prvHeapInit+0xac>)
 8005534:	4413      	add	r3, r2
 8005536:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800553c:	4a1d      	ldr	r2, [pc, #116]	; (80055b4 <prvHeapInit+0xb0>)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005542:	4b1c      	ldr	r3, [pc, #112]	; (80055b4 <prvHeapInit+0xb0>)
 8005544:	2200      	movs	r2, #0
 8005546:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	4413      	add	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005550:	2208      	movs	r2, #8
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	1a9b      	subs	r3, r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0307 	bic.w	r3, r3, #7
 800555e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4a15      	ldr	r2, [pc, #84]	; (80055b8 <prvHeapInit+0xb4>)
 8005564:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005566:	4b14      	ldr	r3, [pc, #80]	; (80055b8 <prvHeapInit+0xb4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2200      	movs	r2, #0
 800556c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800556e:	4b12      	ldr	r3, [pc, #72]	; (80055b8 <prvHeapInit+0xb4>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2200      	movs	r2, #0
 8005574:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	1ad2      	subs	r2, r2, r3
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005584:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <prvHeapInit+0xb4>)
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	4a0a      	ldr	r2, [pc, #40]	; (80055bc <prvHeapInit+0xb8>)
 8005592:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	4a09      	ldr	r2, [pc, #36]	; (80055c0 <prvHeapInit+0xbc>)
 800559a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800559c:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <prvHeapInit+0xc0>)
 800559e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80055a2:	601a      	str	r2, [r3, #0]
}
 80055a4:	bf00      	nop
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	20000930 	.word	0x20000930
 80055b4:	20004530 	.word	0x20004530
 80055b8:	20004538 	.word	0x20004538
 80055bc:	20004540 	.word	0x20004540
 80055c0:	2000453c 	.word	0x2000453c
 80055c4:	20004544 	.word	0x20004544

080055c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055d0:	4b28      	ldr	r3, [pc, #160]	; (8005674 <prvInsertBlockIntoFreeList+0xac>)
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	e002      	b.n	80055dc <prvInsertBlockIntoFreeList+0x14>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d8f7      	bhi.n	80055d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	4413      	add	r3, r2
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d108      	bne.n	800560a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	441a      	add	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	441a      	add	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d118      	bne.n	8005650 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	4b15      	ldr	r3, [pc, #84]	; (8005678 <prvInsertBlockIntoFreeList+0xb0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d00d      	beq.n	8005646 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	441a      	add	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	e008      	b.n	8005658 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005646:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <prvInsertBlockIntoFreeList+0xb0>)
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	e003      	b.n	8005658 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	429a      	cmp	r2, r3
 800565e:	d002      	beq.n	8005666 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005666:	bf00      	nop
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	20004530 	.word	0x20004530
 8005678:	20004538 	.word	0x20004538

0800567c <__errno>:
 800567c:	4b01      	ldr	r3, [pc, #4]	; (8005684 <__errno+0x8>)
 800567e:	6818      	ldr	r0, [r3, #0]
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	20000010 	.word	0x20000010

08005688 <__libc_init_array>:
 8005688:	b570      	push	{r4, r5, r6, lr}
 800568a:	4e0d      	ldr	r6, [pc, #52]	; (80056c0 <__libc_init_array+0x38>)
 800568c:	4c0d      	ldr	r4, [pc, #52]	; (80056c4 <__libc_init_array+0x3c>)
 800568e:	1ba4      	subs	r4, r4, r6
 8005690:	10a4      	asrs	r4, r4, #2
 8005692:	2500      	movs	r5, #0
 8005694:	42a5      	cmp	r5, r4
 8005696:	d109      	bne.n	80056ac <__libc_init_array+0x24>
 8005698:	4e0b      	ldr	r6, [pc, #44]	; (80056c8 <__libc_init_array+0x40>)
 800569a:	4c0c      	ldr	r4, [pc, #48]	; (80056cc <__libc_init_array+0x44>)
 800569c:	f000 fc3c 	bl	8005f18 <_init>
 80056a0:	1ba4      	subs	r4, r4, r6
 80056a2:	10a4      	asrs	r4, r4, #2
 80056a4:	2500      	movs	r5, #0
 80056a6:	42a5      	cmp	r5, r4
 80056a8:	d105      	bne.n	80056b6 <__libc_init_array+0x2e>
 80056aa:	bd70      	pop	{r4, r5, r6, pc}
 80056ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056b0:	4798      	blx	r3
 80056b2:	3501      	adds	r5, #1
 80056b4:	e7ee      	b.n	8005694 <__libc_init_array+0xc>
 80056b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056ba:	4798      	blx	r3
 80056bc:	3501      	adds	r5, #1
 80056be:	e7f2      	b.n	80056a6 <__libc_init_array+0x1e>
 80056c0:	08006034 	.word	0x08006034
 80056c4:	08006034 	.word	0x08006034
 80056c8:	08006034 	.word	0x08006034
 80056cc:	08006038 	.word	0x08006038

080056d0 <memcpy>:
 80056d0:	b510      	push	{r4, lr}
 80056d2:	1e43      	subs	r3, r0, #1
 80056d4:	440a      	add	r2, r1
 80056d6:	4291      	cmp	r1, r2
 80056d8:	d100      	bne.n	80056dc <memcpy+0xc>
 80056da:	bd10      	pop	{r4, pc}
 80056dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056e4:	e7f7      	b.n	80056d6 <memcpy+0x6>

080056e6 <memset>:
 80056e6:	4402      	add	r2, r0
 80056e8:	4603      	mov	r3, r0
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d100      	bne.n	80056f0 <memset+0xa>
 80056ee:	4770      	bx	lr
 80056f0:	f803 1b01 	strb.w	r1, [r3], #1
 80056f4:	e7f9      	b.n	80056ea <memset+0x4>
	...

080056f8 <sniprintf>:
 80056f8:	b40c      	push	{r2, r3}
 80056fa:	b530      	push	{r4, r5, lr}
 80056fc:	4b17      	ldr	r3, [pc, #92]	; (800575c <sniprintf+0x64>)
 80056fe:	1e0c      	subs	r4, r1, #0
 8005700:	b09d      	sub	sp, #116	; 0x74
 8005702:	681d      	ldr	r5, [r3, #0]
 8005704:	da08      	bge.n	8005718 <sniprintf+0x20>
 8005706:	238b      	movs	r3, #139	; 0x8b
 8005708:	602b      	str	r3, [r5, #0]
 800570a:	f04f 30ff 	mov.w	r0, #4294967295
 800570e:	b01d      	add	sp, #116	; 0x74
 8005710:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005714:	b002      	add	sp, #8
 8005716:	4770      	bx	lr
 8005718:	f44f 7302 	mov.w	r3, #520	; 0x208
 800571c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005720:	bf14      	ite	ne
 8005722:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005726:	4623      	moveq	r3, r4
 8005728:	9304      	str	r3, [sp, #16]
 800572a:	9307      	str	r3, [sp, #28]
 800572c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005730:	9002      	str	r0, [sp, #8]
 8005732:	9006      	str	r0, [sp, #24]
 8005734:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005738:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800573a:	ab21      	add	r3, sp, #132	; 0x84
 800573c:	a902      	add	r1, sp, #8
 800573e:	4628      	mov	r0, r5
 8005740:	9301      	str	r3, [sp, #4]
 8005742:	f000 f867 	bl	8005814 <_svfiprintf_r>
 8005746:	1c43      	adds	r3, r0, #1
 8005748:	bfbc      	itt	lt
 800574a:	238b      	movlt	r3, #139	; 0x8b
 800574c:	602b      	strlt	r3, [r5, #0]
 800574e:	2c00      	cmp	r4, #0
 8005750:	d0dd      	beq.n	800570e <sniprintf+0x16>
 8005752:	9b02      	ldr	r3, [sp, #8]
 8005754:	2200      	movs	r2, #0
 8005756:	701a      	strb	r2, [r3, #0]
 8005758:	e7d9      	b.n	800570e <sniprintf+0x16>
 800575a:	bf00      	nop
 800575c:	20000010 	.word	0x20000010

08005760 <__ssputs_r>:
 8005760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005764:	688e      	ldr	r6, [r1, #8]
 8005766:	429e      	cmp	r6, r3
 8005768:	4682      	mov	sl, r0
 800576a:	460c      	mov	r4, r1
 800576c:	4690      	mov	r8, r2
 800576e:	4699      	mov	r9, r3
 8005770:	d837      	bhi.n	80057e2 <__ssputs_r+0x82>
 8005772:	898a      	ldrh	r2, [r1, #12]
 8005774:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005778:	d031      	beq.n	80057de <__ssputs_r+0x7e>
 800577a:	6825      	ldr	r5, [r4, #0]
 800577c:	6909      	ldr	r1, [r1, #16]
 800577e:	1a6f      	subs	r7, r5, r1
 8005780:	6965      	ldr	r5, [r4, #20]
 8005782:	2302      	movs	r3, #2
 8005784:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005788:	fb95 f5f3 	sdiv	r5, r5, r3
 800578c:	f109 0301 	add.w	r3, r9, #1
 8005790:	443b      	add	r3, r7
 8005792:	429d      	cmp	r5, r3
 8005794:	bf38      	it	cc
 8005796:	461d      	movcc	r5, r3
 8005798:	0553      	lsls	r3, r2, #21
 800579a:	d530      	bpl.n	80057fe <__ssputs_r+0x9e>
 800579c:	4629      	mov	r1, r5
 800579e:	f000 fb21 	bl	8005de4 <_malloc_r>
 80057a2:	4606      	mov	r6, r0
 80057a4:	b950      	cbnz	r0, 80057bc <__ssputs_r+0x5c>
 80057a6:	230c      	movs	r3, #12
 80057a8:	f8ca 3000 	str.w	r3, [sl]
 80057ac:	89a3      	ldrh	r3, [r4, #12]
 80057ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057b2:	81a3      	strh	r3, [r4, #12]
 80057b4:	f04f 30ff 	mov.w	r0, #4294967295
 80057b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057bc:	463a      	mov	r2, r7
 80057be:	6921      	ldr	r1, [r4, #16]
 80057c0:	f7ff ff86 	bl	80056d0 <memcpy>
 80057c4:	89a3      	ldrh	r3, [r4, #12]
 80057c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80057ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ce:	81a3      	strh	r3, [r4, #12]
 80057d0:	6126      	str	r6, [r4, #16]
 80057d2:	6165      	str	r5, [r4, #20]
 80057d4:	443e      	add	r6, r7
 80057d6:	1bed      	subs	r5, r5, r7
 80057d8:	6026      	str	r6, [r4, #0]
 80057da:	60a5      	str	r5, [r4, #8]
 80057dc:	464e      	mov	r6, r9
 80057de:	454e      	cmp	r6, r9
 80057e0:	d900      	bls.n	80057e4 <__ssputs_r+0x84>
 80057e2:	464e      	mov	r6, r9
 80057e4:	4632      	mov	r2, r6
 80057e6:	4641      	mov	r1, r8
 80057e8:	6820      	ldr	r0, [r4, #0]
 80057ea:	f000 fa93 	bl	8005d14 <memmove>
 80057ee:	68a3      	ldr	r3, [r4, #8]
 80057f0:	1b9b      	subs	r3, r3, r6
 80057f2:	60a3      	str	r3, [r4, #8]
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	441e      	add	r6, r3
 80057f8:	6026      	str	r6, [r4, #0]
 80057fa:	2000      	movs	r0, #0
 80057fc:	e7dc      	b.n	80057b8 <__ssputs_r+0x58>
 80057fe:	462a      	mov	r2, r5
 8005800:	f000 fb4a 	bl	8005e98 <_realloc_r>
 8005804:	4606      	mov	r6, r0
 8005806:	2800      	cmp	r0, #0
 8005808:	d1e2      	bne.n	80057d0 <__ssputs_r+0x70>
 800580a:	6921      	ldr	r1, [r4, #16]
 800580c:	4650      	mov	r0, sl
 800580e:	f000 fa9b 	bl	8005d48 <_free_r>
 8005812:	e7c8      	b.n	80057a6 <__ssputs_r+0x46>

08005814 <_svfiprintf_r>:
 8005814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005818:	461d      	mov	r5, r3
 800581a:	898b      	ldrh	r3, [r1, #12]
 800581c:	061f      	lsls	r7, r3, #24
 800581e:	b09d      	sub	sp, #116	; 0x74
 8005820:	4680      	mov	r8, r0
 8005822:	460c      	mov	r4, r1
 8005824:	4616      	mov	r6, r2
 8005826:	d50f      	bpl.n	8005848 <_svfiprintf_r+0x34>
 8005828:	690b      	ldr	r3, [r1, #16]
 800582a:	b96b      	cbnz	r3, 8005848 <_svfiprintf_r+0x34>
 800582c:	2140      	movs	r1, #64	; 0x40
 800582e:	f000 fad9 	bl	8005de4 <_malloc_r>
 8005832:	6020      	str	r0, [r4, #0]
 8005834:	6120      	str	r0, [r4, #16]
 8005836:	b928      	cbnz	r0, 8005844 <_svfiprintf_r+0x30>
 8005838:	230c      	movs	r3, #12
 800583a:	f8c8 3000 	str.w	r3, [r8]
 800583e:	f04f 30ff 	mov.w	r0, #4294967295
 8005842:	e0c8      	b.n	80059d6 <_svfiprintf_r+0x1c2>
 8005844:	2340      	movs	r3, #64	; 0x40
 8005846:	6163      	str	r3, [r4, #20]
 8005848:	2300      	movs	r3, #0
 800584a:	9309      	str	r3, [sp, #36]	; 0x24
 800584c:	2320      	movs	r3, #32
 800584e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005852:	2330      	movs	r3, #48	; 0x30
 8005854:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005858:	9503      	str	r5, [sp, #12]
 800585a:	f04f 0b01 	mov.w	fp, #1
 800585e:	4637      	mov	r7, r6
 8005860:	463d      	mov	r5, r7
 8005862:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005866:	b10b      	cbz	r3, 800586c <_svfiprintf_r+0x58>
 8005868:	2b25      	cmp	r3, #37	; 0x25
 800586a:	d13e      	bne.n	80058ea <_svfiprintf_r+0xd6>
 800586c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005870:	d00b      	beq.n	800588a <_svfiprintf_r+0x76>
 8005872:	4653      	mov	r3, sl
 8005874:	4632      	mov	r2, r6
 8005876:	4621      	mov	r1, r4
 8005878:	4640      	mov	r0, r8
 800587a:	f7ff ff71 	bl	8005760 <__ssputs_r>
 800587e:	3001      	adds	r0, #1
 8005880:	f000 80a4 	beq.w	80059cc <_svfiprintf_r+0x1b8>
 8005884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005886:	4453      	add	r3, sl
 8005888:	9309      	str	r3, [sp, #36]	; 0x24
 800588a:	783b      	ldrb	r3, [r7, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 809d 	beq.w	80059cc <_svfiprintf_r+0x1b8>
 8005892:	2300      	movs	r3, #0
 8005894:	f04f 32ff 	mov.w	r2, #4294967295
 8005898:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800589c:	9304      	str	r3, [sp, #16]
 800589e:	9307      	str	r3, [sp, #28]
 80058a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058a4:	931a      	str	r3, [sp, #104]	; 0x68
 80058a6:	462f      	mov	r7, r5
 80058a8:	2205      	movs	r2, #5
 80058aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80058ae:	4850      	ldr	r0, [pc, #320]	; (80059f0 <_svfiprintf_r+0x1dc>)
 80058b0:	f7fa fc96 	bl	80001e0 <memchr>
 80058b4:	9b04      	ldr	r3, [sp, #16]
 80058b6:	b9d0      	cbnz	r0, 80058ee <_svfiprintf_r+0xda>
 80058b8:	06d9      	lsls	r1, r3, #27
 80058ba:	bf44      	itt	mi
 80058bc:	2220      	movmi	r2, #32
 80058be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80058c2:	071a      	lsls	r2, r3, #28
 80058c4:	bf44      	itt	mi
 80058c6:	222b      	movmi	r2, #43	; 0x2b
 80058c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80058cc:	782a      	ldrb	r2, [r5, #0]
 80058ce:	2a2a      	cmp	r2, #42	; 0x2a
 80058d0:	d015      	beq.n	80058fe <_svfiprintf_r+0xea>
 80058d2:	9a07      	ldr	r2, [sp, #28]
 80058d4:	462f      	mov	r7, r5
 80058d6:	2000      	movs	r0, #0
 80058d8:	250a      	movs	r5, #10
 80058da:	4639      	mov	r1, r7
 80058dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058e0:	3b30      	subs	r3, #48	; 0x30
 80058e2:	2b09      	cmp	r3, #9
 80058e4:	d94d      	bls.n	8005982 <_svfiprintf_r+0x16e>
 80058e6:	b1b8      	cbz	r0, 8005918 <_svfiprintf_r+0x104>
 80058e8:	e00f      	b.n	800590a <_svfiprintf_r+0xf6>
 80058ea:	462f      	mov	r7, r5
 80058ec:	e7b8      	b.n	8005860 <_svfiprintf_r+0x4c>
 80058ee:	4a40      	ldr	r2, [pc, #256]	; (80059f0 <_svfiprintf_r+0x1dc>)
 80058f0:	1a80      	subs	r0, r0, r2
 80058f2:	fa0b f000 	lsl.w	r0, fp, r0
 80058f6:	4318      	orrs	r0, r3
 80058f8:	9004      	str	r0, [sp, #16]
 80058fa:	463d      	mov	r5, r7
 80058fc:	e7d3      	b.n	80058a6 <_svfiprintf_r+0x92>
 80058fe:	9a03      	ldr	r2, [sp, #12]
 8005900:	1d11      	adds	r1, r2, #4
 8005902:	6812      	ldr	r2, [r2, #0]
 8005904:	9103      	str	r1, [sp, #12]
 8005906:	2a00      	cmp	r2, #0
 8005908:	db01      	blt.n	800590e <_svfiprintf_r+0xfa>
 800590a:	9207      	str	r2, [sp, #28]
 800590c:	e004      	b.n	8005918 <_svfiprintf_r+0x104>
 800590e:	4252      	negs	r2, r2
 8005910:	f043 0302 	orr.w	r3, r3, #2
 8005914:	9207      	str	r2, [sp, #28]
 8005916:	9304      	str	r3, [sp, #16]
 8005918:	783b      	ldrb	r3, [r7, #0]
 800591a:	2b2e      	cmp	r3, #46	; 0x2e
 800591c:	d10c      	bne.n	8005938 <_svfiprintf_r+0x124>
 800591e:	787b      	ldrb	r3, [r7, #1]
 8005920:	2b2a      	cmp	r3, #42	; 0x2a
 8005922:	d133      	bne.n	800598c <_svfiprintf_r+0x178>
 8005924:	9b03      	ldr	r3, [sp, #12]
 8005926:	1d1a      	adds	r2, r3, #4
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	9203      	str	r2, [sp, #12]
 800592c:	2b00      	cmp	r3, #0
 800592e:	bfb8      	it	lt
 8005930:	f04f 33ff 	movlt.w	r3, #4294967295
 8005934:	3702      	adds	r7, #2
 8005936:	9305      	str	r3, [sp, #20]
 8005938:	4d2e      	ldr	r5, [pc, #184]	; (80059f4 <_svfiprintf_r+0x1e0>)
 800593a:	7839      	ldrb	r1, [r7, #0]
 800593c:	2203      	movs	r2, #3
 800593e:	4628      	mov	r0, r5
 8005940:	f7fa fc4e 	bl	80001e0 <memchr>
 8005944:	b138      	cbz	r0, 8005956 <_svfiprintf_r+0x142>
 8005946:	2340      	movs	r3, #64	; 0x40
 8005948:	1b40      	subs	r0, r0, r5
 800594a:	fa03 f000 	lsl.w	r0, r3, r0
 800594e:	9b04      	ldr	r3, [sp, #16]
 8005950:	4303      	orrs	r3, r0
 8005952:	3701      	adds	r7, #1
 8005954:	9304      	str	r3, [sp, #16]
 8005956:	7839      	ldrb	r1, [r7, #0]
 8005958:	4827      	ldr	r0, [pc, #156]	; (80059f8 <_svfiprintf_r+0x1e4>)
 800595a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800595e:	2206      	movs	r2, #6
 8005960:	1c7e      	adds	r6, r7, #1
 8005962:	f7fa fc3d 	bl	80001e0 <memchr>
 8005966:	2800      	cmp	r0, #0
 8005968:	d038      	beq.n	80059dc <_svfiprintf_r+0x1c8>
 800596a:	4b24      	ldr	r3, [pc, #144]	; (80059fc <_svfiprintf_r+0x1e8>)
 800596c:	bb13      	cbnz	r3, 80059b4 <_svfiprintf_r+0x1a0>
 800596e:	9b03      	ldr	r3, [sp, #12]
 8005970:	3307      	adds	r3, #7
 8005972:	f023 0307 	bic.w	r3, r3, #7
 8005976:	3308      	adds	r3, #8
 8005978:	9303      	str	r3, [sp, #12]
 800597a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800597c:	444b      	add	r3, r9
 800597e:	9309      	str	r3, [sp, #36]	; 0x24
 8005980:	e76d      	b.n	800585e <_svfiprintf_r+0x4a>
 8005982:	fb05 3202 	mla	r2, r5, r2, r3
 8005986:	2001      	movs	r0, #1
 8005988:	460f      	mov	r7, r1
 800598a:	e7a6      	b.n	80058da <_svfiprintf_r+0xc6>
 800598c:	2300      	movs	r3, #0
 800598e:	3701      	adds	r7, #1
 8005990:	9305      	str	r3, [sp, #20]
 8005992:	4619      	mov	r1, r3
 8005994:	250a      	movs	r5, #10
 8005996:	4638      	mov	r0, r7
 8005998:	f810 2b01 	ldrb.w	r2, [r0], #1
 800599c:	3a30      	subs	r2, #48	; 0x30
 800599e:	2a09      	cmp	r2, #9
 80059a0:	d903      	bls.n	80059aa <_svfiprintf_r+0x196>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0c8      	beq.n	8005938 <_svfiprintf_r+0x124>
 80059a6:	9105      	str	r1, [sp, #20]
 80059a8:	e7c6      	b.n	8005938 <_svfiprintf_r+0x124>
 80059aa:	fb05 2101 	mla	r1, r5, r1, r2
 80059ae:	2301      	movs	r3, #1
 80059b0:	4607      	mov	r7, r0
 80059b2:	e7f0      	b.n	8005996 <_svfiprintf_r+0x182>
 80059b4:	ab03      	add	r3, sp, #12
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	4622      	mov	r2, r4
 80059ba:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <_svfiprintf_r+0x1ec>)
 80059bc:	a904      	add	r1, sp, #16
 80059be:	4640      	mov	r0, r8
 80059c0:	f3af 8000 	nop.w
 80059c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80059c8:	4681      	mov	r9, r0
 80059ca:	d1d6      	bne.n	800597a <_svfiprintf_r+0x166>
 80059cc:	89a3      	ldrh	r3, [r4, #12]
 80059ce:	065b      	lsls	r3, r3, #25
 80059d0:	f53f af35 	bmi.w	800583e <_svfiprintf_r+0x2a>
 80059d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059d6:	b01d      	add	sp, #116	; 0x74
 80059d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059dc:	ab03      	add	r3, sp, #12
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	4622      	mov	r2, r4
 80059e2:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <_svfiprintf_r+0x1ec>)
 80059e4:	a904      	add	r1, sp, #16
 80059e6:	4640      	mov	r0, r8
 80059e8:	f000 f882 	bl	8005af0 <_printf_i>
 80059ec:	e7ea      	b.n	80059c4 <_svfiprintf_r+0x1b0>
 80059ee:	bf00      	nop
 80059f0:	08005ff8 	.word	0x08005ff8
 80059f4:	08005ffe 	.word	0x08005ffe
 80059f8:	08006002 	.word	0x08006002
 80059fc:	00000000 	.word	0x00000000
 8005a00:	08005761 	.word	0x08005761

08005a04 <_printf_common>:
 8005a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a08:	4691      	mov	r9, r2
 8005a0a:	461f      	mov	r7, r3
 8005a0c:	688a      	ldr	r2, [r1, #8]
 8005a0e:	690b      	ldr	r3, [r1, #16]
 8005a10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a14:	4293      	cmp	r3, r2
 8005a16:	bfb8      	it	lt
 8005a18:	4613      	movlt	r3, r2
 8005a1a:	f8c9 3000 	str.w	r3, [r9]
 8005a1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a22:	4606      	mov	r6, r0
 8005a24:	460c      	mov	r4, r1
 8005a26:	b112      	cbz	r2, 8005a2e <_printf_common+0x2a>
 8005a28:	3301      	adds	r3, #1
 8005a2a:	f8c9 3000 	str.w	r3, [r9]
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	0699      	lsls	r1, r3, #26
 8005a32:	bf42      	ittt	mi
 8005a34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005a38:	3302      	addmi	r3, #2
 8005a3a:	f8c9 3000 	strmi.w	r3, [r9]
 8005a3e:	6825      	ldr	r5, [r4, #0]
 8005a40:	f015 0506 	ands.w	r5, r5, #6
 8005a44:	d107      	bne.n	8005a56 <_printf_common+0x52>
 8005a46:	f104 0a19 	add.w	sl, r4, #25
 8005a4a:	68e3      	ldr	r3, [r4, #12]
 8005a4c:	f8d9 2000 	ldr.w	r2, [r9]
 8005a50:	1a9b      	subs	r3, r3, r2
 8005a52:	42ab      	cmp	r3, r5
 8005a54:	dc28      	bgt.n	8005aa8 <_printf_common+0xa4>
 8005a56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005a5a:	6822      	ldr	r2, [r4, #0]
 8005a5c:	3300      	adds	r3, #0
 8005a5e:	bf18      	it	ne
 8005a60:	2301      	movne	r3, #1
 8005a62:	0692      	lsls	r2, r2, #26
 8005a64:	d42d      	bmi.n	8005ac2 <_printf_common+0xbe>
 8005a66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a6a:	4639      	mov	r1, r7
 8005a6c:	4630      	mov	r0, r6
 8005a6e:	47c0      	blx	r8
 8005a70:	3001      	adds	r0, #1
 8005a72:	d020      	beq.n	8005ab6 <_printf_common+0xb2>
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	68e5      	ldr	r5, [r4, #12]
 8005a78:	f8d9 2000 	ldr.w	r2, [r9]
 8005a7c:	f003 0306 	and.w	r3, r3, #6
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	bf08      	it	eq
 8005a84:	1aad      	subeq	r5, r5, r2
 8005a86:	68a3      	ldr	r3, [r4, #8]
 8005a88:	6922      	ldr	r2, [r4, #16]
 8005a8a:	bf0c      	ite	eq
 8005a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a90:	2500      	movne	r5, #0
 8005a92:	4293      	cmp	r3, r2
 8005a94:	bfc4      	itt	gt
 8005a96:	1a9b      	subgt	r3, r3, r2
 8005a98:	18ed      	addgt	r5, r5, r3
 8005a9a:	f04f 0900 	mov.w	r9, #0
 8005a9e:	341a      	adds	r4, #26
 8005aa0:	454d      	cmp	r5, r9
 8005aa2:	d11a      	bne.n	8005ada <_printf_common+0xd6>
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	e008      	b.n	8005aba <_printf_common+0xb6>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	4652      	mov	r2, sl
 8005aac:	4639      	mov	r1, r7
 8005aae:	4630      	mov	r0, r6
 8005ab0:	47c0      	blx	r8
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	d103      	bne.n	8005abe <_printf_common+0xba>
 8005ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8005aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005abe:	3501      	adds	r5, #1
 8005ac0:	e7c3      	b.n	8005a4a <_printf_common+0x46>
 8005ac2:	18e1      	adds	r1, r4, r3
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	2030      	movs	r0, #48	; 0x30
 8005ac8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005acc:	4422      	add	r2, r4
 8005ace:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ad2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ad6:	3302      	adds	r3, #2
 8005ad8:	e7c5      	b.n	8005a66 <_printf_common+0x62>
 8005ada:	2301      	movs	r3, #1
 8005adc:	4622      	mov	r2, r4
 8005ade:	4639      	mov	r1, r7
 8005ae0:	4630      	mov	r0, r6
 8005ae2:	47c0      	blx	r8
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d0e6      	beq.n	8005ab6 <_printf_common+0xb2>
 8005ae8:	f109 0901 	add.w	r9, r9, #1
 8005aec:	e7d8      	b.n	8005aa0 <_printf_common+0x9c>
	...

08005af0 <_printf_i>:
 8005af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005af4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005af8:	460c      	mov	r4, r1
 8005afa:	7e09      	ldrb	r1, [r1, #24]
 8005afc:	b085      	sub	sp, #20
 8005afe:	296e      	cmp	r1, #110	; 0x6e
 8005b00:	4617      	mov	r7, r2
 8005b02:	4606      	mov	r6, r0
 8005b04:	4698      	mov	r8, r3
 8005b06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b08:	f000 80b3 	beq.w	8005c72 <_printf_i+0x182>
 8005b0c:	d822      	bhi.n	8005b54 <_printf_i+0x64>
 8005b0e:	2963      	cmp	r1, #99	; 0x63
 8005b10:	d036      	beq.n	8005b80 <_printf_i+0x90>
 8005b12:	d80a      	bhi.n	8005b2a <_printf_i+0x3a>
 8005b14:	2900      	cmp	r1, #0
 8005b16:	f000 80b9 	beq.w	8005c8c <_printf_i+0x19c>
 8005b1a:	2958      	cmp	r1, #88	; 0x58
 8005b1c:	f000 8083 	beq.w	8005c26 <_printf_i+0x136>
 8005b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005b28:	e032      	b.n	8005b90 <_printf_i+0xa0>
 8005b2a:	2964      	cmp	r1, #100	; 0x64
 8005b2c:	d001      	beq.n	8005b32 <_printf_i+0x42>
 8005b2e:	2969      	cmp	r1, #105	; 0x69
 8005b30:	d1f6      	bne.n	8005b20 <_printf_i+0x30>
 8005b32:	6820      	ldr	r0, [r4, #0]
 8005b34:	6813      	ldr	r3, [r2, #0]
 8005b36:	0605      	lsls	r5, r0, #24
 8005b38:	f103 0104 	add.w	r1, r3, #4
 8005b3c:	d52a      	bpl.n	8005b94 <_printf_i+0xa4>
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6011      	str	r1, [r2, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	da03      	bge.n	8005b4e <_printf_i+0x5e>
 8005b46:	222d      	movs	r2, #45	; 0x2d
 8005b48:	425b      	negs	r3, r3
 8005b4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005b4e:	486f      	ldr	r0, [pc, #444]	; (8005d0c <_printf_i+0x21c>)
 8005b50:	220a      	movs	r2, #10
 8005b52:	e039      	b.n	8005bc8 <_printf_i+0xd8>
 8005b54:	2973      	cmp	r1, #115	; 0x73
 8005b56:	f000 809d 	beq.w	8005c94 <_printf_i+0x1a4>
 8005b5a:	d808      	bhi.n	8005b6e <_printf_i+0x7e>
 8005b5c:	296f      	cmp	r1, #111	; 0x6f
 8005b5e:	d020      	beq.n	8005ba2 <_printf_i+0xb2>
 8005b60:	2970      	cmp	r1, #112	; 0x70
 8005b62:	d1dd      	bne.n	8005b20 <_printf_i+0x30>
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	f043 0320 	orr.w	r3, r3, #32
 8005b6a:	6023      	str	r3, [r4, #0]
 8005b6c:	e003      	b.n	8005b76 <_printf_i+0x86>
 8005b6e:	2975      	cmp	r1, #117	; 0x75
 8005b70:	d017      	beq.n	8005ba2 <_printf_i+0xb2>
 8005b72:	2978      	cmp	r1, #120	; 0x78
 8005b74:	d1d4      	bne.n	8005b20 <_printf_i+0x30>
 8005b76:	2378      	movs	r3, #120	; 0x78
 8005b78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b7c:	4864      	ldr	r0, [pc, #400]	; (8005d10 <_printf_i+0x220>)
 8005b7e:	e055      	b.n	8005c2c <_printf_i+0x13c>
 8005b80:	6813      	ldr	r3, [r2, #0]
 8005b82:	1d19      	adds	r1, r3, #4
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6011      	str	r1, [r2, #0]
 8005b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b90:	2301      	movs	r3, #1
 8005b92:	e08c      	b.n	8005cae <_printf_i+0x1be>
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6011      	str	r1, [r2, #0]
 8005b98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b9c:	bf18      	it	ne
 8005b9e:	b21b      	sxthne	r3, r3
 8005ba0:	e7cf      	b.n	8005b42 <_printf_i+0x52>
 8005ba2:	6813      	ldr	r3, [r2, #0]
 8005ba4:	6825      	ldr	r5, [r4, #0]
 8005ba6:	1d18      	adds	r0, r3, #4
 8005ba8:	6010      	str	r0, [r2, #0]
 8005baa:	0628      	lsls	r0, r5, #24
 8005bac:	d501      	bpl.n	8005bb2 <_printf_i+0xc2>
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	e002      	b.n	8005bb8 <_printf_i+0xc8>
 8005bb2:	0668      	lsls	r0, r5, #25
 8005bb4:	d5fb      	bpl.n	8005bae <_printf_i+0xbe>
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	4854      	ldr	r0, [pc, #336]	; (8005d0c <_printf_i+0x21c>)
 8005bba:	296f      	cmp	r1, #111	; 0x6f
 8005bbc:	bf14      	ite	ne
 8005bbe:	220a      	movne	r2, #10
 8005bc0:	2208      	moveq	r2, #8
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bc8:	6865      	ldr	r5, [r4, #4]
 8005bca:	60a5      	str	r5, [r4, #8]
 8005bcc:	2d00      	cmp	r5, #0
 8005bce:	f2c0 8095 	blt.w	8005cfc <_printf_i+0x20c>
 8005bd2:	6821      	ldr	r1, [r4, #0]
 8005bd4:	f021 0104 	bic.w	r1, r1, #4
 8005bd8:	6021      	str	r1, [r4, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d13d      	bne.n	8005c5a <_printf_i+0x16a>
 8005bde:	2d00      	cmp	r5, #0
 8005be0:	f040 808e 	bne.w	8005d00 <_printf_i+0x210>
 8005be4:	4665      	mov	r5, ip
 8005be6:	2a08      	cmp	r2, #8
 8005be8:	d10b      	bne.n	8005c02 <_printf_i+0x112>
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	07db      	lsls	r3, r3, #31
 8005bee:	d508      	bpl.n	8005c02 <_printf_i+0x112>
 8005bf0:	6923      	ldr	r3, [r4, #16]
 8005bf2:	6862      	ldr	r2, [r4, #4]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	bfde      	ittt	le
 8005bf8:	2330      	movle	r3, #48	; 0x30
 8005bfa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bfe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c02:	ebac 0305 	sub.w	r3, ip, r5
 8005c06:	6123      	str	r3, [r4, #16]
 8005c08:	f8cd 8000 	str.w	r8, [sp]
 8005c0c:	463b      	mov	r3, r7
 8005c0e:	aa03      	add	r2, sp, #12
 8005c10:	4621      	mov	r1, r4
 8005c12:	4630      	mov	r0, r6
 8005c14:	f7ff fef6 	bl	8005a04 <_printf_common>
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d14d      	bne.n	8005cb8 <_printf_i+0x1c8>
 8005c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c20:	b005      	add	sp, #20
 8005c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c26:	4839      	ldr	r0, [pc, #228]	; (8005d0c <_printf_i+0x21c>)
 8005c28:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005c2c:	6813      	ldr	r3, [r2, #0]
 8005c2e:	6821      	ldr	r1, [r4, #0]
 8005c30:	1d1d      	adds	r5, r3, #4
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6015      	str	r5, [r2, #0]
 8005c36:	060a      	lsls	r2, r1, #24
 8005c38:	d50b      	bpl.n	8005c52 <_printf_i+0x162>
 8005c3a:	07ca      	lsls	r2, r1, #31
 8005c3c:	bf44      	itt	mi
 8005c3e:	f041 0120 	orrmi.w	r1, r1, #32
 8005c42:	6021      	strmi	r1, [r4, #0]
 8005c44:	b91b      	cbnz	r3, 8005c4e <_printf_i+0x15e>
 8005c46:	6822      	ldr	r2, [r4, #0]
 8005c48:	f022 0220 	bic.w	r2, r2, #32
 8005c4c:	6022      	str	r2, [r4, #0]
 8005c4e:	2210      	movs	r2, #16
 8005c50:	e7b7      	b.n	8005bc2 <_printf_i+0xd2>
 8005c52:	064d      	lsls	r5, r1, #25
 8005c54:	bf48      	it	mi
 8005c56:	b29b      	uxthmi	r3, r3
 8005c58:	e7ef      	b.n	8005c3a <_printf_i+0x14a>
 8005c5a:	4665      	mov	r5, ip
 8005c5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c60:	fb02 3311 	mls	r3, r2, r1, r3
 8005c64:	5cc3      	ldrb	r3, [r0, r3]
 8005c66:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	2900      	cmp	r1, #0
 8005c6e:	d1f5      	bne.n	8005c5c <_printf_i+0x16c>
 8005c70:	e7b9      	b.n	8005be6 <_printf_i+0xf6>
 8005c72:	6813      	ldr	r3, [r2, #0]
 8005c74:	6825      	ldr	r5, [r4, #0]
 8005c76:	6961      	ldr	r1, [r4, #20]
 8005c78:	1d18      	adds	r0, r3, #4
 8005c7a:	6010      	str	r0, [r2, #0]
 8005c7c:	0628      	lsls	r0, r5, #24
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	d501      	bpl.n	8005c86 <_printf_i+0x196>
 8005c82:	6019      	str	r1, [r3, #0]
 8005c84:	e002      	b.n	8005c8c <_printf_i+0x19c>
 8005c86:	066a      	lsls	r2, r5, #25
 8005c88:	d5fb      	bpl.n	8005c82 <_printf_i+0x192>
 8005c8a:	8019      	strh	r1, [r3, #0]
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	6123      	str	r3, [r4, #16]
 8005c90:	4665      	mov	r5, ip
 8005c92:	e7b9      	b.n	8005c08 <_printf_i+0x118>
 8005c94:	6813      	ldr	r3, [r2, #0]
 8005c96:	1d19      	adds	r1, r3, #4
 8005c98:	6011      	str	r1, [r2, #0]
 8005c9a:	681d      	ldr	r5, [r3, #0]
 8005c9c:	6862      	ldr	r2, [r4, #4]
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	f7fa fa9d 	bl	80001e0 <memchr>
 8005ca6:	b108      	cbz	r0, 8005cac <_printf_i+0x1bc>
 8005ca8:	1b40      	subs	r0, r0, r5
 8005caa:	6060      	str	r0, [r4, #4]
 8005cac:	6863      	ldr	r3, [r4, #4]
 8005cae:	6123      	str	r3, [r4, #16]
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cb6:	e7a7      	b.n	8005c08 <_printf_i+0x118>
 8005cb8:	6923      	ldr	r3, [r4, #16]
 8005cba:	462a      	mov	r2, r5
 8005cbc:	4639      	mov	r1, r7
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	47c0      	blx	r8
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	d0aa      	beq.n	8005c1c <_printf_i+0x12c>
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	079b      	lsls	r3, r3, #30
 8005cca:	d413      	bmi.n	8005cf4 <_printf_i+0x204>
 8005ccc:	68e0      	ldr	r0, [r4, #12]
 8005cce:	9b03      	ldr	r3, [sp, #12]
 8005cd0:	4298      	cmp	r0, r3
 8005cd2:	bfb8      	it	lt
 8005cd4:	4618      	movlt	r0, r3
 8005cd6:	e7a3      	b.n	8005c20 <_printf_i+0x130>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	464a      	mov	r2, r9
 8005cdc:	4639      	mov	r1, r7
 8005cde:	4630      	mov	r0, r6
 8005ce0:	47c0      	blx	r8
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	d09a      	beq.n	8005c1c <_printf_i+0x12c>
 8005ce6:	3501      	adds	r5, #1
 8005ce8:	68e3      	ldr	r3, [r4, #12]
 8005cea:	9a03      	ldr	r2, [sp, #12]
 8005cec:	1a9b      	subs	r3, r3, r2
 8005cee:	42ab      	cmp	r3, r5
 8005cf0:	dcf2      	bgt.n	8005cd8 <_printf_i+0x1e8>
 8005cf2:	e7eb      	b.n	8005ccc <_printf_i+0x1dc>
 8005cf4:	2500      	movs	r5, #0
 8005cf6:	f104 0919 	add.w	r9, r4, #25
 8005cfa:	e7f5      	b.n	8005ce8 <_printf_i+0x1f8>
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1ac      	bne.n	8005c5a <_printf_i+0x16a>
 8005d00:	7803      	ldrb	r3, [r0, #0]
 8005d02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d0a:	e76c      	b.n	8005be6 <_printf_i+0xf6>
 8005d0c:	08006009 	.word	0x08006009
 8005d10:	0800601a 	.word	0x0800601a

08005d14 <memmove>:
 8005d14:	4288      	cmp	r0, r1
 8005d16:	b510      	push	{r4, lr}
 8005d18:	eb01 0302 	add.w	r3, r1, r2
 8005d1c:	d807      	bhi.n	8005d2e <memmove+0x1a>
 8005d1e:	1e42      	subs	r2, r0, #1
 8005d20:	4299      	cmp	r1, r3
 8005d22:	d00a      	beq.n	8005d3a <memmove+0x26>
 8005d24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d28:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005d2c:	e7f8      	b.n	8005d20 <memmove+0xc>
 8005d2e:	4283      	cmp	r3, r0
 8005d30:	d9f5      	bls.n	8005d1e <memmove+0xa>
 8005d32:	1881      	adds	r1, r0, r2
 8005d34:	1ad2      	subs	r2, r2, r3
 8005d36:	42d3      	cmn	r3, r2
 8005d38:	d100      	bne.n	8005d3c <memmove+0x28>
 8005d3a:	bd10      	pop	{r4, pc}
 8005d3c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d40:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005d44:	e7f7      	b.n	8005d36 <memmove+0x22>
	...

08005d48 <_free_r>:
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	4605      	mov	r5, r0
 8005d4c:	2900      	cmp	r1, #0
 8005d4e:	d045      	beq.n	8005ddc <_free_r+0x94>
 8005d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d54:	1f0c      	subs	r4, r1, #4
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	bfb8      	it	lt
 8005d5a:	18e4      	addlt	r4, r4, r3
 8005d5c:	f000 f8d2 	bl	8005f04 <__malloc_lock>
 8005d60:	4a1f      	ldr	r2, [pc, #124]	; (8005de0 <_free_r+0x98>)
 8005d62:	6813      	ldr	r3, [r2, #0]
 8005d64:	4610      	mov	r0, r2
 8005d66:	b933      	cbnz	r3, 8005d76 <_free_r+0x2e>
 8005d68:	6063      	str	r3, [r4, #4]
 8005d6a:	6014      	str	r4, [r2, #0]
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d72:	f000 b8c8 	b.w	8005f06 <__malloc_unlock>
 8005d76:	42a3      	cmp	r3, r4
 8005d78:	d90c      	bls.n	8005d94 <_free_r+0x4c>
 8005d7a:	6821      	ldr	r1, [r4, #0]
 8005d7c:	1862      	adds	r2, r4, r1
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	bf04      	itt	eq
 8005d82:	681a      	ldreq	r2, [r3, #0]
 8005d84:	685b      	ldreq	r3, [r3, #4]
 8005d86:	6063      	str	r3, [r4, #4]
 8005d88:	bf04      	itt	eq
 8005d8a:	1852      	addeq	r2, r2, r1
 8005d8c:	6022      	streq	r2, [r4, #0]
 8005d8e:	6004      	str	r4, [r0, #0]
 8005d90:	e7ec      	b.n	8005d6c <_free_r+0x24>
 8005d92:	4613      	mov	r3, r2
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	b10a      	cbz	r2, 8005d9c <_free_r+0x54>
 8005d98:	42a2      	cmp	r2, r4
 8005d9a:	d9fa      	bls.n	8005d92 <_free_r+0x4a>
 8005d9c:	6819      	ldr	r1, [r3, #0]
 8005d9e:	1858      	adds	r0, r3, r1
 8005da0:	42a0      	cmp	r0, r4
 8005da2:	d10b      	bne.n	8005dbc <_free_r+0x74>
 8005da4:	6820      	ldr	r0, [r4, #0]
 8005da6:	4401      	add	r1, r0
 8005da8:	1858      	adds	r0, r3, r1
 8005daa:	4282      	cmp	r2, r0
 8005dac:	6019      	str	r1, [r3, #0]
 8005dae:	d1dd      	bne.n	8005d6c <_free_r+0x24>
 8005db0:	6810      	ldr	r0, [r2, #0]
 8005db2:	6852      	ldr	r2, [r2, #4]
 8005db4:	605a      	str	r2, [r3, #4]
 8005db6:	4401      	add	r1, r0
 8005db8:	6019      	str	r1, [r3, #0]
 8005dba:	e7d7      	b.n	8005d6c <_free_r+0x24>
 8005dbc:	d902      	bls.n	8005dc4 <_free_r+0x7c>
 8005dbe:	230c      	movs	r3, #12
 8005dc0:	602b      	str	r3, [r5, #0]
 8005dc2:	e7d3      	b.n	8005d6c <_free_r+0x24>
 8005dc4:	6820      	ldr	r0, [r4, #0]
 8005dc6:	1821      	adds	r1, r4, r0
 8005dc8:	428a      	cmp	r2, r1
 8005dca:	bf04      	itt	eq
 8005dcc:	6811      	ldreq	r1, [r2, #0]
 8005dce:	6852      	ldreq	r2, [r2, #4]
 8005dd0:	6062      	str	r2, [r4, #4]
 8005dd2:	bf04      	itt	eq
 8005dd4:	1809      	addeq	r1, r1, r0
 8005dd6:	6021      	streq	r1, [r4, #0]
 8005dd8:	605c      	str	r4, [r3, #4]
 8005dda:	e7c7      	b.n	8005d6c <_free_r+0x24>
 8005ddc:	bd38      	pop	{r3, r4, r5, pc}
 8005dde:	bf00      	nop
 8005de0:	20004548 	.word	0x20004548

08005de4 <_malloc_r>:
 8005de4:	b570      	push	{r4, r5, r6, lr}
 8005de6:	1ccd      	adds	r5, r1, #3
 8005de8:	f025 0503 	bic.w	r5, r5, #3
 8005dec:	3508      	adds	r5, #8
 8005dee:	2d0c      	cmp	r5, #12
 8005df0:	bf38      	it	cc
 8005df2:	250c      	movcc	r5, #12
 8005df4:	2d00      	cmp	r5, #0
 8005df6:	4606      	mov	r6, r0
 8005df8:	db01      	blt.n	8005dfe <_malloc_r+0x1a>
 8005dfa:	42a9      	cmp	r1, r5
 8005dfc:	d903      	bls.n	8005e06 <_malloc_r+0x22>
 8005dfe:	230c      	movs	r3, #12
 8005e00:	6033      	str	r3, [r6, #0]
 8005e02:	2000      	movs	r0, #0
 8005e04:	bd70      	pop	{r4, r5, r6, pc}
 8005e06:	f000 f87d 	bl	8005f04 <__malloc_lock>
 8005e0a:	4a21      	ldr	r2, [pc, #132]	; (8005e90 <_malloc_r+0xac>)
 8005e0c:	6814      	ldr	r4, [r2, #0]
 8005e0e:	4621      	mov	r1, r4
 8005e10:	b991      	cbnz	r1, 8005e38 <_malloc_r+0x54>
 8005e12:	4c20      	ldr	r4, [pc, #128]	; (8005e94 <_malloc_r+0xb0>)
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	b91b      	cbnz	r3, 8005e20 <_malloc_r+0x3c>
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f000 f863 	bl	8005ee4 <_sbrk_r>
 8005e1e:	6020      	str	r0, [r4, #0]
 8005e20:	4629      	mov	r1, r5
 8005e22:	4630      	mov	r0, r6
 8005e24:	f000 f85e 	bl	8005ee4 <_sbrk_r>
 8005e28:	1c43      	adds	r3, r0, #1
 8005e2a:	d124      	bne.n	8005e76 <_malloc_r+0x92>
 8005e2c:	230c      	movs	r3, #12
 8005e2e:	6033      	str	r3, [r6, #0]
 8005e30:	4630      	mov	r0, r6
 8005e32:	f000 f868 	bl	8005f06 <__malloc_unlock>
 8005e36:	e7e4      	b.n	8005e02 <_malloc_r+0x1e>
 8005e38:	680b      	ldr	r3, [r1, #0]
 8005e3a:	1b5b      	subs	r3, r3, r5
 8005e3c:	d418      	bmi.n	8005e70 <_malloc_r+0x8c>
 8005e3e:	2b0b      	cmp	r3, #11
 8005e40:	d90f      	bls.n	8005e62 <_malloc_r+0x7e>
 8005e42:	600b      	str	r3, [r1, #0]
 8005e44:	50cd      	str	r5, [r1, r3]
 8005e46:	18cc      	adds	r4, r1, r3
 8005e48:	4630      	mov	r0, r6
 8005e4a:	f000 f85c 	bl	8005f06 <__malloc_unlock>
 8005e4e:	f104 000b 	add.w	r0, r4, #11
 8005e52:	1d23      	adds	r3, r4, #4
 8005e54:	f020 0007 	bic.w	r0, r0, #7
 8005e58:	1ac3      	subs	r3, r0, r3
 8005e5a:	d0d3      	beq.n	8005e04 <_malloc_r+0x20>
 8005e5c:	425a      	negs	r2, r3
 8005e5e:	50e2      	str	r2, [r4, r3]
 8005e60:	e7d0      	b.n	8005e04 <_malloc_r+0x20>
 8005e62:	428c      	cmp	r4, r1
 8005e64:	684b      	ldr	r3, [r1, #4]
 8005e66:	bf16      	itet	ne
 8005e68:	6063      	strne	r3, [r4, #4]
 8005e6a:	6013      	streq	r3, [r2, #0]
 8005e6c:	460c      	movne	r4, r1
 8005e6e:	e7eb      	b.n	8005e48 <_malloc_r+0x64>
 8005e70:	460c      	mov	r4, r1
 8005e72:	6849      	ldr	r1, [r1, #4]
 8005e74:	e7cc      	b.n	8005e10 <_malloc_r+0x2c>
 8005e76:	1cc4      	adds	r4, r0, #3
 8005e78:	f024 0403 	bic.w	r4, r4, #3
 8005e7c:	42a0      	cmp	r0, r4
 8005e7e:	d005      	beq.n	8005e8c <_malloc_r+0xa8>
 8005e80:	1a21      	subs	r1, r4, r0
 8005e82:	4630      	mov	r0, r6
 8005e84:	f000 f82e 	bl	8005ee4 <_sbrk_r>
 8005e88:	3001      	adds	r0, #1
 8005e8a:	d0cf      	beq.n	8005e2c <_malloc_r+0x48>
 8005e8c:	6025      	str	r5, [r4, #0]
 8005e8e:	e7db      	b.n	8005e48 <_malloc_r+0x64>
 8005e90:	20004548 	.word	0x20004548
 8005e94:	2000454c 	.word	0x2000454c

08005e98 <_realloc_r>:
 8005e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9a:	4607      	mov	r7, r0
 8005e9c:	4614      	mov	r4, r2
 8005e9e:	460e      	mov	r6, r1
 8005ea0:	b921      	cbnz	r1, 8005eac <_realloc_r+0x14>
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ea8:	f7ff bf9c 	b.w	8005de4 <_malloc_r>
 8005eac:	b922      	cbnz	r2, 8005eb8 <_realloc_r+0x20>
 8005eae:	f7ff ff4b 	bl	8005d48 <_free_r>
 8005eb2:	4625      	mov	r5, r4
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eb8:	f000 f826 	bl	8005f08 <_malloc_usable_size_r>
 8005ebc:	42a0      	cmp	r0, r4
 8005ebe:	d20f      	bcs.n	8005ee0 <_realloc_r+0x48>
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	4638      	mov	r0, r7
 8005ec4:	f7ff ff8e 	bl	8005de4 <_malloc_r>
 8005ec8:	4605      	mov	r5, r0
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	d0f2      	beq.n	8005eb4 <_realloc_r+0x1c>
 8005ece:	4631      	mov	r1, r6
 8005ed0:	4622      	mov	r2, r4
 8005ed2:	f7ff fbfd 	bl	80056d0 <memcpy>
 8005ed6:	4631      	mov	r1, r6
 8005ed8:	4638      	mov	r0, r7
 8005eda:	f7ff ff35 	bl	8005d48 <_free_r>
 8005ede:	e7e9      	b.n	8005eb4 <_realloc_r+0x1c>
 8005ee0:	4635      	mov	r5, r6
 8005ee2:	e7e7      	b.n	8005eb4 <_realloc_r+0x1c>

08005ee4 <_sbrk_r>:
 8005ee4:	b538      	push	{r3, r4, r5, lr}
 8005ee6:	4c06      	ldr	r4, [pc, #24]	; (8005f00 <_sbrk_r+0x1c>)
 8005ee8:	2300      	movs	r3, #0
 8005eea:	4605      	mov	r5, r0
 8005eec:	4608      	mov	r0, r1
 8005eee:	6023      	str	r3, [r4, #0]
 8005ef0:	f7fa ff0a 	bl	8000d08 <_sbrk>
 8005ef4:	1c43      	adds	r3, r0, #1
 8005ef6:	d102      	bne.n	8005efe <_sbrk_r+0x1a>
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	b103      	cbz	r3, 8005efe <_sbrk_r+0x1a>
 8005efc:	602b      	str	r3, [r5, #0]
 8005efe:	bd38      	pop	{r3, r4, r5, pc}
 8005f00:	20004628 	.word	0x20004628

08005f04 <__malloc_lock>:
 8005f04:	4770      	bx	lr

08005f06 <__malloc_unlock>:
 8005f06:	4770      	bx	lr

08005f08 <_malloc_usable_size_r>:
 8005f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f0c:	1f18      	subs	r0, r3, #4
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	bfbc      	itt	lt
 8005f12:	580b      	ldrlt	r3, [r1, r0]
 8005f14:	18c0      	addlt	r0, r0, r3
 8005f16:	4770      	bx	lr

08005f18 <_init>:
 8005f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1a:	bf00      	nop
 8005f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1e:	bc08      	pop	{r3}
 8005f20:	469e      	mov	lr, r3
 8005f22:	4770      	bx	lr

08005f24 <_fini>:
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	bf00      	nop
 8005f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2a:	bc08      	pop	{r3}
 8005f2c:	469e      	mov	lr, r3
 8005f2e:	4770      	bx	lr
