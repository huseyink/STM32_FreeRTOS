
FreeRTOS_3_SoftwareTimerYonetimi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ae0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08005c70  08005c70  00015c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d84  08005d84  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005d84  08005d84  00015d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d8c  08005d8c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d8c  08005d8c  00015d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d90  08005d90  00015d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045b0  20000074  08005e08  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004624  08005e08  00024624  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001517e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002db4  00000000  00000000  00035222  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011e0  00000000  00000000  00037fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001088  00000000  00000000  000391b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022ec3  00000000  00000000  0003a240  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db6b  00000000  00000000  0005d103  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3135  00000000  00000000  0006ac6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013dda3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d50  00000000  00000000  0013de20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c58 	.word	0x08005c58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005c58 	.word	0x08005c58

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000090 	.word	0x20000090
 80005b0:	200000e4 	.word	0x200000e4

080005b4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetTimerTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005d2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d4:	bf00      	nop
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	200002e4 	.word	0x200002e4
 80005e4:	20000338 	.word	0x20000338

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b092      	sub	sp, #72	; 0x48
 80005ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ee:	f000 fb77 	bl	8000ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f2:	f000 f879 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 f90b 	bl	8000810 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fa:	f000 f8df 	bl	80007bc <MX_USART2_UART_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of OneShot */
  osTimerDef(OneShot, OneShotCallback);
 80005fe:	4b30      	ldr	r3, [pc, #192]	; (80006c0 <main+0xd8>)
 8000600:	62bb      	str	r3, [r7, #40]	; 0x28
 8000602:	2300      	movs	r3, #0
 8000604:	62fb      	str	r3, [r7, #44]	; 0x2c
  OneShotHandle = osTimerCreate(osTimer(OneShot), osTimerOnce, NULL);
 8000606:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f002 fa42 	bl	8002a98 <osTimerCreate>
 8000614:	4602      	mov	r2, r0
 8000616:	4b2b      	ldr	r3, [pc, #172]	; (80006c4 <main+0xdc>)
 8000618:	601a      	str	r2, [r3, #0]

  /* definition and creation of AutoReload */
  osTimerDef(AutoReload, AutoReloadCallback);
 800061a:	4b2b      	ldr	r3, [pc, #172]	; (80006c8 <main+0xe0>)
 800061c:	623b      	str	r3, [r7, #32]
 800061e:	2300      	movs	r3, #0
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  AutoReloadHandle = osTimerCreate(osTimer(AutoReload), osTimerPeriodic, NULL);
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2200      	movs	r2, #0
 8000628:	2101      	movs	r1, #1
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fa34 	bl	8002a98 <osTimerCreate>
 8000630:	4602      	mov	r2, r0
 8000632:	4b26      	ldr	r3, [pc, #152]	; (80006cc <main+0xe4>)
 8000634:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task1 */
  osThreadDef(Task1, Task1Function, osPriorityNormal, 0, 128);
 8000636:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <main+0xe8>)
 8000638:	1d3c      	adds	r4, r7, #4
 800063a:	461d      	mov	r5, r3
 800063c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000640:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000644:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f002 f9d6 	bl	80029fe <osThreadCreate>
 8000652:	4602      	mov	r2, r0
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <main+0xec>)
 8000656:	601a      	str	r2, [r3, #0]
	TimerHandle_t xAutoReloadTimer, xOneShotTimer;
	BaseType_t xTimer1Started, xTimer2Started;


	/* Create the one shot timer, storing the handle to the created timer in xOneShotTimer. */
	xOneShotTimer = xTimerCreate(
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <main+0xf0>)
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	2300      	movs	r3, #0
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000664:	481d      	ldr	r0, [pc, #116]	; (80006dc <main+0xf4>)
 8000666:	f003 ff17 	bl	8004498 <xTimerCreate>
 800066a:	63f8      	str	r0, [r7, #60]	; 0x3c
					pdFALSE, /* Setting uxAutoRealod to pdFALSE creates a one-shot software timer. */
					0,/* This example does not use the timer id. */
					prvOneShotTimerCallback ); /* The callback function to be used by the software timer being created. */

	/* Create the auto-reload timer, storing the handle to the created timer in xAutoReloadTimer. */
	xAutoReloadTimer = xTimerCreate(
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <main+0xf8>)
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2300      	movs	r3, #0
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000678:	481a      	ldr	r0, [pc, #104]	; (80006e4 <main+0xfc>)
 800067a:	f003 ff0d 	bl	8004498 <xTimerCreate>
 800067e:	63b8      	str	r0, [r7, #56]	; 0x38
						0, /* This example does not use the timer id. */
						prvAutoReloadTimerCallback ); /* The callback function to be used by the software timer being created. */


	/* Check the software timers were created. */
	if( ( xOneShotTimer != NULL ) && ( xAutoReloadTimer != NULL ) )
 8000680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000682:	2b00      	cmp	r3, #0
 8000684:	d018      	beq.n	80006b8 <main+0xd0>
 8000686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000688:	2b00      	cmp	r3, #0
 800068a:	d015      	beq.n	80006b8 <main+0xd0>
	{
		xTimer1Started = xTimerStart( xOneShotTimer, 0 );
 800068c:	f003 fa8e 	bl	8003bac <xTaskGetTickCount>
 8000690:	4602      	mov	r2, r0
 8000692:	2300      	movs	r3, #0
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2300      	movs	r3, #0
 8000698:	2101      	movs	r1, #1
 800069a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800069c:	f003 ff94 	bl	80045c8 <xTimerGenericCommand>
 80006a0:	6378      	str	r0, [r7, #52]	; 0x34
		xTimer2Started = xTimerStart( xAutoReloadTimer, 0 );
 80006a2:	f003 fa83 	bl	8003bac <xTaskGetTickCount>
 80006a6:	4602      	mov	r2, r0
 80006a8:	2300      	movs	r3, #0
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2300      	movs	r3, #0
 80006ae:	2101      	movs	r1, #1
 80006b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80006b2:	f003 ff89 	bl	80045c8 <xTimerGenericCommand>
 80006b6:	6338      	str	r0, [r7, #48]	; 0x30

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006b8:	f002 f99a 	bl	80029f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <main+0xd4>
 80006be:	bf00      	nop
 80006c0:	080009bd 	.word	0x080009bd
 80006c4:	20004558 	.word	0x20004558
 80006c8:	080009d1 	.word	0x080009d1
 80006cc:	20004550 	.word	0x20004550
 80006d0:	08005c8c 	.word	0x08005c8c
 80006d4:	20004554 	.word	0x20004554
 80006d8:	080008d1 	.word	0x080008d1
 80006dc:	08005c70 	.word	0x08005c70
 80006e0:	08000911 	.word	0x08000911
 80006e4:	08005c78 	.word	0x08005c78

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	; 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	2230      	movs	r2, #48	; 0x30
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f004 fe95 	bl	8005426 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <SystemClock_Config+0xcc>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	4a27      	ldr	r2, [pc, #156]	; (80007b4 <SystemClock_Config+0xcc>)
 8000716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071a:	6413      	str	r3, [r2, #64]	; 0x40
 800071c:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <SystemClock_Config+0xcc>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <SystemClock_Config+0xd0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a21      	ldr	r2, [pc, #132]	; (80007b8 <SystemClock_Config+0xd0>)
 8000732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <SystemClock_Config+0xd0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000744:	2301      	movs	r3, #1
 8000746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000748:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000752:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000758:	2304      	movs	r3, #4
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800075c:	23a8      	movs	r3, #168	; 0xa8
 800075e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000760:	2302      	movs	r3, #2
 8000762:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000764:	2304      	movs	r3, #4
 8000766:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f107 0320 	add.w	r3, r7, #32
 800076c:	4618      	mov	r0, r3
 800076e:	f000 fda9 	bl	80012c4 <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000778:	f000 f946 	bl	8000a08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077c:	230f      	movs	r3, #15
 800077e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000780:	2302      	movs	r3, #2
 8000782:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000788:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800078c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000792:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2105      	movs	r1, #5
 800079a:	4618      	mov	r0, r3
 800079c:	f001 f802 	bl	80017a4 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007a6:	f000 f92f 	bl	8000a08 <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3750      	adds	r7, #80	; 0x50
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	; (800080c <MX_USART2_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART2_UART_Init+0x4c>)
 80007f4:	f001 fc38 	bl	8002068 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007fe:	f000 f903 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000455c 	.word	0x2000455c
 800080c:	40004400 	.word	0x40004400

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <MX_GPIO_Init+0xb4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a25      	ldr	r2, [pc, #148]	; (80008c4 <MX_GPIO_Init+0xb4>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b23      	ldr	r3, [pc, #140]	; (80008c4 <MX_GPIO_Init+0xb4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <MX_GPIO_Init+0xb4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a1e      	ldr	r2, [pc, #120]	; (80008c4 <MX_GPIO_Init+0xb4>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <MX_GPIO_Init+0xb4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_GPIO_Init+0xb4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a17      	ldr	r2, [pc, #92]	; (80008c4 <MX_GPIO_Init+0xb4>)
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_GPIO_Init+0xb4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0308 	and.w	r3, r3, #8
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USER_LED_G_Pin|USER_LED_O_Pin|USER_LED_R_Pin|USER_LED_B_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000880:	4811      	ldr	r0, [pc, #68]	; (80008c8 <MX_GPIO_Init+0xb8>)
 8000882:	f000 fceb 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000886:	2301      	movs	r3, #1
 8000888:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	4619      	mov	r1, r3
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <MX_GPIO_Init+0xbc>)
 800089a:	f000 fb45 	bl	8000f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_G_Pin USER_LED_O_Pin USER_LED_R_Pin USER_LED_B_Pin */
  GPIO_InitStruct.Pin = USER_LED_G_Pin|USER_LED_O_Pin|USER_LED_R_Pin|USER_LED_B_Pin;
 800089e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	4619      	mov	r1, r3
 80008b6:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_GPIO_Init+0xb8>)
 80008b8:	f000 fb36 	bl	8000f28 <HAL_GPIO_Init>

}
 80008bc:	bf00      	nop
 80008be:	3720      	adds	r7, #32
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020c00 	.word	0x40020c00
 80008cc:	40020000 	.word	0x40020000

080008d0 <prvOneShotTimerCallback>:

/* USER CODE BEGIN 4 */
static void prvOneShotTimerCallback( TimerHandle_t xTimer )
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b092      	sub	sp, #72	; 0x48
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	TickType_t xTimeNow;

	xTimeNow = xTaskGetTickCount();
 80008d8:	f003 f968 	bl	8003bac <xTaskGetTickCount>
 80008dc:	6478      	str	r0, [r7, #68]	; 0x44

	HAL_GPIO_TogglePin(USER_LED_B_GPIO_Port, USER_LED_B_Pin);
 80008de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008e2:	4809      	ldr	r0, [pc, #36]	; (8000908 <prvOneShotTimerCallback+0x38>)
 80008e4:	f000 fcd3 	bl	800128e <HAL_GPIO_TogglePin>

	char msg[60];

	snprintf(msg,sizeof(msg),"One-shot timer callback executing %lu \r\n", xTimeNow);
 80008e8:	f107 0008 	add.w	r0, r7, #8
 80008ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008ee:	4a07      	ldr	r2, [pc, #28]	; (800090c <prvOneShotTimerCallback+0x3c>)
 80008f0:	213c      	movs	r1, #60	; 0x3c
 80008f2:	f004 fda1 	bl	8005438 <sniprintf>
	UartPrint(msg);
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f828 	bl	8000950 <UartPrint>

}
 8000900:	bf00      	nop
 8000902:	3748      	adds	r7, #72	; 0x48
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40020c00 	.word	0x40020c00
 800090c:	08005ca8 	.word	0x08005ca8

08000910 <prvAutoReloadTimerCallback>:

static void prvAutoReloadTimerCallback( TimerHandle_t xTimer )
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b092      	sub	sp, #72	; 0x48
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	TickType_t xTimeNow;

	xTimeNow = xTaskGetTickCount();
 8000918:	f003 f948 	bl	8003bac <xTaskGetTickCount>
 800091c:	6478      	str	r0, [r7, #68]	; 0x44

	HAL_GPIO_TogglePin(USER_LED_G_GPIO_Port, USER_LED_G_Pin);
 800091e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000922:	4809      	ldr	r0, [pc, #36]	; (8000948 <prvAutoReloadTimerCallback+0x38>)
 8000924:	f000 fcb3 	bl	800128e <HAL_GPIO_TogglePin>

	char msg[60];

	snprintf(msg,sizeof(msg),"Auto-reload timer callback executing %lu\r\n", xTimeNow);
 8000928:	f107 0008 	add.w	r0, r7, #8
 800092c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800092e:	4a07      	ldr	r2, [pc, #28]	; (800094c <prvAutoReloadTimerCallback+0x3c>)
 8000930:	213c      	movs	r1, #60	; 0x3c
 8000932:	f004 fd81 	bl	8005438 <sniprintf>
	UartPrint(msg);
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f808 	bl	8000950 <UartPrint>
}
 8000940:	bf00      	nop
 8000942:	3748      	adds	r7, #72	; 0x48
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40020c00 	.word	0x40020c00
 800094c:	08005cd4 	.word	0x08005cd4

08000950 <UartPrint>:


void UartPrint(char* message)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 50);
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff fc39 	bl	80001d0 <strlen>
 800095e:	4603      	mov	r3, r0
 8000960:	b29a      	uxth	r2, r3
 8000962:	2332      	movs	r3, #50	; 0x32
 8000964:	6879      	ldr	r1, [r7, #4]
 8000966:	4803      	ldr	r0, [pc, #12]	; (8000974 <UartPrint+0x24>)
 8000968:	f001 fbcb 	bl	8002102 <HAL_UART_Transmit>
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000455c 	.word	0x2000455c

08000978 <Task1Function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1Function */
void Task1Function(void const * argument)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b092      	sub	sp, #72	; 0x48
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  TickType_t xTimeNow;

	  xTimeNow = xTaskGetTickCount();
 8000980:	f003 f914 	bl	8003bac <xTaskGetTickCount>
 8000984:	6478      	str	r0, [r7, #68]	; 0x44

	  HAL_GPIO_TogglePin(USER_LED_O_GPIO_Port, USER_LED_O_Pin);
 8000986:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800098a:	480a      	ldr	r0, [pc, #40]	; (80009b4 <Task1Function+0x3c>)
 800098c:	f000 fc7f 	bl	800128e <HAL_GPIO_TogglePin>
	  char msg[60];

	  snprintf(msg,sizeof(msg),"Merhaba ben TASK1 :) %lu \r\n", xTimeNow);
 8000990:	f107 0008 	add.w	r0, r7, #8
 8000994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <Task1Function+0x40>)
 8000998:	213c      	movs	r1, #60	; 0x3c
 800099a:	f004 fd4d 	bl	8005438 <sniprintf>
	  UartPrint(msg);
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ffd4 	bl	8000950 <UartPrint>

	  vTaskDelay(pdMS_TO_TICKS(1000));
 80009a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ac:	f002 ffbc 	bl	8003928 <vTaskDelay>
  {
 80009b0:	e7e6      	b.n	8000980 <Task1Function+0x8>
 80009b2:	bf00      	nop
 80009b4:	40020c00 	.word	0x40020c00
 80009b8:	08005d00 	.word	0x08005d00

080009bc <OneShotCallback>:
  /* USER CODE END 5 */
}

/* OneShotCallback function */
void OneShotCallback(void const * argument)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OneShotCallback */

  /* USER CODE END OneShotCallback */
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <AutoReloadCallback>:

/* AutoReloadCallback function */
void AutoReloadCallback(void const * argument)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AutoReloadCallback */

  /* USER CODE END AutoReloadCallback */
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d101      	bne.n	80009fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009f6:	f000 f995 	bl	8000d24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40010000 	.word	0x40010000

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a19      	ldr	r2, [pc, #100]	; (8000aec <HAL_UART_MspInit+0x84>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d12b      	bne.n	8000ae2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <HAL_UART_MspInit+0x88>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	4a17      	ldr	r2, [pc, #92]	; (8000af0 <HAL_UART_MspInit+0x88>)
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a98:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_UART_MspInit+0x88>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <HAL_UART_MspInit+0x88>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <HAL_UART_MspInit+0x88>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <HAL_UART_MspInit+0x88>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad2:	2307      	movs	r3, #7
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <HAL_UART_MspInit+0x8c>)
 8000ade:	f000 fa23 	bl	8000f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	; 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40004400 	.word	0x40004400
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020000 	.word	0x40020000

08000af8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08c      	sub	sp, #48	; 0x30
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	2019      	movs	r0, #25
 8000b0e:	f000 f9e1 	bl	8000ed4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b12:	2019      	movs	r0, #25
 8000b14:	f000 f9fa 	bl	8000f0c <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <HAL_InitTick+0xa4>)
 8000b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b20:	4a1e      	ldr	r2, [pc, #120]	; (8000b9c <HAL_InitTick+0xa4>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6453      	str	r3, [r2, #68]	; 0x44
 8000b28:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <HAL_InitTick+0xa4>)
 8000b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b34:	f107 0210 	add.w	r2, r7, #16
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 f822 	bl	8001b88 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b44:	f001 f80c 	bl	8001b60 <HAL_RCC_GetPCLK2Freq>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b50:	4a13      	ldr	r2, [pc, #76]	; (8000ba0 <HAL_InitTick+0xa8>)
 8000b52:	fba2 2303 	umull	r2, r3, r2, r3
 8000b56:	0c9b      	lsrs	r3, r3, #18
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <HAL_InitTick+0xac>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <HAL_InitTick+0xb0>)
 8000b60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_InitTick+0xac>)
 8000b64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b68:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <HAL_InitTick+0xac>)
 8000b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b6e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <HAL_InitTick+0xac>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <HAL_InitTick+0xac>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b7c:	4809      	ldr	r0, [pc, #36]	; (8000ba4 <HAL_InitTick+0xac>)
 8000b7e:	f001 f835 	bl	8001bec <HAL_TIM_Base_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d104      	bne.n	8000b92 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b88:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <HAL_InitTick+0xac>)
 8000b8a:	f001 f864 	bl	8001c56 <HAL_TIM_Base_Start_IT>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	e000      	b.n	8000b94 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3730      	adds	r7, #48	; 0x30
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	431bde83 	.word	0x431bde83
 8000ba4:	2000459c 	.word	0x2000459c
 8000ba8:	40010000 	.word	0x40010000

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <BusFault_Handler+0x4>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <UsageFault_Handler+0x4>

08000bd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000be6:	f001 f85a 	bl	8001c9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2000459c 	.word	0x2000459c

08000bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bfc:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <_sbrk+0x5c>)
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <_sbrk+0x60>)
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <_sbrk+0x64>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <_sbrk+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d207      	bcs.n	8000c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c24:	f004 fbca 	bl	80053bc <__errno>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	230c      	movs	r3, #12
 8000c2c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	e009      	b.n	8000c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <_sbrk+0x64>)
 8000c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c46:	68fb      	ldr	r3, [r7, #12]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20020000 	.word	0x20020000
 8000c54:	00000400 	.word	0x00000400
 8000c58:	20000738 	.word	0x20000738
 8000c5c:	20004628 	.word	0x20004628

08000c60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <SystemInit+0x28>)
 8000c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6a:	4a07      	ldr	r2, [pc, #28]	; (8000c88 <SystemInit+0x28>)
 8000c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <SystemInit+0x28>)
 8000c76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c7a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c92:	e003      	b.n	8000c9c <LoopCopyDataInit>

08000c94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c9a:	3104      	adds	r1, #4

08000c9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c9c:	480b      	ldr	r0, [pc, #44]	; (8000ccc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ca0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ca2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ca4:	d3f6      	bcc.n	8000c94 <CopyDataInit>
  ldr  r2, =_sbss
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ca8:	e002      	b.n	8000cb0 <LoopFillZerobss>

08000caa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000caa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cac:	f842 3b04 	str.w	r3, [r2], #4

08000cb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cb4:	d3f9      	bcc.n	8000caa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cb6:	f7ff ffd3 	bl	8000c60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cba:	f004 fb85 	bl	80053c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cbe:	f7ff fc93 	bl	80005e8 <main>
  bx  lr    
 8000cc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cc4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cc8:	08005d94 	.word	0x08005d94
  ldr  r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cd0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000cd4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000cd8:	20004624 	.word	0x20004624

08000cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC_IRQHandler>
	...

08000ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	; (8000d20 <HAL_Init+0x40>)
 8000cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <HAL_Init+0x40>)
 8000cf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <HAL_Init+0x40>)
 8000d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d08:	2003      	movs	r0, #3
 8000d0a:	f000 f8d8 	bl	8000ebe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff fef2 	bl	8000af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d14:	f7ff fe80 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023c00 	.word	0x40023c00

08000d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x20>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x24>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <HAL_IncTick+0x24>)
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000008 	.word	0x20000008
 8000d48:	200045dc 	.word	0x200045dc

08000d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <HAL_GetTick+0x14>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	200045dc 	.word	0x200045dc

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4907      	ldr	r1, [pc, #28]	; (8000e00 <__NVIC_EnableIRQ+0x38>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100

08000e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	db0a      	blt.n	8000e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	490c      	ldr	r1, [pc, #48]	; (8000e50 <__NVIC_SetPriority+0x4c>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	440b      	add	r3, r1
 8000e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e2c:	e00a      	b.n	8000e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4908      	ldr	r1, [pc, #32]	; (8000e54 <__NVIC_SetPriority+0x50>)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	3b04      	subs	r3, #4
 8000e3c:	0112      	lsls	r2, r2, #4
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	440b      	add	r3, r1
 8000e42:	761a      	strb	r2, [r3, #24]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f1c3 0307 	rsb	r3, r3, #7
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	bf28      	it	cs
 8000e76:	2304      	movcs	r3, #4
 8000e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d902      	bls.n	8000e88 <NVIC_EncodePriority+0x30>
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3b03      	subs	r3, #3
 8000e86:	e000      	b.n	8000e8a <NVIC_EncodePriority+0x32>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43da      	mvns	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	4313      	orrs	r3, r2
         );
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3724      	adds	r7, #36	; 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ff4c 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee6:	f7ff ff61 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000eea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	68b9      	ldr	r1, [r7, #8]
 8000ef0:	6978      	ldr	r0, [r7, #20]
 8000ef2:	f7ff ffb1 	bl	8000e58 <NVIC_EncodePriority>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff80 	bl	8000e04 <__NVIC_SetPriority>
}
 8000f04:	bf00      	nop
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff54 	bl	8000dc8 <__NVIC_EnableIRQ>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
 8000f42:	e16b      	b.n	800121c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f44:	2201      	movs	r2, #1
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	f040 815a 	bne.w	8001216 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d00b      	beq.n	8000f82 <HAL_GPIO_Init+0x5a>
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d007      	beq.n	8000f82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f76:	2b11      	cmp	r3, #17
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b12      	cmp	r3, #18
 8000f80:	d130      	bne.n	8000fe4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb8:	2201      	movs	r2, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	091b      	lsrs	r3, r3, #4
 8000fce:	f003 0201 	and.w	r2, r3, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0xfc>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b12      	cmp	r3, #18
 8001022:	d123      	bne.n	800106c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	08da      	lsrs	r2, r3, #3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3208      	adds	r2, #8
 800102c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	f003 0307 	and.w	r3, r3, #7
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	220f      	movs	r2, #15
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	691a      	ldr	r2, [r3, #16]
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	08da      	lsrs	r2, r3, #3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3208      	adds	r2, #8
 8001066:	69b9      	ldr	r1, [r7, #24]
 8001068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0203 	and.w	r2, r3, #3
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f000 80b4 	beq.w	8001216 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b5f      	ldr	r3, [pc, #380]	; (8001230 <HAL_GPIO_Init+0x308>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a5e      	ldr	r2, [pc, #376]	; (8001230 <HAL_GPIO_Init+0x308>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b5c      	ldr	r3, [pc, #368]	; (8001230 <HAL_GPIO_Init+0x308>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ca:	4a5a      	ldr	r2, [pc, #360]	; (8001234 <HAL_GPIO_Init+0x30c>)
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	089b      	lsrs	r3, r3, #2
 80010d0:	3302      	adds	r3, #2
 80010d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	220f      	movs	r2, #15
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a51      	ldr	r2, [pc, #324]	; (8001238 <HAL_GPIO_Init+0x310>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d02b      	beq.n	800114e <HAL_GPIO_Init+0x226>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a50      	ldr	r2, [pc, #320]	; (800123c <HAL_GPIO_Init+0x314>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d025      	beq.n	800114a <HAL_GPIO_Init+0x222>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4f      	ldr	r2, [pc, #316]	; (8001240 <HAL_GPIO_Init+0x318>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d01f      	beq.n	8001146 <HAL_GPIO_Init+0x21e>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4e      	ldr	r2, [pc, #312]	; (8001244 <HAL_GPIO_Init+0x31c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d019      	beq.n	8001142 <HAL_GPIO_Init+0x21a>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4d      	ldr	r2, [pc, #308]	; (8001248 <HAL_GPIO_Init+0x320>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d013      	beq.n	800113e <HAL_GPIO_Init+0x216>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4c      	ldr	r2, [pc, #304]	; (800124c <HAL_GPIO_Init+0x324>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d00d      	beq.n	800113a <HAL_GPIO_Init+0x212>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4b      	ldr	r2, [pc, #300]	; (8001250 <HAL_GPIO_Init+0x328>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d007      	beq.n	8001136 <HAL_GPIO_Init+0x20e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4a      	ldr	r2, [pc, #296]	; (8001254 <HAL_GPIO_Init+0x32c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d101      	bne.n	8001132 <HAL_GPIO_Init+0x20a>
 800112e:	2307      	movs	r3, #7
 8001130:	e00e      	b.n	8001150 <HAL_GPIO_Init+0x228>
 8001132:	2308      	movs	r3, #8
 8001134:	e00c      	b.n	8001150 <HAL_GPIO_Init+0x228>
 8001136:	2306      	movs	r3, #6
 8001138:	e00a      	b.n	8001150 <HAL_GPIO_Init+0x228>
 800113a:	2305      	movs	r3, #5
 800113c:	e008      	b.n	8001150 <HAL_GPIO_Init+0x228>
 800113e:	2304      	movs	r3, #4
 8001140:	e006      	b.n	8001150 <HAL_GPIO_Init+0x228>
 8001142:	2303      	movs	r3, #3
 8001144:	e004      	b.n	8001150 <HAL_GPIO_Init+0x228>
 8001146:	2302      	movs	r3, #2
 8001148:	e002      	b.n	8001150 <HAL_GPIO_Init+0x228>
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <HAL_GPIO_Init+0x228>
 800114e:	2300      	movs	r3, #0
 8001150:	69fa      	ldr	r2, [r7, #28]
 8001152:	f002 0203 	and.w	r2, r2, #3
 8001156:	0092      	lsls	r2, r2, #2
 8001158:	4093      	lsls	r3, r2
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001160:	4934      	ldr	r1, [pc, #208]	; (8001234 <HAL_GPIO_Init+0x30c>)
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	089b      	lsrs	r3, r3, #2
 8001166:	3302      	adds	r3, #2
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800116e:	4b3a      	ldr	r3, [pc, #232]	; (8001258 <HAL_GPIO_Init+0x330>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001192:	4a31      	ldr	r2, [pc, #196]	; (8001258 <HAL_GPIO_Init+0x330>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001198:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <HAL_GPIO_Init+0x330>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011bc:	4a26      	ldr	r2, [pc, #152]	; (8001258 <HAL_GPIO_Init+0x330>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c2:	4b25      	ldr	r3, [pc, #148]	; (8001258 <HAL_GPIO_Init+0x330>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011e6:	4a1c      	ldr	r2, [pc, #112]	; (8001258 <HAL_GPIO_Init+0x330>)
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <HAL_GPIO_Init+0x330>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001210:	4a11      	ldr	r2, [pc, #68]	; (8001258 <HAL_GPIO_Init+0x330>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3301      	adds	r3, #1
 800121a:	61fb      	str	r3, [r7, #28]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	2b0f      	cmp	r3, #15
 8001220:	f67f ae90 	bls.w	8000f44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001224:	bf00      	nop
 8001226:	3724      	adds	r7, #36	; 0x24
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	40023800 	.word	0x40023800
 8001234:	40013800 	.word	0x40013800
 8001238:	40020000 	.word	0x40020000
 800123c:	40020400 	.word	0x40020400
 8001240:	40020800 	.word	0x40020800
 8001244:	40020c00 	.word	0x40020c00
 8001248:	40021000 	.word	0x40021000
 800124c:	40021400 	.word	0x40021400
 8001250:	40021800 	.word	0x40021800
 8001254:	40021c00 	.word	0x40021c00
 8001258:	40013c00 	.word	0x40013c00

0800125c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
 8001268:	4613      	mov	r3, r2
 800126a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800126c:	787b      	ldrb	r3, [r7, #1]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001278:	e003      	b.n	8001282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	041a      	lsls	r2, r3, #16
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	619a      	str	r2, [r3, #24]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	460b      	mov	r3, r1
 8001298:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695a      	ldr	r2, [r3, #20]
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	401a      	ands	r2, r3
 80012a2:	887b      	ldrh	r3, [r7, #2]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d104      	bne.n	80012b2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012a8:	887b      	ldrh	r3, [r7, #2]
 80012aa:	041a      	lsls	r2, r3, #16
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80012b0:	e002      	b.n	80012b8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	619a      	str	r2, [r3, #24]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e25b      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d075      	beq.n	80013ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012e2:	4ba3      	ldr	r3, [pc, #652]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d00c      	beq.n	8001308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ee:	4ba0      	ldr	r3, [pc, #640]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d112      	bne.n	8001320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fa:	4b9d      	ldr	r3, [pc, #628]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001306:	d10b      	bne.n	8001320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001308:	4b99      	ldr	r3, [pc, #612]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d05b      	beq.n	80013cc <HAL_RCC_OscConfig+0x108>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d157      	bne.n	80013cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e236      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001328:	d106      	bne.n	8001338 <HAL_RCC_OscConfig+0x74>
 800132a:	4b91      	ldr	r3, [pc, #580]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a90      	ldr	r2, [pc, #576]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e01d      	b.n	8001374 <HAL_RCC_OscConfig+0xb0>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0x98>
 8001342:	4b8b      	ldr	r3, [pc, #556]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a8a      	ldr	r2, [pc, #552]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b88      	ldr	r3, [pc, #544]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a87      	ldr	r2, [pc, #540]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e00b      	b.n	8001374 <HAL_RCC_OscConfig+0xb0>
 800135c:	4b84      	ldr	r3, [pc, #528]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a83      	ldr	r2, [pc, #524]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b81      	ldr	r3, [pc, #516]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a80      	ldr	r2, [pc, #512]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 800136e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d013      	beq.n	80013a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fce6 	bl	8000d4c <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001384:	f7ff fce2 	bl	8000d4c <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b64      	cmp	r3, #100	; 0x64
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e1fb      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	4b76      	ldr	r3, [pc, #472]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0xc0>
 80013a2:	e014      	b.n	80013ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fcd2 	bl	8000d4c <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff fcce 	bl	8000d4c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	; 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e1e7      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013be:	4b6c      	ldr	r3, [pc, #432]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0xe8>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d063      	beq.n	80014a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013da:	4b65      	ldr	r3, [pc, #404]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e6:	4b62      	ldr	r3, [pc, #392]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d11c      	bne.n	800142c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f2:	4b5f      	ldr	r3, [pc, #380]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d116      	bne.n	800142c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	4b5c      	ldr	r3, [pc, #368]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d005      	beq.n	8001416 <HAL_RCC_OscConfig+0x152>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d001      	beq.n	8001416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e1bb      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001416:	4b56      	ldr	r3, [pc, #344]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4952      	ldr	r1, [pc, #328]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	e03a      	b.n	80014a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d020      	beq.n	8001476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001434:	4b4f      	ldr	r3, [pc, #316]	; (8001574 <HAL_RCC_OscConfig+0x2b0>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143a:	f7ff fc87 	bl	8000d4c <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001442:	f7ff fc83 	bl	8000d4c <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e19c      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001454:	4b46      	ldr	r3, [pc, #280]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001460:	4b43      	ldr	r3, [pc, #268]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4940      	ldr	r1, [pc, #256]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
 8001474:	e015      	b.n	80014a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001476:	4b3f      	ldr	r3, [pc, #252]	; (8001574 <HAL_RCC_OscConfig+0x2b0>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff fc66 	bl	8000d4c <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001484:	f7ff fc62 	bl	8000d4c <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e17b      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001496:	4b36      	ldr	r3, [pc, #216]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d030      	beq.n	8001510 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d016      	beq.n	80014e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <HAL_RCC_OscConfig+0x2b4>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014bc:	f7ff fc46 	bl	8000d4c <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff fc42 	bl	8000d4c <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e15b      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80014d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0x200>
 80014e2:	e015      	b.n	8001510 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e4:	4b24      	ldr	r3, [pc, #144]	; (8001578 <HAL_RCC_OscConfig+0x2b4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fc2f 	bl	8000d4c <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f2:	f7ff fc2b 	bl	8000d4c <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e144      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1f0      	bne.n	80014f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80a0 	beq.w	800165e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10f      	bne.n	800154e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800154a:	2301      	movs	r3, #1
 800154c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_RCC_OscConfig+0x2b8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001556:	2b00      	cmp	r3, #0
 8001558:	d121      	bne.n	800159e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_RCC_OscConfig+0x2b8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_RCC_OscConfig+0x2b8>)
 8001560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001566:	f7ff fbf1 	bl	8000d4c <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	e011      	b.n	8001592 <HAL_RCC_OscConfig+0x2ce>
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	42470000 	.word	0x42470000
 8001578:	42470e80 	.word	0x42470e80
 800157c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001580:	f7ff fbe4 	bl	8000d4c <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e0fd      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001592:	4b81      	ldr	r3, [pc, #516]	; (8001798 <HAL_RCC_OscConfig+0x4d4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d106      	bne.n	80015b4 <HAL_RCC_OscConfig+0x2f0>
 80015a6:	4b7d      	ldr	r3, [pc, #500]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015aa:	4a7c      	ldr	r2, [pc, #496]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6713      	str	r3, [r2, #112]	; 0x70
 80015b2:	e01c      	b.n	80015ee <HAL_RCC_OscConfig+0x32a>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	d10c      	bne.n	80015d6 <HAL_RCC_OscConfig+0x312>
 80015bc:	4b77      	ldr	r3, [pc, #476]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c0:	4a76      	ldr	r2, [pc, #472]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	6713      	str	r3, [r2, #112]	; 0x70
 80015c8:	4b74      	ldr	r3, [pc, #464]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80015ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015cc:	4a73      	ldr	r2, [pc, #460]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6713      	str	r3, [r2, #112]	; 0x70
 80015d4:	e00b      	b.n	80015ee <HAL_RCC_OscConfig+0x32a>
 80015d6:	4b71      	ldr	r3, [pc, #452]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015da:	4a70      	ldr	r2, [pc, #448]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80015dc:	f023 0301 	bic.w	r3, r3, #1
 80015e0:	6713      	str	r3, [r2, #112]	; 0x70
 80015e2:	4b6e      	ldr	r3, [pc, #440]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80015e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e6:	4a6d      	ldr	r2, [pc, #436]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80015e8:	f023 0304 	bic.w	r3, r3, #4
 80015ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d015      	beq.n	8001622 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f6:	f7ff fba9 	bl	8000d4c <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fc:	e00a      	b.n	8001614 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fe:	f7ff fba5 	bl	8000d4c <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f241 3288 	movw	r2, #5000	; 0x1388
 800160c:	4293      	cmp	r3, r2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e0bc      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001614:	4b61      	ldr	r3, [pc, #388]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 8001616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0ee      	beq.n	80015fe <HAL_RCC_OscConfig+0x33a>
 8001620:	e014      	b.n	800164c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001622:	f7ff fb93 	bl	8000d4c <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001628:	e00a      	b.n	8001640 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800162a:	f7ff fb8f 	bl	8000d4c <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	f241 3288 	movw	r2, #5000	; 0x1388
 8001638:	4293      	cmp	r3, r2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e0a6      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001640:	4b56      	ldr	r3, [pc, #344]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 8001642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1ee      	bne.n	800162a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d105      	bne.n	800165e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001652:	4b52      	ldr	r3, [pc, #328]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	4a51      	ldr	r2, [pc, #324]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 8001658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800165c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 8092 	beq.w	800178c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001668:	4b4c      	ldr	r3, [pc, #304]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 030c 	and.w	r3, r3, #12
 8001670:	2b08      	cmp	r3, #8
 8001672:	d05c      	beq.n	800172e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d141      	bne.n	8001700 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167c:	4b48      	ldr	r3, [pc, #288]	; (80017a0 <HAL_RCC_OscConfig+0x4dc>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001682:	f7ff fb63 	bl	8000d4c <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168a:	f7ff fb5f 	bl	8000d4c <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e078      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169c:	4b3f      	ldr	r3, [pc, #252]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f0      	bne.n	800168a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69da      	ldr	r2, [r3, #28]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	431a      	orrs	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	019b      	lsls	r3, r3, #6
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016be:	085b      	lsrs	r3, r3, #1
 80016c0:	3b01      	subs	r3, #1
 80016c2:	041b      	lsls	r3, r3, #16
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	061b      	lsls	r3, r3, #24
 80016cc:	4933      	ldr	r1, [pc, #204]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d2:	4b33      	ldr	r3, [pc, #204]	; (80017a0 <HAL_RCC_OscConfig+0x4dc>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fb38 	bl	8000d4c <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e0:	f7ff fb34 	bl	8000d4c <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e04d      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f2:	4b2a      	ldr	r3, [pc, #168]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x41c>
 80016fe:	e045      	b.n	800178c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001700:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <HAL_RCC_OscConfig+0x4dc>)
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001706:	f7ff fb21 	bl	8000d4c <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170e:	f7ff fb1d 	bl	8000d4c <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e036      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1f0      	bne.n	800170e <HAL_RCC_OscConfig+0x44a>
 800172c:	e02e      	b.n	800178c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e029      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_RCC_OscConfig+0x4d8>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	429a      	cmp	r2, r3
 800174c:	d11c      	bne.n	8001788 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d115      	bne.n	8001788 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001762:	4013      	ands	r3, r2
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001768:	4293      	cmp	r3, r2
 800176a:	d10d      	bne.n	8001788 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001776:	429a      	cmp	r2, r3
 8001778:	d106      	bne.n	8001788 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40007000 	.word	0x40007000
 800179c:	40023800 	.word	0x40023800
 80017a0:	42470060 	.word	0x42470060

080017a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0cc      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b8:	4b68      	ldr	r3, [pc, #416]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 030f 	and.w	r3, r3, #15
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d90c      	bls.n	80017e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b65      	ldr	r3, [pc, #404]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ce:	4b63      	ldr	r3, [pc, #396]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0b8      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d020      	beq.n	800182e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017f8:	4b59      	ldr	r3, [pc, #356]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	4a58      	ldr	r2, [pc, #352]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001802:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001810:	4b53      	ldr	r3, [pc, #332]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4a52      	ldr	r2, [pc, #328]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800181a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800181c:	4b50      	ldr	r3, [pc, #320]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	494d      	ldr	r1, [pc, #308]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d044      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	4b47      	ldr	r3, [pc, #284]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d119      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e07f      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d003      	beq.n	8001862 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800185e:	2b03      	cmp	r3, #3
 8001860:	d107      	bne.n	8001872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001862:	4b3f      	ldr	r3, [pc, #252]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d109      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e06f      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001872:	4b3b      	ldr	r3, [pc, #236]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e067      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001882:	4b37      	ldr	r3, [pc, #220]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f023 0203 	bic.w	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4934      	ldr	r1, [pc, #208]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	4313      	orrs	r3, r2
 8001892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001894:	f7ff fa5a 	bl	8000d4c <HAL_GetTick>
 8001898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	e00a      	b.n	80018b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189c:	f7ff fa56 	bl	8000d4c <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e04f      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b2:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 020c 	and.w	r2, r3, #12
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d1eb      	bne.n	800189c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018c4:	4b25      	ldr	r3, [pc, #148]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 030f 	and.w	r3, r3, #15
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d20c      	bcs.n	80018ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d2:	4b22      	ldr	r3, [pc, #136]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018da:	4b20      	ldr	r3, [pc, #128]	; (800195c <HAL_RCC_ClockConfig+0x1b8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e032      	b.n	8001952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d008      	beq.n	800190a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f8:	4b19      	ldr	r3, [pc, #100]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	4916      	ldr	r1, [pc, #88]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	4313      	orrs	r3, r2
 8001908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d009      	beq.n	800192a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	490e      	ldr	r1, [pc, #56]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	4313      	orrs	r3, r2
 8001928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800192a:	f000 f821 	bl	8001970 <HAL_RCC_GetSysClockFreq>
 800192e:	4601      	mov	r1, r0
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 800193c:	5cd3      	ldrb	r3, [r2, r3]
 800193e:	fa21 f303 	lsr.w	r3, r1, r3
 8001942:	4a09      	ldr	r2, [pc, #36]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_RCC_ClockConfig+0x1c8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff f8d4 	bl	8000af8 <HAL_InitTick>

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023c00 	.word	0x40023c00
 8001960:	40023800 	.word	0x40023800
 8001964:	08005d38 	.word	0x08005d38
 8001968:	20000000 	.word	0x20000000
 800196c:	20000004 	.word	0x20000004

08001970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	2300      	movs	r3, #0
 8001980:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001986:	4b63      	ldr	r3, [pc, #396]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b04      	cmp	r3, #4
 8001990:	d007      	beq.n	80019a2 <HAL_RCC_GetSysClockFreq+0x32>
 8001992:	2b08      	cmp	r3, #8
 8001994:	d008      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0x38>
 8001996:	2b00      	cmp	r3, #0
 8001998:	f040 80b4 	bne.w	8001b04 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800199c:	4b5e      	ldr	r3, [pc, #376]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800199e:	60bb      	str	r3, [r7, #8]
       break;
 80019a0:	e0b3      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019a2:	4b5e      	ldr	r3, [pc, #376]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80019a4:	60bb      	str	r3, [r7, #8]
      break;
 80019a6:	e0b0      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a8:	4b5a      	ldr	r3, [pc, #360]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019b2:	4b58      	ldr	r3, [pc, #352]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d04a      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019be:	4b55      	ldr	r3, [pc, #340]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	099b      	lsrs	r3, r3, #6
 80019c4:	f04f 0400 	mov.w	r4, #0
 80019c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	ea03 0501 	and.w	r5, r3, r1
 80019d4:	ea04 0602 	and.w	r6, r4, r2
 80019d8:	4629      	mov	r1, r5
 80019da:	4632      	mov	r2, r6
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	f04f 0400 	mov.w	r4, #0
 80019e4:	0154      	lsls	r4, r2, #5
 80019e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019ea:	014b      	lsls	r3, r1, #5
 80019ec:	4619      	mov	r1, r3
 80019ee:	4622      	mov	r2, r4
 80019f0:	1b49      	subs	r1, r1, r5
 80019f2:	eb62 0206 	sbc.w	r2, r2, r6
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	f04f 0400 	mov.w	r4, #0
 80019fe:	0194      	lsls	r4, r2, #6
 8001a00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a04:	018b      	lsls	r3, r1, #6
 8001a06:	1a5b      	subs	r3, r3, r1
 8001a08:	eb64 0402 	sbc.w	r4, r4, r2
 8001a0c:	f04f 0100 	mov.w	r1, #0
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	00e2      	lsls	r2, r4, #3
 8001a16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a1a:	00d9      	lsls	r1, r3, #3
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4614      	mov	r4, r2
 8001a20:	195b      	adds	r3, r3, r5
 8001a22:	eb44 0406 	adc.w	r4, r4, r6
 8001a26:	f04f 0100 	mov.w	r1, #0
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	0262      	lsls	r2, r4, #9
 8001a30:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a34:	0259      	lsls	r1, r3, #9
 8001a36:	460b      	mov	r3, r1
 8001a38:	4614      	mov	r4, r2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f04f 0400 	mov.w	r4, #0
 8001a44:	461a      	mov	r2, r3
 8001a46:	4623      	mov	r3, r4
 8001a48:	f7fe fc1a 	bl	8000280 <__aeabi_uldivmod>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	460c      	mov	r4, r1
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	e049      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a54:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	099b      	lsrs	r3, r3, #6
 8001a5a:	f04f 0400 	mov.w	r4, #0
 8001a5e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	ea03 0501 	and.w	r5, r3, r1
 8001a6a:	ea04 0602 	and.w	r6, r4, r2
 8001a6e:	4629      	mov	r1, r5
 8001a70:	4632      	mov	r2, r6
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	f04f 0400 	mov.w	r4, #0
 8001a7a:	0154      	lsls	r4, r2, #5
 8001a7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a80:	014b      	lsls	r3, r1, #5
 8001a82:	4619      	mov	r1, r3
 8001a84:	4622      	mov	r2, r4
 8001a86:	1b49      	subs	r1, r1, r5
 8001a88:	eb62 0206 	sbc.w	r2, r2, r6
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	f04f 0400 	mov.w	r4, #0
 8001a94:	0194      	lsls	r4, r2, #6
 8001a96:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a9a:	018b      	lsls	r3, r1, #6
 8001a9c:	1a5b      	subs	r3, r3, r1
 8001a9e:	eb64 0402 	sbc.w	r4, r4, r2
 8001aa2:	f04f 0100 	mov.w	r1, #0
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	00e2      	lsls	r2, r4, #3
 8001aac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ab0:	00d9      	lsls	r1, r3, #3
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4614      	mov	r4, r2
 8001ab6:	195b      	adds	r3, r3, r5
 8001ab8:	eb44 0406 	adc.w	r4, r4, r6
 8001abc:	f04f 0100 	mov.w	r1, #0
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	02a2      	lsls	r2, r4, #10
 8001ac6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001aca:	0299      	lsls	r1, r3, #10
 8001acc:	460b      	mov	r3, r1
 8001ace:	4614      	mov	r4, r2
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	4621      	mov	r1, r4
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f04f 0400 	mov.w	r4, #0
 8001ada:	461a      	mov	r2, r3
 8001adc:	4623      	mov	r3, r4
 8001ade:	f7fe fbcf 	bl	8000280 <__aeabi_uldivmod>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	460c      	mov	r4, r1
 8001ae6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	0c1b      	lsrs	r3, r3, #16
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	3301      	adds	r3, #1
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b00:	60bb      	str	r3, [r7, #8]
      break;
 8001b02:	e002      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b04:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b06:	60bb      	str	r3, [r7, #8]
      break;
 8001b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b14:	40023800 	.word	0x40023800
 8001b18:	00f42400 	.word	0x00f42400
 8001b1c:	007a1200 	.word	0x007a1200

08001b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000000 	.word	0x20000000

08001b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b3c:	f7ff fff0 	bl	8001b20 <HAL_RCC_GetHCLKFreq>
 8001b40:	4601      	mov	r1, r0
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	0a9b      	lsrs	r3, r3, #10
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	4a03      	ldr	r2, [pc, #12]	; (8001b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b4e:	5cd3      	ldrb	r3, [r2, r3]
 8001b50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	08005d48 	.word	0x08005d48

08001b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b64:	f7ff ffdc 	bl	8001b20 <HAL_RCC_GetHCLKFreq>
 8001b68:	4601      	mov	r1, r0
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	0b5b      	lsrs	r3, r3, #13
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	4a03      	ldr	r2, [pc, #12]	; (8001b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b76:	5cd3      	ldrb	r3, [r2, r3]
 8001b78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40023800 	.word	0x40023800
 8001b84:	08005d48 	.word	0x08005d48

08001b88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	220f      	movs	r2, #15
 8001b96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b98:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0203 	and.w	r2, r3, #3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_RCC_GetClockConfig+0x5c>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	08db      	lsrs	r3, r3, #3
 8001bc2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <HAL_RCC_GetClockConfig+0x60>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 020f 	and.w	r2, r3, #15
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	601a      	str	r2, [r3, #0]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40023c00 	.word	0x40023c00

08001bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e01d      	b.n	8001c3a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d106      	bne.n	8001c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f815 	bl	8001c42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3304      	adds	r3, #4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	f000 f968 	bl	8001f00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b085      	sub	sp, #20
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 0201 	orr.w	r2, r2, #1
 8001c6c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b06      	cmp	r3, #6
 8001c7e:	d007      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d122      	bne.n	8001cfa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d11b      	bne.n	8001cfa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f06f 0202 	mvn.w	r2, #2
 8001cca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f8ee 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
 8001ce6:	e005      	b.n	8001cf4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f8e0 	bl	8001eae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f8f1 	bl	8001ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d122      	bne.n	8001d4e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d11b      	bne.n	8001d4e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f06f 0204 	mvn.w	r2, #4
 8001d1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2202      	movs	r2, #2
 8001d24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f8c4 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
 8001d3a:	e005      	b.n	8001d48 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f8b6 	bl	8001eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f8c7 	bl	8001ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d122      	bne.n	8001da2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d11b      	bne.n	8001da2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f06f 0208 	mvn.w	r2, #8
 8001d72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2204      	movs	r2, #4
 8001d78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f89a 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
 8001d8e:	e005      	b.n	8001d9c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f88c 	bl	8001eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f89d 	bl	8001ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	f003 0310 	and.w	r3, r3, #16
 8001dac:	2b10      	cmp	r3, #16
 8001dae:	d122      	bne.n	8001df6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	2b10      	cmp	r3, #16
 8001dbc:	d11b      	bne.n	8001df6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f06f 0210 	mvn.w	r2, #16
 8001dc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2208      	movs	r2, #8
 8001dcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f870 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
 8001de2:	e005      	b.n	8001df0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f862 	bl	8001eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f873 	bl	8001ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d10e      	bne.n	8001e22 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d107      	bne.n	8001e22 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f06f 0201 	mvn.w	r2, #1
 8001e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7fe fde1 	bl	80009e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2c:	2b80      	cmp	r3, #128	; 0x80
 8001e2e:	d10e      	bne.n	8001e4e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3a:	2b80      	cmp	r3, #128	; 0x80
 8001e3c:	d107      	bne.n	8001e4e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f903 	bl	8002054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e58:	2b40      	cmp	r3, #64	; 0x40
 8001e5a:	d10e      	bne.n	8001e7a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e66:	2b40      	cmp	r3, #64	; 0x40
 8001e68:	d107      	bne.n	8001e7a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f838 	bl	8001eea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	f003 0320 	and.w	r3, r3, #32
 8001e84:	2b20      	cmp	r3, #32
 8001e86:	d10e      	bne.n	8001ea6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f003 0320 	and.w	r3, r3, #32
 8001e92:	2b20      	cmp	r3, #32
 8001e94:	d107      	bne.n	8001ea6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f06f 0220 	mvn.w	r2, #32
 8001e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f8cd 	bl	8002040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a40      	ldr	r2, [pc, #256]	; (8002014 <TIM_Base_SetConfig+0x114>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d013      	beq.n	8001f40 <TIM_Base_SetConfig+0x40>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1e:	d00f      	beq.n	8001f40 <TIM_Base_SetConfig+0x40>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a3d      	ldr	r2, [pc, #244]	; (8002018 <TIM_Base_SetConfig+0x118>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d00b      	beq.n	8001f40 <TIM_Base_SetConfig+0x40>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a3c      	ldr	r2, [pc, #240]	; (800201c <TIM_Base_SetConfig+0x11c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d007      	beq.n	8001f40 <TIM_Base_SetConfig+0x40>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a3b      	ldr	r2, [pc, #236]	; (8002020 <TIM_Base_SetConfig+0x120>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d003      	beq.n	8001f40 <TIM_Base_SetConfig+0x40>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a3a      	ldr	r2, [pc, #232]	; (8002024 <TIM_Base_SetConfig+0x124>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d108      	bne.n	8001f52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a2f      	ldr	r2, [pc, #188]	; (8002014 <TIM_Base_SetConfig+0x114>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d02b      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f60:	d027      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a2c      	ldr	r2, [pc, #176]	; (8002018 <TIM_Base_SetConfig+0x118>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d023      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a2b      	ldr	r2, [pc, #172]	; (800201c <TIM_Base_SetConfig+0x11c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d01f      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a2a      	ldr	r2, [pc, #168]	; (8002020 <TIM_Base_SetConfig+0x120>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d01b      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a29      	ldr	r2, [pc, #164]	; (8002024 <TIM_Base_SetConfig+0x124>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d017      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a28      	ldr	r2, [pc, #160]	; (8002028 <TIM_Base_SetConfig+0x128>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d013      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a27      	ldr	r2, [pc, #156]	; (800202c <TIM_Base_SetConfig+0x12c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00f      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a26      	ldr	r2, [pc, #152]	; (8002030 <TIM_Base_SetConfig+0x130>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d00b      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a25      	ldr	r2, [pc, #148]	; (8002034 <TIM_Base_SetConfig+0x134>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d007      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a24      	ldr	r2, [pc, #144]	; (8002038 <TIM_Base_SetConfig+0x138>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d003      	beq.n	8001fb2 <TIM_Base_SetConfig+0xb2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a23      	ldr	r2, [pc, #140]	; (800203c <TIM_Base_SetConfig+0x13c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d108      	bne.n	8001fc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <TIM_Base_SetConfig+0x114>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d003      	beq.n	8001ff8 <TIM_Base_SetConfig+0xf8>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a0c      	ldr	r2, [pc, #48]	; (8002024 <TIM_Base_SetConfig+0x124>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d103      	bne.n	8002000 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	615a      	str	r2, [r3, #20]
}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40010000 	.word	0x40010000
 8002018:	40000400 	.word	0x40000400
 800201c:	40000800 	.word	0x40000800
 8002020:	40000c00 	.word	0x40000c00
 8002024:	40010400 	.word	0x40010400
 8002028:	40014000 	.word	0x40014000
 800202c:	40014400 	.word	0x40014400
 8002030:	40014800 	.word	0x40014800
 8002034:	40001800 	.word	0x40001800
 8002038:	40001c00 	.word	0x40001c00
 800203c:	40002000 	.word	0x40002000

08002040 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e03f      	b.n	80020fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d106      	bne.n	8002094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7fe fcea 	bl	8000a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2224      	movs	r2, #36	; 0x24
 8002098:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f90b 	bl	80022c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2220      	movs	r2, #32
 80020ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2220      	movs	r2, #32
 80020f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b088      	sub	sp, #32
 8002106:	af02      	add	r7, sp, #8
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	603b      	str	r3, [r7, #0]
 800210e:	4613      	mov	r3, r2
 8002110:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b20      	cmp	r3, #32
 8002120:	f040 8083 	bne.w	800222a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <HAL_UART_Transmit+0x2e>
 800212a:	88fb      	ldrh	r3, [r7, #6]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e07b      	b.n	800222c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800213a:	2b01      	cmp	r3, #1
 800213c:	d101      	bne.n	8002142 <HAL_UART_Transmit+0x40>
 800213e:	2302      	movs	r3, #2
 8002140:	e074      	b.n	800222c <HAL_UART_Transmit+0x12a>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2221      	movs	r2, #33	; 0x21
 8002154:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002158:	f7fe fdf8 	bl	8000d4c <HAL_GetTick>
 800215c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	88fa      	ldrh	r2, [r7, #6]
 8002162:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	88fa      	ldrh	r2, [r7, #6]
 8002168:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002172:	e042      	b.n	80021fa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800218a:	d122      	bne.n	80021d2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2200      	movs	r2, #0
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 f84c 	bl	8002234 <UART_WaitOnFlagUntilTimeout>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e042      	b.n	800222c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021b8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d103      	bne.n	80021ca <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	3302      	adds	r3, #2
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	e017      	b.n	80021fa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	3301      	adds	r3, #1
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	e013      	b.n	80021fa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2200      	movs	r2, #0
 80021da:	2180      	movs	r1, #128	; 0x80
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 f829 	bl	8002234 <UART_WaitOnFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e01f      	b.n	800222c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	60ba      	str	r2, [r7, #8]
 80021f2:	781a      	ldrb	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021fe:	b29b      	uxth	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1b7      	bne.n	8002174 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2200      	movs	r2, #0
 800220c:	2140      	movs	r1, #64	; 0x40
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 f810 	bl	8002234 <UART_WaitOnFlagUntilTimeout>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e006      	b.n	800222c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2220      	movs	r2, #32
 8002222:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	e000      	b.n	800222c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800222a:	2302      	movs	r3, #2
  }
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	4613      	mov	r3, r2
 8002242:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002244:	e02c      	b.n	80022a0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224c:	d028      	beq.n	80022a0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d007      	beq.n	8002264 <UART_WaitOnFlagUntilTimeout+0x30>
 8002254:	f7fe fd7a 	bl	8000d4c <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	429a      	cmp	r2, r3
 8002262:	d21d      	bcs.n	80022a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002272:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e00f      	b.n	80022c0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	4013      	ands	r3, r2
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	bf0c      	ite	eq
 80022b0:	2301      	moveq	r3, #1
 80022b2:	2300      	movne	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d0c3      	beq.n	8002246 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022cc:	b085      	sub	sp, #20
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800230a:	f023 030c 	bic.w	r3, r3, #12
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	68f9      	ldr	r1, [r7, #12]
 8002314:	430b      	orrs	r3, r1
 8002316:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699a      	ldr	r2, [r3, #24]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002336:	f040 818b 	bne.w	8002650 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4ac1      	ldr	r2, [pc, #772]	; (8002644 <UART_SetConfig+0x37c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d005      	beq.n	8002350 <UART_SetConfig+0x88>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4abf      	ldr	r2, [pc, #764]	; (8002648 <UART_SetConfig+0x380>)
 800234a:	4293      	cmp	r3, r2
 800234c:	f040 80bd 	bne.w	80024ca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002350:	f7ff fc06 	bl	8001b60 <HAL_RCC_GetPCLK2Freq>
 8002354:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	461d      	mov	r5, r3
 800235a:	f04f 0600 	mov.w	r6, #0
 800235e:	46a8      	mov	r8, r5
 8002360:	46b1      	mov	r9, r6
 8002362:	eb18 0308 	adds.w	r3, r8, r8
 8002366:	eb49 0409 	adc.w	r4, r9, r9
 800236a:	4698      	mov	r8, r3
 800236c:	46a1      	mov	r9, r4
 800236e:	eb18 0805 	adds.w	r8, r8, r5
 8002372:	eb49 0906 	adc.w	r9, r9, r6
 8002376:	f04f 0100 	mov.w	r1, #0
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002382:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002386:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800238a:	4688      	mov	r8, r1
 800238c:	4691      	mov	r9, r2
 800238e:	eb18 0005 	adds.w	r0, r8, r5
 8002392:	eb49 0106 	adc.w	r1, r9, r6
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	461d      	mov	r5, r3
 800239c:	f04f 0600 	mov.w	r6, #0
 80023a0:	196b      	adds	r3, r5, r5
 80023a2:	eb46 0406 	adc.w	r4, r6, r6
 80023a6:	461a      	mov	r2, r3
 80023a8:	4623      	mov	r3, r4
 80023aa:	f7fd ff69 	bl	8000280 <__aeabi_uldivmod>
 80023ae:	4603      	mov	r3, r0
 80023b0:	460c      	mov	r4, r1
 80023b2:	461a      	mov	r2, r3
 80023b4:	4ba5      	ldr	r3, [pc, #660]	; (800264c <UART_SetConfig+0x384>)
 80023b6:	fba3 2302 	umull	r2, r3, r3, r2
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	461d      	mov	r5, r3
 80023c4:	f04f 0600 	mov.w	r6, #0
 80023c8:	46a9      	mov	r9, r5
 80023ca:	46b2      	mov	sl, r6
 80023cc:	eb19 0309 	adds.w	r3, r9, r9
 80023d0:	eb4a 040a 	adc.w	r4, sl, sl
 80023d4:	4699      	mov	r9, r3
 80023d6:	46a2      	mov	sl, r4
 80023d8:	eb19 0905 	adds.w	r9, r9, r5
 80023dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80023e0:	f04f 0100 	mov.w	r1, #0
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023f4:	4689      	mov	r9, r1
 80023f6:	4692      	mov	sl, r2
 80023f8:	eb19 0005 	adds.w	r0, r9, r5
 80023fc:	eb4a 0106 	adc.w	r1, sl, r6
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	461d      	mov	r5, r3
 8002406:	f04f 0600 	mov.w	r6, #0
 800240a:	196b      	adds	r3, r5, r5
 800240c:	eb46 0406 	adc.w	r4, r6, r6
 8002410:	461a      	mov	r2, r3
 8002412:	4623      	mov	r3, r4
 8002414:	f7fd ff34 	bl	8000280 <__aeabi_uldivmod>
 8002418:	4603      	mov	r3, r0
 800241a:	460c      	mov	r4, r1
 800241c:	461a      	mov	r2, r3
 800241e:	4b8b      	ldr	r3, [pc, #556]	; (800264c <UART_SetConfig+0x384>)
 8002420:	fba3 1302 	umull	r1, r3, r3, r2
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	2164      	movs	r1, #100	; 0x64
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	3332      	adds	r3, #50	; 0x32
 8002432:	4a86      	ldr	r2, [pc, #536]	; (800264c <UART_SetConfig+0x384>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002440:	4498      	add	r8, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	461d      	mov	r5, r3
 8002446:	f04f 0600 	mov.w	r6, #0
 800244a:	46a9      	mov	r9, r5
 800244c:	46b2      	mov	sl, r6
 800244e:	eb19 0309 	adds.w	r3, r9, r9
 8002452:	eb4a 040a 	adc.w	r4, sl, sl
 8002456:	4699      	mov	r9, r3
 8002458:	46a2      	mov	sl, r4
 800245a:	eb19 0905 	adds.w	r9, r9, r5
 800245e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002462:	f04f 0100 	mov.w	r1, #0
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800246e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002472:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002476:	4689      	mov	r9, r1
 8002478:	4692      	mov	sl, r2
 800247a:	eb19 0005 	adds.w	r0, r9, r5
 800247e:	eb4a 0106 	adc.w	r1, sl, r6
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	461d      	mov	r5, r3
 8002488:	f04f 0600 	mov.w	r6, #0
 800248c:	196b      	adds	r3, r5, r5
 800248e:	eb46 0406 	adc.w	r4, r6, r6
 8002492:	461a      	mov	r2, r3
 8002494:	4623      	mov	r3, r4
 8002496:	f7fd fef3 	bl	8000280 <__aeabi_uldivmod>
 800249a:	4603      	mov	r3, r0
 800249c:	460c      	mov	r4, r1
 800249e:	461a      	mov	r2, r3
 80024a0:	4b6a      	ldr	r3, [pc, #424]	; (800264c <UART_SetConfig+0x384>)
 80024a2:	fba3 1302 	umull	r1, r3, r3, r2
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	2164      	movs	r1, #100	; 0x64
 80024aa:	fb01 f303 	mul.w	r3, r1, r3
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	3332      	adds	r3, #50	; 0x32
 80024b4:	4a65      	ldr	r2, [pc, #404]	; (800264c <UART_SetConfig+0x384>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	f003 0207 	and.w	r2, r3, #7
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4442      	add	r2, r8
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	e26f      	b.n	80029aa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024ca:	f7ff fb35 	bl	8001b38 <HAL_RCC_GetPCLK1Freq>
 80024ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	461d      	mov	r5, r3
 80024d4:	f04f 0600 	mov.w	r6, #0
 80024d8:	46a8      	mov	r8, r5
 80024da:	46b1      	mov	r9, r6
 80024dc:	eb18 0308 	adds.w	r3, r8, r8
 80024e0:	eb49 0409 	adc.w	r4, r9, r9
 80024e4:	4698      	mov	r8, r3
 80024e6:	46a1      	mov	r9, r4
 80024e8:	eb18 0805 	adds.w	r8, r8, r5
 80024ec:	eb49 0906 	adc.w	r9, r9, r6
 80024f0:	f04f 0100 	mov.w	r1, #0
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80024fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002500:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002504:	4688      	mov	r8, r1
 8002506:	4691      	mov	r9, r2
 8002508:	eb18 0005 	adds.w	r0, r8, r5
 800250c:	eb49 0106 	adc.w	r1, r9, r6
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	461d      	mov	r5, r3
 8002516:	f04f 0600 	mov.w	r6, #0
 800251a:	196b      	adds	r3, r5, r5
 800251c:	eb46 0406 	adc.w	r4, r6, r6
 8002520:	461a      	mov	r2, r3
 8002522:	4623      	mov	r3, r4
 8002524:	f7fd feac 	bl	8000280 <__aeabi_uldivmod>
 8002528:	4603      	mov	r3, r0
 800252a:	460c      	mov	r4, r1
 800252c:	461a      	mov	r2, r3
 800252e:	4b47      	ldr	r3, [pc, #284]	; (800264c <UART_SetConfig+0x384>)
 8002530:	fba3 2302 	umull	r2, r3, r3, r2
 8002534:	095b      	lsrs	r3, r3, #5
 8002536:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	461d      	mov	r5, r3
 800253e:	f04f 0600 	mov.w	r6, #0
 8002542:	46a9      	mov	r9, r5
 8002544:	46b2      	mov	sl, r6
 8002546:	eb19 0309 	adds.w	r3, r9, r9
 800254a:	eb4a 040a 	adc.w	r4, sl, sl
 800254e:	4699      	mov	r9, r3
 8002550:	46a2      	mov	sl, r4
 8002552:	eb19 0905 	adds.w	r9, r9, r5
 8002556:	eb4a 0a06 	adc.w	sl, sl, r6
 800255a:	f04f 0100 	mov.w	r1, #0
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002566:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800256a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800256e:	4689      	mov	r9, r1
 8002570:	4692      	mov	sl, r2
 8002572:	eb19 0005 	adds.w	r0, r9, r5
 8002576:	eb4a 0106 	adc.w	r1, sl, r6
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	461d      	mov	r5, r3
 8002580:	f04f 0600 	mov.w	r6, #0
 8002584:	196b      	adds	r3, r5, r5
 8002586:	eb46 0406 	adc.w	r4, r6, r6
 800258a:	461a      	mov	r2, r3
 800258c:	4623      	mov	r3, r4
 800258e:	f7fd fe77 	bl	8000280 <__aeabi_uldivmod>
 8002592:	4603      	mov	r3, r0
 8002594:	460c      	mov	r4, r1
 8002596:	461a      	mov	r2, r3
 8002598:	4b2c      	ldr	r3, [pc, #176]	; (800264c <UART_SetConfig+0x384>)
 800259a:	fba3 1302 	umull	r1, r3, r3, r2
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	2164      	movs	r1, #100	; 0x64
 80025a2:	fb01 f303 	mul.w	r3, r1, r3
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	3332      	adds	r3, #50	; 0x32
 80025ac:	4a27      	ldr	r2, [pc, #156]	; (800264c <UART_SetConfig+0x384>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025ba:	4498      	add	r8, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	461d      	mov	r5, r3
 80025c0:	f04f 0600 	mov.w	r6, #0
 80025c4:	46a9      	mov	r9, r5
 80025c6:	46b2      	mov	sl, r6
 80025c8:	eb19 0309 	adds.w	r3, r9, r9
 80025cc:	eb4a 040a 	adc.w	r4, sl, sl
 80025d0:	4699      	mov	r9, r3
 80025d2:	46a2      	mov	sl, r4
 80025d4:	eb19 0905 	adds.w	r9, r9, r5
 80025d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80025dc:	f04f 0100 	mov.w	r1, #0
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025f0:	4689      	mov	r9, r1
 80025f2:	4692      	mov	sl, r2
 80025f4:	eb19 0005 	adds.w	r0, r9, r5
 80025f8:	eb4a 0106 	adc.w	r1, sl, r6
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	461d      	mov	r5, r3
 8002602:	f04f 0600 	mov.w	r6, #0
 8002606:	196b      	adds	r3, r5, r5
 8002608:	eb46 0406 	adc.w	r4, r6, r6
 800260c:	461a      	mov	r2, r3
 800260e:	4623      	mov	r3, r4
 8002610:	f7fd fe36 	bl	8000280 <__aeabi_uldivmod>
 8002614:	4603      	mov	r3, r0
 8002616:	460c      	mov	r4, r1
 8002618:	461a      	mov	r2, r3
 800261a:	4b0c      	ldr	r3, [pc, #48]	; (800264c <UART_SetConfig+0x384>)
 800261c:	fba3 1302 	umull	r1, r3, r3, r2
 8002620:	095b      	lsrs	r3, r3, #5
 8002622:	2164      	movs	r1, #100	; 0x64
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	3332      	adds	r3, #50	; 0x32
 800262e:	4a07      	ldr	r2, [pc, #28]	; (800264c <UART_SetConfig+0x384>)
 8002630:	fba2 2303 	umull	r2, r3, r2, r3
 8002634:	095b      	lsrs	r3, r3, #5
 8002636:	f003 0207 	and.w	r2, r3, #7
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4442      	add	r2, r8
 8002640:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002642:	e1b2      	b.n	80029aa <UART_SetConfig+0x6e2>
 8002644:	40011000 	.word	0x40011000
 8002648:	40011400 	.word	0x40011400
 800264c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4ad7      	ldr	r2, [pc, #860]	; (80029b4 <UART_SetConfig+0x6ec>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d005      	beq.n	8002666 <UART_SetConfig+0x39e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4ad6      	ldr	r2, [pc, #856]	; (80029b8 <UART_SetConfig+0x6f0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	f040 80d1 	bne.w	8002808 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002666:	f7ff fa7b 	bl	8001b60 <HAL_RCC_GetPCLK2Freq>
 800266a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	469a      	mov	sl, r3
 8002670:	f04f 0b00 	mov.w	fp, #0
 8002674:	46d0      	mov	r8, sl
 8002676:	46d9      	mov	r9, fp
 8002678:	eb18 0308 	adds.w	r3, r8, r8
 800267c:	eb49 0409 	adc.w	r4, r9, r9
 8002680:	4698      	mov	r8, r3
 8002682:	46a1      	mov	r9, r4
 8002684:	eb18 080a 	adds.w	r8, r8, sl
 8002688:	eb49 090b 	adc.w	r9, r9, fp
 800268c:	f04f 0100 	mov.w	r1, #0
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002698:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800269c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80026a0:	4688      	mov	r8, r1
 80026a2:	4691      	mov	r9, r2
 80026a4:	eb1a 0508 	adds.w	r5, sl, r8
 80026a8:	eb4b 0609 	adc.w	r6, fp, r9
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	4619      	mov	r1, r3
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	f04f 0400 	mov.w	r4, #0
 80026be:	0094      	lsls	r4, r2, #2
 80026c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026c4:	008b      	lsls	r3, r1, #2
 80026c6:	461a      	mov	r2, r3
 80026c8:	4623      	mov	r3, r4
 80026ca:	4628      	mov	r0, r5
 80026cc:	4631      	mov	r1, r6
 80026ce:	f7fd fdd7 	bl	8000280 <__aeabi_uldivmod>
 80026d2:	4603      	mov	r3, r0
 80026d4:	460c      	mov	r4, r1
 80026d6:	461a      	mov	r2, r3
 80026d8:	4bb8      	ldr	r3, [pc, #736]	; (80029bc <UART_SetConfig+0x6f4>)
 80026da:	fba3 2302 	umull	r2, r3, r3, r2
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	469b      	mov	fp, r3
 80026e8:	f04f 0c00 	mov.w	ip, #0
 80026ec:	46d9      	mov	r9, fp
 80026ee:	46e2      	mov	sl, ip
 80026f0:	eb19 0309 	adds.w	r3, r9, r9
 80026f4:	eb4a 040a 	adc.w	r4, sl, sl
 80026f8:	4699      	mov	r9, r3
 80026fa:	46a2      	mov	sl, r4
 80026fc:	eb19 090b 	adds.w	r9, r9, fp
 8002700:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002704:	f04f 0100 	mov.w	r1, #0
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002710:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002714:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002718:	4689      	mov	r9, r1
 800271a:	4692      	mov	sl, r2
 800271c:	eb1b 0509 	adds.w	r5, fp, r9
 8002720:	eb4c 060a 	adc.w	r6, ip, sl
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	4619      	mov	r1, r3
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	f04f 0400 	mov.w	r4, #0
 8002736:	0094      	lsls	r4, r2, #2
 8002738:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800273c:	008b      	lsls	r3, r1, #2
 800273e:	461a      	mov	r2, r3
 8002740:	4623      	mov	r3, r4
 8002742:	4628      	mov	r0, r5
 8002744:	4631      	mov	r1, r6
 8002746:	f7fd fd9b 	bl	8000280 <__aeabi_uldivmod>
 800274a:	4603      	mov	r3, r0
 800274c:	460c      	mov	r4, r1
 800274e:	461a      	mov	r2, r3
 8002750:	4b9a      	ldr	r3, [pc, #616]	; (80029bc <UART_SetConfig+0x6f4>)
 8002752:	fba3 1302 	umull	r1, r3, r3, r2
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	2164      	movs	r1, #100	; 0x64
 800275a:	fb01 f303 	mul.w	r3, r1, r3
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	3332      	adds	r3, #50	; 0x32
 8002764:	4a95      	ldr	r2, [pc, #596]	; (80029bc <UART_SetConfig+0x6f4>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002770:	4498      	add	r8, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	469b      	mov	fp, r3
 8002776:	f04f 0c00 	mov.w	ip, #0
 800277a:	46d9      	mov	r9, fp
 800277c:	46e2      	mov	sl, ip
 800277e:	eb19 0309 	adds.w	r3, r9, r9
 8002782:	eb4a 040a 	adc.w	r4, sl, sl
 8002786:	4699      	mov	r9, r3
 8002788:	46a2      	mov	sl, r4
 800278a:	eb19 090b 	adds.w	r9, r9, fp
 800278e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002792:	f04f 0100 	mov.w	r1, #0
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800279e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027a6:	4689      	mov	r9, r1
 80027a8:	4692      	mov	sl, r2
 80027aa:	eb1b 0509 	adds.w	r5, fp, r9
 80027ae:	eb4c 060a 	adc.w	r6, ip, sl
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4619      	mov	r1, r3
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	f04f 0400 	mov.w	r4, #0
 80027c4:	0094      	lsls	r4, r2, #2
 80027c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027ca:	008b      	lsls	r3, r1, #2
 80027cc:	461a      	mov	r2, r3
 80027ce:	4623      	mov	r3, r4
 80027d0:	4628      	mov	r0, r5
 80027d2:	4631      	mov	r1, r6
 80027d4:	f7fd fd54 	bl	8000280 <__aeabi_uldivmod>
 80027d8:	4603      	mov	r3, r0
 80027da:	460c      	mov	r4, r1
 80027dc:	461a      	mov	r2, r3
 80027de:	4b77      	ldr	r3, [pc, #476]	; (80029bc <UART_SetConfig+0x6f4>)
 80027e0:	fba3 1302 	umull	r1, r3, r3, r2
 80027e4:	095b      	lsrs	r3, r3, #5
 80027e6:	2164      	movs	r1, #100	; 0x64
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	3332      	adds	r3, #50	; 0x32
 80027f2:	4a72      	ldr	r2, [pc, #456]	; (80029bc <UART_SetConfig+0x6f4>)
 80027f4:	fba2 2303 	umull	r2, r3, r2, r3
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	f003 020f 	and.w	r2, r3, #15
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4442      	add	r2, r8
 8002804:	609a      	str	r2, [r3, #8]
 8002806:	e0d0      	b.n	80029aa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002808:	f7ff f996 	bl	8001b38 <HAL_RCC_GetPCLK1Freq>
 800280c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	469a      	mov	sl, r3
 8002812:	f04f 0b00 	mov.w	fp, #0
 8002816:	46d0      	mov	r8, sl
 8002818:	46d9      	mov	r9, fp
 800281a:	eb18 0308 	adds.w	r3, r8, r8
 800281e:	eb49 0409 	adc.w	r4, r9, r9
 8002822:	4698      	mov	r8, r3
 8002824:	46a1      	mov	r9, r4
 8002826:	eb18 080a 	adds.w	r8, r8, sl
 800282a:	eb49 090b 	adc.w	r9, r9, fp
 800282e:	f04f 0100 	mov.w	r1, #0
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800283a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800283e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002842:	4688      	mov	r8, r1
 8002844:	4691      	mov	r9, r2
 8002846:	eb1a 0508 	adds.w	r5, sl, r8
 800284a:	eb4b 0609 	adc.w	r6, fp, r9
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4619      	mov	r1, r3
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	f04f 0400 	mov.w	r4, #0
 8002860:	0094      	lsls	r4, r2, #2
 8002862:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002866:	008b      	lsls	r3, r1, #2
 8002868:	461a      	mov	r2, r3
 800286a:	4623      	mov	r3, r4
 800286c:	4628      	mov	r0, r5
 800286e:	4631      	mov	r1, r6
 8002870:	f7fd fd06 	bl	8000280 <__aeabi_uldivmod>
 8002874:	4603      	mov	r3, r0
 8002876:	460c      	mov	r4, r1
 8002878:	461a      	mov	r2, r3
 800287a:	4b50      	ldr	r3, [pc, #320]	; (80029bc <UART_SetConfig+0x6f4>)
 800287c:	fba3 2302 	umull	r2, r3, r3, r2
 8002880:	095b      	lsrs	r3, r3, #5
 8002882:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	469b      	mov	fp, r3
 800288a:	f04f 0c00 	mov.w	ip, #0
 800288e:	46d9      	mov	r9, fp
 8002890:	46e2      	mov	sl, ip
 8002892:	eb19 0309 	adds.w	r3, r9, r9
 8002896:	eb4a 040a 	adc.w	r4, sl, sl
 800289a:	4699      	mov	r9, r3
 800289c:	46a2      	mov	sl, r4
 800289e:	eb19 090b 	adds.w	r9, r9, fp
 80028a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80028a6:	f04f 0100 	mov.w	r1, #0
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028ba:	4689      	mov	r9, r1
 80028bc:	4692      	mov	sl, r2
 80028be:	eb1b 0509 	adds.w	r5, fp, r9
 80028c2:	eb4c 060a 	adc.w	r6, ip, sl
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4619      	mov	r1, r3
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	f04f 0400 	mov.w	r4, #0
 80028d8:	0094      	lsls	r4, r2, #2
 80028da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028de:	008b      	lsls	r3, r1, #2
 80028e0:	461a      	mov	r2, r3
 80028e2:	4623      	mov	r3, r4
 80028e4:	4628      	mov	r0, r5
 80028e6:	4631      	mov	r1, r6
 80028e8:	f7fd fcca 	bl	8000280 <__aeabi_uldivmod>
 80028ec:	4603      	mov	r3, r0
 80028ee:	460c      	mov	r4, r1
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b32      	ldr	r3, [pc, #200]	; (80029bc <UART_SetConfig+0x6f4>)
 80028f4:	fba3 1302 	umull	r1, r3, r3, r2
 80028f8:	095b      	lsrs	r3, r3, #5
 80028fa:	2164      	movs	r1, #100	; 0x64
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	3332      	adds	r3, #50	; 0x32
 8002906:	4a2d      	ldr	r2, [pc, #180]	; (80029bc <UART_SetConfig+0x6f4>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	095b      	lsrs	r3, r3, #5
 800290e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002912:	4498      	add	r8, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	469b      	mov	fp, r3
 8002918:	f04f 0c00 	mov.w	ip, #0
 800291c:	46d9      	mov	r9, fp
 800291e:	46e2      	mov	sl, ip
 8002920:	eb19 0309 	adds.w	r3, r9, r9
 8002924:	eb4a 040a 	adc.w	r4, sl, sl
 8002928:	4699      	mov	r9, r3
 800292a:	46a2      	mov	sl, r4
 800292c:	eb19 090b 	adds.w	r9, r9, fp
 8002930:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002934:	f04f 0100 	mov.w	r1, #0
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002940:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002944:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002948:	4689      	mov	r9, r1
 800294a:	4692      	mov	sl, r2
 800294c:	eb1b 0509 	adds.w	r5, fp, r9
 8002950:	eb4c 060a 	adc.w	r6, ip, sl
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4619      	mov	r1, r3
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	f04f 0400 	mov.w	r4, #0
 8002966:	0094      	lsls	r4, r2, #2
 8002968:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800296c:	008b      	lsls	r3, r1, #2
 800296e:	461a      	mov	r2, r3
 8002970:	4623      	mov	r3, r4
 8002972:	4628      	mov	r0, r5
 8002974:	4631      	mov	r1, r6
 8002976:	f7fd fc83 	bl	8000280 <__aeabi_uldivmod>
 800297a:	4603      	mov	r3, r0
 800297c:	460c      	mov	r4, r1
 800297e:	461a      	mov	r2, r3
 8002980:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <UART_SetConfig+0x6f4>)
 8002982:	fba3 1302 	umull	r1, r3, r3, r2
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	2164      	movs	r1, #100	; 0x64
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	3332      	adds	r3, #50	; 0x32
 8002994:	4a09      	ldr	r2, [pc, #36]	; (80029bc <UART_SetConfig+0x6f4>)
 8002996:	fba2 2303 	umull	r2, r3, r2, r3
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	f003 020f 	and.w	r2, r3, #15
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4442      	add	r2, r8
 80029a6:	609a      	str	r2, [r3, #8]
}
 80029a8:	e7ff      	b.n	80029aa <UART_SetConfig+0x6e2>
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029b4:	40011000 	.word	0x40011000
 80029b8:	40011400 	.word	0x40011400
 80029bc:	51eb851f 	.word	0x51eb851f

080029c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80029ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029d2:	2b84      	cmp	r3, #132	; 0x84
 80029d4:	d005      	beq.n	80029e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80029d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4413      	add	r3, r2
 80029de:	3303      	adds	r3, #3
 80029e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80029e2:	68fb      	ldr	r3, [r7, #12]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80029f4:	f000 ffcc 	bl	8003990 <vTaskStartScheduler>
  
  return osOK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	bd80      	pop	{r7, pc}

080029fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80029fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a00:	b089      	sub	sp, #36	; 0x24
 8002a02:	af04      	add	r7, sp, #16
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d020      	beq.n	8002a52 <osThreadCreate+0x54>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d01c      	beq.n	8002a52 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685c      	ldr	r4, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681d      	ldr	r5, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691e      	ldr	r6, [r3, #16]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff ffc8 	bl	80029c0 <makeFreeRtosPriority>
 8002a30:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a3a:	9202      	str	r2, [sp, #8]
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	9100      	str	r1, [sp, #0]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	4632      	mov	r2, r6
 8002a44:	4629      	mov	r1, r5
 8002a46:	4620      	mov	r0, r4
 8002a48:	f000 fdde 	bl	8003608 <xTaskCreateStatic>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	e01c      	b.n	8002a8c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685c      	ldr	r4, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a5e:	b29e      	uxth	r6, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff ffaa 	bl	80029c0 <makeFreeRtosPriority>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	f107 030c 	add.w	r3, r7, #12
 8002a72:	9301      	str	r3, [sp, #4]
 8002a74:	9200      	str	r2, [sp, #0]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	4632      	mov	r2, r6
 8002a7a:	4629      	mov	r1, r5
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	f000 fe1d 	bl	80036bc <xTaskCreate>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d001      	beq.n	8002a8c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e000      	b.n	8002a8e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002a98 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d013      	beq.n	8002ad6 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8002aae:	7afb      	ldrb	r3, [r7, #11]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <osTimerCreate+0x20>
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	e000      	b.n	8002aba <osTimerCreate+0x22>
 8002ab8:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8002ac2:	9201      	str	r2, [sp, #4]
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	460a      	mov	r2, r1
 8002aca:	2101      	movs	r1, #1
 8002acc:	480b      	ldr	r0, [pc, #44]	; (8002afc <osTimerCreate+0x64>)
 8002ace:	f001 fd04 	bl	80044da <xTimerCreateStatic>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	e00e      	b.n	8002af4 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8002ad6:	7afb      	ldrb	r3, [r7, #11]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <osTimerCreate+0x48>
 8002adc:	2201      	movs	r2, #1
 8002ade:	e000      	b.n	8002ae2 <osTimerCreate+0x4a>
 8002ae0:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2101      	movs	r1, #1
 8002aec:	4803      	ldr	r0, [pc, #12]	; (8002afc <osTimerCreate+0x64>)
 8002aee:	f001 fcd3 	bl	8004498 <xTimerCreate>
 8002af2:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	08005d1c 	.word	0x08005d1c

08002b00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f103 0208 	add.w	r2, r3, #8
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f04f 32ff 	mov.w	r2, #4294967295
 8002b18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f103 0208 	add.w	r2, r3, #8
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f103 0208 	add.w	r2, r3, #8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b085      	sub	sp, #20
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	601a      	str	r2, [r3, #0]
}
 8002b96:	bf00      	nop
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b085      	sub	sp, #20
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb8:	d103      	bne.n	8002bc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	e00c      	b.n	8002bdc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3308      	adds	r3, #8
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	e002      	b.n	8002bd0 <vListInsert+0x2e>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d2f6      	bcs.n	8002bca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	601a      	str	r2, [r3, #0]
}
 8002c08:	bf00      	nop
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6892      	ldr	r2, [r2, #8]
 8002c2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6852      	ldr	r2, [r2, #4]
 8002c34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d103      	bne.n	8002c48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	1e5a      	subs	r2, r3, #1
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d109      	bne.n	8002c90 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c80:	f383 8811 	msr	BASEPRI, r3
 8002c84:	f3bf 8f6f 	isb	sy
 8002c88:	f3bf 8f4f 	dsb	sy
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	e7fe      	b.n	8002c8e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002c90:	f002 f8a4 	bl	8004ddc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9c:	68f9      	ldr	r1, [r7, #12]
 8002c9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	441a      	add	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	68f9      	ldr	r1, [r7, #12]
 8002cc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	441a      	add	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	22ff      	movs	r2, #255	; 0xff
 8002cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	22ff      	movs	r2, #255	; 0xff
 8002cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d114      	bne.n	8002d10 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d01a      	beq.n	8002d24 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	3310      	adds	r3, #16
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f001 f8ca 	bl	8003e8c <xTaskRemoveFromEventList>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d012      	beq.n	8002d24 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002cfe:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <xQueueGenericReset+0xcc>)
 8002d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	f3bf 8f4f 	dsb	sy
 8002d0a:	f3bf 8f6f 	isb	sy
 8002d0e:	e009      	b.n	8002d24 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	3310      	adds	r3, #16
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fef3 	bl	8002b00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	3324      	adds	r3, #36	; 0x24
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff feee 	bl	8002b00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d24:	f002 f888 	bl	8004e38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d28:	2301      	movs	r3, #1
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	e000ed04 	.word	0xe000ed04

08002d38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08e      	sub	sp, #56	; 0x38
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d109      	bne.n	8002d60 <xQueueGenericCreateStatic+0x28>
 8002d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d5e:	e7fe      	b.n	8002d5e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <xQueueGenericCreateStatic+0x42>
 8002d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6a:	f383 8811 	msr	BASEPRI, r3
 8002d6e:	f3bf 8f6f 	isb	sy
 8002d72:	f3bf 8f4f 	dsb	sy
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
 8002d78:	e7fe      	b.n	8002d78 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <xQueueGenericCreateStatic+0x4e>
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <xQueueGenericCreateStatic+0x52>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <xQueueGenericCreateStatic+0x54>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d109      	bne.n	8002da4 <xQueueGenericCreateStatic+0x6c>
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	623b      	str	r3, [r7, #32]
 8002da2:	e7fe      	b.n	8002da2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d102      	bne.n	8002db0 <xQueueGenericCreateStatic+0x78>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <xQueueGenericCreateStatic+0x7c>
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <xQueueGenericCreateStatic+0x7e>
 8002db4:	2300      	movs	r3, #0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <xQueueGenericCreateStatic+0x96>
 8002dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dbe:	f383 8811 	msr	BASEPRI, r3
 8002dc2:	f3bf 8f6f 	isb	sy
 8002dc6:	f3bf 8f4f 	dsb	sy
 8002dca:	61fb      	str	r3, [r7, #28]
 8002dcc:	e7fe      	b.n	8002dcc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002dce:	2348      	movs	r3, #72	; 0x48
 8002dd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2b48      	cmp	r3, #72	; 0x48
 8002dd6:	d009      	beq.n	8002dec <xQueueGenericCreateStatic+0xb4>
 8002dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	e7fe      	b.n	8002dea <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002dec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00d      	beq.n	8002e14 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e00:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f805 	bl	8002e1e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3730      	adds	r7, #48	; 0x30
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b084      	sub	sp, #16
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d103      	bne.n	8002e3a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	e002      	b.n	8002e40 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	69b8      	ldr	r0, [r7, #24]
 8002e50:	f7ff ff0a 	bl	8002c68 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08e      	sub	sp, #56	; 0x38
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d109      	bne.n	8002e8c <xQueueGenericSend+0x30>
 8002e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e8a:	e7fe      	b.n	8002e8a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d103      	bne.n	8002e9a <xQueueGenericSend+0x3e>
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <xQueueGenericSend+0x42>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <xQueueGenericSend+0x44>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d109      	bne.n	8002eb8 <xQueueGenericSend+0x5c>
 8002ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea8:	f383 8811 	msr	BASEPRI, r3
 8002eac:	f3bf 8f6f 	isb	sy
 8002eb0:	f3bf 8f4f 	dsb	sy
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb6:	e7fe      	b.n	8002eb6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d103      	bne.n	8002ec6 <xQueueGenericSend+0x6a>
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <xQueueGenericSend+0x6e>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <xQueueGenericSend+0x70>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <xQueueGenericSend+0x88>
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	623b      	str	r3, [r7, #32]
 8002ee2:	e7fe      	b.n	8002ee2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ee4:	f001 f988 	bl	80041f8 <xTaskGetSchedulerState>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d102      	bne.n	8002ef4 <xQueueGenericSend+0x98>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <xQueueGenericSend+0x9c>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <xQueueGenericSend+0x9e>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <xQueueGenericSend+0xb6>
 8002efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	61fb      	str	r3, [r7, #28]
 8002f10:	e7fe      	b.n	8002f10 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f12:	f001 ff63 	bl	8004ddc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d302      	bcc.n	8002f28 <xQueueGenericSend+0xcc>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d129      	bne.n	8002f7c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	68b9      	ldr	r1, [r7, #8]
 8002f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f2e:	f000 f9ff 	bl	8003330 <prvCopyDataToQueue>
 8002f32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d010      	beq.n	8002f5e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3e:	3324      	adds	r3, #36	; 0x24
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 ffa3 	bl	8003e8c <xTaskRemoveFromEventList>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f4c:	4b3f      	ldr	r3, [pc, #252]	; (800304c <xQueueGenericSend+0x1f0>)
 8002f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	e00a      	b.n	8002f74 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d007      	beq.n	8002f74 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f64:	4b39      	ldr	r3, [pc, #228]	; (800304c <xQueueGenericSend+0x1f0>)
 8002f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f74:	f001 ff60 	bl	8004e38 <vPortExitCritical>
				return pdPASS;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e063      	b.n	8003044 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d103      	bne.n	8002f8a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f82:	f001 ff59 	bl	8004e38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	e05c      	b.n	8003044 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d106      	bne.n	8002f9e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f90:	f107 0314 	add.w	r3, r7, #20
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 ffdb 	bl	8003f50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f9e:	f001 ff4b 	bl	8004e38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fa2:	f000 fd59 	bl	8003a58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fa6:	f001 ff19 	bl	8004ddc <vPortEnterCritical>
 8002faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fb0:	b25b      	sxtb	r3, r3
 8002fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb6:	d103      	bne.n	8002fc0 <xQueueGenericSend+0x164>
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fc6:	b25b      	sxtb	r3, r3
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fcc:	d103      	bne.n	8002fd6 <xQueueGenericSend+0x17a>
 8002fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fd6:	f001 ff2f 	bl	8004e38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fda:	1d3a      	adds	r2, r7, #4
 8002fdc:	f107 0314 	add.w	r3, r7, #20
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 ffca 	bl	8003f7c <xTaskCheckForTimeOut>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d124      	bne.n	8003038 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002fee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ff0:	f000 fa96 	bl	8003520 <prvIsQueueFull>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d018      	beq.n	800302c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffc:	3310      	adds	r3, #16
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	4611      	mov	r1, r2
 8003002:	4618      	mov	r0, r3
 8003004:	f000 fef4 	bl	8003df0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800300a:	f000 fa21 	bl	8003450 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800300e:	f000 fd31 	bl	8003a74 <xTaskResumeAll>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	f47f af7c 	bne.w	8002f12 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800301a:	4b0c      	ldr	r3, [pc, #48]	; (800304c <xQueueGenericSend+0x1f0>)
 800301c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	f3bf 8f4f 	dsb	sy
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	e772      	b.n	8002f12 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800302c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800302e:	f000 fa0f 	bl	8003450 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003032:	f000 fd1f 	bl	8003a74 <xTaskResumeAll>
 8003036:	e76c      	b.n	8002f12 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800303a:	f000 fa09 	bl	8003450 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800303e:	f000 fd19 	bl	8003a74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003042:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003044:	4618      	mov	r0, r3
 8003046:	3738      	adds	r7, #56	; 0x38
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	e000ed04 	.word	0xe000ed04

08003050 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08e      	sub	sp, #56	; 0x38
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003064:	2b00      	cmp	r3, #0
 8003066:	d109      	bne.n	800307c <xQueueGenericSendFromISR+0x2c>
 8003068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
 800307a:	e7fe      	b.n	800307a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d103      	bne.n	800308a <xQueueGenericSendFromISR+0x3a>
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <xQueueGenericSendFromISR+0x3e>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <xQueueGenericSendFromISR+0x40>
 800308e:	2300      	movs	r3, #0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d109      	bne.n	80030a8 <xQueueGenericSendFromISR+0x58>
 8003094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	623b      	str	r3, [r7, #32]
 80030a6:	e7fe      	b.n	80030a6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d103      	bne.n	80030b6 <xQueueGenericSendFromISR+0x66>
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <xQueueGenericSendFromISR+0x6a>
 80030b6:	2301      	movs	r3, #1
 80030b8:	e000      	b.n	80030bc <xQueueGenericSendFromISR+0x6c>
 80030ba:	2300      	movs	r3, #0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d109      	bne.n	80030d4 <xQueueGenericSendFromISR+0x84>
 80030c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c4:	f383 8811 	msr	BASEPRI, r3
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	e7fe      	b.n	80030d2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030d4:	f001 ff5e 	bl	8004f94 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80030d8:	f3ef 8211 	mrs	r2, BASEPRI
 80030dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	61ba      	str	r2, [r7, #24]
 80030ee:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80030f0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d302      	bcc.n	8003106 <xQueueGenericSendFromISR+0xb6>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d12c      	bne.n	8003160 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800310c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	68b9      	ldr	r1, [r7, #8]
 8003114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003116:	f000 f90b 	bl	8003330 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800311a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003122:	d112      	bne.n	800314a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	2b00      	cmp	r3, #0
 800312a:	d016      	beq.n	800315a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800312c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312e:	3324      	adds	r3, #36	; 0x24
 8003130:	4618      	mov	r0, r3
 8003132:	f000 feab 	bl	8003e8c <xTaskRemoveFromEventList>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00e      	beq.n	800315a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00b      	beq.n	800315a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	e007      	b.n	800315a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800314a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800314e:	3301      	adds	r3, #1
 8003150:	b2db      	uxtb	r3, r3
 8003152:	b25a      	sxtb	r2, r3
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800315a:	2301      	movs	r3, #1
 800315c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800315e:	e001      	b.n	8003164 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003160:	2300      	movs	r3, #0
 8003162:	637b      	str	r3, [r7, #52]	; 0x34
 8003164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003166:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800316e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003170:	4618      	mov	r0, r3
 8003172:	3738      	adds	r7, #56	; 0x38
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08c      	sub	sp, #48	; 0x30
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003184:	2300      	movs	r3, #0
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800318c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <xQueueReceive+0x2e>
	__asm volatile
 8003192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	623b      	str	r3, [r7, #32]
 80031a4:	e7fe      	b.n	80031a4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d103      	bne.n	80031b4 <xQueueReceive+0x3c>
 80031ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <xQueueReceive+0x40>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <xQueueReceive+0x42>
 80031b8:	2300      	movs	r3, #0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <xQueueReceive+0x5a>
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	61fb      	str	r3, [r7, #28]
 80031d0:	e7fe      	b.n	80031d0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031d2:	f001 f811 	bl	80041f8 <xTaskGetSchedulerState>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d102      	bne.n	80031e2 <xQueueReceive+0x6a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <xQueueReceive+0x6e>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <xQueueReceive+0x70>
 80031e6:	2300      	movs	r3, #0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <xQueueReceive+0x88>
 80031ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f0:	f383 8811 	msr	BASEPRI, r3
 80031f4:	f3bf 8f6f 	isb	sy
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	61bb      	str	r3, [r7, #24]
 80031fe:	e7fe      	b.n	80031fe <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003200:	f001 fdec 	bl	8004ddc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	2b00      	cmp	r3, #0
 800320e:	d01f      	beq.n	8003250 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003214:	f000 f8f6 	bl	8003404 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	1e5a      	subs	r2, r3, #1
 800321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00f      	beq.n	8003248 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322a:	3310      	adds	r3, #16
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fe2d 	bl	8003e8c <xTaskRemoveFromEventList>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d007      	beq.n	8003248 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003238:	4b3c      	ldr	r3, [pc, #240]	; (800332c <xQueueReceive+0x1b4>)
 800323a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003248:	f001 fdf6 	bl	8004e38 <vPortExitCritical>
				return pdPASS;
 800324c:	2301      	movs	r3, #1
 800324e:	e069      	b.n	8003324 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d103      	bne.n	800325e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003256:	f001 fdef 	bl	8004e38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800325a:	2300      	movs	r3, #0
 800325c:	e062      	b.n	8003324 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800325e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003260:	2b00      	cmp	r3, #0
 8003262:	d106      	bne.n	8003272 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003264:	f107 0310 	add.w	r3, r7, #16
 8003268:	4618      	mov	r0, r3
 800326a:	f000 fe71 	bl	8003f50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800326e:	2301      	movs	r3, #1
 8003270:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003272:	f001 fde1 	bl	8004e38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003276:	f000 fbef 	bl	8003a58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800327a:	f001 fdaf 	bl	8004ddc <vPortEnterCritical>
 800327e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003280:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003284:	b25b      	sxtb	r3, r3
 8003286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328a:	d103      	bne.n	8003294 <xQueueReceive+0x11c>
 800328c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003296:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800329a:	b25b      	sxtb	r3, r3
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a0:	d103      	bne.n	80032aa <xQueueReceive+0x132>
 80032a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032aa:	f001 fdc5 	bl	8004e38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032ae:	1d3a      	adds	r2, r7, #4
 80032b0:	f107 0310 	add.w	r3, r7, #16
 80032b4:	4611      	mov	r1, r2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fe60 	bl	8003f7c <xTaskCheckForTimeOut>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d123      	bne.n	800330a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032c4:	f000 f916 	bl	80034f4 <prvIsQueueEmpty>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d017      	beq.n	80032fe <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d0:	3324      	adds	r3, #36	; 0x24
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fd8a 	bl	8003df0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032de:	f000 f8b7 	bl	8003450 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032e2:	f000 fbc7 	bl	8003a74 <xTaskResumeAll>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d189      	bne.n	8003200 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80032ec:	4b0f      	ldr	r3, [pc, #60]	; (800332c <xQueueReceive+0x1b4>)
 80032ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	e780      	b.n	8003200 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80032fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003300:	f000 f8a6 	bl	8003450 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003304:	f000 fbb6 	bl	8003a74 <xTaskResumeAll>
 8003308:	e77a      	b.n	8003200 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800330a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800330c:	f000 f8a0 	bl	8003450 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003310:	f000 fbb0 	bl	8003a74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003316:	f000 f8ed 	bl	80034f4 <prvIsQueueEmpty>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	f43f af6f 	beq.w	8003200 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003322:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003324:	4618      	mov	r0, r3
 8003326:	3730      	adds	r7, #48	; 0x30
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	e000ed04 	.word	0xe000ed04

08003330 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10d      	bne.n	800336a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d14d      	bne.n	80033f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	4618      	mov	r0, r3
 800335c:	f000 ff6a 	bl	8004234 <xTaskPriorityDisinherit>
 8003360:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	609a      	str	r2, [r3, #8]
 8003368:	e043      	b.n	80033f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d119      	bne.n	80033a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6858      	ldr	r0, [r3, #4]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	461a      	mov	r2, r3
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	f002 f848 	bl	8005410 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	441a      	add	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	429a      	cmp	r2, r3
 8003398:	d32b      	bcc.n	80033f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	e026      	b.n	80033f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	68d8      	ldr	r0, [r3, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	461a      	mov	r2, r3
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	f002 f82e 	bl	8005410 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	425b      	negs	r3, r3
 80033be:	441a      	add	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d207      	bcs.n	80033e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	425b      	negs	r3, r3
 80033da:	441a      	add	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d105      	bne.n	80033f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80033fa:	697b      	ldr	r3, [r7, #20]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	2b00      	cmp	r3, #0
 8003414:	d018      	beq.n	8003448 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	441a      	add	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	429a      	cmp	r2, r3
 800342e:	d303      	bcc.n	8003438 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68d9      	ldr	r1, [r3, #12]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	461a      	mov	r2, r3
 8003442:	6838      	ldr	r0, [r7, #0]
 8003444:	f001 ffe4 	bl	8005410 <memcpy>
	}
}
 8003448:	bf00      	nop
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003458:	f001 fcc0 	bl	8004ddc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003462:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003464:	e011      	b.n	800348a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	2b00      	cmp	r3, #0
 800346c:	d012      	beq.n	8003494 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3324      	adds	r3, #36	; 0x24
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fd0a 	bl	8003e8c <xTaskRemoveFromEventList>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800347e:	f000 fddd 	bl	800403c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	3b01      	subs	r3, #1
 8003486:	b2db      	uxtb	r3, r3
 8003488:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800348a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800348e:	2b00      	cmp	r3, #0
 8003490:	dce9      	bgt.n	8003466 <prvUnlockQueue+0x16>
 8003492:	e000      	b.n	8003496 <prvUnlockQueue+0x46>
					break;
 8003494:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	22ff      	movs	r2, #255	; 0xff
 800349a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800349e:	f001 fccb 	bl	8004e38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034a2:	f001 fc9b 	bl	8004ddc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034ae:	e011      	b.n	80034d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d012      	beq.n	80034de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3310      	adds	r3, #16
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fce5 	bl	8003e8c <xTaskRemoveFromEventList>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034c8:	f000 fdb8 	bl	800403c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034cc:	7bbb      	ldrb	r3, [r7, #14]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	dce9      	bgt.n	80034b0 <prvUnlockQueue+0x60>
 80034dc:	e000      	b.n	80034e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	22ff      	movs	r2, #255	; 0xff
 80034e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80034e8:	f001 fca6 	bl	8004e38 <vPortExitCritical>
}
 80034ec:	bf00      	nop
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034fc:	f001 fc6e 	bl	8004ddc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	2b00      	cmp	r3, #0
 8003506:	d102      	bne.n	800350e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003508:	2301      	movs	r3, #1
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	e001      	b.n	8003512 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003512:	f001 fc91 	bl	8004e38 <vPortExitCritical>

	return xReturn;
 8003516:	68fb      	ldr	r3, [r7, #12]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003528:	f001 fc58 	bl	8004ddc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003534:	429a      	cmp	r2, r3
 8003536:	d102      	bne.n	800353e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003538:	2301      	movs	r3, #1
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	e001      	b.n	8003542 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003542:	f001 fc79 	bl	8004e38 <vPortExitCritical>

	return xReturn;
 8003546:	68fb      	ldr	r3, [r7, #12]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	e014      	b.n	800358a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003560:	4a0e      	ldr	r2, [pc, #56]	; (800359c <vQueueAddToRegistry+0x4c>)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10b      	bne.n	8003584 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800356c:	490b      	ldr	r1, [pc, #44]	; (800359c <vQueueAddToRegistry+0x4c>)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003576:	4a09      	ldr	r2, [pc, #36]	; (800359c <vQueueAddToRegistry+0x4c>)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4413      	add	r3, r2
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003582:	e005      	b.n	8003590 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	3301      	adds	r3, #1
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b07      	cmp	r3, #7
 800358e:	d9e7      	bls.n	8003560 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	200045e0 	.word	0x200045e0

080035a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80035b0:	f001 fc14 	bl	8004ddc <vPortEnterCritical>
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035ba:	b25b      	sxtb	r3, r3
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d103      	bne.n	80035ca <vQueueWaitForMessageRestricted+0x2a>
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035d0:	b25b      	sxtb	r3, r3
 80035d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d6:	d103      	bne.n	80035e0 <vQueueWaitForMessageRestricted+0x40>
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035e0:	f001 fc2a 	bl	8004e38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d106      	bne.n	80035fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	3324      	adds	r3, #36	; 0x24
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fc1f 	bl	8003e38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80035fa:	6978      	ldr	r0, [r7, #20]
 80035fc:	f7ff ff28 	bl	8003450 <prvUnlockQueue>
	}
 8003600:	bf00      	nop
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08e      	sub	sp, #56	; 0x38
 800360c:	af04      	add	r7, sp, #16
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
 8003614:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003618:	2b00      	cmp	r3, #0
 800361a:	d109      	bne.n	8003630 <xTaskCreateStatic+0x28>
 800361c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	623b      	str	r3, [r7, #32]
 800362e:	e7fe      	b.n	800362e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003632:	2b00      	cmp	r3, #0
 8003634:	d109      	bne.n	800364a <xTaskCreateStatic+0x42>
 8003636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	61fb      	str	r3, [r7, #28]
 8003648:	e7fe      	b.n	8003648 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800364a:	2354      	movs	r3, #84	; 0x54
 800364c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	2b54      	cmp	r3, #84	; 0x54
 8003652:	d009      	beq.n	8003668 <xTaskCreateStatic+0x60>
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	e7fe      	b.n	8003666 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003668:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800366a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800366c:	2b00      	cmp	r3, #0
 800366e:	d01e      	beq.n	80036ae <xTaskCreateStatic+0xa6>
 8003670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003672:	2b00      	cmp	r3, #0
 8003674:	d01b      	beq.n	80036ae <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800367e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	2202      	movs	r2, #2
 8003684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003688:	2300      	movs	r3, #0
 800368a:	9303      	str	r3, [sp, #12]
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	9302      	str	r3, [sp, #8]
 8003690:	f107 0314 	add.w	r3, r7, #20
 8003694:	9301      	str	r3, [sp, #4]
 8003696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f850 	bl	8003746 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036a8:	f000 f8d4 	bl	8003854 <prvAddNewTaskToReadyList>
 80036ac:	e001      	b.n	80036b2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036b2:	697b      	ldr	r3, [r7, #20]
	}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3728      	adds	r7, #40	; 0x28
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08c      	sub	sp, #48	; 0x30
 80036c0:	af04      	add	r7, sp, #16
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4618      	mov	r0, r3
 80036d2:	f001 fc9d 	bl	8005010 <pvPortMalloc>
 80036d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00e      	beq.n	80036fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036de:	2054      	movs	r0, #84	; 0x54
 80036e0:	f001 fc96 	bl	8005010 <pvPortMalloc>
 80036e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	631a      	str	r2, [r3, #48]	; 0x30
 80036f2:	e005      	b.n	8003700 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036f4:	6978      	ldr	r0, [r7, #20]
 80036f6:	f001 fd4d 	bl	8005194 <vPortFree>
 80036fa:	e001      	b.n	8003700 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d017      	beq.n	8003736 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800370e:	88fa      	ldrh	r2, [r7, #6]
 8003710:	2300      	movs	r3, #0
 8003712:	9303      	str	r3, [sp, #12]
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	9302      	str	r3, [sp, #8]
 8003718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	68b9      	ldr	r1, [r7, #8]
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f80e 	bl	8003746 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800372a:	69f8      	ldr	r0, [r7, #28]
 800372c:	f000 f892 	bl	8003854 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003730:	2301      	movs	r3, #1
 8003732:	61bb      	str	r3, [r7, #24]
 8003734:	e002      	b.n	800373c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003736:	f04f 33ff 	mov.w	r3, #4294967295
 800373a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800373c:	69bb      	ldr	r3, [r7, #24]
	}
 800373e:	4618      	mov	r0, r3
 8003740:	3720      	adds	r7, #32
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b088      	sub	sp, #32
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	607a      	str	r2, [r7, #4]
 8003752:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800375e:	3b01      	subs	r3, #1
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	f023 0307 	bic.w	r3, r3, #7
 800376c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	2b00      	cmp	r3, #0
 8003776:	d009      	beq.n	800378c <prvInitialiseNewTask+0x46>
 8003778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377c:	f383 8811 	msr	BASEPRI, r3
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	e7fe      	b.n	800378a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d01f      	beq.n	80037d2 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	e012      	b.n	80037be <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	7819      	ldrb	r1, [r3, #0]
 80037a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	4413      	add	r3, r2
 80037a6:	3334      	adds	r3, #52	; 0x34
 80037a8:	460a      	mov	r2, r1
 80037aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	4413      	add	r3, r2
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d006      	beq.n	80037c6 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	3301      	adds	r3, #1
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	2b0f      	cmp	r3, #15
 80037c2:	d9e9      	bls.n	8003798 <prvInitialiseNewTask+0x52>
 80037c4:	e000      	b.n	80037c8 <prvInitialiseNewTask+0x82>
			{
				break;
 80037c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037d0:	e003      	b.n	80037da <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	2b06      	cmp	r3, #6
 80037de:	d901      	bls.n	80037e4 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037e0:	2306      	movs	r3, #6
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037ee:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80037f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f2:	2200      	movs	r2, #0
 80037f4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	3304      	adds	r3, #4
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff f9a0 	bl	8002b40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003802:	3318      	adds	r3, #24
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff f99b 	bl	8002b40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800380a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800380e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003812:	f1c3 0207 	rsb	r2, r3, #7
 8003816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003818:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800381e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003822:	2200      	movs	r2, #0
 8003824:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	68f9      	ldr	r1, [r7, #12]
 8003832:	69b8      	ldr	r0, [r7, #24]
 8003834:	f001 f9ae 	bl	8004b94 <pxPortInitialiseStack>
 8003838:	4602      	mov	r2, r0
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800383e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003848:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800384a:	bf00      	nop
 800384c:	3720      	adds	r7, #32
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800385c:	f001 fabe 	bl	8004ddc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003860:	4b2a      	ldr	r3, [pc, #168]	; (800390c <prvAddNewTaskToReadyList+0xb8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3301      	adds	r3, #1
 8003866:	4a29      	ldr	r2, [pc, #164]	; (800390c <prvAddNewTaskToReadyList+0xb8>)
 8003868:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800386a:	4b29      	ldr	r3, [pc, #164]	; (8003910 <prvAddNewTaskToReadyList+0xbc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d109      	bne.n	8003886 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003872:	4a27      	ldr	r2, [pc, #156]	; (8003910 <prvAddNewTaskToReadyList+0xbc>)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003878:	4b24      	ldr	r3, [pc, #144]	; (800390c <prvAddNewTaskToReadyList+0xb8>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d110      	bne.n	80038a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003880:	f000 fc00 	bl	8004084 <prvInitialiseTaskLists>
 8003884:	e00d      	b.n	80038a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003886:	4b23      	ldr	r3, [pc, #140]	; (8003914 <prvAddNewTaskToReadyList+0xc0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800388e:	4b20      	ldr	r3, [pc, #128]	; (8003910 <prvAddNewTaskToReadyList+0xbc>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	429a      	cmp	r2, r3
 800389a:	d802      	bhi.n	80038a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800389c:	4a1c      	ldr	r2, [pc, #112]	; (8003910 <prvAddNewTaskToReadyList+0xbc>)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038a2:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <prvAddNewTaskToReadyList+0xc4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3301      	adds	r3, #1
 80038a8:	4a1b      	ldr	r2, [pc, #108]	; (8003918 <prvAddNewTaskToReadyList+0xc4>)
 80038aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	2201      	movs	r2, #1
 80038b2:	409a      	lsls	r2, r3
 80038b4:	4b19      	ldr	r3, [pc, #100]	; (800391c <prvAddNewTaskToReadyList+0xc8>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	4a18      	ldr	r2, [pc, #96]	; (800391c <prvAddNewTaskToReadyList+0xc8>)
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4a15      	ldr	r2, [pc, #84]	; (8003920 <prvAddNewTaskToReadyList+0xcc>)
 80038cc:	441a      	add	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3304      	adds	r3, #4
 80038d2:	4619      	mov	r1, r3
 80038d4:	4610      	mov	r0, r2
 80038d6:	f7ff f940 	bl	8002b5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038da:	f001 faad 	bl	8004e38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038de:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <prvAddNewTaskToReadyList+0xc0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00e      	beq.n	8003904 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038e6:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <prvAddNewTaskToReadyList+0xbc>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d207      	bcs.n	8003904 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038f4:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <prvAddNewTaskToReadyList+0xd0>)
 80038f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003904:	bf00      	nop
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	2000083c 	.word	0x2000083c
 8003910:	2000073c 	.word	0x2000073c
 8003914:	20000848 	.word	0x20000848
 8003918:	20000858 	.word	0x20000858
 800391c:	20000844 	.word	0x20000844
 8003920:	20000740 	.word	0x20000740
 8003924:	e000ed04 	.word	0xe000ed04

08003928 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003930:	2300      	movs	r3, #0
 8003932:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d016      	beq.n	8003968 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800393a:	4b13      	ldr	r3, [pc, #76]	; (8003988 <vTaskDelay+0x60>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d009      	beq.n	8003956 <vTaskDelay+0x2e>
 8003942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003946:	f383 8811 	msr	BASEPRI, r3
 800394a:	f3bf 8f6f 	isb	sy
 800394e:	f3bf 8f4f 	dsb	sy
 8003952:	60bb      	str	r3, [r7, #8]
 8003954:	e7fe      	b.n	8003954 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003956:	f000 f87f 	bl	8003a58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800395a:	2100      	movs	r1, #0
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fced 	bl	800433c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003962:	f000 f887 	bl	8003a74 <xTaskResumeAll>
 8003966:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d107      	bne.n	800397e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800396e:	4b07      	ldr	r3, [pc, #28]	; (800398c <vTaskDelay+0x64>)
 8003970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800397e:	bf00      	nop
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	20000864 	.word	0x20000864
 800398c:	e000ed04 	.word	0xe000ed04

08003990 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08a      	sub	sp, #40	; 0x28
 8003994:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003996:	2300      	movs	r3, #0
 8003998:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800399a:	2300      	movs	r3, #0
 800399c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800399e:	463a      	mov	r2, r7
 80039a0:	1d39      	adds	r1, r7, #4
 80039a2:	f107 0308 	add.w	r3, r7, #8
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fc fdea 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039ac:	6839      	ldr	r1, [r7, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	9202      	str	r2, [sp, #8]
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	2300      	movs	r3, #0
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	2300      	movs	r3, #0
 80039bc:	460a      	mov	r2, r1
 80039be:	4920      	ldr	r1, [pc, #128]	; (8003a40 <vTaskStartScheduler+0xb0>)
 80039c0:	4820      	ldr	r0, [pc, #128]	; (8003a44 <vTaskStartScheduler+0xb4>)
 80039c2:	f7ff fe21 	bl	8003608 <xTaskCreateStatic>
 80039c6:	4602      	mov	r2, r0
 80039c8:	4b1f      	ldr	r3, [pc, #124]	; (8003a48 <vTaskStartScheduler+0xb8>)
 80039ca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039cc:	4b1e      	ldr	r3, [pc, #120]	; (8003a48 <vTaskStartScheduler+0xb8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80039d4:	2301      	movs	r3, #1
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	e001      	b.n	80039de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d102      	bne.n	80039ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80039e4:	f000 fd10 	bl	8004408 <xTimerCreateTimerTask>
 80039e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d115      	bne.n	8003a1c <vTaskStartScheduler+0x8c>
 80039f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a02:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <vTaskStartScheduler+0xbc>)
 8003a04:	f04f 32ff 	mov.w	r2, #4294967295
 8003a08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a0a:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <vTaskStartScheduler+0xc0>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a10:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <vTaskStartScheduler+0xc4>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a16:	f001 f943 	bl	8004ca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a1a:	e00d      	b.n	8003a38 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a22:	d109      	bne.n	8003a38 <vTaskStartScheduler+0xa8>
 8003a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	e7fe      	b.n	8003a36 <vTaskStartScheduler+0xa6>
}
 8003a38:	bf00      	nop
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	08005d20 	.word	0x08005d20
 8003a44:	08004055 	.word	0x08004055
 8003a48:	20000860 	.word	0x20000860
 8003a4c:	2000085c 	.word	0x2000085c
 8003a50:	20000848 	.word	0x20000848
 8003a54:	20000840 	.word	0x20000840

08003a58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003a5c:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <vTaskSuspendAll+0x18>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3301      	adds	r3, #1
 8003a62:	4a03      	ldr	r2, [pc, #12]	; (8003a70 <vTaskSuspendAll+0x18>)
 8003a64:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003a66:	bf00      	nop
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	20000864 	.word	0x20000864

08003a74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a82:	4b41      	ldr	r3, [pc, #260]	; (8003b88 <xTaskResumeAll+0x114>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <xTaskResumeAll+0x2a>
 8003a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	e7fe      	b.n	8003a9c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a9e:	f001 f99d 	bl	8004ddc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003aa2:	4b39      	ldr	r3, [pc, #228]	; (8003b88 <xTaskResumeAll+0x114>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	4a37      	ldr	r2, [pc, #220]	; (8003b88 <xTaskResumeAll+0x114>)
 8003aaa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aac:	4b36      	ldr	r3, [pc, #216]	; (8003b88 <xTaskResumeAll+0x114>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d161      	bne.n	8003b78 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ab4:	4b35      	ldr	r3, [pc, #212]	; (8003b8c <xTaskResumeAll+0x118>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d05d      	beq.n	8003b78 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003abc:	e02e      	b.n	8003b1c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003abe:	4b34      	ldr	r3, [pc, #208]	; (8003b90 <xTaskResumeAll+0x11c>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3318      	adds	r3, #24
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff f8a2 	bl	8002c14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff f89d 	bl	8002c14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	2201      	movs	r2, #1
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	4b2c      	ldr	r3, [pc, #176]	; (8003b94 <xTaskResumeAll+0x120>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	4a2a      	ldr	r2, [pc, #168]	; (8003b94 <xTaskResumeAll+0x120>)
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4a27      	ldr	r2, [pc, #156]	; (8003b98 <xTaskResumeAll+0x124>)
 8003afa:	441a      	add	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	3304      	adds	r3, #4
 8003b00:	4619      	mov	r1, r3
 8003b02:	4610      	mov	r0, r2
 8003b04:	f7ff f829 	bl	8002b5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0c:	4b23      	ldr	r3, [pc, #140]	; (8003b9c <xTaskResumeAll+0x128>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d302      	bcc.n	8003b1c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003b16:	4b22      	ldr	r3, [pc, #136]	; (8003ba0 <xTaskResumeAll+0x12c>)
 8003b18:	2201      	movs	r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b1c:	4b1c      	ldr	r3, [pc, #112]	; (8003b90 <xTaskResumeAll+0x11c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1cc      	bne.n	8003abe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b2a:	f000 fb45 	bl	80041b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003b2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ba4 <xTaskResumeAll+0x130>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d010      	beq.n	8003b5c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b3a:	f000 f847 	bl	8003bcc <xTaskIncrementTick>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003b44:	4b16      	ldr	r3, [pc, #88]	; (8003ba0 <xTaskResumeAll+0x12c>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f1      	bne.n	8003b3a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003b56:	4b13      	ldr	r3, [pc, #76]	; (8003ba4 <xTaskResumeAll+0x130>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b5c:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <xTaskResumeAll+0x12c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d009      	beq.n	8003b78 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b64:	2301      	movs	r3, #1
 8003b66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b68:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <xTaskResumeAll+0x134>)
 8003b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b78:	f001 f95e 	bl	8004e38 <vPortExitCritical>

	return xAlreadyYielded;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20000864 	.word	0x20000864
 8003b8c:	2000083c 	.word	0x2000083c
 8003b90:	200007fc 	.word	0x200007fc
 8003b94:	20000844 	.word	0x20000844
 8003b98:	20000740 	.word	0x20000740
 8003b9c:	2000073c 	.word	0x2000073c
 8003ba0:	20000850 	.word	0x20000850
 8003ba4:	2000084c 	.word	0x2000084c
 8003ba8:	e000ed04 	.word	0xe000ed04

08003bac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003bb2:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <xTaskGetTickCount+0x1c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003bb8:	687b      	ldr	r3, [r7, #4]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000840 	.word	0x20000840

08003bcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bd6:	4b4e      	ldr	r3, [pc, #312]	; (8003d10 <xTaskIncrementTick+0x144>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f040 8087 	bne.w	8003cee <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003be0:	4b4c      	ldr	r3, [pc, #304]	; (8003d14 <xTaskIncrementTick+0x148>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	3301      	adds	r3, #1
 8003be6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003be8:	4a4a      	ldr	r2, [pc, #296]	; (8003d14 <xTaskIncrementTick+0x148>)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d11f      	bne.n	8003c34 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003bf4:	4b48      	ldr	r3, [pc, #288]	; (8003d18 <xTaskIncrementTick+0x14c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d009      	beq.n	8003c12 <xTaskIncrementTick+0x46>
 8003bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c02:	f383 8811 	msr	BASEPRI, r3
 8003c06:	f3bf 8f6f 	isb	sy
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	e7fe      	b.n	8003c10 <xTaskIncrementTick+0x44>
 8003c12:	4b41      	ldr	r3, [pc, #260]	; (8003d18 <xTaskIncrementTick+0x14c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	4b40      	ldr	r3, [pc, #256]	; (8003d1c <xTaskIncrementTick+0x150>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a3e      	ldr	r2, [pc, #248]	; (8003d18 <xTaskIncrementTick+0x14c>)
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4a3e      	ldr	r2, [pc, #248]	; (8003d1c <xTaskIncrementTick+0x150>)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	4b3e      	ldr	r3, [pc, #248]	; (8003d20 <xTaskIncrementTick+0x154>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	4a3c      	ldr	r2, [pc, #240]	; (8003d20 <xTaskIncrementTick+0x154>)
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	f000 fac2 	bl	80041b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c34:	4b3b      	ldr	r3, [pc, #236]	; (8003d24 <xTaskIncrementTick+0x158>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d348      	bcc.n	8003cd0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c3e:	4b36      	ldr	r3, [pc, #216]	; (8003d18 <xTaskIncrementTick+0x14c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d104      	bne.n	8003c52 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c48:	4b36      	ldr	r3, [pc, #216]	; (8003d24 <xTaskIncrementTick+0x158>)
 8003c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4e:	601a      	str	r2, [r3, #0]
					break;
 8003c50:	e03e      	b.n	8003cd0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c52:	4b31      	ldr	r3, [pc, #196]	; (8003d18 <xTaskIncrementTick+0x14c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d203      	bcs.n	8003c72 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c6a:	4a2e      	ldr	r2, [pc, #184]	; (8003d24 <xTaskIncrementTick+0x158>)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c70:	e02e      	b.n	8003cd0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	3304      	adds	r3, #4
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fe ffcc 	bl	8002c14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d004      	beq.n	8003c8e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	3318      	adds	r3, #24
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fe ffc3 	bl	8002c14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c92:	2201      	movs	r2, #1
 8003c94:	409a      	lsls	r2, r3
 8003c96:	4b24      	ldr	r3, [pc, #144]	; (8003d28 <xTaskIncrementTick+0x15c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	4a22      	ldr	r2, [pc, #136]	; (8003d28 <xTaskIncrementTick+0x15c>)
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4a1f      	ldr	r2, [pc, #124]	; (8003d2c <xTaskIncrementTick+0x160>)
 8003cae:	441a      	add	r2, r3
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	f7fe ff4f 	bl	8002b5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc0:	4b1b      	ldr	r3, [pc, #108]	; (8003d30 <xTaskIncrementTick+0x164>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d3b9      	bcc.n	8003c3e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cce:	e7b6      	b.n	8003c3e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cd0:	4b17      	ldr	r3, [pc, #92]	; (8003d30 <xTaskIncrementTick+0x164>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd6:	4915      	ldr	r1, [pc, #84]	; (8003d2c <xTaskIncrementTick+0x160>)
 8003cd8:	4613      	mov	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d907      	bls.n	8003cf8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	e004      	b.n	8003cf8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003cee:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <xTaskIncrementTick+0x168>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	4a0f      	ldr	r2, [pc, #60]	; (8003d34 <xTaskIncrementTick+0x168>)
 8003cf6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003cf8:	4b0f      	ldr	r3, [pc, #60]	; (8003d38 <xTaskIncrementTick+0x16c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003d00:	2301      	movs	r3, #1
 8003d02:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003d04:	697b      	ldr	r3, [r7, #20]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000864 	.word	0x20000864
 8003d14:	20000840 	.word	0x20000840
 8003d18:	200007f4 	.word	0x200007f4
 8003d1c:	200007f8 	.word	0x200007f8
 8003d20:	20000854 	.word	0x20000854
 8003d24:	2000085c 	.word	0x2000085c
 8003d28:	20000844 	.word	0x20000844
 8003d2c:	20000740 	.word	0x20000740
 8003d30:	2000073c 	.word	0x2000073c
 8003d34:	2000084c 	.word	0x2000084c
 8003d38:	20000850 	.word	0x20000850

08003d3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d42:	4b26      	ldr	r3, [pc, #152]	; (8003ddc <vTaskSwitchContext+0xa0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d4a:	4b25      	ldr	r3, [pc, #148]	; (8003de0 <vTaskSwitchContext+0xa4>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d50:	e03e      	b.n	8003dd0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003d52:	4b23      	ldr	r3, [pc, #140]	; (8003de0 <vTaskSwitchContext+0xa4>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d58:	4b22      	ldr	r3, [pc, #136]	; (8003de4 <vTaskSwitchContext+0xa8>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	fab3 f383 	clz	r3, r3
 8003d64:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003d66:	7afb      	ldrb	r3, [r7, #11]
 8003d68:	f1c3 031f 	rsb	r3, r3, #31
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	491e      	ldr	r1, [pc, #120]	; (8003de8 <vTaskSwitchContext+0xac>)
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	4613      	mov	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <vTaskSwitchContext+0x5a>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	607b      	str	r3, [r7, #4]
 8003d94:	e7fe      	b.n	8003d94 <vTaskSwitchContext+0x58>
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4a11      	ldr	r2, [pc, #68]	; (8003de8 <vTaskSwitchContext+0xac>)
 8003da2:	4413      	add	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	605a      	str	r2, [r3, #4]
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	3308      	adds	r3, #8
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d104      	bne.n	8003dc6 <vTaskSwitchContext+0x8a>
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	605a      	str	r2, [r3, #4]
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	4a07      	ldr	r2, [pc, #28]	; (8003dec <vTaskSwitchContext+0xb0>)
 8003dce:	6013      	str	r3, [r2, #0]
}
 8003dd0:	bf00      	nop
 8003dd2:	371c      	adds	r7, #28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	20000864 	.word	0x20000864
 8003de0:	20000850 	.word	0x20000850
 8003de4:	20000844 	.word	0x20000844
 8003de8:	20000740 	.word	0x20000740
 8003dec:	2000073c 	.word	0x2000073c

08003df0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d109      	bne.n	8003e14 <vTaskPlaceOnEventList+0x24>
 8003e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	e7fe      	b.n	8003e12 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e14:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <vTaskPlaceOnEventList+0x44>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3318      	adds	r3, #24
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7fe fec0 	bl	8002ba2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e22:	2101      	movs	r1, #1
 8003e24:	6838      	ldr	r0, [r7, #0]
 8003e26:	f000 fa89 	bl	800433c <prvAddCurrentTaskToDelayedList>
}
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	2000073c 	.word	0x2000073c

08003e38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d109      	bne.n	8003e5e <vTaskPlaceOnEventListRestricted+0x26>
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	e7fe      	b.n	8003e5c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <vTaskPlaceOnEventListRestricted+0x50>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3318      	adds	r3, #24
 8003e64:	4619      	mov	r1, r3
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f7fe fe77 	bl	8002b5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003e72:	f04f 33ff 	mov.w	r3, #4294967295
 8003e76:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	68b8      	ldr	r0, [r7, #8]
 8003e7c:	f000 fa5e 	bl	800433c <prvAddCurrentTaskToDelayedList>
	}
 8003e80:	bf00      	nop
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	2000073c 	.word	0x2000073c

08003e8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d109      	bne.n	8003eb6 <xTaskRemoveFromEventList+0x2a>
 8003ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea6:	f383 8811 	msr	BASEPRI, r3
 8003eaa:	f3bf 8f6f 	isb	sy
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	e7fe      	b.n	8003eb4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	3318      	adds	r3, #24
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fe feaa 	bl	8002c14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ec0:	4b1d      	ldr	r3, [pc, #116]	; (8003f38 <xTaskRemoveFromEventList+0xac>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d11c      	bne.n	8003f02 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	3304      	adds	r3, #4
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fe fea1 	bl	8002c14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	409a      	lsls	r2, r3
 8003eda:	4b18      	ldr	r3, [pc, #96]	; (8003f3c <xTaskRemoveFromEventList+0xb0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	4a16      	ldr	r2, [pc, #88]	; (8003f3c <xTaskRemoveFromEventList+0xb0>)
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4a13      	ldr	r2, [pc, #76]	; (8003f40 <xTaskRemoveFromEventList+0xb4>)
 8003ef2:	441a      	add	r2, r3
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4610      	mov	r0, r2
 8003efc:	f7fe fe2d 	bl	8002b5a <vListInsertEnd>
 8003f00:	e005      	b.n	8003f0e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	3318      	adds	r3, #24
 8003f06:	4619      	mov	r1, r3
 8003f08:	480e      	ldr	r0, [pc, #56]	; (8003f44 <xTaskRemoveFromEventList+0xb8>)
 8003f0a:	f7fe fe26 	bl	8002b5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f12:	4b0d      	ldr	r3, [pc, #52]	; (8003f48 <xTaskRemoveFromEventList+0xbc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d905      	bls.n	8003f28 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f20:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <xTaskRemoveFromEventList+0xc0>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	e001      	b.n	8003f2c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f2c:	697b      	ldr	r3, [r7, #20]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000864 	.word	0x20000864
 8003f3c:	20000844 	.word	0x20000844
 8003f40:	20000740 	.word	0x20000740
 8003f44:	200007fc 	.word	0x200007fc
 8003f48:	2000073c 	.word	0x2000073c
 8003f4c:	20000850 	.word	0x20000850

08003f50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f58:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <vTaskInternalSetTimeOutState+0x24>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f60:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <vTaskInternalSetTimeOutState+0x28>)
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	605a      	str	r2, [r3, #4]
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	20000854 	.word	0x20000854
 8003f78:	20000840 	.word	0x20000840

08003f7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d109      	bne.n	8003fa0 <xTaskCheckForTimeOut+0x24>
 8003f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	e7fe      	b.n	8003f9e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d109      	bne.n	8003fba <xTaskCheckForTimeOut+0x3e>
 8003fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	e7fe      	b.n	8003fb8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003fba:	f000 ff0f 	bl	8004ddc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003fbe:	4b1d      	ldr	r3, [pc, #116]	; (8004034 <xTaskCheckForTimeOut+0xb8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd6:	d102      	bne.n	8003fde <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61fb      	str	r3, [r7, #28]
 8003fdc:	e023      	b.n	8004026 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	4b15      	ldr	r3, [pc, #84]	; (8004038 <xTaskCheckForTimeOut+0xbc>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d007      	beq.n	8003ffa <xTaskCheckForTimeOut+0x7e>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d302      	bcc.n	8003ffa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	61fb      	str	r3, [r7, #28]
 8003ff8:	e015      	b.n	8004026 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	429a      	cmp	r2, r3
 8004002:	d20b      	bcs.n	800401c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	1ad2      	subs	r2, r2, r3
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff ff9d 	bl	8003f50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004016:	2300      	movs	r3, #0
 8004018:	61fb      	str	r3, [r7, #28]
 800401a:	e004      	b.n	8004026 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004022:	2301      	movs	r3, #1
 8004024:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004026:	f000 ff07 	bl	8004e38 <vPortExitCritical>

	return xReturn;
 800402a:	69fb      	ldr	r3, [r7, #28]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3720      	adds	r7, #32
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	20000840 	.word	0x20000840
 8004038:	20000854 	.word	0x20000854

0800403c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004040:	4b03      	ldr	r3, [pc, #12]	; (8004050 <vTaskMissedYield+0x14>)
 8004042:	2201      	movs	r2, #1
 8004044:	601a      	str	r2, [r3, #0]
}
 8004046:	bf00      	nop
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	20000850 	.word	0x20000850

08004054 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800405c:	f000 f852 	bl	8004104 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004060:	4b06      	ldr	r3, [pc, #24]	; (800407c <prvIdleTask+0x28>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d9f9      	bls.n	800405c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004068:	4b05      	ldr	r3, [pc, #20]	; (8004080 <prvIdleTask+0x2c>)
 800406a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004078:	e7f0      	b.n	800405c <prvIdleTask+0x8>
 800407a:	bf00      	nop
 800407c:	20000740 	.word	0x20000740
 8004080:	e000ed04 	.word	0xe000ed04

08004084 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800408a:	2300      	movs	r3, #0
 800408c:	607b      	str	r3, [r7, #4]
 800408e:	e00c      	b.n	80040aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	4613      	mov	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4a12      	ldr	r2, [pc, #72]	; (80040e4 <prvInitialiseTaskLists+0x60>)
 800409c:	4413      	add	r3, r2
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fe fd2e 	bl	8002b00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3301      	adds	r3, #1
 80040a8:	607b      	str	r3, [r7, #4]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b06      	cmp	r3, #6
 80040ae:	d9ef      	bls.n	8004090 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040b0:	480d      	ldr	r0, [pc, #52]	; (80040e8 <prvInitialiseTaskLists+0x64>)
 80040b2:	f7fe fd25 	bl	8002b00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040b6:	480d      	ldr	r0, [pc, #52]	; (80040ec <prvInitialiseTaskLists+0x68>)
 80040b8:	f7fe fd22 	bl	8002b00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040bc:	480c      	ldr	r0, [pc, #48]	; (80040f0 <prvInitialiseTaskLists+0x6c>)
 80040be:	f7fe fd1f 	bl	8002b00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040c2:	480c      	ldr	r0, [pc, #48]	; (80040f4 <prvInitialiseTaskLists+0x70>)
 80040c4:	f7fe fd1c 	bl	8002b00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040c8:	480b      	ldr	r0, [pc, #44]	; (80040f8 <prvInitialiseTaskLists+0x74>)
 80040ca:	f7fe fd19 	bl	8002b00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040ce:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <prvInitialiseTaskLists+0x78>)
 80040d0:	4a05      	ldr	r2, [pc, #20]	; (80040e8 <prvInitialiseTaskLists+0x64>)
 80040d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80040d4:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <prvInitialiseTaskLists+0x7c>)
 80040d6:	4a05      	ldr	r2, [pc, #20]	; (80040ec <prvInitialiseTaskLists+0x68>)
 80040d8:	601a      	str	r2, [r3, #0]
}
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000740 	.word	0x20000740
 80040e8:	200007cc 	.word	0x200007cc
 80040ec:	200007e0 	.word	0x200007e0
 80040f0:	200007fc 	.word	0x200007fc
 80040f4:	20000810 	.word	0x20000810
 80040f8:	20000828 	.word	0x20000828
 80040fc:	200007f4 	.word	0x200007f4
 8004100:	200007f8 	.word	0x200007f8

08004104 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800410a:	e019      	b.n	8004140 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800410c:	f000 fe66 	bl	8004ddc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004110:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <prvCheckTasksWaitingTermination+0x4c>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3304      	adds	r3, #4
 800411c:	4618      	mov	r0, r3
 800411e:	f7fe fd79 	bl	8002c14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004122:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <prvCheckTasksWaitingTermination+0x50>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3b01      	subs	r3, #1
 8004128:	4a0a      	ldr	r2, [pc, #40]	; (8004154 <prvCheckTasksWaitingTermination+0x50>)
 800412a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <prvCheckTasksWaitingTermination+0x54>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3b01      	subs	r3, #1
 8004132:	4a09      	ldr	r2, [pc, #36]	; (8004158 <prvCheckTasksWaitingTermination+0x54>)
 8004134:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004136:	f000 fe7f 	bl	8004e38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f80e 	bl	800415c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <prvCheckTasksWaitingTermination+0x54>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e1      	bne.n	800410c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004148:	bf00      	nop
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	20000810 	.word	0x20000810
 8004154:	2000083c 	.word	0x2000083c
 8004158:	20000824 	.word	0x20000824

0800415c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800416a:	2b00      	cmp	r3, #0
 800416c:	d108      	bne.n	8004180 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004172:	4618      	mov	r0, r3
 8004174:	f001 f80e 	bl	8005194 <vPortFree>
				vPortFree( pxTCB );
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f001 f80b 	bl	8005194 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800417e:	e017      	b.n	80041b0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004186:	2b01      	cmp	r3, #1
 8004188:	d103      	bne.n	8004192 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f001 f802 	bl	8005194 <vPortFree>
	}
 8004190:	e00e      	b.n	80041b0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004198:	2b02      	cmp	r3, #2
 800419a:	d009      	beq.n	80041b0 <prvDeleteTCB+0x54>
 800419c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a0:	f383 8811 	msr	BASEPRI, r3
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	e7fe      	b.n	80041ae <prvDeleteTCB+0x52>
	}
 80041b0:	bf00      	nop
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041be:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <prvResetNextTaskUnblockTime+0x38>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d104      	bne.n	80041d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041c8:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <prvResetNextTaskUnblockTime+0x3c>)
 80041ca:	f04f 32ff 	mov.w	r2, #4294967295
 80041ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041d0:	e008      	b.n	80041e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041d2:	4b07      	ldr	r3, [pc, #28]	; (80041f0 <prvResetNextTaskUnblockTime+0x38>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	4a04      	ldr	r2, [pc, #16]	; (80041f4 <prvResetNextTaskUnblockTime+0x3c>)
 80041e2:	6013      	str	r3, [r2, #0]
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	200007f4 	.word	0x200007f4
 80041f4:	2000085c 	.word	0x2000085c

080041f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041fe:	4b0b      	ldr	r3, [pc, #44]	; (800422c <xTaskGetSchedulerState+0x34>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d102      	bne.n	800420c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004206:	2301      	movs	r3, #1
 8004208:	607b      	str	r3, [r7, #4]
 800420a:	e008      	b.n	800421e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800420c:	4b08      	ldr	r3, [pc, #32]	; (8004230 <xTaskGetSchedulerState+0x38>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d102      	bne.n	800421a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004214:	2302      	movs	r3, #2
 8004216:	607b      	str	r3, [r7, #4]
 8004218:	e001      	b.n	800421e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800421a:	2300      	movs	r3, #0
 800421c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800421e:	687b      	ldr	r3, [r7, #4]
	}
 8004220:	4618      	mov	r0, r3
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	20000848 	.word	0x20000848
 8004230:	20000864 	.word	0x20000864

08004234 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d06c      	beq.n	8004324 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800424a:	4b39      	ldr	r3, [pc, #228]	; (8004330 <xTaskPriorityDisinherit+0xfc>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	429a      	cmp	r2, r3
 8004252:	d009      	beq.n	8004268 <xTaskPriorityDisinherit+0x34>
 8004254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004258:	f383 8811 	msr	BASEPRI, r3
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	e7fe      	b.n	8004266 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800426c:	2b00      	cmp	r3, #0
 800426e:	d109      	bne.n	8004284 <xTaskPriorityDisinherit+0x50>
 8004270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	e7fe      	b.n	8004282 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004288:	1e5a      	subs	r2, r3, #1
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004296:	429a      	cmp	r2, r3
 8004298:	d044      	beq.n	8004324 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d140      	bne.n	8004324 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	3304      	adds	r3, #4
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fe fcb4 	bl	8002c14 <uxListRemove>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d115      	bne.n	80042de <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b6:	491f      	ldr	r1, [pc, #124]	; (8004334 <xTaskPriorityDisinherit+0x100>)
 80042b8:	4613      	mov	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10a      	bne.n	80042de <xTaskPriorityDisinherit+0xaa>
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	2201      	movs	r2, #1
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	43da      	mvns	r2, r3
 80042d4:	4b18      	ldr	r3, [pc, #96]	; (8004338 <xTaskPriorityDisinherit+0x104>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4013      	ands	r3, r2
 80042da:	4a17      	ldr	r2, [pc, #92]	; (8004338 <xTaskPriorityDisinherit+0x104>)
 80042dc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ea:	f1c3 0207 	rsb	r2, r3, #7
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f6:	2201      	movs	r2, #1
 80042f8:	409a      	lsls	r2, r3
 80042fa:	4b0f      	ldr	r3, [pc, #60]	; (8004338 <xTaskPriorityDisinherit+0x104>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4313      	orrs	r3, r2
 8004300:	4a0d      	ldr	r2, [pc, #52]	; (8004338 <xTaskPriorityDisinherit+0x104>)
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4a08      	ldr	r2, [pc, #32]	; (8004334 <xTaskPriorityDisinherit+0x100>)
 8004312:	441a      	add	r2, r3
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	3304      	adds	r3, #4
 8004318:	4619      	mov	r1, r3
 800431a:	4610      	mov	r0, r2
 800431c:	f7fe fc1d 	bl	8002b5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004320:	2301      	movs	r3, #1
 8004322:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004324:	697b      	ldr	r3, [r7, #20]
	}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	2000073c 	.word	0x2000073c
 8004334:	20000740 	.word	0x20000740
 8004338:	20000844 	.word	0x20000844

0800433c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004346:	4b29      	ldr	r3, [pc, #164]	; (80043ec <prvAddCurrentTaskToDelayedList+0xb0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800434c:	4b28      	ldr	r3, [pc, #160]	; (80043f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3304      	adds	r3, #4
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe fc5e 	bl	8002c14 <uxListRemove>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10b      	bne.n	8004376 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800435e:	4b24      	ldr	r3, [pc, #144]	; (80043f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	2201      	movs	r2, #1
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	43da      	mvns	r2, r3
 800436c:	4b21      	ldr	r3, [pc, #132]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4013      	ands	r3, r2
 8004372:	4a20      	ldr	r2, [pc, #128]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004374:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437c:	d10a      	bne.n	8004394 <prvAddCurrentTaskToDelayedList+0x58>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d007      	beq.n	8004394 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004384:	4b1a      	ldr	r3, [pc, #104]	; (80043f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3304      	adds	r3, #4
 800438a:	4619      	mov	r1, r3
 800438c:	481a      	ldr	r0, [pc, #104]	; (80043f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800438e:	f7fe fbe4 	bl	8002b5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004392:	e026      	b.n	80043e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4413      	add	r3, r2
 800439a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800439c:	4b14      	ldr	r3, [pc, #80]	; (80043f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d209      	bcs.n	80043c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043ac:	4b13      	ldr	r3, [pc, #76]	; (80043fc <prvAddCurrentTaskToDelayedList+0xc0>)
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b0f      	ldr	r3, [pc, #60]	; (80043f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3304      	adds	r3, #4
 80043b6:	4619      	mov	r1, r3
 80043b8:	4610      	mov	r0, r2
 80043ba:	f7fe fbf2 	bl	8002ba2 <vListInsert>
}
 80043be:	e010      	b.n	80043e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043c0:	4b0f      	ldr	r3, [pc, #60]	; (8004400 <prvAddCurrentTaskToDelayedList+0xc4>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3304      	adds	r3, #4
 80043ca:	4619      	mov	r1, r3
 80043cc:	4610      	mov	r0, r2
 80043ce:	f7fe fbe8 	bl	8002ba2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043d2:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d202      	bcs.n	80043e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80043dc:	4a09      	ldr	r2, [pc, #36]	; (8004404 <prvAddCurrentTaskToDelayedList+0xc8>)
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	6013      	str	r3, [r2, #0]
}
 80043e2:	bf00      	nop
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20000840 	.word	0x20000840
 80043f0:	2000073c 	.word	0x2000073c
 80043f4:	20000844 	.word	0x20000844
 80043f8:	20000828 	.word	0x20000828
 80043fc:	200007f8 	.word	0x200007f8
 8004400:	200007f4 	.word	0x200007f4
 8004404:	2000085c 	.word	0x2000085c

08004408 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08a      	sub	sp, #40	; 0x28
 800440c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004412:	f000 fb7f 	bl	8004b14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004416:	4b1c      	ldr	r3, [pc, #112]	; (8004488 <xTimerCreateTimerTask+0x80>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d021      	beq.n	8004462 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800441e:	2300      	movs	r3, #0
 8004420:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004422:	2300      	movs	r3, #0
 8004424:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004426:	1d3a      	adds	r2, r7, #4
 8004428:	f107 0108 	add.w	r1, r7, #8
 800442c:	f107 030c 	add.w	r3, r7, #12
 8004430:	4618      	mov	r0, r3
 8004432:	f7fc f8bf 	bl	80005b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	9202      	str	r2, [sp, #8]
 800443e:	9301      	str	r3, [sp, #4]
 8004440:	2306      	movs	r3, #6
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	2300      	movs	r3, #0
 8004446:	460a      	mov	r2, r1
 8004448:	4910      	ldr	r1, [pc, #64]	; (800448c <xTimerCreateTimerTask+0x84>)
 800444a:	4811      	ldr	r0, [pc, #68]	; (8004490 <xTimerCreateTimerTask+0x88>)
 800444c:	f7ff f8dc 	bl	8003608 <xTaskCreateStatic>
 8004450:	4602      	mov	r2, r0
 8004452:	4b10      	ldr	r3, [pc, #64]	; (8004494 <xTimerCreateTimerTask+0x8c>)
 8004454:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004456:	4b0f      	ldr	r3, [pc, #60]	; (8004494 <xTimerCreateTimerTask+0x8c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800445e:	2301      	movs	r3, #1
 8004460:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d109      	bne.n	800447c <xTimerCreateTimerTask+0x74>
 8004468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	e7fe      	b.n	800447a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800447c:	697b      	ldr	r3, [r7, #20]
}
 800447e:	4618      	mov	r0, r3
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20000898 	.word	0x20000898
 800448c:	08005d28 	.word	0x08005d28
 8004490:	080046f9 	.word	0x080046f9
 8004494:	2000089c 	.word	0x2000089c

08004498 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80044a6:	2028      	movs	r0, #40	; 0x28
 80044a8:	f000 fdb2 	bl	8005010 <pvPortMalloc>
 80044ac:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00d      	beq.n	80044d0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	9301      	str	r3, [sp, #4]
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 f841 	bl	8004552 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80044d0:	697b      	ldr	r3, [r7, #20]
	}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b08a      	sub	sp, #40	; 0x28
 80044de:	af02      	add	r7, sp, #8
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	607a      	str	r2, [r7, #4]
 80044e6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80044e8:	2328      	movs	r3, #40	; 0x28
 80044ea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	2b28      	cmp	r3, #40	; 0x28
 80044f0:	d009      	beq.n	8004506 <xTimerCreateStatic+0x2c>
 80044f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	61bb      	str	r3, [r7, #24]
 8004504:	e7fe      	b.n	8004504 <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004506:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8004508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <xTimerCreateStatic+0x48>
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	e7fe      	b.n	8004520 <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8004522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004524:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00d      	beq.n	8004548 <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	9301      	str	r3, [sp, #4]
 8004538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f805 	bl	8004552 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004548:	69fb      	ldr	r3, [r7, #28]
	}
 800454a:	4618      	mov	r0, r3
 800454c:	3720      	adds	r7, #32
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b086      	sub	sp, #24
 8004556:	af00      	add	r7, sp, #0
 8004558:	60f8      	str	r0, [r7, #12]
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	607a      	str	r2, [r7, #4]
 800455e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <prvInitialiseNewTimer+0x28>
 8004566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	e7fe      	b.n	8004578 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01e      	beq.n	80045be <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004580:	f000 fac8 	bl	8004b14 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	6a3a      	ldr	r2, [r7, #32]
 800459a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	3304      	adds	r3, #4
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fe facd 	bl	8002b40 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d008      	beq.n	80045be <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045b2:	f043 0304 	orr.w	r3, r3, #4
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80045be:	bf00      	nop
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08a      	sub	sp, #40	; 0x28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80045d6:	2300      	movs	r3, #0
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d109      	bne.n	80045f4 <xTimerGenericCommand+0x2c>
 80045e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	623b      	str	r3, [r7, #32]
 80045f2:	e7fe      	b.n	80045f2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80045f4:	4b19      	ldr	r3, [pc, #100]	; (800465c <xTimerGenericCommand+0x94>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d02a      	beq.n	8004652 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b05      	cmp	r3, #5
 800460c:	dc18      	bgt.n	8004640 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800460e:	f7ff fdf3 	bl	80041f8 <xTaskGetSchedulerState>
 8004612:	4603      	mov	r3, r0
 8004614:	2b02      	cmp	r3, #2
 8004616:	d109      	bne.n	800462c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004618:	4b10      	ldr	r3, [pc, #64]	; (800465c <xTimerGenericCommand+0x94>)
 800461a:	6818      	ldr	r0, [r3, #0]
 800461c:	f107 0114 	add.w	r1, r7, #20
 8004620:	2300      	movs	r3, #0
 8004622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004624:	f7fe fc1a 	bl	8002e5c <xQueueGenericSend>
 8004628:	6278      	str	r0, [r7, #36]	; 0x24
 800462a:	e012      	b.n	8004652 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800462c:	4b0b      	ldr	r3, [pc, #44]	; (800465c <xTimerGenericCommand+0x94>)
 800462e:	6818      	ldr	r0, [r3, #0]
 8004630:	f107 0114 	add.w	r1, r7, #20
 8004634:	2300      	movs	r3, #0
 8004636:	2200      	movs	r2, #0
 8004638:	f7fe fc10 	bl	8002e5c <xQueueGenericSend>
 800463c:	6278      	str	r0, [r7, #36]	; 0x24
 800463e:	e008      	b.n	8004652 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004640:	4b06      	ldr	r3, [pc, #24]	; (800465c <xTimerGenericCommand+0x94>)
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	f107 0114 	add.w	r1, r7, #20
 8004648:	2300      	movs	r3, #0
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	f7fe fd00 	bl	8003050 <xQueueGenericSendFromISR>
 8004650:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004654:	4618      	mov	r0, r3
 8004656:	3728      	adds	r7, #40	; 0x28
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20000898 	.word	0x20000898

08004660 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af02      	add	r7, sp, #8
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800466a:	4b22      	ldr	r3, [pc, #136]	; (80046f4 <prvProcessExpiredTimer+0x94>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	3304      	adds	r3, #4
 8004678:	4618      	mov	r0, r3
 800467a:	f7fe facb 	bl	8002c14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d021      	beq.n	80046d0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	699a      	ldr	r2, [r3, #24]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	18d1      	adds	r1, r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	6978      	ldr	r0, [r7, #20]
 800469a:	f000 f8d1 	bl	8004840 <prvInsertTimerInActiveList>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d01e      	beq.n	80046e2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046a4:	2300      	movs	r3, #0
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	2300      	movs	r3, #0
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	2100      	movs	r1, #0
 80046ae:	6978      	ldr	r0, [r7, #20]
 80046b0:	f7ff ff8a 	bl	80045c8 <xTimerGenericCommand>
 80046b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d112      	bne.n	80046e2 <prvProcessExpiredTimer+0x82>
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	e7fe      	b.n	80046ce <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046d6:	f023 0301 	bic.w	r3, r3, #1
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	6978      	ldr	r0, [r7, #20]
 80046e8:	4798      	blx	r3
}
 80046ea:	bf00      	nop
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20000890 	.word	0x20000890

080046f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004700:	f107 0308 	add.w	r3, r7, #8
 8004704:	4618      	mov	r0, r3
 8004706:	f000 f857 	bl	80047b8 <prvGetNextExpireTime>
 800470a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4619      	mov	r1, r3
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 f803 	bl	800471c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004716:	f000 f8d5 	bl	80048c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800471a:	e7f1      	b.n	8004700 <prvTimerTask+0x8>

0800471c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004726:	f7ff f997 	bl	8003a58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800472a:	f107 0308 	add.w	r3, r7, #8
 800472e:	4618      	mov	r0, r3
 8004730:	f000 f866 	bl	8004800 <prvSampleTimeNow>
 8004734:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d130      	bne.n	800479e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10a      	bne.n	8004758 <prvProcessTimerOrBlockTask+0x3c>
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	429a      	cmp	r2, r3
 8004748:	d806      	bhi.n	8004758 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800474a:	f7ff f993 	bl	8003a74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800474e:	68f9      	ldr	r1, [r7, #12]
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff ff85 	bl	8004660 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004756:	e024      	b.n	80047a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d008      	beq.n	8004770 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800475e:	4b13      	ldr	r3, [pc, #76]	; (80047ac <prvProcessTimerOrBlockTask+0x90>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <prvProcessTimerOrBlockTask+0x50>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <prvProcessTimerOrBlockTask+0x52>
 800476c:	2300      	movs	r3, #0
 800476e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004770:	4b0f      	ldr	r3, [pc, #60]	; (80047b0 <prvProcessTimerOrBlockTask+0x94>)
 8004772:	6818      	ldr	r0, [r3, #0]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	4619      	mov	r1, r3
 800477e:	f7fe ff0f 	bl	80035a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004782:	f7ff f977 	bl	8003a74 <xTaskResumeAll>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10a      	bne.n	80047a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800478c:	4b09      	ldr	r3, [pc, #36]	; (80047b4 <prvProcessTimerOrBlockTask+0x98>)
 800478e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	f3bf 8f6f 	isb	sy
}
 800479c:	e001      	b.n	80047a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800479e:	f7ff f969 	bl	8003a74 <xTaskResumeAll>
}
 80047a2:	bf00      	nop
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	20000894 	.word	0x20000894
 80047b0:	20000898 	.word	0x20000898
 80047b4:	e000ed04 	.word	0xe000ed04

080047b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047c0:	4b0e      	ldr	r3, [pc, #56]	; (80047fc <prvGetNextExpireTime+0x44>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <prvGetNextExpireTime+0x16>
 80047ca:	2201      	movs	r2, #1
 80047cc:	e000      	b.n	80047d0 <prvGetNextExpireTime+0x18>
 80047ce:	2200      	movs	r2, #0
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d105      	bne.n	80047e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047dc:	4b07      	ldr	r3, [pc, #28]	; (80047fc <prvGetNextExpireTime+0x44>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	e001      	b.n	80047ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80047ec:	68fb      	ldr	r3, [r7, #12]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	20000890 	.word	0x20000890

08004800 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004808:	f7ff f9d0 	bl	8003bac <xTaskGetTickCount>
 800480c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800480e:	4b0b      	ldr	r3, [pc, #44]	; (800483c <prvSampleTimeNow+0x3c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	429a      	cmp	r2, r3
 8004816:	d205      	bcs.n	8004824 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004818:	f000 f918 	bl	8004a4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	e002      	b.n	800482a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800482a:	4a04      	ldr	r2, [pc, #16]	; (800483c <prvSampleTimeNow+0x3c>)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004830:	68fb      	ldr	r3, [r7, #12]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	200008a0 	.word	0x200008a0

08004840 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	429a      	cmp	r2, r3
 8004864:	d812      	bhi.n	800488c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	1ad2      	subs	r2, r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	429a      	cmp	r2, r3
 8004872:	d302      	bcc.n	800487a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004874:	2301      	movs	r3, #1
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	e01b      	b.n	80048b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800487a:	4b10      	ldr	r3, [pc, #64]	; (80048bc <prvInsertTimerInActiveList+0x7c>)
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3304      	adds	r3, #4
 8004882:	4619      	mov	r1, r3
 8004884:	4610      	mov	r0, r2
 8004886:	f7fe f98c 	bl	8002ba2 <vListInsert>
 800488a:	e012      	b.n	80048b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d206      	bcs.n	80048a2 <prvInsertTimerInActiveList+0x62>
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d302      	bcc.n	80048a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800489c:	2301      	movs	r3, #1
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	e007      	b.n	80048b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048a2:	4b07      	ldr	r3, [pc, #28]	; (80048c0 <prvInsertTimerInActiveList+0x80>)
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3304      	adds	r3, #4
 80048aa:	4619      	mov	r1, r3
 80048ac:	4610      	mov	r0, r2
 80048ae:	f7fe f978 	bl	8002ba2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80048b2:	697b      	ldr	r3, [r7, #20]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3718      	adds	r7, #24
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	20000894 	.word	0x20000894
 80048c0:	20000890 	.word	0x20000890

080048c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08c      	sub	sp, #48	; 0x30
 80048c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048ca:	e0ac      	b.n	8004a26 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f2c0 80a8 	blt.w	8004a24 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d004      	beq.n	80048ea <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	3304      	adds	r3, #4
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fe f995 	bl	8002c14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048ea:	1d3b      	adds	r3, r7, #4
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff ff87 	bl	8004800 <prvSampleTimeNow>
 80048f2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b09      	cmp	r3, #9
 80048f8:	f200 8095 	bhi.w	8004a26 <prvProcessReceivedCommands+0x162>
 80048fc:	a201      	add	r2, pc, #4	; (adr r2, 8004904 <prvProcessReceivedCommands+0x40>)
 80048fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004902:	bf00      	nop
 8004904:	0800492d 	.word	0x0800492d
 8004908:	0800492d 	.word	0x0800492d
 800490c:	0800492d 	.word	0x0800492d
 8004910:	0800499f 	.word	0x0800499f
 8004914:	080049b3 	.word	0x080049b3
 8004918:	080049fb 	.word	0x080049fb
 800491c:	0800492d 	.word	0x0800492d
 8004920:	0800492d 	.word	0x0800492d
 8004924:	0800499f 	.word	0x0800499f
 8004928:	080049b3 	.word	0x080049b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	b2da      	uxtb	r2, r3
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	18d1      	adds	r1, r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a3a      	ldr	r2, [r7, #32]
 800494a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800494c:	f7ff ff78 	bl	8004840 <prvInsertTimerInActiveList>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d067      	beq.n	8004a26 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800495c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	d05c      	beq.n	8004a26 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	441a      	add	r2, r3
 8004974:	2300      	movs	r3, #0
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	2300      	movs	r3, #0
 800497a:	2100      	movs	r1, #0
 800497c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800497e:	f7ff fe23 	bl	80045c8 <xTimerGenericCommand>
 8004982:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d14d      	bne.n	8004a26 <prvProcessReceivedCommands+0x162>
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	61bb      	str	r3, [r7, #24]
 800499c:	e7fe      	b.n	800499c <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049a4:	f023 0301 	bic.w	r3, r3, #1
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80049b0:	e039      	b.n	8004a26 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <prvProcessReceivedCommands+0x122>
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	e7fe      	b.n	80049e4 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	699a      	ldr	r2, [r3, #24]
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	18d1      	adds	r1, r2, r3
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	6a3a      	ldr	r2, [r7, #32]
 80049f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049f4:	f7ff ff24 	bl	8004840 <prvInsertTimerInActiveList>
					break;
 80049f8:	e015      	b.n	8004a26 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d103      	bne.n	8004a10 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8004a08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a0a:	f000 fbc3 	bl	8005194 <vPortFree>
 8004a0e:	e00a      	b.n	8004a26 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a16:	f023 0301 	bic.w	r3, r3, #1
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a22:	e000      	b.n	8004a26 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004a24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a26:	4b08      	ldr	r3, [pc, #32]	; (8004a48 <prvProcessReceivedCommands+0x184>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f107 0108 	add.w	r1, r7, #8
 8004a2e:	2200      	movs	r2, #0
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fe fba1 	bl	8003178 <xQueueReceive>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f47f af47 	bne.w	80048cc <prvProcessReceivedCommands+0x8>
	}
}
 8004a3e:	bf00      	nop
 8004a40:	3728      	adds	r7, #40	; 0x28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20000898 	.word	0x20000898

08004a4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b088      	sub	sp, #32
 8004a50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a52:	e047      	b.n	8004ae4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a54:	4b2d      	ldr	r3, [pc, #180]	; (8004b0c <prvSwitchTimerLists+0xc0>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a5e:	4b2b      	ldr	r3, [pc, #172]	; (8004b0c <prvSwitchTimerLists+0xc0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fe f8d1 	bl	8002c14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d02d      	beq.n	8004ae4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4413      	add	r3, r2
 8004a90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d90e      	bls.n	8004ab8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004aa6:	4b19      	ldr	r3, [pc, #100]	; (8004b0c <prvSwitchTimerLists+0xc0>)
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3304      	adds	r3, #4
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f7fe f876 	bl	8002ba2 <vListInsert>
 8004ab6:	e015      	b.n	8004ae4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ab8:	2300      	movs	r3, #0
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	2300      	movs	r3, #0
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f7ff fd80 	bl	80045c8 <xTimerGenericCommand>
 8004ac8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d109      	bne.n	8004ae4 <prvSwitchTimerLists+0x98>
 8004ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	603b      	str	r3, [r7, #0]
 8004ae2:	e7fe      	b.n	8004ae2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ae4:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <prvSwitchTimerLists+0xc0>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1b2      	bne.n	8004a54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004aee:	4b07      	ldr	r3, [pc, #28]	; (8004b0c <prvSwitchTimerLists+0xc0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <prvSwitchTimerLists+0xc4>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a04      	ldr	r2, [pc, #16]	; (8004b0c <prvSwitchTimerLists+0xc0>)
 8004afa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004afc:	4a04      	ldr	r2, [pc, #16]	; (8004b10 <prvSwitchTimerLists+0xc4>)
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	6013      	str	r3, [r2, #0]
}
 8004b02:	bf00      	nop
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	20000890 	.word	0x20000890
 8004b10:	20000894 	.word	0x20000894

08004b14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b1a:	f000 f95f 	bl	8004ddc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b1e:	4b15      	ldr	r3, [pc, #84]	; (8004b74 <prvCheckForValidListAndQueue+0x60>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d120      	bne.n	8004b68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b26:	4814      	ldr	r0, [pc, #80]	; (8004b78 <prvCheckForValidListAndQueue+0x64>)
 8004b28:	f7fd ffea 	bl	8002b00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b2c:	4813      	ldr	r0, [pc, #76]	; (8004b7c <prvCheckForValidListAndQueue+0x68>)
 8004b2e:	f7fd ffe7 	bl	8002b00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b32:	4b13      	ldr	r3, [pc, #76]	; (8004b80 <prvCheckForValidListAndQueue+0x6c>)
 8004b34:	4a10      	ldr	r2, [pc, #64]	; (8004b78 <prvCheckForValidListAndQueue+0x64>)
 8004b36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b38:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <prvCheckForValidListAndQueue+0x70>)
 8004b3a:	4a10      	ldr	r2, [pc, #64]	; (8004b7c <prvCheckForValidListAndQueue+0x68>)
 8004b3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004b3e:	2300      	movs	r3, #0
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	4b11      	ldr	r3, [pc, #68]	; (8004b88 <prvCheckForValidListAndQueue+0x74>)
 8004b44:	4a11      	ldr	r2, [pc, #68]	; (8004b8c <prvCheckForValidListAndQueue+0x78>)
 8004b46:	210c      	movs	r1, #12
 8004b48:	2005      	movs	r0, #5
 8004b4a:	f7fe f8f5 	bl	8002d38 <xQueueGenericCreateStatic>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	4b08      	ldr	r3, [pc, #32]	; (8004b74 <prvCheckForValidListAndQueue+0x60>)
 8004b52:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004b54:	4b07      	ldr	r3, [pc, #28]	; (8004b74 <prvCheckForValidListAndQueue+0x60>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b5c:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <prvCheckForValidListAndQueue+0x60>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	490b      	ldr	r1, [pc, #44]	; (8004b90 <prvCheckForValidListAndQueue+0x7c>)
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fe fcf4 	bl	8003550 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b68:	f000 f966 	bl	8004e38 <vPortExitCritical>
}
 8004b6c:	bf00      	nop
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20000898 	.word	0x20000898
 8004b78:	20000868 	.word	0x20000868
 8004b7c:	2000087c 	.word	0x2000087c
 8004b80:	20000890 	.word	0x20000890
 8004b84:	20000894 	.word	0x20000894
 8004b88:	200008e0 	.word	0x200008e0
 8004b8c:	200008a4 	.word	0x200008a4
 8004b90:	08005d30 	.word	0x08005d30

08004b94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	3b04      	subs	r3, #4
 8004ba4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3b04      	subs	r3, #4
 8004bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f023 0201 	bic.w	r2, r3, #1
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3b04      	subs	r3, #4
 8004bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bc4:	4a0c      	ldr	r2, [pc, #48]	; (8004bf8 <pxPortInitialiseStack+0x64>)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3b14      	subs	r3, #20
 8004bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3b04      	subs	r3, #4
 8004bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f06f 0202 	mvn.w	r2, #2
 8004be2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3b20      	subs	r3, #32
 8004be8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004bea:	68fb      	ldr	r3, [r7, #12]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	08004bfd 	.word	0x08004bfd

08004bfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c02:	2300      	movs	r3, #0
 8004c04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c06:	4b11      	ldr	r3, [pc, #68]	; (8004c4c <prvTaskExitError+0x50>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0e:	d009      	beq.n	8004c24 <prvTaskExitError+0x28>
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	e7fe      	b.n	8004c22 <prvTaskExitError+0x26>
 8004c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c36:	bf00      	nop
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0fc      	beq.n	8004c38 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c3e:	bf00      	nop
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	2000000c 	.word	0x2000000c

08004c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c50:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <pxCurrentTCBConst2>)
 8004c52:	6819      	ldr	r1, [r3, #0]
 8004c54:	6808      	ldr	r0, [r1, #0]
 8004c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c5a:	f380 8809 	msr	PSP, r0
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f04f 0000 	mov.w	r0, #0
 8004c66:	f380 8811 	msr	BASEPRI, r0
 8004c6a:	4770      	bx	lr
 8004c6c:	f3af 8000 	nop.w

08004c70 <pxCurrentTCBConst2>:
 8004c70:	2000073c 	.word	0x2000073c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop

08004c78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c78:	4808      	ldr	r0, [pc, #32]	; (8004c9c <prvPortStartFirstTask+0x24>)
 8004c7a:	6800      	ldr	r0, [r0, #0]
 8004c7c:	6800      	ldr	r0, [r0, #0]
 8004c7e:	f380 8808 	msr	MSP, r0
 8004c82:	f04f 0000 	mov.w	r0, #0
 8004c86:	f380 8814 	msr	CONTROL, r0
 8004c8a:	b662      	cpsie	i
 8004c8c:	b661      	cpsie	f
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	df00      	svc	0
 8004c98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c9a:	bf00      	nop
 8004c9c:	e000ed08 	.word	0xe000ed08

08004ca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ca6:	4b44      	ldr	r3, [pc, #272]	; (8004db8 <xPortStartScheduler+0x118>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a44      	ldr	r2, [pc, #272]	; (8004dbc <xPortStartScheduler+0x11c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d109      	bne.n	8004cc4 <xPortStartScheduler+0x24>
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	e7fe      	b.n	8004cc2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004cc4:	4b3c      	ldr	r3, [pc, #240]	; (8004db8 <xPortStartScheduler+0x118>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a3d      	ldr	r2, [pc, #244]	; (8004dc0 <xPortStartScheduler+0x120>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d109      	bne.n	8004ce2 <xPortStartScheduler+0x42>
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	e7fe      	b.n	8004ce0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ce2:	4b38      	ldr	r3, [pc, #224]	; (8004dc4 <xPortStartScheduler+0x124>)
 8004ce4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	22ff      	movs	r2, #255	; 0xff
 8004cf2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cfc:	78fb      	ldrb	r3, [r7, #3]
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	4b30      	ldr	r3, [pc, #192]	; (8004dc8 <xPortStartScheduler+0x128>)
 8004d08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d0a:	4b30      	ldr	r3, [pc, #192]	; (8004dcc <xPortStartScheduler+0x12c>)
 8004d0c:	2207      	movs	r2, #7
 8004d0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d10:	e009      	b.n	8004d26 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004d12:	4b2e      	ldr	r3, [pc, #184]	; (8004dcc <xPortStartScheduler+0x12c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	4a2c      	ldr	r2, [pc, #176]	; (8004dcc <xPortStartScheduler+0x12c>)
 8004d1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d1c:	78fb      	ldrb	r3, [r7, #3]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d26:	78fb      	ldrb	r3, [r7, #3]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2e:	2b80      	cmp	r3, #128	; 0x80
 8004d30:	d0ef      	beq.n	8004d12 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d32:	4b26      	ldr	r3, [pc, #152]	; (8004dcc <xPortStartScheduler+0x12c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f1c3 0307 	rsb	r3, r3, #7
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d009      	beq.n	8004d52 <xPortStartScheduler+0xb2>
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	60bb      	str	r3, [r7, #8]
 8004d50:	e7fe      	b.n	8004d50 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d52:	4b1e      	ldr	r3, [pc, #120]	; (8004dcc <xPortStartScheduler+0x12c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	021b      	lsls	r3, r3, #8
 8004d58:	4a1c      	ldr	r2, [pc, #112]	; (8004dcc <xPortStartScheduler+0x12c>)
 8004d5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d5c:	4b1b      	ldr	r3, [pc, #108]	; (8004dcc <xPortStartScheduler+0x12c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d64:	4a19      	ldr	r2, [pc, #100]	; (8004dcc <xPortStartScheduler+0x12c>)
 8004d66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d70:	4b17      	ldr	r3, [pc, #92]	; (8004dd0 <xPortStartScheduler+0x130>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a16      	ldr	r2, [pc, #88]	; (8004dd0 <xPortStartScheduler+0x130>)
 8004d76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d7c:	4b14      	ldr	r3, [pc, #80]	; (8004dd0 <xPortStartScheduler+0x130>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a13      	ldr	r2, [pc, #76]	; (8004dd0 <xPortStartScheduler+0x130>)
 8004d82:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d88:	f000 f8d6 	bl	8004f38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d8c:	4b11      	ldr	r3, [pc, #68]	; (8004dd4 <xPortStartScheduler+0x134>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d92:	f000 f8f5 	bl	8004f80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d96:	4b10      	ldr	r3, [pc, #64]	; (8004dd8 <xPortStartScheduler+0x138>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a0f      	ldr	r2, [pc, #60]	; (8004dd8 <xPortStartScheduler+0x138>)
 8004d9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004da0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004da2:	f7ff ff69 	bl	8004c78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004da6:	f7fe ffc9 	bl	8003d3c <vTaskSwitchContext>
	prvTaskExitError();
 8004daa:	f7ff ff27 	bl	8004bfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	e000ed00 	.word	0xe000ed00
 8004dbc:	410fc271 	.word	0x410fc271
 8004dc0:	410fc270 	.word	0x410fc270
 8004dc4:	e000e400 	.word	0xe000e400
 8004dc8:	20000928 	.word	0x20000928
 8004dcc:	2000092c 	.word	0x2000092c
 8004dd0:	e000ed20 	.word	0xe000ed20
 8004dd4:	2000000c 	.word	0x2000000c
 8004dd8:	e000ef34 	.word	0xe000ef34

08004ddc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004df4:	4b0e      	ldr	r3, [pc, #56]	; (8004e30 <vPortEnterCritical+0x54>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	4a0d      	ldr	r2, [pc, #52]	; (8004e30 <vPortEnterCritical+0x54>)
 8004dfc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dfe:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <vPortEnterCritical+0x54>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d10e      	bne.n	8004e24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e06:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <vPortEnterCritical+0x58>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d009      	beq.n	8004e24 <vPortEnterCritical+0x48>
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	603b      	str	r3, [r7, #0]
 8004e22:	e7fe      	b.n	8004e22 <vPortEnterCritical+0x46>
	}
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	2000000c 	.word	0x2000000c
 8004e34:	e000ed04 	.word	0xe000ed04

08004e38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e3e:	4b11      	ldr	r3, [pc, #68]	; (8004e84 <vPortExitCritical+0x4c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d109      	bne.n	8004e5a <vPortExitCritical+0x22>
 8004e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	607b      	str	r3, [r7, #4]
 8004e58:	e7fe      	b.n	8004e58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004e5a:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <vPortExitCritical+0x4c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	4a08      	ldr	r2, [pc, #32]	; (8004e84 <vPortExitCritical+0x4c>)
 8004e62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e64:	4b07      	ldr	r3, [pc, #28]	; (8004e84 <vPortExitCritical+0x4c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d104      	bne.n	8004e76 <vPortExitCritical+0x3e>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	2000000c 	.word	0x2000000c
	...

08004e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e90:	f3ef 8009 	mrs	r0, PSP
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	4b15      	ldr	r3, [pc, #84]	; (8004ef0 <pxCurrentTCBConst>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	f01e 0f10 	tst.w	lr, #16
 8004ea0:	bf08      	it	eq
 8004ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eaa:	6010      	str	r0, [r2, #0]
 8004eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004eb4:	f380 8811 	msr	BASEPRI, r0
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f7fe ff3c 	bl	8003d3c <vTaskSwitchContext>
 8004ec4:	f04f 0000 	mov.w	r0, #0
 8004ec8:	f380 8811 	msr	BASEPRI, r0
 8004ecc:	bc09      	pop	{r0, r3}
 8004ece:	6819      	ldr	r1, [r3, #0]
 8004ed0:	6808      	ldr	r0, [r1, #0]
 8004ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed6:	f01e 0f10 	tst.w	lr, #16
 8004eda:	bf08      	it	eq
 8004edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ee0:	f380 8809 	msr	PSP, r0
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	f3af 8000 	nop.w

08004ef0 <pxCurrentTCBConst>:
 8004ef0:	2000073c 	.word	0x2000073c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ef4:	bf00      	nop
 8004ef6:	bf00      	nop

08004ef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f10:	f7fe fe5c 	bl	8003bcc <xTaskIncrementTick>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f1a:	4b06      	ldr	r3, [pc, #24]	; (8004f34 <SysTick_Handler+0x3c>)
 8004f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	2300      	movs	r3, #0
 8004f24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f2c:	bf00      	nop
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	e000ed04 	.word	0xe000ed04

08004f38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f3c:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <vPortSetupTimerInterrupt+0x34>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f42:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <vPortSetupTimerInterrupt+0x38>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f48:	4b0a      	ldr	r3, [pc, #40]	; (8004f74 <vPortSetupTimerInterrupt+0x3c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a0a      	ldr	r2, [pc, #40]	; (8004f78 <vPortSetupTimerInterrupt+0x40>)
 8004f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f52:	099b      	lsrs	r3, r3, #6
 8004f54:	4a09      	ldr	r2, [pc, #36]	; (8004f7c <vPortSetupTimerInterrupt+0x44>)
 8004f56:	3b01      	subs	r3, #1
 8004f58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f5a:	4b04      	ldr	r3, [pc, #16]	; (8004f6c <vPortSetupTimerInterrupt+0x34>)
 8004f5c:	2207      	movs	r2, #7
 8004f5e:	601a      	str	r2, [r3, #0]
}
 8004f60:	bf00      	nop
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	e000e010 	.word	0xe000e010
 8004f70:	e000e018 	.word	0xe000e018
 8004f74:	20000000 	.word	0x20000000
 8004f78:	10624dd3 	.word	0x10624dd3
 8004f7c:	e000e014 	.word	0xe000e014

08004f80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f90 <vPortEnableVFP+0x10>
 8004f84:	6801      	ldr	r1, [r0, #0]
 8004f86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f8a:	6001      	str	r1, [r0, #0]
 8004f8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f8e:	bf00      	nop
 8004f90:	e000ed88 	.word	0xe000ed88

08004f94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f9a:	f3ef 8305 	mrs	r3, IPSR
 8004f9e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b0f      	cmp	r3, #15
 8004fa4:	d913      	bls.n	8004fce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004fa6:	4a16      	ldr	r2, [pc, #88]	; (8005000 <vPortValidateInterruptPriority+0x6c>)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4413      	add	r3, r2
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004fb0:	4b14      	ldr	r3, [pc, #80]	; (8005004 <vPortValidateInterruptPriority+0x70>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	7afa      	ldrb	r2, [r7, #11]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d209      	bcs.n	8004fce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	607b      	str	r3, [r7, #4]
 8004fcc:	e7fe      	b.n	8004fcc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004fce:	4b0e      	ldr	r3, [pc, #56]	; (8005008 <vPortValidateInterruptPriority+0x74>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fd6:	4b0d      	ldr	r3, [pc, #52]	; (800500c <vPortValidateInterruptPriority+0x78>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d909      	bls.n	8004ff2 <vPortValidateInterruptPriority+0x5e>
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	e7fe      	b.n	8004ff0 <vPortValidateInterruptPriority+0x5c>
	}
 8004ff2:	bf00      	nop
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	e000e3f0 	.word	0xe000e3f0
 8005004:	20000928 	.word	0x20000928
 8005008:	e000ed0c 	.word	0xe000ed0c
 800500c:	2000092c 	.word	0x2000092c

08005010 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b08a      	sub	sp, #40	; 0x28
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005018:	2300      	movs	r3, #0
 800501a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800501c:	f7fe fd1c 	bl	8003a58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005020:	4b57      	ldr	r3, [pc, #348]	; (8005180 <pvPortMalloc+0x170>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005028:	f000 f90c 	bl	8005244 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800502c:	4b55      	ldr	r3, [pc, #340]	; (8005184 <pvPortMalloc+0x174>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4013      	ands	r3, r2
 8005034:	2b00      	cmp	r3, #0
 8005036:	f040 808c 	bne.w	8005152 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01c      	beq.n	800507a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005040:	2208      	movs	r2, #8
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4413      	add	r3, r2
 8005046:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	2b00      	cmp	r3, #0
 8005050:	d013      	beq.n	800507a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f023 0307 	bic.w	r3, r3, #7
 8005058:	3308      	adds	r3, #8
 800505a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	2b00      	cmp	r3, #0
 8005064:	d009      	beq.n	800507a <pvPortMalloc+0x6a>
 8005066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	e7fe      	b.n	8005078 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d068      	beq.n	8005152 <pvPortMalloc+0x142>
 8005080:	4b41      	ldr	r3, [pc, #260]	; (8005188 <pvPortMalloc+0x178>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	429a      	cmp	r2, r3
 8005088:	d863      	bhi.n	8005152 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800508a:	4b40      	ldr	r3, [pc, #256]	; (800518c <pvPortMalloc+0x17c>)
 800508c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800508e:	4b3f      	ldr	r3, [pc, #252]	; (800518c <pvPortMalloc+0x17c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005094:	e004      	b.n	80050a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d903      	bls.n	80050b2 <pvPortMalloc+0xa2>
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1f1      	bne.n	8005096 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80050b2:	4b33      	ldr	r3, [pc, #204]	; (8005180 <pvPortMalloc+0x170>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d04a      	beq.n	8005152 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2208      	movs	r2, #8
 80050c2:	4413      	add	r3, r2
 80050c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	1ad2      	subs	r2, r2, r3
 80050d6:	2308      	movs	r3, #8
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	429a      	cmp	r2, r3
 80050dc:	d91e      	bls.n	800511c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4413      	add	r3, r2
 80050e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d009      	beq.n	8005104 <pvPortMalloc+0xf4>
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	613b      	str	r3, [r7, #16]
 8005102:	e7fe      	b.n	8005102 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	1ad2      	subs	r2, r2, r3
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005116:	69b8      	ldr	r0, [r7, #24]
 8005118:	f000 f8f6 	bl	8005308 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800511c:	4b1a      	ldr	r3, [pc, #104]	; (8005188 <pvPortMalloc+0x178>)
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	4a18      	ldr	r2, [pc, #96]	; (8005188 <pvPortMalloc+0x178>)
 8005128:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800512a:	4b17      	ldr	r3, [pc, #92]	; (8005188 <pvPortMalloc+0x178>)
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	4b18      	ldr	r3, [pc, #96]	; (8005190 <pvPortMalloc+0x180>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d203      	bcs.n	800513e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005136:	4b14      	ldr	r3, [pc, #80]	; (8005188 <pvPortMalloc+0x178>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a15      	ldr	r2, [pc, #84]	; (8005190 <pvPortMalloc+0x180>)
 800513c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	4b10      	ldr	r3, [pc, #64]	; (8005184 <pvPortMalloc+0x174>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	431a      	orrs	r2, r3
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005152:	f7fe fc8f 	bl	8003a74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	2b00      	cmp	r3, #0
 800515e:	d009      	beq.n	8005174 <pvPortMalloc+0x164>
 8005160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005164:	f383 8811 	msr	BASEPRI, r3
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	e7fe      	b.n	8005172 <pvPortMalloc+0x162>
	return pvReturn;
 8005174:	69fb      	ldr	r3, [r7, #28]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3728      	adds	r7, #40	; 0x28
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	20004538 	.word	0x20004538
 8005184:	20004544 	.word	0x20004544
 8005188:	2000453c 	.word	0x2000453c
 800518c:	20004530 	.word	0x20004530
 8005190:	20004540 	.word	0x20004540

08005194 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d046      	beq.n	8005234 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051a6:	2308      	movs	r3, #8
 80051a8:	425b      	negs	r3, r3
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4413      	add	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	4b20      	ldr	r3, [pc, #128]	; (800523c <vPortFree+0xa8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4013      	ands	r3, r2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d109      	bne.n	80051d6 <vPortFree+0x42>
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	e7fe      	b.n	80051d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d009      	beq.n	80051f2 <vPortFree+0x5e>
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	60bb      	str	r3, [r7, #8]
 80051f0:	e7fe      	b.n	80051f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	4b11      	ldr	r3, [pc, #68]	; (800523c <vPortFree+0xa8>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d019      	beq.n	8005234 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d115      	bne.n	8005234 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	4b0b      	ldr	r3, [pc, #44]	; (800523c <vPortFree+0xa8>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	43db      	mvns	r3, r3
 8005212:	401a      	ands	r2, r3
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005218:	f7fe fc1e 	bl	8003a58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	4b07      	ldr	r3, [pc, #28]	; (8005240 <vPortFree+0xac>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4413      	add	r3, r2
 8005226:	4a06      	ldr	r2, [pc, #24]	; (8005240 <vPortFree+0xac>)
 8005228:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800522a:	6938      	ldr	r0, [r7, #16]
 800522c:	f000 f86c 	bl	8005308 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005230:	f7fe fc20 	bl	8003a74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005234:	bf00      	nop
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	20004544 	.word	0x20004544
 8005240:	2000453c 	.word	0x2000453c

08005244 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800524a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800524e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005250:	4b27      	ldr	r3, [pc, #156]	; (80052f0 <prvHeapInit+0xac>)
 8005252:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00c      	beq.n	8005278 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3307      	adds	r3, #7
 8005262:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f023 0307 	bic.w	r3, r3, #7
 800526a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	4a1f      	ldr	r2, [pc, #124]	; (80052f0 <prvHeapInit+0xac>)
 8005274:	4413      	add	r3, r2
 8005276:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800527c:	4a1d      	ldr	r2, [pc, #116]	; (80052f4 <prvHeapInit+0xb0>)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005282:	4b1c      	ldr	r3, [pc, #112]	; (80052f4 <prvHeapInit+0xb0>)
 8005284:	2200      	movs	r2, #0
 8005286:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	4413      	add	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005290:	2208      	movs	r2, #8
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 0307 	bic.w	r3, r3, #7
 800529e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4a15      	ldr	r2, [pc, #84]	; (80052f8 <prvHeapInit+0xb4>)
 80052a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052a6:	4b14      	ldr	r3, [pc, #80]	; (80052f8 <prvHeapInit+0xb4>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2200      	movs	r2, #0
 80052ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052ae:	4b12      	ldr	r3, [pc, #72]	; (80052f8 <prvHeapInit+0xb4>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	1ad2      	subs	r2, r2, r3
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052c4:	4b0c      	ldr	r3, [pc, #48]	; (80052f8 <prvHeapInit+0xb4>)
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	4a0a      	ldr	r2, [pc, #40]	; (80052fc <prvHeapInit+0xb8>)
 80052d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	4a09      	ldr	r2, [pc, #36]	; (8005300 <prvHeapInit+0xbc>)
 80052da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052dc:	4b09      	ldr	r3, [pc, #36]	; (8005304 <prvHeapInit+0xc0>)
 80052de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80052e2:	601a      	str	r2, [r3, #0]
}
 80052e4:	bf00      	nop
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	20000930 	.word	0x20000930
 80052f4:	20004530 	.word	0x20004530
 80052f8:	20004538 	.word	0x20004538
 80052fc:	20004540 	.word	0x20004540
 8005300:	2000453c 	.word	0x2000453c
 8005304:	20004544 	.word	0x20004544

08005308 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005310:	4b28      	ldr	r3, [pc, #160]	; (80053b4 <prvInsertBlockIntoFreeList+0xac>)
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	e002      	b.n	800531c <prvInsertBlockIntoFreeList+0x14>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	429a      	cmp	r2, r3
 8005324:	d8f7      	bhi.n	8005316 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	4413      	add	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	429a      	cmp	r2, r3
 8005336:	d108      	bne.n	800534a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	441a      	add	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	441a      	add	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d118      	bne.n	8005390 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	4b15      	ldr	r3, [pc, #84]	; (80053b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d00d      	beq.n	8005386 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	441a      	add	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	e008      	b.n	8005398 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005386:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	601a      	str	r2, [r3, #0]
 800538e:	e003      	b.n	8005398 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	429a      	cmp	r2, r3
 800539e:	d002      	beq.n	80053a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053a6:	bf00      	nop
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	20004530 	.word	0x20004530
 80053b8:	20004538 	.word	0x20004538

080053bc <__errno>:
 80053bc:	4b01      	ldr	r3, [pc, #4]	; (80053c4 <__errno+0x8>)
 80053be:	6818      	ldr	r0, [r3, #0]
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	20000010 	.word	0x20000010

080053c8 <__libc_init_array>:
 80053c8:	b570      	push	{r4, r5, r6, lr}
 80053ca:	4e0d      	ldr	r6, [pc, #52]	; (8005400 <__libc_init_array+0x38>)
 80053cc:	4c0d      	ldr	r4, [pc, #52]	; (8005404 <__libc_init_array+0x3c>)
 80053ce:	1ba4      	subs	r4, r4, r6
 80053d0:	10a4      	asrs	r4, r4, #2
 80053d2:	2500      	movs	r5, #0
 80053d4:	42a5      	cmp	r5, r4
 80053d6:	d109      	bne.n	80053ec <__libc_init_array+0x24>
 80053d8:	4e0b      	ldr	r6, [pc, #44]	; (8005408 <__libc_init_array+0x40>)
 80053da:	4c0c      	ldr	r4, [pc, #48]	; (800540c <__libc_init_array+0x44>)
 80053dc:	f000 fc3c 	bl	8005c58 <_init>
 80053e0:	1ba4      	subs	r4, r4, r6
 80053e2:	10a4      	asrs	r4, r4, #2
 80053e4:	2500      	movs	r5, #0
 80053e6:	42a5      	cmp	r5, r4
 80053e8:	d105      	bne.n	80053f6 <__libc_init_array+0x2e>
 80053ea:	bd70      	pop	{r4, r5, r6, pc}
 80053ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053f0:	4798      	blx	r3
 80053f2:	3501      	adds	r5, #1
 80053f4:	e7ee      	b.n	80053d4 <__libc_init_array+0xc>
 80053f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053fa:	4798      	blx	r3
 80053fc:	3501      	adds	r5, #1
 80053fe:	e7f2      	b.n	80053e6 <__libc_init_array+0x1e>
 8005400:	08005d8c 	.word	0x08005d8c
 8005404:	08005d8c 	.word	0x08005d8c
 8005408:	08005d8c 	.word	0x08005d8c
 800540c:	08005d90 	.word	0x08005d90

08005410 <memcpy>:
 8005410:	b510      	push	{r4, lr}
 8005412:	1e43      	subs	r3, r0, #1
 8005414:	440a      	add	r2, r1
 8005416:	4291      	cmp	r1, r2
 8005418:	d100      	bne.n	800541c <memcpy+0xc>
 800541a:	bd10      	pop	{r4, pc}
 800541c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005420:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005424:	e7f7      	b.n	8005416 <memcpy+0x6>

08005426 <memset>:
 8005426:	4402      	add	r2, r0
 8005428:	4603      	mov	r3, r0
 800542a:	4293      	cmp	r3, r2
 800542c:	d100      	bne.n	8005430 <memset+0xa>
 800542e:	4770      	bx	lr
 8005430:	f803 1b01 	strb.w	r1, [r3], #1
 8005434:	e7f9      	b.n	800542a <memset+0x4>
	...

08005438 <sniprintf>:
 8005438:	b40c      	push	{r2, r3}
 800543a:	b530      	push	{r4, r5, lr}
 800543c:	4b17      	ldr	r3, [pc, #92]	; (800549c <sniprintf+0x64>)
 800543e:	1e0c      	subs	r4, r1, #0
 8005440:	b09d      	sub	sp, #116	; 0x74
 8005442:	681d      	ldr	r5, [r3, #0]
 8005444:	da08      	bge.n	8005458 <sniprintf+0x20>
 8005446:	238b      	movs	r3, #139	; 0x8b
 8005448:	602b      	str	r3, [r5, #0]
 800544a:	f04f 30ff 	mov.w	r0, #4294967295
 800544e:	b01d      	add	sp, #116	; 0x74
 8005450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005454:	b002      	add	sp, #8
 8005456:	4770      	bx	lr
 8005458:	f44f 7302 	mov.w	r3, #520	; 0x208
 800545c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005460:	bf14      	ite	ne
 8005462:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005466:	4623      	moveq	r3, r4
 8005468:	9304      	str	r3, [sp, #16]
 800546a:	9307      	str	r3, [sp, #28]
 800546c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005470:	9002      	str	r0, [sp, #8]
 8005472:	9006      	str	r0, [sp, #24]
 8005474:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005478:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800547a:	ab21      	add	r3, sp, #132	; 0x84
 800547c:	a902      	add	r1, sp, #8
 800547e:	4628      	mov	r0, r5
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	f000 f867 	bl	8005554 <_svfiprintf_r>
 8005486:	1c43      	adds	r3, r0, #1
 8005488:	bfbc      	itt	lt
 800548a:	238b      	movlt	r3, #139	; 0x8b
 800548c:	602b      	strlt	r3, [r5, #0]
 800548e:	2c00      	cmp	r4, #0
 8005490:	d0dd      	beq.n	800544e <sniprintf+0x16>
 8005492:	9b02      	ldr	r3, [sp, #8]
 8005494:	2200      	movs	r2, #0
 8005496:	701a      	strb	r2, [r3, #0]
 8005498:	e7d9      	b.n	800544e <sniprintf+0x16>
 800549a:	bf00      	nop
 800549c:	20000010 	.word	0x20000010

080054a0 <__ssputs_r>:
 80054a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054a4:	688e      	ldr	r6, [r1, #8]
 80054a6:	429e      	cmp	r6, r3
 80054a8:	4682      	mov	sl, r0
 80054aa:	460c      	mov	r4, r1
 80054ac:	4690      	mov	r8, r2
 80054ae:	4699      	mov	r9, r3
 80054b0:	d837      	bhi.n	8005522 <__ssputs_r+0x82>
 80054b2:	898a      	ldrh	r2, [r1, #12]
 80054b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80054b8:	d031      	beq.n	800551e <__ssputs_r+0x7e>
 80054ba:	6825      	ldr	r5, [r4, #0]
 80054bc:	6909      	ldr	r1, [r1, #16]
 80054be:	1a6f      	subs	r7, r5, r1
 80054c0:	6965      	ldr	r5, [r4, #20]
 80054c2:	2302      	movs	r3, #2
 80054c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80054cc:	f109 0301 	add.w	r3, r9, #1
 80054d0:	443b      	add	r3, r7
 80054d2:	429d      	cmp	r5, r3
 80054d4:	bf38      	it	cc
 80054d6:	461d      	movcc	r5, r3
 80054d8:	0553      	lsls	r3, r2, #21
 80054da:	d530      	bpl.n	800553e <__ssputs_r+0x9e>
 80054dc:	4629      	mov	r1, r5
 80054de:	f000 fb21 	bl	8005b24 <_malloc_r>
 80054e2:	4606      	mov	r6, r0
 80054e4:	b950      	cbnz	r0, 80054fc <__ssputs_r+0x5c>
 80054e6:	230c      	movs	r3, #12
 80054e8:	f8ca 3000 	str.w	r3, [sl]
 80054ec:	89a3      	ldrh	r3, [r4, #12]
 80054ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054f2:	81a3      	strh	r3, [r4, #12]
 80054f4:	f04f 30ff 	mov.w	r0, #4294967295
 80054f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054fc:	463a      	mov	r2, r7
 80054fe:	6921      	ldr	r1, [r4, #16]
 8005500:	f7ff ff86 	bl	8005410 <memcpy>
 8005504:	89a3      	ldrh	r3, [r4, #12]
 8005506:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800550a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550e:	81a3      	strh	r3, [r4, #12]
 8005510:	6126      	str	r6, [r4, #16]
 8005512:	6165      	str	r5, [r4, #20]
 8005514:	443e      	add	r6, r7
 8005516:	1bed      	subs	r5, r5, r7
 8005518:	6026      	str	r6, [r4, #0]
 800551a:	60a5      	str	r5, [r4, #8]
 800551c:	464e      	mov	r6, r9
 800551e:	454e      	cmp	r6, r9
 8005520:	d900      	bls.n	8005524 <__ssputs_r+0x84>
 8005522:	464e      	mov	r6, r9
 8005524:	4632      	mov	r2, r6
 8005526:	4641      	mov	r1, r8
 8005528:	6820      	ldr	r0, [r4, #0]
 800552a:	f000 fa93 	bl	8005a54 <memmove>
 800552e:	68a3      	ldr	r3, [r4, #8]
 8005530:	1b9b      	subs	r3, r3, r6
 8005532:	60a3      	str	r3, [r4, #8]
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	441e      	add	r6, r3
 8005538:	6026      	str	r6, [r4, #0]
 800553a:	2000      	movs	r0, #0
 800553c:	e7dc      	b.n	80054f8 <__ssputs_r+0x58>
 800553e:	462a      	mov	r2, r5
 8005540:	f000 fb4a 	bl	8005bd8 <_realloc_r>
 8005544:	4606      	mov	r6, r0
 8005546:	2800      	cmp	r0, #0
 8005548:	d1e2      	bne.n	8005510 <__ssputs_r+0x70>
 800554a:	6921      	ldr	r1, [r4, #16]
 800554c:	4650      	mov	r0, sl
 800554e:	f000 fa9b 	bl	8005a88 <_free_r>
 8005552:	e7c8      	b.n	80054e6 <__ssputs_r+0x46>

08005554 <_svfiprintf_r>:
 8005554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005558:	461d      	mov	r5, r3
 800555a:	898b      	ldrh	r3, [r1, #12]
 800555c:	061f      	lsls	r7, r3, #24
 800555e:	b09d      	sub	sp, #116	; 0x74
 8005560:	4680      	mov	r8, r0
 8005562:	460c      	mov	r4, r1
 8005564:	4616      	mov	r6, r2
 8005566:	d50f      	bpl.n	8005588 <_svfiprintf_r+0x34>
 8005568:	690b      	ldr	r3, [r1, #16]
 800556a:	b96b      	cbnz	r3, 8005588 <_svfiprintf_r+0x34>
 800556c:	2140      	movs	r1, #64	; 0x40
 800556e:	f000 fad9 	bl	8005b24 <_malloc_r>
 8005572:	6020      	str	r0, [r4, #0]
 8005574:	6120      	str	r0, [r4, #16]
 8005576:	b928      	cbnz	r0, 8005584 <_svfiprintf_r+0x30>
 8005578:	230c      	movs	r3, #12
 800557a:	f8c8 3000 	str.w	r3, [r8]
 800557e:	f04f 30ff 	mov.w	r0, #4294967295
 8005582:	e0c8      	b.n	8005716 <_svfiprintf_r+0x1c2>
 8005584:	2340      	movs	r3, #64	; 0x40
 8005586:	6163      	str	r3, [r4, #20]
 8005588:	2300      	movs	r3, #0
 800558a:	9309      	str	r3, [sp, #36]	; 0x24
 800558c:	2320      	movs	r3, #32
 800558e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005592:	2330      	movs	r3, #48	; 0x30
 8005594:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005598:	9503      	str	r5, [sp, #12]
 800559a:	f04f 0b01 	mov.w	fp, #1
 800559e:	4637      	mov	r7, r6
 80055a0:	463d      	mov	r5, r7
 80055a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80055a6:	b10b      	cbz	r3, 80055ac <_svfiprintf_r+0x58>
 80055a8:	2b25      	cmp	r3, #37	; 0x25
 80055aa:	d13e      	bne.n	800562a <_svfiprintf_r+0xd6>
 80055ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80055b0:	d00b      	beq.n	80055ca <_svfiprintf_r+0x76>
 80055b2:	4653      	mov	r3, sl
 80055b4:	4632      	mov	r2, r6
 80055b6:	4621      	mov	r1, r4
 80055b8:	4640      	mov	r0, r8
 80055ba:	f7ff ff71 	bl	80054a0 <__ssputs_r>
 80055be:	3001      	adds	r0, #1
 80055c0:	f000 80a4 	beq.w	800570c <_svfiprintf_r+0x1b8>
 80055c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055c6:	4453      	add	r3, sl
 80055c8:	9309      	str	r3, [sp, #36]	; 0x24
 80055ca:	783b      	ldrb	r3, [r7, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 809d 	beq.w	800570c <_svfiprintf_r+0x1b8>
 80055d2:	2300      	movs	r3, #0
 80055d4:	f04f 32ff 	mov.w	r2, #4294967295
 80055d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055dc:	9304      	str	r3, [sp, #16]
 80055de:	9307      	str	r3, [sp, #28]
 80055e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055e4:	931a      	str	r3, [sp, #104]	; 0x68
 80055e6:	462f      	mov	r7, r5
 80055e8:	2205      	movs	r2, #5
 80055ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 80055ee:	4850      	ldr	r0, [pc, #320]	; (8005730 <_svfiprintf_r+0x1dc>)
 80055f0:	f7fa fdf6 	bl	80001e0 <memchr>
 80055f4:	9b04      	ldr	r3, [sp, #16]
 80055f6:	b9d0      	cbnz	r0, 800562e <_svfiprintf_r+0xda>
 80055f8:	06d9      	lsls	r1, r3, #27
 80055fa:	bf44      	itt	mi
 80055fc:	2220      	movmi	r2, #32
 80055fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005602:	071a      	lsls	r2, r3, #28
 8005604:	bf44      	itt	mi
 8005606:	222b      	movmi	r2, #43	; 0x2b
 8005608:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800560c:	782a      	ldrb	r2, [r5, #0]
 800560e:	2a2a      	cmp	r2, #42	; 0x2a
 8005610:	d015      	beq.n	800563e <_svfiprintf_r+0xea>
 8005612:	9a07      	ldr	r2, [sp, #28]
 8005614:	462f      	mov	r7, r5
 8005616:	2000      	movs	r0, #0
 8005618:	250a      	movs	r5, #10
 800561a:	4639      	mov	r1, r7
 800561c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005620:	3b30      	subs	r3, #48	; 0x30
 8005622:	2b09      	cmp	r3, #9
 8005624:	d94d      	bls.n	80056c2 <_svfiprintf_r+0x16e>
 8005626:	b1b8      	cbz	r0, 8005658 <_svfiprintf_r+0x104>
 8005628:	e00f      	b.n	800564a <_svfiprintf_r+0xf6>
 800562a:	462f      	mov	r7, r5
 800562c:	e7b8      	b.n	80055a0 <_svfiprintf_r+0x4c>
 800562e:	4a40      	ldr	r2, [pc, #256]	; (8005730 <_svfiprintf_r+0x1dc>)
 8005630:	1a80      	subs	r0, r0, r2
 8005632:	fa0b f000 	lsl.w	r0, fp, r0
 8005636:	4318      	orrs	r0, r3
 8005638:	9004      	str	r0, [sp, #16]
 800563a:	463d      	mov	r5, r7
 800563c:	e7d3      	b.n	80055e6 <_svfiprintf_r+0x92>
 800563e:	9a03      	ldr	r2, [sp, #12]
 8005640:	1d11      	adds	r1, r2, #4
 8005642:	6812      	ldr	r2, [r2, #0]
 8005644:	9103      	str	r1, [sp, #12]
 8005646:	2a00      	cmp	r2, #0
 8005648:	db01      	blt.n	800564e <_svfiprintf_r+0xfa>
 800564a:	9207      	str	r2, [sp, #28]
 800564c:	e004      	b.n	8005658 <_svfiprintf_r+0x104>
 800564e:	4252      	negs	r2, r2
 8005650:	f043 0302 	orr.w	r3, r3, #2
 8005654:	9207      	str	r2, [sp, #28]
 8005656:	9304      	str	r3, [sp, #16]
 8005658:	783b      	ldrb	r3, [r7, #0]
 800565a:	2b2e      	cmp	r3, #46	; 0x2e
 800565c:	d10c      	bne.n	8005678 <_svfiprintf_r+0x124>
 800565e:	787b      	ldrb	r3, [r7, #1]
 8005660:	2b2a      	cmp	r3, #42	; 0x2a
 8005662:	d133      	bne.n	80056cc <_svfiprintf_r+0x178>
 8005664:	9b03      	ldr	r3, [sp, #12]
 8005666:	1d1a      	adds	r2, r3, #4
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	9203      	str	r2, [sp, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	bfb8      	it	lt
 8005670:	f04f 33ff 	movlt.w	r3, #4294967295
 8005674:	3702      	adds	r7, #2
 8005676:	9305      	str	r3, [sp, #20]
 8005678:	4d2e      	ldr	r5, [pc, #184]	; (8005734 <_svfiprintf_r+0x1e0>)
 800567a:	7839      	ldrb	r1, [r7, #0]
 800567c:	2203      	movs	r2, #3
 800567e:	4628      	mov	r0, r5
 8005680:	f7fa fdae 	bl	80001e0 <memchr>
 8005684:	b138      	cbz	r0, 8005696 <_svfiprintf_r+0x142>
 8005686:	2340      	movs	r3, #64	; 0x40
 8005688:	1b40      	subs	r0, r0, r5
 800568a:	fa03 f000 	lsl.w	r0, r3, r0
 800568e:	9b04      	ldr	r3, [sp, #16]
 8005690:	4303      	orrs	r3, r0
 8005692:	3701      	adds	r7, #1
 8005694:	9304      	str	r3, [sp, #16]
 8005696:	7839      	ldrb	r1, [r7, #0]
 8005698:	4827      	ldr	r0, [pc, #156]	; (8005738 <_svfiprintf_r+0x1e4>)
 800569a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800569e:	2206      	movs	r2, #6
 80056a0:	1c7e      	adds	r6, r7, #1
 80056a2:	f7fa fd9d 	bl	80001e0 <memchr>
 80056a6:	2800      	cmp	r0, #0
 80056a8:	d038      	beq.n	800571c <_svfiprintf_r+0x1c8>
 80056aa:	4b24      	ldr	r3, [pc, #144]	; (800573c <_svfiprintf_r+0x1e8>)
 80056ac:	bb13      	cbnz	r3, 80056f4 <_svfiprintf_r+0x1a0>
 80056ae:	9b03      	ldr	r3, [sp, #12]
 80056b0:	3307      	adds	r3, #7
 80056b2:	f023 0307 	bic.w	r3, r3, #7
 80056b6:	3308      	adds	r3, #8
 80056b8:	9303      	str	r3, [sp, #12]
 80056ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056bc:	444b      	add	r3, r9
 80056be:	9309      	str	r3, [sp, #36]	; 0x24
 80056c0:	e76d      	b.n	800559e <_svfiprintf_r+0x4a>
 80056c2:	fb05 3202 	mla	r2, r5, r2, r3
 80056c6:	2001      	movs	r0, #1
 80056c8:	460f      	mov	r7, r1
 80056ca:	e7a6      	b.n	800561a <_svfiprintf_r+0xc6>
 80056cc:	2300      	movs	r3, #0
 80056ce:	3701      	adds	r7, #1
 80056d0:	9305      	str	r3, [sp, #20]
 80056d2:	4619      	mov	r1, r3
 80056d4:	250a      	movs	r5, #10
 80056d6:	4638      	mov	r0, r7
 80056d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056dc:	3a30      	subs	r2, #48	; 0x30
 80056de:	2a09      	cmp	r2, #9
 80056e0:	d903      	bls.n	80056ea <_svfiprintf_r+0x196>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0c8      	beq.n	8005678 <_svfiprintf_r+0x124>
 80056e6:	9105      	str	r1, [sp, #20]
 80056e8:	e7c6      	b.n	8005678 <_svfiprintf_r+0x124>
 80056ea:	fb05 2101 	mla	r1, r5, r1, r2
 80056ee:	2301      	movs	r3, #1
 80056f0:	4607      	mov	r7, r0
 80056f2:	e7f0      	b.n	80056d6 <_svfiprintf_r+0x182>
 80056f4:	ab03      	add	r3, sp, #12
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	4622      	mov	r2, r4
 80056fa:	4b11      	ldr	r3, [pc, #68]	; (8005740 <_svfiprintf_r+0x1ec>)
 80056fc:	a904      	add	r1, sp, #16
 80056fe:	4640      	mov	r0, r8
 8005700:	f3af 8000 	nop.w
 8005704:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005708:	4681      	mov	r9, r0
 800570a:	d1d6      	bne.n	80056ba <_svfiprintf_r+0x166>
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	065b      	lsls	r3, r3, #25
 8005710:	f53f af35 	bmi.w	800557e <_svfiprintf_r+0x2a>
 8005714:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005716:	b01d      	add	sp, #116	; 0x74
 8005718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800571c:	ab03      	add	r3, sp, #12
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	4622      	mov	r2, r4
 8005722:	4b07      	ldr	r3, [pc, #28]	; (8005740 <_svfiprintf_r+0x1ec>)
 8005724:	a904      	add	r1, sp, #16
 8005726:	4640      	mov	r0, r8
 8005728:	f000 f882 	bl	8005830 <_printf_i>
 800572c:	e7ea      	b.n	8005704 <_svfiprintf_r+0x1b0>
 800572e:	bf00      	nop
 8005730:	08005d50 	.word	0x08005d50
 8005734:	08005d56 	.word	0x08005d56
 8005738:	08005d5a 	.word	0x08005d5a
 800573c:	00000000 	.word	0x00000000
 8005740:	080054a1 	.word	0x080054a1

08005744 <_printf_common>:
 8005744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005748:	4691      	mov	r9, r2
 800574a:	461f      	mov	r7, r3
 800574c:	688a      	ldr	r2, [r1, #8]
 800574e:	690b      	ldr	r3, [r1, #16]
 8005750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005754:	4293      	cmp	r3, r2
 8005756:	bfb8      	it	lt
 8005758:	4613      	movlt	r3, r2
 800575a:	f8c9 3000 	str.w	r3, [r9]
 800575e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005762:	4606      	mov	r6, r0
 8005764:	460c      	mov	r4, r1
 8005766:	b112      	cbz	r2, 800576e <_printf_common+0x2a>
 8005768:	3301      	adds	r3, #1
 800576a:	f8c9 3000 	str.w	r3, [r9]
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	0699      	lsls	r1, r3, #26
 8005772:	bf42      	ittt	mi
 8005774:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005778:	3302      	addmi	r3, #2
 800577a:	f8c9 3000 	strmi.w	r3, [r9]
 800577e:	6825      	ldr	r5, [r4, #0]
 8005780:	f015 0506 	ands.w	r5, r5, #6
 8005784:	d107      	bne.n	8005796 <_printf_common+0x52>
 8005786:	f104 0a19 	add.w	sl, r4, #25
 800578a:	68e3      	ldr	r3, [r4, #12]
 800578c:	f8d9 2000 	ldr.w	r2, [r9]
 8005790:	1a9b      	subs	r3, r3, r2
 8005792:	42ab      	cmp	r3, r5
 8005794:	dc28      	bgt.n	80057e8 <_printf_common+0xa4>
 8005796:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800579a:	6822      	ldr	r2, [r4, #0]
 800579c:	3300      	adds	r3, #0
 800579e:	bf18      	it	ne
 80057a0:	2301      	movne	r3, #1
 80057a2:	0692      	lsls	r2, r2, #26
 80057a4:	d42d      	bmi.n	8005802 <_printf_common+0xbe>
 80057a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057aa:	4639      	mov	r1, r7
 80057ac:	4630      	mov	r0, r6
 80057ae:	47c0      	blx	r8
 80057b0:	3001      	adds	r0, #1
 80057b2:	d020      	beq.n	80057f6 <_printf_common+0xb2>
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	68e5      	ldr	r5, [r4, #12]
 80057b8:	f8d9 2000 	ldr.w	r2, [r9]
 80057bc:	f003 0306 	and.w	r3, r3, #6
 80057c0:	2b04      	cmp	r3, #4
 80057c2:	bf08      	it	eq
 80057c4:	1aad      	subeq	r5, r5, r2
 80057c6:	68a3      	ldr	r3, [r4, #8]
 80057c8:	6922      	ldr	r2, [r4, #16]
 80057ca:	bf0c      	ite	eq
 80057cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057d0:	2500      	movne	r5, #0
 80057d2:	4293      	cmp	r3, r2
 80057d4:	bfc4      	itt	gt
 80057d6:	1a9b      	subgt	r3, r3, r2
 80057d8:	18ed      	addgt	r5, r5, r3
 80057da:	f04f 0900 	mov.w	r9, #0
 80057de:	341a      	adds	r4, #26
 80057e0:	454d      	cmp	r5, r9
 80057e2:	d11a      	bne.n	800581a <_printf_common+0xd6>
 80057e4:	2000      	movs	r0, #0
 80057e6:	e008      	b.n	80057fa <_printf_common+0xb6>
 80057e8:	2301      	movs	r3, #1
 80057ea:	4652      	mov	r2, sl
 80057ec:	4639      	mov	r1, r7
 80057ee:	4630      	mov	r0, r6
 80057f0:	47c0      	blx	r8
 80057f2:	3001      	adds	r0, #1
 80057f4:	d103      	bne.n	80057fe <_printf_common+0xba>
 80057f6:	f04f 30ff 	mov.w	r0, #4294967295
 80057fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057fe:	3501      	adds	r5, #1
 8005800:	e7c3      	b.n	800578a <_printf_common+0x46>
 8005802:	18e1      	adds	r1, r4, r3
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	2030      	movs	r0, #48	; 0x30
 8005808:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800580c:	4422      	add	r2, r4
 800580e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005812:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005816:	3302      	adds	r3, #2
 8005818:	e7c5      	b.n	80057a6 <_printf_common+0x62>
 800581a:	2301      	movs	r3, #1
 800581c:	4622      	mov	r2, r4
 800581e:	4639      	mov	r1, r7
 8005820:	4630      	mov	r0, r6
 8005822:	47c0      	blx	r8
 8005824:	3001      	adds	r0, #1
 8005826:	d0e6      	beq.n	80057f6 <_printf_common+0xb2>
 8005828:	f109 0901 	add.w	r9, r9, #1
 800582c:	e7d8      	b.n	80057e0 <_printf_common+0x9c>
	...

08005830 <_printf_i>:
 8005830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005834:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005838:	460c      	mov	r4, r1
 800583a:	7e09      	ldrb	r1, [r1, #24]
 800583c:	b085      	sub	sp, #20
 800583e:	296e      	cmp	r1, #110	; 0x6e
 8005840:	4617      	mov	r7, r2
 8005842:	4606      	mov	r6, r0
 8005844:	4698      	mov	r8, r3
 8005846:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005848:	f000 80b3 	beq.w	80059b2 <_printf_i+0x182>
 800584c:	d822      	bhi.n	8005894 <_printf_i+0x64>
 800584e:	2963      	cmp	r1, #99	; 0x63
 8005850:	d036      	beq.n	80058c0 <_printf_i+0x90>
 8005852:	d80a      	bhi.n	800586a <_printf_i+0x3a>
 8005854:	2900      	cmp	r1, #0
 8005856:	f000 80b9 	beq.w	80059cc <_printf_i+0x19c>
 800585a:	2958      	cmp	r1, #88	; 0x58
 800585c:	f000 8083 	beq.w	8005966 <_printf_i+0x136>
 8005860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005864:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005868:	e032      	b.n	80058d0 <_printf_i+0xa0>
 800586a:	2964      	cmp	r1, #100	; 0x64
 800586c:	d001      	beq.n	8005872 <_printf_i+0x42>
 800586e:	2969      	cmp	r1, #105	; 0x69
 8005870:	d1f6      	bne.n	8005860 <_printf_i+0x30>
 8005872:	6820      	ldr	r0, [r4, #0]
 8005874:	6813      	ldr	r3, [r2, #0]
 8005876:	0605      	lsls	r5, r0, #24
 8005878:	f103 0104 	add.w	r1, r3, #4
 800587c:	d52a      	bpl.n	80058d4 <_printf_i+0xa4>
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6011      	str	r1, [r2, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	da03      	bge.n	800588e <_printf_i+0x5e>
 8005886:	222d      	movs	r2, #45	; 0x2d
 8005888:	425b      	negs	r3, r3
 800588a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800588e:	486f      	ldr	r0, [pc, #444]	; (8005a4c <_printf_i+0x21c>)
 8005890:	220a      	movs	r2, #10
 8005892:	e039      	b.n	8005908 <_printf_i+0xd8>
 8005894:	2973      	cmp	r1, #115	; 0x73
 8005896:	f000 809d 	beq.w	80059d4 <_printf_i+0x1a4>
 800589a:	d808      	bhi.n	80058ae <_printf_i+0x7e>
 800589c:	296f      	cmp	r1, #111	; 0x6f
 800589e:	d020      	beq.n	80058e2 <_printf_i+0xb2>
 80058a0:	2970      	cmp	r1, #112	; 0x70
 80058a2:	d1dd      	bne.n	8005860 <_printf_i+0x30>
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	f043 0320 	orr.w	r3, r3, #32
 80058aa:	6023      	str	r3, [r4, #0]
 80058ac:	e003      	b.n	80058b6 <_printf_i+0x86>
 80058ae:	2975      	cmp	r1, #117	; 0x75
 80058b0:	d017      	beq.n	80058e2 <_printf_i+0xb2>
 80058b2:	2978      	cmp	r1, #120	; 0x78
 80058b4:	d1d4      	bne.n	8005860 <_printf_i+0x30>
 80058b6:	2378      	movs	r3, #120	; 0x78
 80058b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058bc:	4864      	ldr	r0, [pc, #400]	; (8005a50 <_printf_i+0x220>)
 80058be:	e055      	b.n	800596c <_printf_i+0x13c>
 80058c0:	6813      	ldr	r3, [r2, #0]
 80058c2:	1d19      	adds	r1, r3, #4
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6011      	str	r1, [r2, #0]
 80058c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058d0:	2301      	movs	r3, #1
 80058d2:	e08c      	b.n	80059ee <_printf_i+0x1be>
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6011      	str	r1, [r2, #0]
 80058d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058dc:	bf18      	it	ne
 80058de:	b21b      	sxthne	r3, r3
 80058e0:	e7cf      	b.n	8005882 <_printf_i+0x52>
 80058e2:	6813      	ldr	r3, [r2, #0]
 80058e4:	6825      	ldr	r5, [r4, #0]
 80058e6:	1d18      	adds	r0, r3, #4
 80058e8:	6010      	str	r0, [r2, #0]
 80058ea:	0628      	lsls	r0, r5, #24
 80058ec:	d501      	bpl.n	80058f2 <_printf_i+0xc2>
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	e002      	b.n	80058f8 <_printf_i+0xc8>
 80058f2:	0668      	lsls	r0, r5, #25
 80058f4:	d5fb      	bpl.n	80058ee <_printf_i+0xbe>
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	4854      	ldr	r0, [pc, #336]	; (8005a4c <_printf_i+0x21c>)
 80058fa:	296f      	cmp	r1, #111	; 0x6f
 80058fc:	bf14      	ite	ne
 80058fe:	220a      	movne	r2, #10
 8005900:	2208      	moveq	r2, #8
 8005902:	2100      	movs	r1, #0
 8005904:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005908:	6865      	ldr	r5, [r4, #4]
 800590a:	60a5      	str	r5, [r4, #8]
 800590c:	2d00      	cmp	r5, #0
 800590e:	f2c0 8095 	blt.w	8005a3c <_printf_i+0x20c>
 8005912:	6821      	ldr	r1, [r4, #0]
 8005914:	f021 0104 	bic.w	r1, r1, #4
 8005918:	6021      	str	r1, [r4, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d13d      	bne.n	800599a <_printf_i+0x16a>
 800591e:	2d00      	cmp	r5, #0
 8005920:	f040 808e 	bne.w	8005a40 <_printf_i+0x210>
 8005924:	4665      	mov	r5, ip
 8005926:	2a08      	cmp	r2, #8
 8005928:	d10b      	bne.n	8005942 <_printf_i+0x112>
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	07db      	lsls	r3, r3, #31
 800592e:	d508      	bpl.n	8005942 <_printf_i+0x112>
 8005930:	6923      	ldr	r3, [r4, #16]
 8005932:	6862      	ldr	r2, [r4, #4]
 8005934:	429a      	cmp	r2, r3
 8005936:	bfde      	ittt	le
 8005938:	2330      	movle	r3, #48	; 0x30
 800593a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800593e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005942:	ebac 0305 	sub.w	r3, ip, r5
 8005946:	6123      	str	r3, [r4, #16]
 8005948:	f8cd 8000 	str.w	r8, [sp]
 800594c:	463b      	mov	r3, r7
 800594e:	aa03      	add	r2, sp, #12
 8005950:	4621      	mov	r1, r4
 8005952:	4630      	mov	r0, r6
 8005954:	f7ff fef6 	bl	8005744 <_printf_common>
 8005958:	3001      	adds	r0, #1
 800595a:	d14d      	bne.n	80059f8 <_printf_i+0x1c8>
 800595c:	f04f 30ff 	mov.w	r0, #4294967295
 8005960:	b005      	add	sp, #20
 8005962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005966:	4839      	ldr	r0, [pc, #228]	; (8005a4c <_printf_i+0x21c>)
 8005968:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800596c:	6813      	ldr	r3, [r2, #0]
 800596e:	6821      	ldr	r1, [r4, #0]
 8005970:	1d1d      	adds	r5, r3, #4
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6015      	str	r5, [r2, #0]
 8005976:	060a      	lsls	r2, r1, #24
 8005978:	d50b      	bpl.n	8005992 <_printf_i+0x162>
 800597a:	07ca      	lsls	r2, r1, #31
 800597c:	bf44      	itt	mi
 800597e:	f041 0120 	orrmi.w	r1, r1, #32
 8005982:	6021      	strmi	r1, [r4, #0]
 8005984:	b91b      	cbnz	r3, 800598e <_printf_i+0x15e>
 8005986:	6822      	ldr	r2, [r4, #0]
 8005988:	f022 0220 	bic.w	r2, r2, #32
 800598c:	6022      	str	r2, [r4, #0]
 800598e:	2210      	movs	r2, #16
 8005990:	e7b7      	b.n	8005902 <_printf_i+0xd2>
 8005992:	064d      	lsls	r5, r1, #25
 8005994:	bf48      	it	mi
 8005996:	b29b      	uxthmi	r3, r3
 8005998:	e7ef      	b.n	800597a <_printf_i+0x14a>
 800599a:	4665      	mov	r5, ip
 800599c:	fbb3 f1f2 	udiv	r1, r3, r2
 80059a0:	fb02 3311 	mls	r3, r2, r1, r3
 80059a4:	5cc3      	ldrb	r3, [r0, r3]
 80059a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80059aa:	460b      	mov	r3, r1
 80059ac:	2900      	cmp	r1, #0
 80059ae:	d1f5      	bne.n	800599c <_printf_i+0x16c>
 80059b0:	e7b9      	b.n	8005926 <_printf_i+0xf6>
 80059b2:	6813      	ldr	r3, [r2, #0]
 80059b4:	6825      	ldr	r5, [r4, #0]
 80059b6:	6961      	ldr	r1, [r4, #20]
 80059b8:	1d18      	adds	r0, r3, #4
 80059ba:	6010      	str	r0, [r2, #0]
 80059bc:	0628      	lsls	r0, r5, #24
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	d501      	bpl.n	80059c6 <_printf_i+0x196>
 80059c2:	6019      	str	r1, [r3, #0]
 80059c4:	e002      	b.n	80059cc <_printf_i+0x19c>
 80059c6:	066a      	lsls	r2, r5, #25
 80059c8:	d5fb      	bpl.n	80059c2 <_printf_i+0x192>
 80059ca:	8019      	strh	r1, [r3, #0]
 80059cc:	2300      	movs	r3, #0
 80059ce:	6123      	str	r3, [r4, #16]
 80059d0:	4665      	mov	r5, ip
 80059d2:	e7b9      	b.n	8005948 <_printf_i+0x118>
 80059d4:	6813      	ldr	r3, [r2, #0]
 80059d6:	1d19      	adds	r1, r3, #4
 80059d8:	6011      	str	r1, [r2, #0]
 80059da:	681d      	ldr	r5, [r3, #0]
 80059dc:	6862      	ldr	r2, [r4, #4]
 80059de:	2100      	movs	r1, #0
 80059e0:	4628      	mov	r0, r5
 80059e2:	f7fa fbfd 	bl	80001e0 <memchr>
 80059e6:	b108      	cbz	r0, 80059ec <_printf_i+0x1bc>
 80059e8:	1b40      	subs	r0, r0, r5
 80059ea:	6060      	str	r0, [r4, #4]
 80059ec:	6863      	ldr	r3, [r4, #4]
 80059ee:	6123      	str	r3, [r4, #16]
 80059f0:	2300      	movs	r3, #0
 80059f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059f6:	e7a7      	b.n	8005948 <_printf_i+0x118>
 80059f8:	6923      	ldr	r3, [r4, #16]
 80059fa:	462a      	mov	r2, r5
 80059fc:	4639      	mov	r1, r7
 80059fe:	4630      	mov	r0, r6
 8005a00:	47c0      	blx	r8
 8005a02:	3001      	adds	r0, #1
 8005a04:	d0aa      	beq.n	800595c <_printf_i+0x12c>
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	079b      	lsls	r3, r3, #30
 8005a0a:	d413      	bmi.n	8005a34 <_printf_i+0x204>
 8005a0c:	68e0      	ldr	r0, [r4, #12]
 8005a0e:	9b03      	ldr	r3, [sp, #12]
 8005a10:	4298      	cmp	r0, r3
 8005a12:	bfb8      	it	lt
 8005a14:	4618      	movlt	r0, r3
 8005a16:	e7a3      	b.n	8005960 <_printf_i+0x130>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	464a      	mov	r2, r9
 8005a1c:	4639      	mov	r1, r7
 8005a1e:	4630      	mov	r0, r6
 8005a20:	47c0      	blx	r8
 8005a22:	3001      	adds	r0, #1
 8005a24:	d09a      	beq.n	800595c <_printf_i+0x12c>
 8005a26:	3501      	adds	r5, #1
 8005a28:	68e3      	ldr	r3, [r4, #12]
 8005a2a:	9a03      	ldr	r2, [sp, #12]
 8005a2c:	1a9b      	subs	r3, r3, r2
 8005a2e:	42ab      	cmp	r3, r5
 8005a30:	dcf2      	bgt.n	8005a18 <_printf_i+0x1e8>
 8005a32:	e7eb      	b.n	8005a0c <_printf_i+0x1dc>
 8005a34:	2500      	movs	r5, #0
 8005a36:	f104 0919 	add.w	r9, r4, #25
 8005a3a:	e7f5      	b.n	8005a28 <_printf_i+0x1f8>
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1ac      	bne.n	800599a <_printf_i+0x16a>
 8005a40:	7803      	ldrb	r3, [r0, #0]
 8005a42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a4a:	e76c      	b.n	8005926 <_printf_i+0xf6>
 8005a4c:	08005d61 	.word	0x08005d61
 8005a50:	08005d72 	.word	0x08005d72

08005a54 <memmove>:
 8005a54:	4288      	cmp	r0, r1
 8005a56:	b510      	push	{r4, lr}
 8005a58:	eb01 0302 	add.w	r3, r1, r2
 8005a5c:	d807      	bhi.n	8005a6e <memmove+0x1a>
 8005a5e:	1e42      	subs	r2, r0, #1
 8005a60:	4299      	cmp	r1, r3
 8005a62:	d00a      	beq.n	8005a7a <memmove+0x26>
 8005a64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a68:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005a6c:	e7f8      	b.n	8005a60 <memmove+0xc>
 8005a6e:	4283      	cmp	r3, r0
 8005a70:	d9f5      	bls.n	8005a5e <memmove+0xa>
 8005a72:	1881      	adds	r1, r0, r2
 8005a74:	1ad2      	subs	r2, r2, r3
 8005a76:	42d3      	cmn	r3, r2
 8005a78:	d100      	bne.n	8005a7c <memmove+0x28>
 8005a7a:	bd10      	pop	{r4, pc}
 8005a7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a80:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005a84:	e7f7      	b.n	8005a76 <memmove+0x22>
	...

08005a88 <_free_r>:
 8005a88:	b538      	push	{r3, r4, r5, lr}
 8005a8a:	4605      	mov	r5, r0
 8005a8c:	2900      	cmp	r1, #0
 8005a8e:	d045      	beq.n	8005b1c <_free_r+0x94>
 8005a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a94:	1f0c      	subs	r4, r1, #4
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	bfb8      	it	lt
 8005a9a:	18e4      	addlt	r4, r4, r3
 8005a9c:	f000 f8d2 	bl	8005c44 <__malloc_lock>
 8005aa0:	4a1f      	ldr	r2, [pc, #124]	; (8005b20 <_free_r+0x98>)
 8005aa2:	6813      	ldr	r3, [r2, #0]
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	b933      	cbnz	r3, 8005ab6 <_free_r+0x2e>
 8005aa8:	6063      	str	r3, [r4, #4]
 8005aaa:	6014      	str	r4, [r2, #0]
 8005aac:	4628      	mov	r0, r5
 8005aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ab2:	f000 b8c8 	b.w	8005c46 <__malloc_unlock>
 8005ab6:	42a3      	cmp	r3, r4
 8005ab8:	d90c      	bls.n	8005ad4 <_free_r+0x4c>
 8005aba:	6821      	ldr	r1, [r4, #0]
 8005abc:	1862      	adds	r2, r4, r1
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	bf04      	itt	eq
 8005ac2:	681a      	ldreq	r2, [r3, #0]
 8005ac4:	685b      	ldreq	r3, [r3, #4]
 8005ac6:	6063      	str	r3, [r4, #4]
 8005ac8:	bf04      	itt	eq
 8005aca:	1852      	addeq	r2, r2, r1
 8005acc:	6022      	streq	r2, [r4, #0]
 8005ace:	6004      	str	r4, [r0, #0]
 8005ad0:	e7ec      	b.n	8005aac <_free_r+0x24>
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	b10a      	cbz	r2, 8005adc <_free_r+0x54>
 8005ad8:	42a2      	cmp	r2, r4
 8005ada:	d9fa      	bls.n	8005ad2 <_free_r+0x4a>
 8005adc:	6819      	ldr	r1, [r3, #0]
 8005ade:	1858      	adds	r0, r3, r1
 8005ae0:	42a0      	cmp	r0, r4
 8005ae2:	d10b      	bne.n	8005afc <_free_r+0x74>
 8005ae4:	6820      	ldr	r0, [r4, #0]
 8005ae6:	4401      	add	r1, r0
 8005ae8:	1858      	adds	r0, r3, r1
 8005aea:	4282      	cmp	r2, r0
 8005aec:	6019      	str	r1, [r3, #0]
 8005aee:	d1dd      	bne.n	8005aac <_free_r+0x24>
 8005af0:	6810      	ldr	r0, [r2, #0]
 8005af2:	6852      	ldr	r2, [r2, #4]
 8005af4:	605a      	str	r2, [r3, #4]
 8005af6:	4401      	add	r1, r0
 8005af8:	6019      	str	r1, [r3, #0]
 8005afa:	e7d7      	b.n	8005aac <_free_r+0x24>
 8005afc:	d902      	bls.n	8005b04 <_free_r+0x7c>
 8005afe:	230c      	movs	r3, #12
 8005b00:	602b      	str	r3, [r5, #0]
 8005b02:	e7d3      	b.n	8005aac <_free_r+0x24>
 8005b04:	6820      	ldr	r0, [r4, #0]
 8005b06:	1821      	adds	r1, r4, r0
 8005b08:	428a      	cmp	r2, r1
 8005b0a:	bf04      	itt	eq
 8005b0c:	6811      	ldreq	r1, [r2, #0]
 8005b0e:	6852      	ldreq	r2, [r2, #4]
 8005b10:	6062      	str	r2, [r4, #4]
 8005b12:	bf04      	itt	eq
 8005b14:	1809      	addeq	r1, r1, r0
 8005b16:	6021      	streq	r1, [r4, #0]
 8005b18:	605c      	str	r4, [r3, #4]
 8005b1a:	e7c7      	b.n	8005aac <_free_r+0x24>
 8005b1c:	bd38      	pop	{r3, r4, r5, pc}
 8005b1e:	bf00      	nop
 8005b20:	20004548 	.word	0x20004548

08005b24 <_malloc_r>:
 8005b24:	b570      	push	{r4, r5, r6, lr}
 8005b26:	1ccd      	adds	r5, r1, #3
 8005b28:	f025 0503 	bic.w	r5, r5, #3
 8005b2c:	3508      	adds	r5, #8
 8005b2e:	2d0c      	cmp	r5, #12
 8005b30:	bf38      	it	cc
 8005b32:	250c      	movcc	r5, #12
 8005b34:	2d00      	cmp	r5, #0
 8005b36:	4606      	mov	r6, r0
 8005b38:	db01      	blt.n	8005b3e <_malloc_r+0x1a>
 8005b3a:	42a9      	cmp	r1, r5
 8005b3c:	d903      	bls.n	8005b46 <_malloc_r+0x22>
 8005b3e:	230c      	movs	r3, #12
 8005b40:	6033      	str	r3, [r6, #0]
 8005b42:	2000      	movs	r0, #0
 8005b44:	bd70      	pop	{r4, r5, r6, pc}
 8005b46:	f000 f87d 	bl	8005c44 <__malloc_lock>
 8005b4a:	4a21      	ldr	r2, [pc, #132]	; (8005bd0 <_malloc_r+0xac>)
 8005b4c:	6814      	ldr	r4, [r2, #0]
 8005b4e:	4621      	mov	r1, r4
 8005b50:	b991      	cbnz	r1, 8005b78 <_malloc_r+0x54>
 8005b52:	4c20      	ldr	r4, [pc, #128]	; (8005bd4 <_malloc_r+0xb0>)
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	b91b      	cbnz	r3, 8005b60 <_malloc_r+0x3c>
 8005b58:	4630      	mov	r0, r6
 8005b5a:	f000 f863 	bl	8005c24 <_sbrk_r>
 8005b5e:	6020      	str	r0, [r4, #0]
 8005b60:	4629      	mov	r1, r5
 8005b62:	4630      	mov	r0, r6
 8005b64:	f000 f85e 	bl	8005c24 <_sbrk_r>
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	d124      	bne.n	8005bb6 <_malloc_r+0x92>
 8005b6c:	230c      	movs	r3, #12
 8005b6e:	6033      	str	r3, [r6, #0]
 8005b70:	4630      	mov	r0, r6
 8005b72:	f000 f868 	bl	8005c46 <__malloc_unlock>
 8005b76:	e7e4      	b.n	8005b42 <_malloc_r+0x1e>
 8005b78:	680b      	ldr	r3, [r1, #0]
 8005b7a:	1b5b      	subs	r3, r3, r5
 8005b7c:	d418      	bmi.n	8005bb0 <_malloc_r+0x8c>
 8005b7e:	2b0b      	cmp	r3, #11
 8005b80:	d90f      	bls.n	8005ba2 <_malloc_r+0x7e>
 8005b82:	600b      	str	r3, [r1, #0]
 8005b84:	50cd      	str	r5, [r1, r3]
 8005b86:	18cc      	adds	r4, r1, r3
 8005b88:	4630      	mov	r0, r6
 8005b8a:	f000 f85c 	bl	8005c46 <__malloc_unlock>
 8005b8e:	f104 000b 	add.w	r0, r4, #11
 8005b92:	1d23      	adds	r3, r4, #4
 8005b94:	f020 0007 	bic.w	r0, r0, #7
 8005b98:	1ac3      	subs	r3, r0, r3
 8005b9a:	d0d3      	beq.n	8005b44 <_malloc_r+0x20>
 8005b9c:	425a      	negs	r2, r3
 8005b9e:	50e2      	str	r2, [r4, r3]
 8005ba0:	e7d0      	b.n	8005b44 <_malloc_r+0x20>
 8005ba2:	428c      	cmp	r4, r1
 8005ba4:	684b      	ldr	r3, [r1, #4]
 8005ba6:	bf16      	itet	ne
 8005ba8:	6063      	strne	r3, [r4, #4]
 8005baa:	6013      	streq	r3, [r2, #0]
 8005bac:	460c      	movne	r4, r1
 8005bae:	e7eb      	b.n	8005b88 <_malloc_r+0x64>
 8005bb0:	460c      	mov	r4, r1
 8005bb2:	6849      	ldr	r1, [r1, #4]
 8005bb4:	e7cc      	b.n	8005b50 <_malloc_r+0x2c>
 8005bb6:	1cc4      	adds	r4, r0, #3
 8005bb8:	f024 0403 	bic.w	r4, r4, #3
 8005bbc:	42a0      	cmp	r0, r4
 8005bbe:	d005      	beq.n	8005bcc <_malloc_r+0xa8>
 8005bc0:	1a21      	subs	r1, r4, r0
 8005bc2:	4630      	mov	r0, r6
 8005bc4:	f000 f82e 	bl	8005c24 <_sbrk_r>
 8005bc8:	3001      	adds	r0, #1
 8005bca:	d0cf      	beq.n	8005b6c <_malloc_r+0x48>
 8005bcc:	6025      	str	r5, [r4, #0]
 8005bce:	e7db      	b.n	8005b88 <_malloc_r+0x64>
 8005bd0:	20004548 	.word	0x20004548
 8005bd4:	2000454c 	.word	0x2000454c

08005bd8 <_realloc_r>:
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bda:	4607      	mov	r7, r0
 8005bdc:	4614      	mov	r4, r2
 8005bde:	460e      	mov	r6, r1
 8005be0:	b921      	cbnz	r1, 8005bec <_realloc_r+0x14>
 8005be2:	4611      	mov	r1, r2
 8005be4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005be8:	f7ff bf9c 	b.w	8005b24 <_malloc_r>
 8005bec:	b922      	cbnz	r2, 8005bf8 <_realloc_r+0x20>
 8005bee:	f7ff ff4b 	bl	8005a88 <_free_r>
 8005bf2:	4625      	mov	r5, r4
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bf8:	f000 f826 	bl	8005c48 <_malloc_usable_size_r>
 8005bfc:	42a0      	cmp	r0, r4
 8005bfe:	d20f      	bcs.n	8005c20 <_realloc_r+0x48>
 8005c00:	4621      	mov	r1, r4
 8005c02:	4638      	mov	r0, r7
 8005c04:	f7ff ff8e 	bl	8005b24 <_malloc_r>
 8005c08:	4605      	mov	r5, r0
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	d0f2      	beq.n	8005bf4 <_realloc_r+0x1c>
 8005c0e:	4631      	mov	r1, r6
 8005c10:	4622      	mov	r2, r4
 8005c12:	f7ff fbfd 	bl	8005410 <memcpy>
 8005c16:	4631      	mov	r1, r6
 8005c18:	4638      	mov	r0, r7
 8005c1a:	f7ff ff35 	bl	8005a88 <_free_r>
 8005c1e:	e7e9      	b.n	8005bf4 <_realloc_r+0x1c>
 8005c20:	4635      	mov	r5, r6
 8005c22:	e7e7      	b.n	8005bf4 <_realloc_r+0x1c>

08005c24 <_sbrk_r>:
 8005c24:	b538      	push	{r3, r4, r5, lr}
 8005c26:	4c06      	ldr	r4, [pc, #24]	; (8005c40 <_sbrk_r+0x1c>)
 8005c28:	2300      	movs	r3, #0
 8005c2a:	4605      	mov	r5, r0
 8005c2c:	4608      	mov	r0, r1
 8005c2e:	6023      	str	r3, [r4, #0]
 8005c30:	f7fa ffe0 	bl	8000bf4 <_sbrk>
 8005c34:	1c43      	adds	r3, r0, #1
 8005c36:	d102      	bne.n	8005c3e <_sbrk_r+0x1a>
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	b103      	cbz	r3, 8005c3e <_sbrk_r+0x1a>
 8005c3c:	602b      	str	r3, [r5, #0]
 8005c3e:	bd38      	pop	{r3, r4, r5, pc}
 8005c40:	20004620 	.word	0x20004620

08005c44 <__malloc_lock>:
 8005c44:	4770      	bx	lr

08005c46 <__malloc_unlock>:
 8005c46:	4770      	bx	lr

08005c48 <_malloc_usable_size_r>:
 8005c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c4c:	1f18      	subs	r0, r3, #4
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	bfbc      	itt	lt
 8005c52:	580b      	ldrlt	r3, [r1, r0]
 8005c54:	18c0      	addlt	r0, r0, r3
 8005c56:	4770      	bx	lr

08005c58 <_init>:
 8005c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c5a:	bf00      	nop
 8005c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c5e:	bc08      	pop	{r3}
 8005c60:	469e      	mov	lr, r3
 8005c62:	4770      	bx	lr

08005c64 <_fini>:
 8005c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c66:	bf00      	nop
 8005c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6a:	bc08      	pop	{r3}
 8005c6c:	469e      	mov	lr, r3
 8005c6e:	4770      	bx	lr
